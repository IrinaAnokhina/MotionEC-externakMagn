; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\serial_protocol.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\serial_protocol.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\Src\serial_protocol.c]
                          THUMB

                          AREA ||i.ByteStuffCopy||, CODE, READONLY, ALIGN=1

                  ByteStuffCopy PROC
;;;91      */
;;;92     int ByteStuffCopy(uint8_t *Dest, TMsg *Source)
000000  b5f0              PUSH     {r4-r7,lr}
;;;93     {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;94       uint32_t i;
;;;95       int32_t count = 0;
000006  2400              MOVS     r4,#0
;;;96     
;;;97       for (i = 0; i < Source->Len; i++)
000008  2700              MOVS     r7,#0
00000a  e006              B        |L1.26|
                  |L1.12|
;;;98       {
;;;99         count += ByteStuffCopyByte(&Dest[count], Source->Data[i]);
00000c  1d32              ADDS     r2,r6,#4
00000e  5dd1              LDRB     r1,[r2,r7]
000010  1928              ADDS     r0,r5,r4
000012  f7fffffe          BL       ByteStuffCopyByte
000016  4404              ADD      r4,r4,r0
000018  1c7f              ADDS     r7,r7,#1              ;97
                  |L1.26|
00001a  6830              LDR      r0,[r6,#0]            ;97
00001c  42b8              CMP      r0,r7                 ;97
00001e  d8f5              BHI      |L1.12|
;;;100      }
;;;101    
;;;102      Dest[count] = TMsg_EOF;
000020  20f0              MOVS     r0,#0xf0
000022  5528              STRB     r0,[r5,r4]
;;;103      count++;
000024  1c64              ADDS     r4,r4,#1
;;;104      return count;
000026  4620              MOV      r0,r4
;;;105    }
000028  bdf0              POP      {r4-r7,pc}
;;;106    
                          ENDP


                          AREA ||i.ByteStuffCopyByte||, CODE, READONLY, ALIGN=1

                  ByteStuffCopyByte PROC
;;;60      */
;;;61     int ByteStuffCopyByte(uint8_t *Dest, uint8_t Source)
000000  4602              MOV      r2,r0
;;;62     {
;;;63       int ret = 2;
000002  2002              MOVS     r0,#2
;;;64     
;;;65       switch (Source)
000004  29f0              CMP      r1,#0xf0
000006  d002              BEQ      |L2.14|
000008  29f1              CMP      r1,#0xf1
00000a  d109              BNE      |L2.32|
00000c  e004              B        |L2.24|
                  |L2.14|
;;;66       {
;;;67         case TMsg_EOF:
;;;68           Dest[0] = TMsg_BS;
00000e  23f1              MOVS     r3,#0xf1
000010  7013              STRB     r3,[r2,#0]
;;;69           Dest[1] = TMsg_BS_EOF;
000012  23f2              MOVS     r3,#0xf2
000014  7053              STRB     r3,[r2,#1]
;;;70           break;
000016  e006              B        |L2.38|
                  |L2.24|
;;;71     
;;;72         case TMsg_BS:
;;;73           Dest[0] = TMsg_BS;
000018  23f1              MOVS     r3,#0xf1
00001a  7013              STRB     r3,[r2,#0]
;;;74           Dest[1] = TMsg_BS;
00001c  7053              STRB     r3,[r2,#1]
;;;75           break;
00001e  e002              B        |L2.38|
                  |L2.32|
;;;76     
;;;77         default:
;;;78           Dest[0] = Source;
000020  7011              STRB     r1,[r2,#0]
;;;79           ret = 1;
000022  2001              MOVS     r0,#1
;;;80           break;
000024  bf00              NOP      
                  |L2.38|
000026  bf00              NOP                            ;70
;;;81       }
;;;82     
;;;83       return ret;
;;;84     }
000028  4770              BX       lr
;;;85     
                          ENDP


                          AREA ||i.CHK_CheckAndRemove||, CODE, READONLY, ALIGN=1

                  CHK_CheckAndRemove PROC
;;;253     */
;;;254    int CHK_CheckAndRemove(TMsg *Msg)
000000  4601              MOV      r1,r0
;;;255    {
;;;256      uint8_t chk = 0;
000002  2300              MOVS     r3,#0
;;;257      uint32_t i;
;;;258    
;;;259      for (i = 0; i < Msg->Len; i++)
000004  2200              MOVS     r2,#0
000006  e004              B        |L3.18|
                  |L3.8|
;;;260      {
;;;261        chk += Msg->Data[i];
000008  1d08              ADDS     r0,r1,#4
00000a  5c80              LDRB     r0,[r0,r2]
00000c  4418              ADD      r0,r0,r3
00000e  b2c3              UXTB     r3,r0
000010  1c52              ADDS     r2,r2,#1              ;259
                  |L3.18|
000012  6808              LDR      r0,[r1,#0]            ;259
000014  4290              CMP      r0,r2                 ;259
000016  d8f7              BHI      |L3.8|
;;;262      }
;;;263    
;;;264      Msg->Len--;
000018  6808              LDR      r0,[r1,#0]
00001a  1e40              SUBS     r0,r0,#1
00001c  6008              STR      r0,[r1,#0]
;;;265      return (int32_t)(chk == 0U);
00001e  b90b              CBNZ     r3,|L3.36|
000020  2001              MOVS     r0,#1
                  |L3.34|
;;;266    }
000022  4770              BX       lr
                  |L3.36|
000024  2000              MOVS     r0,#0                 ;265
000026  e7fc              B        |L3.34|
;;;267    
                          ENDP


                          AREA ||i.CHK_ComputeAndAdd||, CODE, READONLY, ALIGN=1

                  CHK_ComputeAndAdd PROC
;;;234     */
;;;235    void CHK_ComputeAndAdd(TMsg *Msg)
000000  2200              MOVS     r2,#0
;;;236    {
;;;237      uint8_t chk = 0;
;;;238      uint32_t i;
;;;239    
;;;240      for (i = 0; i < Msg->Len; i++)
000002  2100              MOVS     r1,#0
000004  e004              B        |L4.16|
                  |L4.6|
;;;241      {
;;;242        chk -= Msg->Data[i];
000006  1d03              ADDS     r3,r0,#4
000008  5c5b              LDRB     r3,[r3,r1]
00000a  1ad3              SUBS     r3,r2,r3
00000c  b2da              UXTB     r2,r3
00000e  1c49              ADDS     r1,r1,#1              ;240
                  |L4.16|
000010  6803              LDR      r3,[r0,#0]            ;240
000012  428b              CMP      r3,r1                 ;240
000014  d8f7              BHI      |L4.6|
;;;243      }
;;;244    
;;;245      Msg->Data[i] = chk;
000016  1d03              ADDS     r3,r0,#4
000018  545a              STRB     r2,[r3,r1]
;;;246      Msg->Len++;
00001a  6803              LDR      r3,[r0,#0]
00001c  1c5b              ADDS     r3,r3,#1
00001e  6003              STR      r3,[r0,#0]
;;;247    }
000020  4770              BX       lr
;;;248    
                          ENDP


                          AREA ||i.Deserialize||, CODE, READONLY, ALIGN=1

                  Deserialize PROC
;;;291     */
;;;292    uint32_t Deserialize(uint8_t *Source, uint32_t Len)
000000  4602              MOV      r2,r0
;;;293    {
;;;294      uint32_t app;
;;;295    
;;;296      app = Source[--Len];
000002  1e4b              SUBS     r3,r1,#1
000004  4619              MOV      r1,r3
000006  5cd0              LDRB     r0,[r2,r3]
;;;297      while (Len > 0U)
000008  e004              B        |L5.20|
                  |L5.10|
;;;298      {
;;;299        app <<= 8;
00000a  0200              LSLS     r0,r0,#8
;;;300        app += Source[--Len];
00000c  1e4b              SUBS     r3,r1,#1
00000e  4619              MOV      r1,r3
000010  5cd3              LDRB     r3,[r2,r3]
000012  4418              ADD      r0,r0,r3
                  |L5.20|
000014  2900              CMP      r1,#0                 ;297
000016  d1f8              BNE      |L5.10|
;;;301      }
;;;302    
;;;303      return app;
;;;304    }
000018  4770              BX       lr
;;;305    
                          ENDP


                          AREA ||i.Deserialize_s32||, CODE, READONLY, ALIGN=1

                  Deserialize_s32 PROC
;;;332     */
;;;333    int32_t Deserialize_s32(uint8_t *Source, uint32_t Len)
000000  4602              MOV      r2,r0
;;;334    {
;;;335      uint32_t app;
;;;336    
;;;337      app = (uint32_t)Source[--Len];
000002  1e4b              SUBS     r3,r1,#1
000004  4619              MOV      r1,r3
000006  5cd0              LDRB     r0,[r2,r3]
;;;338      while (Len > 0U)
000008  e004              B        |L6.20|
                  |L6.10|
;;;339      {
;;;340        app <<= 8;
00000a  0200              LSLS     r0,r0,#8
;;;341        app += (uint32_t)Source[--Len];
00000c  1e4b              SUBS     r3,r1,#1
00000e  4619              MOV      r1,r3
000010  5cd3              LDRB     r3,[r2,r3]
000012  4418              ADD      r0,r0,r3
                  |L6.20|
000014  2900              CMP      r1,#0                 ;338
000016  d1f8              BNE      |L6.10|
;;;342      }
;;;343    
;;;344      return (int32_t)app;
;;;345    }
000018  4770              BX       lr
;;;346    
                          ENDP


                          AREA ||i.FloatToArray||, CODE, READONLY, ALIGN=1

                  FloatToArray PROC
;;;352     */
;;;353    void FloatToArray(uint8_t *Dest, float Data)
000000  b501              PUSH     {r0,lr}
;;;354    {
000002  ed2d0b02          VPUSH    {d0}
;;;355      (void)memcpy(Dest, (void *)&Data, 4);
000006  9900              LDR      r1,[sp,#0]
000008  6001              STR      r1,[r0,#0]
;;;356    }
00000a  bd0e              POP      {r1-r3,pc}
;;;357    
                          ENDP


                          AREA ||i.ReverseByteStuffCopy||, CODE, READONLY, ALIGN=1

                  ReverseByteStuffCopy PROC
;;;175     */
;;;176    int ReverseByteStuffCopy(TMsg *Dest, uint8_t *Source)
000000  b530              PUSH     {r4,r5,lr}
;;;177    {
000002  4603              MOV      r3,r0
;;;178      uint32_t count = 0;
000004  2200              MOVS     r2,#0
;;;179      int32_t state = 0;
000006  2400              MOVS     r4,#0
;;;180    
;;;181      while ((*Source) != (uint8_t)TMsg_EOF)
000008  e01e              B        |L8.72|
                  |L8.10|
;;;182      {
;;;183        if (state == 0)
00000a  b94c              CBNZ     r4,|L8.32|
;;;184        {
;;;185          if ((*Source) == (uint8_t)TMsg_BS)
00000c  7808              LDRB     r0,[r1,#0]
00000e  28f1              CMP      r0,#0xf1
000010  d101              BNE      |L8.22|
;;;186          {
;;;187            state = 1;
000012  2401              MOVS     r4,#1
000014  e017              B        |L8.70|
                  |L8.22|
;;;188          }
;;;189          else
;;;190          {
;;;191            Dest->Data[count] = *Source;
000016  780d              LDRB     r5,[r1,#0]
000018  1d18              ADDS     r0,r3,#4
00001a  5485              STRB     r5,[r0,r2]
;;;192            count++;
00001c  1c52              ADDS     r2,r2,#1
00001e  e012              B        |L8.70|
                  |L8.32|
;;;193          }
;;;194        }
;;;195        else
;;;196        {
;;;197          if ((*Source) == (uint8_t)TMsg_BS)
000020  7808              LDRB     r0,[r1,#0]
000022  28f1              CMP      r0,#0xf1
000024  d104              BNE      |L8.48|
;;;198          {
;;;199            Dest->Data[count] = TMsg_BS;
000026  25f1              MOVS     r5,#0xf1
000028  1d18              ADDS     r0,r3,#4
00002a  5485              STRB     r5,[r0,r2]
;;;200            count++;
00002c  1c52              ADDS     r2,r2,#1
00002e  e009              B        |L8.68|
                  |L8.48|
;;;201          }
;;;202          else
;;;203          {
;;;204            if ((*Source) == (uint8_t)TMsg_BS_EOF)
000030  7808              LDRB     r0,[r1,#0]
000032  28f2              CMP      r0,#0xf2
000034  d104              BNE      |L8.64|
;;;205            {
;;;206              Dest->Data[count] = TMsg_EOF;
000036  25f0              MOVS     r5,#0xf0
000038  1d18              ADDS     r0,r3,#4
00003a  5485              STRB     r5,[r0,r2]
;;;207              count++;
00003c  1c52              ADDS     r2,r2,#1
00003e  e001              B        |L8.68|
                  |L8.64|
;;;208            }
;;;209            else
;;;210            {
;;;211              return 0; // invalid sequence
000040  2000              MOVS     r0,#0
                  |L8.66|
;;;212            }
;;;213          }
;;;214    
;;;215          state = 0;
;;;216        }
;;;217    
;;;218        Source++;
;;;219      }
;;;220    
;;;221      if (state != 0)
;;;222      {
;;;223        return 0;
;;;224      }
;;;225    
;;;226      Dest->Len = count;
;;;227      return 1;
;;;228    }
000042  bd30              POP      {r4,r5,pc}
                  |L8.68|
000044  2400              MOVS     r4,#0                 ;215
                  |L8.70|
000046  1c49              ADDS     r1,r1,#1              ;218
                  |L8.72|
000048  7808              LDRB     r0,[r1,#0]            ;181
00004a  28f0              CMP      r0,#0xf0              ;181
00004c  d1dd              BNE      |L8.10|
00004e  b10c              CBZ      r4,|L8.84|
000050  2000              MOVS     r0,#0                 ;223
000052  e7f6              B        |L8.66|
                  |L8.84|
000054  601a              STR      r2,[r3,#0]            ;226
000056  2001              MOVS     r0,#1                 ;227
000058  e7f3              B        |L8.66|
;;;229    
                          ENDP


                          AREA ||i.ReverseByteStuffCopyByte||, CODE, READONLY, ALIGN=1

                  ReverseByteStuffCopyByte PROC
;;;112     */
;;;113    int ReverseByteStuffCopyByte(uint8_t *Source, uint8_t *Dest)
000000  4602              MOV      r2,r0
;;;114    {
;;;115      if (Source[0] == (uint8_t)TMsg_BS)
000002  7810              LDRB     r0,[r2,#0]
000004  28f1              CMP      r0,#0xf1
000006  d10e              BNE      |L9.38|
;;;116      {
;;;117        if (Source[1] == (uint8_t)TMsg_BS)
000008  7850              LDRB     r0,[r2,#1]
00000a  28f1              CMP      r0,#0xf1
00000c  d102              BNE      |L9.20|
;;;118        {
;;;119          *Dest = TMsg_BS;
00000e  7008              STRB     r0,[r1,#0]
;;;120          return 2;
000010  2002              MOVS     r0,#2
                  |L9.18|
;;;121        }
;;;122    
;;;123        if (Source[1] == (uint8_t)TMsg_BS_EOF)
;;;124        {
;;;125          *Dest = TMsg_EOF;
;;;126          return 2;
;;;127        }
;;;128    
;;;129        return 0; // invalide sequence
;;;130      }
;;;131      else
;;;132      {
;;;133        *Dest = Source[0];
;;;134        return 1;
;;;135      }
;;;136    }
000012  4770              BX       lr
                  |L9.20|
000014  7850              LDRB     r0,[r2,#1]            ;123
000016  28f2              CMP      r0,#0xf2              ;123
000018  d103              BNE      |L9.34|
00001a  20f0              MOVS     r0,#0xf0              ;125
00001c  7008              STRB     r0,[r1,#0]            ;125
00001e  2002              MOVS     r0,#2                 ;126
000020  e7f7              B        |L9.18|
                  |L9.34|
000022  2000              MOVS     r0,#0                 ;129
000024  e7f5              B        |L9.18|
                  |L9.38|
000026  7810              LDRB     r0,[r2,#0]            ;133
000028  7008              STRB     r0,[r1,#0]            ;133
00002a  2001              MOVS     r0,#1                 ;134
00002c  e7f1              B        |L9.18|
;;;137    
                          ENDP


                          AREA ||i.ReverseByteStuffCopyByte2||, CODE, READONLY, ALIGN=1

                  ReverseByteStuffCopyByte2 PROC
;;;144     */
;;;145    int ReverseByteStuffCopyByte2(uint8_t Source0, uint8_t Source1, uint8_t *Dest)
000000  4603              MOV      r3,r0
;;;146    {
;;;147      if (Source0 == (uint8_t)TMsg_BS)
000002  2bf1              CMP      r3,#0xf1
000004  d10c              BNE      |L10.32|
;;;148      {
;;;149        if (Source1 == (uint8_t)TMsg_BS)
000006  29f1              CMP      r1,#0xf1
000008  d102              BNE      |L10.16|
;;;150        {
;;;151          *Dest = TMsg_BS;
00000a  7010              STRB     r0,[r2,#0]
;;;152          return 2;
00000c  2002              MOVS     r0,#2
                  |L10.14|
;;;153        }
;;;154    
;;;155        if (Source1 == (uint8_t)TMsg_BS_EOF)
;;;156        {
;;;157          *Dest = TMsg_EOF;
;;;158          return 2;
;;;159        }
;;;160    
;;;161        return 0; // invalid sequence
;;;162      }
;;;163      else
;;;164      {
;;;165        *Dest = Source0;
;;;166        return 1;
;;;167      }
;;;168    }
00000e  4770              BX       lr
                  |L10.16|
000010  29f2              CMP      r1,#0xf2              ;155
000012  d103              BNE      |L10.28|
000014  20f0              MOVS     r0,#0xf0              ;157
000016  7010              STRB     r0,[r2,#0]            ;157
000018  2002              MOVS     r0,#2                 ;158
00001a  e7f8              B        |L10.14|
                  |L10.28|
00001c  2000              MOVS     r0,#0                 ;161
00001e  e7f6              B        |L10.14|
                  |L10.32|
000020  7013              STRB     r3,[r2,#0]            ;165
000022  2001              MOVS     r0,#1                 ;166
000024  e7f3              B        |L10.14|
;;;169    
                          ENDP


                          AREA ||i.Serialize||, CODE, READONLY, ALIGN=1

                  Serialize PROC
;;;274     */
;;;275    void Serialize(uint8_t *Dest, uint32_t Source, uint32_t Len)
000000  b510              PUSH     {r4,lr}
;;;276    {
000002  4603              MOV      r3,r0
;;;277      uint32_t i;
;;;278    
;;;279      for (i = 0; i < Len; i++)
000004  2000              MOVS     r0,#0
000006  e002              B        |L11.14|
                  |L11.8|
;;;280      {
;;;281        Dest[i] = (uint8_t)Source & 0xFFU;
000008  5419              STRB     r1,[r3,r0]
;;;282        Source >>= 8;
00000a  0a09              LSRS     r1,r1,#8
00000c  1c40              ADDS     r0,r0,#1              ;279
                  |L11.14|
00000e  4290              CMP      r0,r2                 ;279
000010  d3fa              BCC      |L11.8|
;;;283      }
;;;284    }
000012  bd10              POP      {r4,pc}
;;;285    
                          ENDP


                          AREA ||i.Serialize_s32||, CODE, READONLY, ALIGN=1

                  Serialize_s32 PROC
;;;312     */
;;;313    void Serialize_s32(uint8_t *Dest, int32_t Source, uint32_t Len)
000000  b530              PUSH     {r4,r5,lr}
;;;314    {
000002  4603              MOV      r3,r0
000004  4614              MOV      r4,r2
;;;315      uint32_t i;
;;;316      uint32_t source_uint32;
;;;317    
;;;318      for (i = 0; i < Len; i++)
000006  2000              MOVS     r0,#0
000008  e004              B        |L12.20|
                  |L12.10|
;;;319      {
;;;320        source_uint32 = (uint32_t)Source;
00000a  460a              MOV      r2,r1
;;;321        Dest[i] = (uint8_t)(source_uint32 & 0xFFU);
00000c  541a              STRB     r2,[r3,r0]
;;;322        source_uint32 >>= 8;
00000e  0a12              LSRS     r2,r2,#8
;;;323        Source = (int32_t)source_uint32;
000010  4611              MOV      r1,r2
000012  1c40              ADDS     r0,r0,#1              ;318
                  |L12.20|
000014  42a0              CMP      r0,r4                 ;318
000016  d3f8              BCC      |L12.10|
;;;324      }
;;;325    }
000018  bd30              POP      {r4,r5,pc}
;;;326    
                          ENDP

