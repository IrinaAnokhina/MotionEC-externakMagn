; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\com.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\com.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\Src\com.c]
                          THUMB

                          AREA ||i.UART_ReceivedMSG||, CODE, READONLY, ALIGN=2

                  UART_ReceivedMSG PROC
;;;71      */
;;;72     int UART_ReceivedMSG(TMsg *Msg)
000000  e92d4ff0          PUSH     {r4-r11,lr}
;;;73     {
000004  b085              SUB      sp,sp,#0x14
000006  4681              MOV      r9,r0
;;;74       uint16_t i, j, k, j2;
;;;75       uint16_t dma_counter, length;
;;;76       uint8_t data;
;;;77       uint16_t source = 0;
000008  f04f0b00          MOV      r11,#0
;;;78       uint8_t inc;
;;;79     
;;;80       if (Get_DMA_Flag_Status(&HdmaRx) == (uint32_t)RESET)
00000c  483c              LDR      r0,|L1.256|
00000e  f7fffffe          BL       Get_DMA_Flag_Status
000012  2800              CMP      r0,#0
000014  d172              BNE      |L1.252|
;;;81       {
;;;82         dma_counter = (uint16_t)UART_RxBufferSize - (uint16_t)Get_DMA_Counter(&HdmaRx);
000016  483a              LDR      r0,|L1.256|
000018  f7fffffe          BL       Get_DMA_Counter
00001c  f5c07000          RSB      r0,r0,#0x200
000020  b285              UXTH     r5,r0
;;;83     
;;;84         if (dma_counter >= UartEngine.StartOfMsg)
000022  4838              LDR      r0,|L1.260|
000024  8880              LDRH     r0,[r0,#4]  ; UartEngine
000026  42a8              CMP      r0,r5
000028  dc04              BGT      |L1.52|
;;;85         {
;;;86           length = dma_counter - UartEngine.StartOfMsg;
00002a  4836              LDR      r0,|L1.260|
00002c  8880              LDRH     r0,[r0,#4]  ; UartEngine
00002e  1a28              SUBS     r0,r5,r0
000030  b287              UXTH     r7,r0
000032  e005              B        |L1.64|
                  |L1.52|
;;;87         }
;;;88         else
;;;89         {
;;;90           length = (uint16_t)UART_RxBufferSize + dma_counter - UartEngine.StartOfMsg;
000034  f5057000          ADD      r0,r5,#0x200
000038  4932              LDR      r1,|L1.260|
00003a  8889              LDRH     r1,[r1,#4]  ; UartEngine
00003c  1a40              SUBS     r0,r0,r1
00003e  b287              UXTH     r7,r0
                  |L1.64|
;;;91         }
;;;92     
;;;93         j = UartEngine.StartOfMsg;
000040  4830              LDR      r0,|L1.260|
000042  8884              LDRH     r4,[r0,#4]  ; UartEngine
;;;94     
;;;95         for (k = 0; k < length; k++)
000044  2600              MOVS     r6,#0
000046  e052              B        |L1.238|
                  |L1.72|
;;;96         {
;;;97           data = UartRxBuffer[j];
000048  482f              LDR      r0,|L1.264|
00004a  5d00              LDRB     r0,[r0,r4]
00004c  9003              STR      r0,[sp,#0xc]
;;;98           j++;
00004e  1c60              ADDS     r0,r4,#1
000050  b284              UXTH     r4,r0
;;;99           if (j >= (uint16_t)UART_RxBufferSize)
000052  f5b47f00          CMP      r4,#0x200
000056  db00              BLT      |L1.90|
;;;100          {
;;;101            j = 0;
000058  2400              MOVS     r4,#0
                  |L1.90|
;;;102          }
;;;103    
;;;104          if (data == (uint8_t)TMsg_EOF)
00005a  9803              LDR      r0,[sp,#0xc]
00005c  28f0              CMP      r0,#0xf0
00005e  d144              BNE      |L1.234|
;;;105          {
;;;106            j = UartEngine.StartOfMsg;
000060  4828              LDR      r0,|L1.260|
000062  8884              LDRH     r4,[r0,#4]  ; UartEngine
;;;107            for (i = 0; i < k; i += inc)
000064  2000              MOVS     r0,#0
000066  9004              STR      r0,[sp,#0x10]
000068  e02f              B        |L1.202|
                  |L1.106|
;;;108            {
;;;109              uint8_t  Source0;
;;;110              uint8_t  Source1;
;;;111              uint8_t *Dest;
;;;112    
;;;113              j2 = (j + 1U) % (uint16_t)UART_RxBufferSize;
00006a  1c60              ADDS     r0,r4,#1
00006c  f3c00a08          UBFX     r10,r0,#0,#9
;;;114    
;;;115              Source0 = UartRxBuffer[j];
000070  4825              LDR      r0,|L1.264|
000072  5d00              LDRB     r0,[r0,r4]
000074  9002              STR      r0,[sp,#8]
;;;116              Source1 = UartRxBuffer[j2];
000076  4824              LDR      r0,|L1.264|
000078  f810000a          LDRB     r0,[r0,r10]
00007c  9001              STR      r0,[sp,#4]
;;;117              Dest    = &Msg->Data[source];
00007e  f1090004          ADD      r0,r9,#4
000082  4458              ADD      r0,r0,r11
000084  9000              STR      r0,[sp,#0]
;;;118    
;;;119              inc = (uint8_t)ReverseByteStuffCopyByte2(Source0, Source1, Dest);
000086  e9dd2100          LDRD     r2,r1,[sp,#0]
00008a  9802              LDR      r0,[sp,#8]
00008c  f7fffffe          BL       ReverseByteStuffCopyByte2
000090  f00008ff          AND      r8,r0,#0xff
;;;120              if (inc == 0U)
000094  f1b80f00          CMP      r8,#0
000098  d106              BNE      |L1.168|
;;;121              {
;;;122                UartEngine.StartOfMsg = j2;
00009a  481a              LDR      r0,|L1.260|
00009c  f8a0a004          STRH     r10,[r0,#4]
;;;123                return 0;
0000a0  2000              MOVS     r0,#0
                  |L1.162|
;;;124              }
;;;125    
;;;126              j = (j + inc) % (uint16_t)UART_RxBufferSize;
;;;127              source++;
;;;128            }
;;;129    
;;;130            Msg->Len = source;
;;;131            j = (j + 1U) % (uint16_t)UART_RxBufferSize; /* skip TMsg_EOF */
;;;132            UartEngine.StartOfMsg = j;
;;;133    
;;;134            if (CHK_CheckAndRemove(Msg) != 0) /* check message integrity */
;;;135            {
;;;136              return 1;
;;;137            }
;;;138          }
;;;139        }
;;;140    
;;;141        if (length > (uint16_t)Uart_Msg_Max_Size)
;;;142        {
;;;143          UartEngine.StartOfMsg = dma_counter;
;;;144        }
;;;145      }
;;;146    
;;;147      return 0;
;;;148    }
0000a2  b005              ADD      sp,sp,#0x14
0000a4  e8bd8ff0          POP      {r4-r11,pc}
                  |L1.168|
0000a8  eb040008          ADD      r0,r4,r8              ;126
0000ac  17c1              ASRS     r1,r0,#31             ;126
0000ae  eb0051d1          ADD      r1,r0,r1,LSR #23      ;126
0000b2  1249              ASRS     r1,r1,#9              ;126
0000b4  eba02141          SUB      r1,r0,r1,LSL #9       ;126
0000b8  b28c              UXTH     r4,r1                 ;126
0000ba  f10b0001          ADD      r0,r11,#1             ;127
0000be  fa1ffb80          UXTH     r11,r0                ;127
0000c2  9804              LDR      r0,[sp,#0x10]         ;107
0000c4  4440              ADD      r0,r0,r8              ;107
0000c6  b280              UXTH     r0,r0                 ;107
0000c8  9004              STR      r0,[sp,#0x10]         ;107
                  |L1.202|
0000ca  9804              LDR      r0,[sp,#0x10]         ;107
0000cc  42b0              CMP      r0,r6                 ;107
0000ce  dbcc              BLT      |L1.106|
0000d0  f8c9b000          STR      r11,[r9,#0]           ;130
0000d4  1c60              ADDS     r0,r4,#1              ;131
0000d6  f3c00408          UBFX     r4,r0,#0,#9           ;131
0000da  480a              LDR      r0,|L1.260|
0000dc  8084              STRH     r4,[r0,#4]            ;132
0000de  4648              MOV      r0,r9                 ;134
0000e0  f7fffffe          BL       CHK_CheckAndRemove
0000e4  b108              CBZ      r0,|L1.234|
0000e6  2001              MOVS     r0,#1                 ;136
0000e8  e7db              B        |L1.162|
                  |L1.234|
0000ea  1c70              ADDS     r0,r6,#1              ;95
0000ec  b286              UXTH     r6,r0                 ;95
                  |L1.238|
0000ee  42be              CMP      r6,r7                 ;95
0000f0  dbaa              BLT      |L1.72|
0000f2  f5b77f80          CMP      r7,#0x100             ;141
0000f6  dd01              BLE      |L1.252|
0000f8  4802              LDR      r0,|L1.260|
0000fa  8085              STRH     r5,[r0,#4]            ;143
                  |L1.252|
0000fc  2000              MOVS     r0,#0                 ;147
0000fe  e7d0              B        |L1.162|
;;;149    
                          ENDP

                  |L1.256|
                          DCD      HdmaRx
                  |L1.260|
                          DCD      UartEngine
                  |L1.264|
                          DCD      UartRxBuffer

                          AREA ||i.UART_SendMsg||, CODE, READONLY, ALIGN=2

                  UART_SendMsg PROC
;;;154     */
;;;155    void UART_SendMsg(TMsg *Msg)
000000  b570              PUSH     {r4-r6,lr}
;;;156    {
000002  4604              MOV      r4,r0
;;;157      uint16_t count_out;
;;;158    
;;;159      CHK_ComputeAndAdd(Msg);
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       CHK_ComputeAndAdd
;;;160    
;;;161      /* MISRA C-2012 rule 11.8 violation for purpose */
;;;162      count_out = (uint16_t)ByteStuffCopy((uint8_t *)UartTxBuffer, Msg);
00000a  4621              MOV      r1,r4
00000c  4805              LDR      r0,|L2.36|
00000e  f7fffffe          BL       ByteStuffCopy
000012  b285              UXTH     r5,r0
;;;163    
;;;164      /* MISRA C-2012 rule 11.8 violation for purpose */
;;;165      (void)HAL_UART_Transmit(&UartHandle, (uint8_t *)UartTxBuffer, count_out, 5000);
000014  f2413388          MOV      r3,#0x1388
000018  462a              MOV      r2,r5
00001a  4902              LDR      r1,|L2.36|
00001c  4802              LDR      r0,|L2.40|
00001e  f7fffffe          BL       HAL_UART_Transmit
;;;166    }
000022  bd70              POP      {r4-r6,pc}
;;;167    
                          ENDP

                  |L2.36|
                          DCD      UartTxBuffer
                  |L2.40|
                          DCD      UartHandle

                          AREA ||i.USARTConfig||, CODE, READONLY, ALIGN=2

                  USARTConfig PROC
;;;187     */
;;;188    void USARTConfig(void)
000000  b500              PUSH     {lr}
;;;189    {
000002  b087              SUB      sp,sp,#0x1c
;;;190      GPIO_InitTypeDef gpio_init_struct;
;;;191    
;;;192      /*##-1- Enable peripherals and GPIO Clocks #################################*/
;;;193      /* Enable GPIO TX/RX clock */
;;;194      USARTx_TX_GPIO_CLK_ENABLE();
000004  bf00              NOP      
000006  2000              MOVS     r0,#0
000008  9001              STR      r0,[sp,#4]
00000a  483c              LDR      r0,|L3.252|
00000c  6800              LDR      r0,[r0,#0]
00000e  f0400001          ORR      r0,r0,#1
000012  493a              LDR      r1,|L3.252|
000014  6008              STR      r0,[r1,#0]
000016  4608              MOV      r0,r1
000018  6800              LDR      r0,[r0,#0]
00001a  f0000001          AND      r0,r0,#1
00001e  9001              STR      r0,[sp,#4]
000020  bf00              NOP      
000022  bf00              NOP      
;;;195      USARTx_RX_GPIO_CLK_ENABLE();
000024  bf00              NOP      
000026  2000              MOVS     r0,#0
000028  9001              STR      r0,[sp,#4]
00002a  4608              MOV      r0,r1
00002c  6800              LDR      r0,[r0,#0]
00002e  f0400001          ORR      r0,r0,#1
000032  6008              STR      r0,[r1,#0]
000034  4608              MOV      r0,r1
000036  6800              LDR      r0,[r0,#0]
000038  f0000001          AND      r0,r0,#1
00003c  9001              STR      r0,[sp,#4]
00003e  bf00              NOP      
000040  bf00              NOP      
;;;196    
;;;197      /* Enable USART2 clock */
;;;198      USARTx_CLK_ENABLE();
000042  bf00              NOP      
000044  2000              MOVS     r0,#0
000046  9001              STR      r0,[sp,#4]
000048  482c              LDR      r0,|L3.252|
00004a  3010              ADDS     r0,r0,#0x10
00004c  6800              LDR      r0,[r0,#0]
00004e  f4403000          ORR      r0,r0,#0x20000
000052  492a              LDR      r1,|L3.252|
000054  3110              ADDS     r1,r1,#0x10
000056  6008              STR      r0,[r1,#0]
000058  4608              MOV      r0,r1
00005a  6800              LDR      r0,[r0,#0]
00005c  f4003000          AND      r0,r0,#0x20000
000060  9001              STR      r0,[sp,#4]
000062  bf00              NOP      
000064  bf00              NOP      
;;;199    
;;;200      /* Enable DMA1 clock */
;;;201      DMAx_CLK_ENABLE();
000066  bf00              NOP      
000068  2000              MOVS     r0,#0
00006a  9001              STR      r0,[sp,#4]
00006c  4823              LDR      r0,|L3.252|
00006e  6800              LDR      r0,[r0,#0]
000070  f4401000          ORR      r0,r0,#0x200000
000074  4921              LDR      r1,|L3.252|
000076  6008              STR      r0,[r1,#0]
000078  4608              MOV      r0,r1
00007a  6800              LDR      r0,[r0,#0]
00007c  f4001000          AND      r0,r0,#0x200000
000080  9001              STR      r0,[sp,#4]
000082  bf00              NOP      
000084  bf00              NOP      
;;;202    
;;;203      /*##-2- Configure peripheral GPIO ##########################################*/
;;;204      /* UART TX GPIO pin configuration  */
;;;205      gpio_init_struct.Pin       = USARTx_TX_PIN;
000086  2004              MOVS     r0,#4
000088  9002              STR      r0,[sp,#8]
;;;206      gpio_init_struct.Mode      = GPIO_MODE_AF_PP;
00008a  2002              MOVS     r0,#2
00008c  9003              STR      r0,[sp,#0xc]
;;;207      gpio_init_struct.Pull      = GPIO_NOPULL;
00008e  2000              MOVS     r0,#0
000090  9004              STR      r0,[sp,#0x10]
;;;208      gpio_init_struct.Speed     = GPIO_SPEED_FREQ_HIGH;
000092  2002              MOVS     r0,#2
000094  9005              STR      r0,[sp,#0x14]
;;;209      gpio_init_struct.Alternate = USARTx_TX_AF;
000096  2007              MOVS     r0,#7
000098  9006              STR      r0,[sp,#0x18]
;;;210    
;;;211      HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &gpio_init_struct);
00009a  a902              ADD      r1,sp,#8
00009c  4818              LDR      r0,|L3.256|
00009e  f7fffffe          BL       HAL_GPIO_Init
;;;212    
;;;213      /* UART RX GPIO pin configuration */
;;;214      gpio_init_struct.Pin = USARTx_RX_PIN;
0000a2  2008              MOVS     r0,#8
0000a4  9002              STR      r0,[sp,#8]
;;;215      gpio_init_struct.Alternate = USARTx_RX_AF;
0000a6  2007              MOVS     r0,#7
0000a8  9006              STR      r0,[sp,#0x18]
;;;216    
;;;217      HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &gpio_init_struct);
0000aa  a902              ADD      r1,sp,#8
0000ac  4814              LDR      r0,|L3.256|
0000ae  f7fffffe          BL       HAL_GPIO_Init
;;;218    
;;;219      /*##-3- Configure the UART peripheral ######################################*/
;;;220      /* Put the USART peripheral in the Asynchronous mode (UART Mode) */
;;;221      UartHandle.Instance        = USARTx;
0000b2  4814              LDR      r0,|L3.260|
0000b4  4914              LDR      r1,|L3.264|
0000b6  6008              STR      r0,[r1,#0]  ; UartHandle
;;;222      UartHandle.Init.BaudRate   = UsartBaudRate;
0000b8  4814              LDR      r0,|L3.268|
0000ba  6800              LDR      r0,[r0,#0]  ; UsartBaudRate
0000bc  6048              STR      r0,[r1,#4]  ; UartHandle
;;;223      UartHandle.Init.WordLength = UART_WORDLENGTH_8B;
0000be  2100              MOVS     r1,#0
0000c0  4811              LDR      r0,|L3.264|
0000c2  6081              STR      r1,[r0,#8]
;;;224      UartHandle.Init.StopBits   = UART_STOPBITS_1;
0000c4  60c1              STR      r1,[r0,#0xc]
;;;225      UartHandle.Init.Parity     = UART_PARITY_NONE;
0000c6  6101              STR      r1,[r0,#0x10]
;;;226      UartHandle.Init.HwFlowCtl  = UART_HWCONTROL_NONE;
0000c8  6181              STR      r1,[r0,#0x18]
;;;227      UartHandle.Init.Mode       = UART_MODE_TX_RX;
0000ca  210c              MOVS     r1,#0xc
0000cc  6141              STR      r1,[r0,#0x14]
;;;228    
;;;229      if (HAL_UART_Init(&UartHandle) != HAL_OK)
0000ce  f7fffffe          BL       HAL_UART_Init
0000d2  b108              CBZ      r0,|L3.216|
;;;230      {
;;;231        for (;;)
0000d4  bf00              NOP      
                  |L3.214|
0000d6  e7fe              B        |L3.214|
                  |L3.216|
;;;232        {}
;;;233      }
;;;234    
;;;235      USART_DMA_Configuration();
0000d8  f7fffffe          BL       USART_DMA_Configuration
;;;236    
;;;237      UartHandle.pRxBuffPtr = (uint8_t *)UartRxBuffer; /* MISRA C-2012 rule 11.8 violation for purpose */
0000dc  480c              LDR      r0,|L3.272|
0000de  490a              LDR      r1,|L3.264|
0000e0  6288              STR      r0,[r1,#0x28]  ; UartHandle
;;;238      UartHandle.RxXferSize = UART_RxBufferSize;
0000e2  f44f7000          MOV      r0,#0x200
0000e6  8588              STRH     r0,[r1,#0x2c]
;;;239      UartHandle.ErrorCode = (uint32_t)HAL_UART_ERROR_NONE;
0000e8  2000              MOVS     r0,#0
0000ea  63c8              STR      r0,[r1,#0x3c]  ; UartHandle
;;;240    
;;;241      /* Enable the DMA transfer for the receiver request by setting the DMAR bit
;;;242      in the UART CR3 register */
;;;243      /* MISRA C-2012 rule 11.8 violation for purpose */
;;;244      (void)HAL_UART_Receive_DMA(&UartHandle, (uint8_t *)UartRxBuffer, UART_RxBufferSize);
0000ec  f44f7200          MOV      r2,#0x200
0000f0  4907              LDR      r1,|L3.272|
0000f2  4805              LDR      r0,|L3.264|
0000f4  f7fffffe          BL       HAL_UART_Receive_DMA
;;;245    }
0000f8  b007              ADD      sp,sp,#0x1c
0000fa  bd00              POP      {pc}
;;;246    
                          ENDP

                  |L3.252|
                          DCD      0x40023830
                  |L3.256|
                          DCD      0x40020000
                  |L3.260|
                          DCD      0x40004400
                  |L3.264|
                          DCD      UartHandle
                  |L3.268|
                          DCD      UsartBaudRate
                  |L3.272|
                          DCD      UartRxBuffer

                          AREA ||i.USART_DMA_Configuration||, CODE, READONLY, ALIGN=2

                  USART_DMA_Configuration PROC
;;;172     */
;;;173    void USART_DMA_Configuration(void)
000000  b510              PUSH     {r4,lr}
;;;174    {
;;;175      /* Configure the DMA handler for Transmission process */
;;;176      Config_DMA_Handler(&HdmaRx);
000002  4807              LDR      r0,|L4.32|
000004  f7fffffe          BL       Config_DMA_Handler
;;;177      (void)HAL_DMA_Init(&HdmaRx);
000008  4805              LDR      r0,|L4.32|
00000a  f7fffffe          BL       HAL_DMA_Init
;;;178    
;;;179      /* Associate the initialized DMA handle to the the UART handle */
;;;180      __HAL_LINKDMA(&UartHandle, hdmarx, HdmaRx);
00000e  bf00              NOP      
000010  4803              LDR      r0,|L4.32|
000012  4904              LDR      r1,|L4.36|
000014  6348              STR      r0,[r1,#0x34]  ; UartHandle
000016  4608              MOV      r0,r1
000018  4901              LDR      r1,|L4.32|
00001a  6388              STR      r0,[r1,#0x38]  ; HdmaRx
00001c  bf00              NOP      
;;;181    }
00001e  bd10              POP      {r4,pc}
;;;182    
                          ENDP

                  |L4.32|
                          DCD      HdmaRx
                  |L4.36|
                          DCD      UartHandle

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  UartRxBuffer
                          %        512
                  UartTxBuffer
                          %        512
                  UartHandle
                          %        64
                  HdmaRx
                          %        96

                          AREA ||.data||, DATA, ALIGN=2

                  UsartBaudRate
                          DCD      0x000e1000
                  UartEngine
                          %        8

;*** Start embedded assembler ***

#line 1 "..\\Src\\com.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_com_c_a9129f45____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___5_com_c_a9129f45____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_com_c_a9129f45____REVSH|
#line 402
|__asm___5_com_c_a9129f45____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_com_c_a9129f45____RRX|
#line 587
|__asm___5_com_c_a9129f45____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
