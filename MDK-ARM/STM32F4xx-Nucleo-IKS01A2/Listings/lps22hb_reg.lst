L 1 "..\..\..\..\..\..\Drivers\BSP\Components\lps22hb\lps22hb_reg.c"
N/*
N ******************************************************************************
N * @file    lps22hb_reg.c
N * @author  Sensors Software Solution Team
N * @brief   LPS22HB driver file
N ******************************************************************************
N * @attention
N *
N * <h2><center>&copy; COPYRIGHT(c) 2019 STMicroelectronics</center></h2>
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *   1. Redistributions of source code must retain the above copyright notice,
N *      this list of conditions and the following disclaimer.
N *   2. Redistributions in binary form must reproduce the above copyright
N *      notice, this list of conditions and the following disclaimer in the
N *      documentation and/or other materials provided with the distribution.
N *   3. Neither the name of STMicroelectronics nor the names of its
N *      contributors may be used to endorse or promote products derived from
N *      this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
N * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N * POSSIBILITY OF SUCH DAMAGE.
N *
N */
N
N#include "lps22hb_reg.h"
L 1 "..\..\..\..\..\..\Drivers\BSP\Components\lps22hb\lps22hb_reg.h" 1
N/*
N ******************************************************************************
N * @file    lps22hb_reg.h
N * @author  Sensors Software Solution Team
N * @brief   This file contains all the functions prototypes for the
N *          lps22hb_reg.c driver.
N ******************************************************************************
N * @attention
N *
N * <h2><center>&copy; COPYRIGHT(c) 2019 STMicroelectronics</center></h2>
N *
N * Redistribution and use in source and binary forms, with or without
N * modification, are permitted provided that the following conditions
N * are met:
N *   1. Redistributions of source code must retain the above copyright notice,
N *      this list of conditions and the following disclaimer.
N *   2. Redistributions in binary form must reproduce the above copyright
N *      notice, this list of conditions and the following disclaimer in the
N *      documentation and/or other materials provided with the distribution.
N *   3. Neither the name of STMicroelectronics nor the names of its
N *      contributors may be used to endorse or promote products derived from
N *      this software without specific prior written permission.
N *
N * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
N * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
N * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
N * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
N * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
N * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
N * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
N * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
N * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
N * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
N * POSSIBILITY OF SUCH DAMAGE.
N *
N */
N/* Define to prevent recursive inclusion -------------------------------------*/
N#ifndef LPS22HB_REGS_H
N#define LPS22HB_REGS_H
N
N#ifdef __cplusplus
S  extern "C" {
N#endif
N
N/* Includes ------------------------------------------------------------------*/
N#include <stdint.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\stdint.h" 1
N/* Copyright (C) ARM Ltd., 1999,2014 */
N/* All rights reserved */
N
N/*
N * RCS $Revision$
N * Checkin $Date$
N * Revising $Author: agrant $
N */
N
N#ifndef __stdint_h
N#define __stdint_h
N#define __ARMCLIB_VERSION 5060037
N
N  #ifdef __INT64_TYPE__
S    /* armclang predefines '__INT64_TYPE__' and '__INT64_C_SUFFIX__' */
S    #define __INT64 __INT64_TYPE__
N  #else
N    /* armcc has builtin '__int64' which can be used in --strict mode */
N    #define __INT64 __int64
N    #define __INT64_C_SUFFIX__ ll
N  #endif
N  #define __PASTE2(x, y) x ## y
N  #define __PASTE(x, y) __PASTE2(x, y)
N  #define __INT64_C(x)  __ESCAPE__(__PASTE(x, __INT64_C_SUFFIX__))
N  #define __UINT64_C(x)  __ESCAPE__(__PASTE(x ## u, __INT64_C_SUFFIX__))
N  #if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X  #if 0L || (1L && !0L)
N    /* armclang and non-strict armcc allow 'long long' in system headers */
N    #define __LONGLONG long long
N  #else
S    /* strict armcc has '__int64' */
S    #define __LONGLONG __int64
N  #endif
N
N  #ifndef __STDINT_DECLS
N  #define __STDINT_DECLS
N
N    #undef __CLIBNS
N
N    #ifdef __cplusplus
S      namespace std {
S          #define __CLIBNS std::
S          extern "C" {
N    #else
N      #define __CLIBNS
N    #endif  /* __cplusplus */
N
N
N/*
N * 'signed' is redundant below, except for 'signed char' and if
N * the typedef is used to declare a bitfield.
N */
N
N    /* 7.18.1.1 */
N
N    /* exact-width signed integer types */
Ntypedef   signed          char int8_t;
Ntypedef   signed short     int int16_t;
Ntypedef   signed           int int32_t;
Ntypedef   signed       __INT64 int64_t;
Xtypedef   signed       __int64 int64_t;
N
N    /* exact-width unsigned integer types */
Ntypedef unsigned          char uint8_t;
Ntypedef unsigned short     int uint16_t;
Ntypedef unsigned           int uint32_t;
Ntypedef unsigned       __INT64 uint64_t;
Xtypedef unsigned       __int64 uint64_t;
N
N    /* 7.18.1.2 */
N
N    /* smallest type of at least n bits */
N    /* minimum-width signed integer types */
Ntypedef   signed          char int_least8_t;
Ntypedef   signed short     int int_least16_t;
Ntypedef   signed           int int_least32_t;
Ntypedef   signed       __INT64 int_least64_t;
Xtypedef   signed       __int64 int_least64_t;
N
N    /* minimum-width unsigned integer types */
Ntypedef unsigned          char uint_least8_t;
Ntypedef unsigned short     int uint_least16_t;
Ntypedef unsigned           int uint_least32_t;
Ntypedef unsigned       __INT64 uint_least64_t;
Xtypedef unsigned       __int64 uint_least64_t;
N
N    /* 7.18.1.3 */
N
N    /* fastest minimum-width signed integer types */
Ntypedef   signed           int int_fast8_t;
Ntypedef   signed           int int_fast16_t;
Ntypedef   signed           int int_fast32_t;
Ntypedef   signed       __INT64 int_fast64_t;
Xtypedef   signed       __int64 int_fast64_t;
N
N    /* fastest minimum-width unsigned integer types */
Ntypedef unsigned           int uint_fast8_t;
Ntypedef unsigned           int uint_fast16_t;
Ntypedef unsigned           int uint_fast32_t;
Ntypedef unsigned       __INT64 uint_fast64_t;
Xtypedef unsigned       __int64 uint_fast64_t;
N
N    /* 7.18.1.4 integer types capable of holding object pointers */
N#if __sizeof_ptr == 8
X#if 4 == 8
Stypedef   signed       __INT64 intptr_t;
Stypedef unsigned       __INT64 uintptr_t;
N#else
Ntypedef   signed           int intptr_t;
Ntypedef unsigned           int uintptr_t;
N#endif
N
N    /* 7.18.1.5 greatest-width integer types */
Ntypedef   signed     __LONGLONG intmax_t;
Xtypedef   signed     long long intmax_t;
Ntypedef unsigned     __LONGLONG uintmax_t;
Xtypedef unsigned     long long uintmax_t;
N
N
N#if !defined(__cplusplus) || defined(__STDC_LIMIT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.2.1 */
N
N    /* minimum values of exact-width signed integer types */
N#define INT8_MIN                   -128
N#define INT16_MIN                -32768
N#define INT32_MIN          (~0x7fffffff)   /* -2147483648 is unsigned */
N#define INT64_MIN  __INT64_C(~0x7fffffffffffffff) /* -9223372036854775808 is unsigned */
N
N    /* maximum values of exact-width signed integer types */
N#define INT8_MAX                    127
N#define INT16_MAX                 32767
N#define INT32_MAX            2147483647
N#define INT64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of exact-width unsigned integer types */
N#define UINT8_MAX                   255
N#define UINT16_MAX                65535
N#define UINT32_MAX           4294967295u
N#define UINT64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.2 */
N
N    /* minimum values of minimum-width signed integer types */
N#define INT_LEAST8_MIN                   -128
N#define INT_LEAST16_MIN                -32768
N#define INT_LEAST32_MIN          (~0x7fffffff)
N#define INT_LEAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of minimum-width signed integer types */
N#define INT_LEAST8_MAX                    127
N#define INT_LEAST16_MAX                 32767
N#define INT_LEAST32_MAX            2147483647
N#define INT_LEAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of minimum-width unsigned integer types */
N#define UINT_LEAST8_MAX                   255
N#define UINT_LEAST16_MAX                65535
N#define UINT_LEAST32_MAX           4294967295u
N#define UINT_LEAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.3 */
N
N    /* minimum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MIN           (~0x7fffffff)
N#define INT_FAST16_MIN          (~0x7fffffff)
N#define INT_FAST32_MIN          (~0x7fffffff)
N#define INT_FAST64_MIN  __INT64_C(~0x7fffffffffffffff)
N
N    /* maximum values of fastest minimum-width signed integer types */
N#define INT_FAST8_MAX             2147483647
N#define INT_FAST16_MAX            2147483647
N#define INT_FAST32_MAX            2147483647
N#define INT_FAST64_MAX  __INT64_C(9223372036854775807)
N
N    /* maximum values of fastest minimum-width unsigned integer types */
N#define UINT_FAST8_MAX            4294967295u
N#define UINT_FAST16_MAX           4294967295u
N#define UINT_FAST32_MAX           4294967295u
N#define UINT_FAST64_MAX __UINT64_C(18446744073709551615)
N
N    /* 7.18.2.4 */
N
N    /* minimum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MIN INT64_MIN
N#else
N#define INTPTR_MIN INT32_MIN
N#endif
N
N    /* maximum value of pointer-holding signed integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define INTPTR_MAX INT64_MAX
N#else
N#define INTPTR_MAX INT32_MAX
N#endif
N
N    /* maximum value of pointer-holding unsigned integer type */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define UINTPTR_MAX UINT64_MAX
N#else
N#define UINTPTR_MAX UINT32_MAX
N#endif
N
N    /* 7.18.2.5 */
N
N    /* minimum value of greatest-width signed integer type */
N#define INTMAX_MIN  __ESCAPE__(~0x7fffffffffffffffll)
N
N    /* maximum value of greatest-width signed integer type */
N#define INTMAX_MAX  __ESCAPE__(9223372036854775807ll)
N
N    /* maximum value of greatest-width unsigned integer type */
N#define UINTMAX_MAX __ESCAPE__(18446744073709551615ull)
N
N    /* 7.18.3 */
N
N    /* limits of ptrdiff_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define PTRDIFF_MIN INT64_MIN
S#define PTRDIFF_MAX INT64_MAX
N#else
N#define PTRDIFF_MIN INT32_MIN
N#define PTRDIFF_MAX INT32_MAX
N#endif
N
N    /* limits of sig_atomic_t */
N#define SIG_ATOMIC_MIN (~0x7fffffff)
N#define SIG_ATOMIC_MAX   2147483647
N
N    /* limit of size_t */
N#if __sizeof_ptr == 8
X#if 4 == 8
S#define SIZE_MAX UINT64_MAX
N#else
N#define SIZE_MAX UINT32_MAX
N#endif
N
N    /* limits of wchar_t */
N    /* NB we have to undef and redef because they're defined in both
N     * stdint.h and wchar.h */
N#undef WCHAR_MIN
N#undef WCHAR_MAX
N
N#if defined(__WCHAR32) || (defined(__ARM_SIZEOF_WCHAR_T) && __ARM_SIZEOF_WCHAR_T == 4)
X#if 0L || (0L && __ARM_SIZEOF_WCHAR_T == 4)
S  #define WCHAR_MIN   0
S  #define WCHAR_MAX   0xffffffffU
N#else
N  #define WCHAR_MIN   0
N  #define WCHAR_MAX   65535
N#endif
N
N    /* limits of wint_t */
N#define WINT_MIN (~0x7fffffff)
N#define WINT_MAX 2147483647
N
N#endif /* __STDC_LIMIT_MACROS */
N
N#if !defined(__cplusplus) || defined(__STDC_CONSTANT_MACROS)
X#if !0L || 0L
N
N    /* 7.18.4.1 macros for minimum-width integer constants */
N#define INT8_C(x)   (x)
N#define INT16_C(x)  (x)
N#define INT32_C(x)  (x)
N#define INT64_C(x)  __INT64_C(x)
N
N#define UINT8_C(x)  (x ## u)
N#define UINT16_C(x) (x ## u)
N#define UINT32_C(x) (x ## u)
N#define UINT64_C(x) __UINT64_C(x)
N
N    /* 7.18.4.2 macros for greatest-width integer constants */
N#define INTMAX_C(x)  __ESCAPE__(x ## ll)
N#define UINTMAX_C(x) __ESCAPE__(x ## ull)
N
N#endif /* __STDC_CONSTANT_MACROS */
N
N    #ifdef __cplusplus
S         }  /* extern "C" */
S      }  /* namespace std */
N    #endif /* __cplusplus */
N  #endif /* __STDINT_DECLS */
N
N  #ifdef __cplusplus
S    #ifndef __STDINT_NO_EXPORTS
S      using ::std::int8_t;
S      using ::std::int16_t;
S      using ::std::int32_t;
S      using ::std::int64_t;
S      using ::std::uint8_t;
S      using ::std::uint16_t;
S      using ::std::uint32_t;
S      using ::std::uint64_t;
S      using ::std::int_least8_t;
S      using ::std::int_least16_t;
S      using ::std::int_least32_t;
S      using ::std::int_least64_t;
S      using ::std::uint_least8_t;
S      using ::std::uint_least16_t;
S      using ::std::uint_least32_t;
S      using ::std::uint_least64_t;
S      using ::std::int_fast8_t;
S      using ::std::int_fast16_t;
S      using ::std::int_fast32_t;
S      using ::std::int_fast64_t;
S      using ::std::uint_fast8_t;
S      using ::std::uint_fast16_t;
S      using ::std::uint_fast32_t;
S      using ::std::uint_fast64_t;
S      using ::std::intptr_t;
S      using ::std::uintptr_t;
S      using ::std::intmax_t;
S      using ::std::uintmax_t;
S    #endif
N  #endif /* __cplusplus */
N
N#undef __INT64
N#undef __LONGLONG
N
N#endif /* __stdint_h */
N
N/* end of stdint.h */
L 47 "..\..\..\..\..\..\Drivers\BSP\Components\lps22hb\lps22hb_reg.h" 2
N#include <math.h>
L 1 "C:\Keil_v5\ARM\ARMCC\Bin\..\include\math.h" 1
N/*
N * math.h: ANSI 'C' (X3J11 Oct 88) library header, section 4.5
N * Copyright (C) Codemist Ltd., 1988
N * Copyright 1991-1998,2004-2006,2014 ARM Limited. All rights reserved
N */
N
N/*
N * RCS $Revision$ Codemist 0.03
N * Checkin $Date$
N * Revising $Author: statham $
N */
N
N/*
N * Parts of this file are based upon fdlibm:
N *
N * ====================================================
N * Copyright (C) 1993 by Sun Microsystems, Inc. All rights reserved.
N *
N * Developed at SunSoft, a Sun Microsystems, Inc. business.
N * Permission to use, copy, modify, and distribute this
N * software is freely granted, provided that this notice
N * is preserved.
N * ====================================================
N */
N
N#ifndef __math_h
N#define __math_h
N#define __ARMCLIB_VERSION 5060037
N
N#if defined(__clang__) || (defined(__ARMCC_VERSION) && !defined(__STRICT_ANSI__))
X#if 0L || (1L && !0L)
N  /* armclang and non-strict armcc allow 'long long' in system headers */
N  #define __LONGLONG long long
N#else
S  /* strict armcc has '__int64' */
S  #define __LONGLONG __int64
N#endif
N
N/*
N * Some of these declarations are new in C99.  To access them in C++
N * you can use -D__USE_C99_MATH (or -D__USE_C99_ALL).
N */
N#ifndef __USE_C99_MATH
N  #if defined(__USE_C99_ALL) || (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__) || (defined(__cplusplus) && 201103L <= __cplusplus)
X  #if 0L || (1L && 199901L <= 199901L) || (0L && 201103L <= __cplusplus)
N    #define __USE_C99_MATH 1
N  #endif
N#endif
N
N#define _ARMABI __declspec(__nothrow)
N#ifdef __TARGET_ARCH_AARCH64
S# define _ARMABI_SOFTFP __declspec(__nothrow)
N#else
N# define _ARMABI_SOFTFP __declspec(__nothrow) __attribute__((__pcs__("aapcs")))
N# define __HAVE_LONGDOUBLE 1
N#endif
N#define _ARMABI_PURE __declspec(__nothrow) __attribute__((const))
N#ifdef __FP_FENV_EXCEPTIONS
S# define _ARMABI_FPEXCEPT _ARMABI
N#else
N# define _ARMABI_FPEXCEPT _ARMABI __attribute__((const))
N#endif
N
N#ifdef __cplusplus
S#define _ARMABI_INLINE inline
S#define _ARMABI_INLINE_DEF inline
S#elif defined __GNUC__ || defined _USE_STATIC_INLINE
X#elif 0L || 0L
S#define _ARMABI_INLINE static __inline
S#define _ARMABI_INLINE_DEF static __inline
N#elif (defined(__STDC_VERSION__) && 199901L <= __STDC_VERSION__)
X#elif (1L && 199901L <= 199901L)
N#define _ARMABI_INLINE inline
N#define _ARMABI_INLINE_DEF static inline
N#else
S#define _ARMABI_INLINE __inline
S#define _ARMABI_INLINE_DEF __inline
N#endif
N
N#ifdef __TARGET_ARCH_AARCH64
S#  define _SOFTFP
N#else
N#  define _SOFTFP __attribute__((__pcs__("aapcs")))
N#endif
N
N   /*
N    * If the compiler supports signalling nans as per N965 then it
N    * will define __SUPPORT_SNAN__, in which case a user may define
N    * _WANT_SNAN in order to obtain the nans function, as well as the
N    * FP_NANS and FP_NANQ classification macros.
N    */
N#if defined(__SUPPORT_SNAN__) && defined(_WANT_SNAN)
X#if 0L && 0L
S#pragma import(__use_snan)
N#endif
N
N/*
N * Macros for our inline functions down below.
N * unsigned& __FLT(float x) - returns the bit pattern of x
N * unsigned& __HI(double x) - returns the bit pattern of the high part of x
N *                            (high part has exponent & sign bit in it)
N * unsigned& __LO(double x) - returns the bit pattern of the low part of x
N *
N * We can assign to __FLT, __HI, and __LO and the appropriate bits get set in
N * the floating point variable used.
N *
N * __HI & __LO are affected by the endianness and the target FPU.
N */
N#define __FLT(x) (*(unsigned *)&(x))
N#if defined(__ARM_BIG_ENDIAN) || defined(__BIG_ENDIAN)
X#if 0L || 0L
S#  define __LO(x) (*(1 + (unsigned *)&(x)))
S#  define __HI(x) (*(unsigned *)&(x))
N#else /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N#  define __HI(x) (*(1 + (unsigned *)&(x)))
N#  define __LO(x) (*(unsigned *)&(x))
N#endif /* !defined(__ARM_BIG_ENDIAN) && !defined(__BIG_ENDIAN) */
N
N#   ifndef __MATH_DECLS
N#   define __MATH_DECLS
N
N
N/*
N * A set of functions that we don't actually want to put in the standard
N * namespace ever.  These are all called by the C99 macros.  As they're
N * not specified by any standard they can't belong in ::std::.  The
N * macro #defines are below amongst the standard function declarations.
N * We only include these if we actually need them later on
N */
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N#   ifdef __cplusplus
S      extern "C" {
N#   endif /* __cplusplus */
N
Nextern _SOFTFP unsigned __ARM_dcmp4(double /*x*/, double /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_dcmp4(double  , double  );
Nextern _SOFTFP unsigned __ARM_fcmp4(float /*x*/, float /*y*/);
Xextern __attribute__((__pcs__("aapcs"))) unsigned __ARM_fcmp4(float  , float  );
N    /*
N     * Compare x and y and return the CPSR in r0.  These means we can test for
N     * result types with bit pattern matching.
N     *
N     * These are a copy of the declarations in rt_fp.h keep in sync.
N     */
N
Nextern _ARMABI_SOFTFP int __ARM_fpclassifyf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassifyf(float  );
Nextern _ARMABI_SOFTFP int __ARM_fpclassify(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_fpclassify(double  );
N    /* Classify x into NaN, infinite, normal, subnormal, zero */
N    /* Used by fpclassify macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinitef(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinitef(float __x)
N{
N    return ((__FLT(__x) >> 23) & 0xff) != 0xff;
X    return (((*(unsigned *)&(__x)) >> 23) & 0xff) != 0xff;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isfinite(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isfinite(double __x)
N{
N    return ((__HI(__x) >> 20) & 0x7ff) != 0x7ff;
X    return (((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff) != 0x7ff;
N}
N    /* Return 1 if __x is finite, 0 otherwise */
N    /* Used by isfinite macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinff(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinff(float __x)
N{
N    return (__FLT(__x) << 1) == 0xff000000;
X    return ((*(unsigned *)&(__x)) << 1) == 0xff000000;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isinf(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isinf(double __x)
N{
N    return ((__HI(__x) << 1) == 0xffe00000) && (__LO(__x) == 0);
X    return (((*(1 + (unsigned *)&(__x))) << 1) == 0xffe00000) && ((*(unsigned *)&(__x)) == 0);
N}
N    /* Return 1 if __x is infinite, 0 otherwise */
N    /* Used by isinf macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreaterf(float __x, float __y)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreaterf(float __x, float __y)
N{
N    unsigned __f = __ARM_fcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_islessgreater(double __x, double __y)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_islessgreater(double __x, double __y)
N{
N    unsigned __f = __ARM_dcmp4(__x, __y) >> 28;
N    return (__f == 8) || (__f == 2); /* Just N set or Just Z set */
N}
N    /*
N     * Compare __x and __y and return 1 if __x < __y or __x > __y, 0 otherwise
N     * Used by islessgreater macro
N     */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnanf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnanf(float __x)
N{
N    return (0x7f800000 - (__FLT(__x) & 0x7fffffff)) >> 31;
X    return (0x7f800000 - ((*(unsigned *)&(__x)) & 0x7fffffff)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnan(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnan(double __x)
N{
N    unsigned __xf = __HI(__x) | ((__LO(__x) == 0) ? 0 : 1);
X    unsigned __xf = (*(1 + (unsigned *)&(__x))) | (((*(unsigned *)&(__x)) == 0) ? 0 : 1);
N    return (0x7ff00000 - (__xf & 0x7fffffff)) >> 31;
N}
N    /* Return 1 if __x is a NaN, 0 otherwise */
N    /* Used by isnan macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormalf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormalf(float __x)
N{
N    unsigned __xe = (__FLT(__x) >> 23) & 0xff;
X    unsigned __xe = ((*(unsigned *)&(__x)) >> 23) & 0xff;
N    return (__xe != 0xff) && (__xe != 0);
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_isnormal(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_isnormal(double __x)
N{
N    unsigned __xe = (__HI(__x) >> 20) & 0x7ff;
X    unsigned __xe = ((*(1 + (unsigned *)&(__x))) >> 20) & 0x7ff;
N    return (__xe != 0x7ff) && (__xe != 0);
N}
N    /* Return 1 if __x is a normalised number, 0 otherwise */
N    /* used by isnormal macro */
N
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbitf(float __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbitf(float __x)
N{
N    return __FLT(__x) >> 31;
X    return (*(unsigned *)&(__x)) >> 31;
N}
N_ARMABI_INLINE_DEF _ARMABI_SOFTFP int __ARM_signbit(double __x)
Xstatic inline __declspec(__nothrow) __attribute__((__pcs__("aapcs"))) int __ARM_signbit(double __x)
N{
N    return __HI(__x) >> 31;
X    return (*(1 + (unsigned *)&(__x))) >> 31;
N}
N    /* Return signbit of __x */
N    /* Used by signbit macro */
N
N#   ifdef __cplusplus
S      } /* extern "C" */
N#   endif /* __cplusplus */
N#endif /* Strict ANSI */
N
N#   undef __CLIBNS
N
N#   ifdef __cplusplus
S      namespace std {
S#       define __CLIBNS ::std::
S        extern "C" {
N#   else
N#       define __CLIBNS
N#   endif  /* __cplusplus */
N
N
N#ifndef __has_builtin
N  #define __has_builtin(x) 0
N#endif
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N  /* C99 additions */
N  typedef float float_t;
N  typedef double double_t;
N#if __has_builtin(__builtin_inf)
X#if 0
S#   define HUGE_VALF __builtin_inff()
S#   define HUGE_VALL __builtin_infl()
S#   define INFINITY __builtin_inff()
S#   define NAN __builtin_nanf("")
N# else
N#   define HUGE_VALF ((float)__INFINITY__)
N#   define HUGE_VALL ((long double)__INFINITY__)
N#   define INFINITY ((float)__INFINITY__)
N#   define NAN (__ESCAPE__(0f_7FC00000))
N#endif
N
N#   define MATH_ERRNO 1
N#   define MATH_ERREXCEPT 2
Nextern const int math_errhandling;
N#endif
N#if __has_builtin(__builtin_inf)
X#if 0
S# define HUGE_VAL __builtin_inf()
N#else
N# define HUGE_VAL ((double)__INFINITY__)
N#endif
N
Nextern _ARMABI double acos(double /*x*/);
Xextern __declspec(__nothrow) double acos(double  );
N   /* computes the principal value of the arc cosine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* Returns: the arc cosine in the range 0 to Pi. */
Nextern _ARMABI double asin(double /*x*/);
Xextern __declspec(__nothrow) double asin(double  );
N   /* computes the principal value of the arc sine of x */
N   /* a domain error occurs for arguments not in the range -1 to 1 */
N   /* and -HUGE_VAL is returned. */
N   /* Returns: the arc sine in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI_PURE double atan(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double atan(double  );
N   /* computes the principal value of the arc tangent of x */
N   /* Returns: the arc tangent in the range -Pi/2 to Pi/2. */
N
Nextern _ARMABI double atan2(double /*y*/, double /*x*/);
Xextern __declspec(__nothrow) double atan2(double  , double  );
N   /* computes the principal value of the arc tangent of y/x, using the */
N   /* signs of both arguments to determine the quadrant of the return value */
N   /* a domain error occurs if both args are zero, and -HUGE_VAL returned. */
N   /* Returns: the arc tangent of y/x, in the range -Pi to Pi. */
N
Nextern _ARMABI double cos(double /*x*/);
Xextern __declspec(__nothrow) double cos(double  );
N   /* computes the cosine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the cosine value. */
Nextern _ARMABI double sin(double /*x*/);
Xextern __declspec(__nothrow) double sin(double  );
N   /* computes the sine of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance. */
N   /* a domain error occurs for infinite input (C 7.12.1 footnote 196). */
N   /* Returns: the sine value. */
N
Nextern void __use_accurate_range_reduction(void);
N   /* reference this to select the larger, slower, but more accurate */
N   /* range reduction in sin, cos and tan */
N
Nextern _ARMABI double tan(double /*x*/);
Xextern __declspec(__nothrow) double tan(double  );
N   /* computes the tangent of x (measured in radians). A large magnitude */
N   /* argument may yield a result with little or no significance */
N   /* Returns: the tangent value. */
N   /*          if range error; returns HUGE_VAL. */
N
Nextern _ARMABI double cosh(double /*x*/);
Xextern __declspec(__nothrow) double cosh(double  );
N   /* computes the hyperbolic cosine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic cosine value. */
N   /*          if range error; returns HUGE_VAL. */
Nextern _ARMABI double sinh(double /*x*/);
Xextern __declspec(__nothrow) double sinh(double  );
N   /* computes the hyperbolic sine of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the hyperbolic sine value. */
N   /*          if range error; returns -HUGE_VAL or HUGE_VAL depending */
N   /*          on the sign of the argument */
N
Nextern _ARMABI_PURE double tanh(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double tanh(double  );
N   /* computes the hyperbolic tangent of x. */
N   /* Returns: the hyperbolic tangent value. */
N
Nextern _ARMABI double exp(double /*x*/);
Xextern __declspec(__nothrow) double exp(double  );
N   /* computes the exponential function of x. A range error occurs if the */
N   /* magnitude of x is too large. */
N   /* Returns: the exponential value. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
N
Nextern _ARMABI double frexp(double /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double frexp(double  , int *  ) __attribute__((__nonnull__(2)));
N   /* breaks a floating-point number into a normalised fraction and an */
N   /* integral power of 2. It stores the integer in the int object pointed */
N   /* to by exp. */
N   /* Returns: the value x, such that x is a double with magnitude in the */
N   /* interval 0.5 to 1.0 or zero, and value equals x times 2 raised to the */
N   /* power *exp. If value is zero, both parts of the result are zero. */
N
Nextern _ARMABI double ldexp(double /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) double ldexp(double  , int  );
N   /* multiplies a floating-point number by an integral power of 2. */
N   /* A range error may occur. */
N   /* Returns: the value of x times 2 raised to the power of exp. */
N   /*          if range error; HUGE_VAL is returned. */
Nextern _ARMABI double log(double /*x*/);
Xextern __declspec(__nothrow) double log(double  );
N   /* computes the natural logarithm of x. A domain error occurs if the */
N   /* argument is negative, and -HUGE_VAL is returned. A range error occurs */
N   /* if the argument is zero. */
N   /* Returns: the natural logarithm. */
N   /*          if range error; -HUGE_VAL is returned. */
Nextern _ARMABI double log10(double /*x*/);
Xextern __declspec(__nothrow) double log10(double  );
N   /* computes the base-ten logarithm of x. A domain error occurs if the */
N   /* argument is negative. A range error occurs if the argument is zero. */
N   /* Returns: the base-ten logarithm. */
Nextern _ARMABI double modf(double /*value*/, double * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) double modf(double  , double *  ) __attribute__((__nonnull__(2)));
N   /* breaks the argument value into integral and fraction parts, each of */
N   /* which has the same sign as the argument. It stores the integral part */
N   /* as a double in the object pointed to by iptr. */
N   /* Returns: the signed fractional part of value. */
N
Nextern _ARMABI double pow(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double pow(double  , double  );
N   /* computes x raised to the power of y. A domain error occurs if x is */
N   /* zero and y is less than or equal to zero, or if x is negative and y */
N   /* is not an integer, and -HUGE_VAL returned. A range error may occur. */
N   /* Returns: the value of x raised to the power of y. */
N   /*          if underflow range error; 0 is returned. */
N   /*          if overflow range error; HUGE_VAL is returned. */
Nextern _ARMABI double sqrt(double /*x*/);
Xextern __declspec(__nothrow) double sqrt(double  );
N   /* computes the non-negative square root of x. A domain error occurs */
N   /* if the argument is negative, and -HUGE_VAL returned. */
N   /* Returns: the value of the square root. */
N
N#if defined(__TARGET_FPU_VFP_DOUBLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 0L && !0L
S    _ARMABI_INLINE double _sqrt(double __x) { return __sqrt(__x); }
N#else
N    _ARMABI_INLINE double _sqrt(double __x) { return sqrt(__x); }
X    inline double _sqrt(double __x) { return sqrt(__x); }
N#endif
N#if defined(__TARGET_FPU_VFP_SINGLE) && !defined(__TARGET_FPU_SOFTVFP)
X#if 1L && !0L
N    _ARMABI_INLINE float _sqrtf(float __x) { return __sqrtf(__x); }
X    inline float _sqrtf(float __x) { return __sqrtf(__x); }
N#else
S    _ARMABI_INLINE float _sqrtf(float __x) { return (float)sqrt(__x); }
N#endif
N    /* With VFP, _sqrt and _sqrtf should expand inline as the native VFP square root
N     * instructions. They will not behave like the C sqrt() function, because
N     * they will report unusual values as IEEE exceptions (in fpmodes which
N     * support IEEE exceptions) rather than in errno. These function names
N     * are not specified in any standard. */
N
Nextern _ARMABI_PURE double ceil(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double ceil(double  );
N   /* computes the smallest integer not less than x. */
N   /* Returns: the smallest integer not less than x, expressed as a double. */
Nextern _ARMABI_PURE double fabs(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fabs(double  );
N   /* computes the absolute value of the floating-point number x. */
N   /* Returns: the absolute value of x. */
N
Nextern _ARMABI_PURE double floor(double /*d*/);
Xextern __declspec(__nothrow) __attribute__((const)) double floor(double  );
N   /* computes the largest integer not greater than x. */
N   /* Returns: the largest integer not greater than x, expressed as a double */
N
Nextern _ARMABI double fmod(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double fmod(double  , double  );
N   /* computes the floating-point remainder of x/y. */
N   /* Returns: the value x - i * y, for some integer i such that, if y is */
N   /*          nonzero, the result has the same sign as x and magnitude */
N   /*          less than the magnitude of y. If y is zero, a domain error */
N   /*          occurs and -HUGE_VAL is returned. */
N
N    /* Additional Mathlib functions not defined by the ANSI standard.
N     * Not guaranteed, and not necessarily very well tested.
N     * C99 requires the user to include <math.h> to use these functions
N     * declaring them "by hand" is not sufficient
N     *
N     * The above statement is not completely true now.  Some of the above
N     * C99 functionality has been added as per the Standard, and (where
N     * necessary) old Mathlib functionality withdrawn/changed.  Before
N     * including this header #define __ENABLE_MATHLIB_LEGACY if you want to
N     * re-enable the legacy functionality.
N     */
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N
Nextern _ARMABI double acosh(double /*x*/);
Xextern __declspec(__nothrow) double acosh(double  );
N    /*
N     * Inverse cosh. EDOM if argument < 1.0
N     */
Nextern _ARMABI double asinh(double /*x*/);
Xextern __declspec(__nothrow) double asinh(double  );
N    /*
N     * Inverse sinh.
N     */
Nextern _ARMABI double atanh(double /*x*/);
Xextern __declspec(__nothrow) double atanh(double  );
N    /*
N     * Inverse tanh. EDOM if |argument| > 1.0
N     */
Nextern _ARMABI double cbrt(double /*x*/);
Xextern __declspec(__nothrow) double cbrt(double  );
N    /*
N     * Cube root.
N     */
N_ARMABI_INLINE _ARMABI_PURE double copysign(double __x, double __y)
Xinline __declspec(__nothrow) __attribute__((const)) double copysign(double __x, double __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __HI(__x) = (__HI(__x) & 0x7fffffff) | (__HI(__y) & 0x80000000);
X    (*(1 + (unsigned *)&(__x))) = ((*(1 + (unsigned *)&(__x))) & 0x7fffffff) | ((*(1 + (unsigned *)&(__y))) & 0x80000000);
N    return __x;
N}
N_ARMABI_INLINE _ARMABI_PURE float copysignf(float __x, float __y)
Xinline __declspec(__nothrow) __attribute__((const)) float copysignf(float __x, float __y)
N    /*
N     * Returns x with sign bit replaced by sign of y.
N     */
N{
N    __FLT(__x) = (__FLT(__x) & 0x7fffffff) | (__FLT(__y) & 0x80000000);
X    (*(unsigned *)&(__x)) = ((*(unsigned *)&(__x)) & 0x7fffffff) | ((*(unsigned *)&(__y)) & 0x80000000);
N    return __x;
N}
Nextern _ARMABI double erf(double /*x*/);
Xextern __declspec(__nothrow) double erf(double  );
N    /*
N     * Error function. (2/sqrt(pi)) * integral from 0 to x of exp(-t*t) dt.
N     */
Nextern _ARMABI double erfc(double /*x*/);
Xextern __declspec(__nothrow) double erfc(double  );
N    /*
N     * 1-erf(x). (More accurate than just coding 1-erf(x), for large x.)
N     */
Nextern _ARMABI double expm1(double /*x*/);
Xextern __declspec(__nothrow) double expm1(double  );
N    /*
N     * exp(x)-1. (More accurate than just coding exp(x)-1, for small x.)
N     */
N#define fpclassify(x) \
N    ((sizeof(x) == sizeof(float)) ? \
N        __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
X#define fpclassify(x)     ((sizeof(x) == sizeof(float)) ?         __ARM_fpclassifyf(x) : __ARM_fpclassify(x))
N    /*
N     * Classify a floating point number into one of the following values:
N     */
N#define FP_ZERO         (0)
N#define FP_SUBNORMAL    (4)
N#define FP_NORMAL       (5)
N#define FP_INFINITE     (3)
N#define FP_NAN          (7)
N
N#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
X#if 0L && 0L
S/* 
S * Note that we'll never classify a number as FP_NAN, as all NaNs will 
S * be either FP_NANQ or FP_NANS
S */
S#  define FP_NANQ       (8)
S#  define FP_NANS       (9)
N#endif
N
N
Nextern _ARMABI double hypot(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double hypot(double  , double  );
N    /*
N     * sqrt(x*x+y*y), ie the length of the vector (x,y) or the
N     * hypotenuse of a right triangle whose other two sides are x
N     * and y. Won't overflow unless the _answer_ is too big, even
N     * if the intermediate x*x+y*y is too big.
N     */
Nextern _ARMABI int ilogb(double /*x*/);
Xextern __declspec(__nothrow) int ilogb(double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
Nextern _ARMABI int ilogbf(float /*x*/);
Xextern __declspec(__nothrow) int ilogbf(float  );
N    /*
N     * Like ilogb but takes a float
N     */
Nextern _ARMABI int ilogbl(long double /*x*/);
Xextern __declspec(__nothrow) int ilogbl(long double  );
N    /*
N     * Exponent of x (returns 0 for 1.0, 1 for 2.0, -1 for 0.5, etc.)
N     */
N#define FP_ILOGB0   (-0x7fffffff) /* ilogb(0) == -INT_MAX */
N#define FP_ILOGBNAN ( 0x80000000) /* ilogb(NAN) == INT_MIN */
N
N#define isfinite(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isfinitef(x) \
N        : __ARM_isfinite(x))
X#define isfinite(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isfinitef(x)         : __ARM_isfinite(x))
N    /*
N     * Returns true if x is a finite number, size independent.
N     */
N
N#define isgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
X#define isgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x20000000))
N    /*
N     * Returns true if x > y, throws no exceptions except on Signaling NaNs
N     *
N     * We want the C not set but the Z bit clear, V must be clear
N     */
N
N#define isgreaterequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
X#define isgreaterequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x30000000) == 0x20000000)         : ((__ARM_dcmp4((x), (y)) & 0x30000000) == 0x20000000))
N    /*
N     * Returns true if x >= y, throws no exceptions except on Signaling NaNs
N     *
N     * We just need to see if the C bit is set or not and ensure V clear
N     */
N
N#define isinf(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isinff(x) \
N        : __ARM_isinf(x))
X#define isinf(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isinff(x)         : __ARM_isinf(x))
N    /*
N     * Returns true if x is an infinity, size independent.
N     */
N
N#define isless(x, y)  \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
X#define isless(x, y)      (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xf0000000) == 0x80000000)         : ((__ARM_dcmp4((x), (y)) & 0xf0000000) == 0x80000000))
N    /*
N     * Returns true if x < y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than if N is set, V clear
N     */
N
N#define islessequal(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0) \
N        : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
X#define islessequal(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0xc0000000) != 0)         : ((__ARM_dcmp4((x), (y)) & 0xc0000000) != 0))
N    /*
N     * Returns true if x <= y, throws no exceptions except on Signaling NaNs
N     *
N     * We're less than or equal if one of N or Z is set, V clear
N     */
N
N#define islessgreater(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? __ARM_islessgreaterf((x), (y)) \
N        : __ARM_islessgreater((x), (y)))
X#define islessgreater(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? __ARM_islessgreaterf((x), (y))         : __ARM_islessgreater((x), (y)))
N    /*
N     * Returns true if x <> y, throws no exceptions except on Signaling NaNs
N     * Unfortunately this test is too complicated to do in a macro without
N     * evaluating x & y twice.  Shame really...
N     */
N
N#define isnan(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnanf(x) \
N        : __ARM_isnan(x))
X#define isnan(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnanf(x)         : __ARM_isnan(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isnormal(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_isnormalf(x) \
N        : __ARM_isnormal(x))
X#define isnormal(x)     ((sizeof(x) == sizeof(float))         ? __ARM_isnormalf(x)         : __ARM_isnormal(x))
N    /*
N     * Returns TRUE if x is a NaN.
N     */
N
N#define isunordered(x, y) \
N    (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float))) \
N        ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000) \
N        : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
X#define isunordered(x, y)     (((sizeof(x) == sizeof(float)) && (sizeof(y) == sizeof(float)))         ? ((__ARM_fcmp4((x), (y)) & 0x10000000) == 0x10000000)         : ((__ARM_dcmp4((x), (y)) & 0x10000000) == 0x10000000))
N    /*
N     * Returns true if x ? y, throws no exceptions except on Signaling NaNs
N     * Unordered occurs if and only if the V bit is set
N     */
N
Nextern _ARMABI double lgamma (double /*x*/);
Xextern __declspec(__nothrow) double lgamma (double  );
N    /*
N     * The log of the absolute value of the gamma function of x. The sign
N     * of the gamma function of x is returned in the global `signgam'.
N     */
Nextern _ARMABI double log1p(double /*x*/);
Xextern __declspec(__nothrow) double log1p(double  );
N    /*
N     * log(1+x). (More accurate than just coding log(1+x), for small x.)
N     */
Nextern _ARMABI double logb(double /*x*/);
Xextern __declspec(__nothrow) double logb(double  );
N    /*
N     * Like ilogb but returns a double.
N     */
Nextern _ARMABI float logbf(float /*x*/);
Xextern __declspec(__nothrow) float logbf(float  );
N    /*
N     * Like logb but takes and returns float
N     */
Nextern _ARMABI long double logbl(long double /*x*/);
Xextern __declspec(__nothrow) long double logbl(long double  );
N    /*
N     * Like logb but takes and returns long double
N     */
Nextern _ARMABI double nextafter(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double nextafter(double  , double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nextafterf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float nextafterf(float  , float  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nextafterl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nextafterl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double nexttoward(double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) double nexttoward(double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI float nexttowardf(float /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) float nexttowardf(float  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI long double nexttowardl(long double /*x*/, long double /*y*/);
Xextern __declspec(__nothrow) long double nexttowardl(long double  , long double  );
N    /*
N     * Returns the next representable number after x, in the
N     * direction toward y.
N     */
Nextern _ARMABI double remainder(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double remainder(double  , double  );
N    /*
N     * Returns the remainder of x by y, in the IEEE 754 sense.
N     */
Nextern _ARMABI_FPEXCEPT double rint(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double rint(double  );
N    /*
N     * Rounds x to an integer, in the IEEE 754 sense.
N     */
Nextern _ARMABI double scalbln(double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) double scalbln(double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalblnf(float /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) float scalblnf(float  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalblnl(long double /*x*/, long int /*n*/);
Xextern __declspec(__nothrow) long double scalblnl(long double  , long int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI double scalbn(double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) double scalbn(double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI float scalbnf(float /*x*/, int /*n*/);
Xextern __declspec(__nothrow) float scalbnf(float  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
Nextern _ARMABI long double scalbnl(long double /*x*/, int /*n*/);
Xextern __declspec(__nothrow) long double scalbnl(long double  , int  );
N    /*
N     * Compute x times 2^n quickly.
N     */
N#define signbit(x) \
N    ((sizeof(x) == sizeof(float)) \
N        ? __ARM_signbitf(x) \
N        : __ARM_signbit(x))
X#define signbit(x)     ((sizeof(x) == sizeof(float))         ? __ARM_signbitf(x)         : __ARM_signbit(x))
N    /*
N     * Returns the signbit of x, size independent macro
N     */
N#endif
N
N/* C99 float versions of functions.  math.h has always reserved these
N   identifiers for this purpose (7.13.4). */
Nextern _ARMABI_PURE float _fabsf(float); /* old ARM name */
Xextern __declspec(__nothrow) __attribute__((const)) float _fabsf(float);  
N_ARMABI_INLINE _ARMABI_PURE float fabsf(float __f) { return _fabsf(__f); }
Xinline __declspec(__nothrow) __attribute__((const)) float fabsf(float __f) { return _fabsf(__f); }
Nextern _ARMABI float sinf(float /*x*/);
Xextern __declspec(__nothrow) float sinf(float  );
Nextern _ARMABI float cosf(float /*x*/);
Xextern __declspec(__nothrow) float cosf(float  );
Nextern _ARMABI float tanf(float /*x*/);
Xextern __declspec(__nothrow) float tanf(float  );
Nextern _ARMABI float acosf(float /*x*/);
Xextern __declspec(__nothrow) float acosf(float  );
Nextern _ARMABI float asinf(float /*x*/);
Xextern __declspec(__nothrow) float asinf(float  );
Nextern _ARMABI float atanf(float /*x*/);
Xextern __declspec(__nothrow) float atanf(float  );
Nextern _ARMABI float atan2f(float /*y*/, float /*x*/);
Xextern __declspec(__nothrow) float atan2f(float  , float  );
Nextern _ARMABI float sinhf(float /*x*/);
Xextern __declspec(__nothrow) float sinhf(float  );
Nextern _ARMABI float coshf(float /*x*/);
Xextern __declspec(__nothrow) float coshf(float  );
Nextern _ARMABI float tanhf(float /*x*/);
Xextern __declspec(__nothrow) float tanhf(float  );
Nextern _ARMABI float expf(float /*x*/);
Xextern __declspec(__nothrow) float expf(float  );
Nextern _ARMABI float logf(float /*x*/);
Xextern __declspec(__nothrow) float logf(float  );
Nextern _ARMABI float log10f(float /*x*/);
Xextern __declspec(__nothrow) float log10f(float  );
Nextern _ARMABI float powf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float powf(float  , float  );
Nextern _ARMABI float sqrtf(float /*x*/);
Xextern __declspec(__nothrow) float sqrtf(float  );
Nextern _ARMABI float ldexpf(float /*x*/, int /*exp*/);
Xextern __declspec(__nothrow) float ldexpf(float  , int  );
Nextern _ARMABI float frexpf(float /*value*/, int * /*exp*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float frexpf(float  , int *  ) __attribute__((__nonnull__(2)));
Nextern _ARMABI_PURE float ceilf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float ceilf(float  );
Nextern _ARMABI_PURE float floorf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float floorf(float  );
Nextern _ARMABI float fmodf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float fmodf(float  , float  );
Nextern _ARMABI float modff(float /*value*/, float * /*iptr*/) __attribute__((__nonnull__(2)));
Xextern __declspec(__nothrow) float modff(float  , float *  ) __attribute__((__nonnull__(2)));
N
N/* C99 long double versions of functions. */
N/* (also need to have 'using' declarations below) */
N#define _ARMDEFLD1(f) \
N    _ARMABI long double f##l(long double /*x*/)
X#define _ARMDEFLD1(f)     _ARMABI long double f##l(long double  )
N
N#define _ARMDEFLD1P(f, T) \
N    _ARMABI long double f##l(long double /*x*/, T /*p*/)
X#define _ARMDEFLD1P(f, T)     _ARMABI long double f##l(long double  , T  )
N
N#define _ARMDEFLD2(f) \
N    _ARMABI long double f##l(long double /*x*/, long double /*y*/)
X#define _ARMDEFLD2(f)     _ARMABI long double f##l(long double  , long double  )
N
N/*
N * Long double versions of C89 functions can be defined
N * unconditionally, because C89 reserved these names in "future
N * library directions".
N */
N_ARMDEFLD1(acos);
X__declspec(__nothrow) long double acosl(long double );
N_ARMDEFLD1(asin);
X__declspec(__nothrow) long double asinl(long double );
N_ARMDEFLD1(atan);
X__declspec(__nothrow) long double atanl(long double );
N_ARMDEFLD2(atan2);
X__declspec(__nothrow) long double atan2l(long double , long double );
N_ARMDEFLD1(ceil);
X__declspec(__nothrow) long double ceill(long double );
N_ARMDEFLD1(cos);
X__declspec(__nothrow) long double cosl(long double );
N_ARMDEFLD1(cosh);
X__declspec(__nothrow) long double coshl(long double );
N_ARMDEFLD1(exp);
X__declspec(__nothrow) long double expl(long double );
N_ARMDEFLD1(fabs);
X__declspec(__nothrow) long double fabsl(long double );
N_ARMDEFLD1(floor);
X__declspec(__nothrow) long double floorl(long double );
N_ARMDEFLD2(fmod);
X__declspec(__nothrow) long double fmodl(long double , long double );
N_ARMDEFLD1P(frexp, int*) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double frexpl(long double , int* ) __attribute__((__nonnull__(2)));
N_ARMDEFLD1P(ldexp, int);
X__declspec(__nothrow) long double ldexpl(long double , int );
N_ARMDEFLD1(log);
X__declspec(__nothrow) long double logl(long double );
N_ARMDEFLD1(log10);
X__declspec(__nothrow) long double log10l(long double );
N_ARMABI long double modfl(long double /*x*/, long double * /*p*/) __attribute__((__nonnull__(2)));
X__declspec(__nothrow) long double modfl(long double  , long double *  ) __attribute__((__nonnull__(2)));
N_ARMDEFLD2(pow);
X__declspec(__nothrow) long double powl(long double , long double );
N_ARMDEFLD1(sin);
X__declspec(__nothrow) long double sinl(long double );
N_ARMDEFLD1(sinh);
X__declspec(__nothrow) long double sinhl(long double );
N_ARMDEFLD1(sqrt);
X__declspec(__nothrow) long double sqrtl(long double );
N_ARMDEFLD1(tan);
X__declspec(__nothrow) long double tanl(long double );
N_ARMDEFLD1(tanh);
X__declspec(__nothrow) long double tanhl(long double );
N
N#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
X#if !0L || 1L
N
N/*
N * C99 float and long double versions of extra-C89 functions.
N */
Nextern _ARMABI float acoshf(float /*x*/);
Xextern __declspec(__nothrow) float acoshf(float  );
N_ARMDEFLD1(acosh);
X__declspec(__nothrow) long double acoshl(long double );
Nextern _ARMABI float asinhf(float /*x*/);
Xextern __declspec(__nothrow) float asinhf(float  );
N_ARMDEFLD1(asinh);
X__declspec(__nothrow) long double asinhl(long double );
Nextern _ARMABI float atanhf(float /*x*/);
Xextern __declspec(__nothrow) float atanhf(float  );
N_ARMDEFLD1(atanh);
X__declspec(__nothrow) long double atanhl(long double );
N_ARMDEFLD2(copysign);
X__declspec(__nothrow) long double copysignl(long double , long double );
Nextern _ARMABI float cbrtf(float /*x*/);
Xextern __declspec(__nothrow) float cbrtf(float  );
N_ARMDEFLD1(cbrt);
X__declspec(__nothrow) long double cbrtl(long double );
Nextern _ARMABI float erff(float /*x*/);
Xextern __declspec(__nothrow) float erff(float  );
N_ARMDEFLD1(erf);
X__declspec(__nothrow) long double erfl(long double );
Nextern _ARMABI float erfcf(float /*x*/);
Xextern __declspec(__nothrow) float erfcf(float  );
N_ARMDEFLD1(erfc);
X__declspec(__nothrow) long double erfcl(long double );
Nextern _ARMABI float expm1f(float /*x*/);
Xextern __declspec(__nothrow) float expm1f(float  );
N_ARMDEFLD1(expm1);
X__declspec(__nothrow) long double expm1l(long double );
Nextern _ARMABI float log1pf(float /*x*/);
Xextern __declspec(__nothrow) float log1pf(float  );
N_ARMDEFLD1(log1p);
X__declspec(__nothrow) long double log1pl(long double );
Nextern _ARMABI float hypotf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float hypotf(float  , float  );
N_ARMDEFLD2(hypot);
X__declspec(__nothrow) long double hypotl(long double , long double );
Nextern _ARMABI float lgammaf(float /*x*/);
Xextern __declspec(__nothrow) float lgammaf(float  );
N_ARMDEFLD1(lgamma);
X__declspec(__nothrow) long double lgammal(long double );
Nextern _ARMABI float remainderf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float remainderf(float  , float  );
N_ARMDEFLD2(remainder);
X__declspec(__nothrow) long double remainderl(long double , long double );
Nextern _ARMABI float rintf(float /*x*/);
Xextern __declspec(__nothrow) float rintf(float  );
N_ARMDEFLD1(rint);
X__declspec(__nothrow) long double rintl(long double );
N
N#endif
N
N#if (defined(__clang__) && !defined(__STRICT_ANSI)) || defined(__USE_C99_MATH)
X#if (0L && !0L) || 1L
N/*
N * Functions new in C99.
N */
Nextern _ARMABI double exp2(double /*x*/); /* * 2.^x. */
Xextern __declspec(__nothrow) double exp2(double  );  
Nextern _ARMABI float exp2f(float /*x*/);
Xextern __declspec(__nothrow) float exp2f(float  );
N_ARMDEFLD1(exp2);
X__declspec(__nothrow) long double exp2l(long double );
Nextern _ARMABI double fdim(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) double fdim(double  , double  );
Nextern _ARMABI float fdimf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) float fdimf(float  , float  );
N_ARMDEFLD2(fdim);
X__declspec(__nothrow) long double fdiml(long double , long double );
N#ifdef __FP_FAST_FMA
S#define FP_FAST_FMA
N#endif
N#ifdef __FP_FAST_FMAF
N#define FP_FAST_FMAF
N#endif
N#ifdef __FP_FAST_FMAL
S#define FP_FAST_FMAL
N#endif
Nextern _ARMABI double fma(double /*x*/, double /*y*/, double /*z*/);
Xextern __declspec(__nothrow) double fma(double  , double  , double  );
Nextern _ARMABI float fmaf(float /*x*/, float /*y*/, float /*z*/);
Xextern __declspec(__nothrow) float fmaf(float  , float  , float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long double fmal(long double __x, long double __y, long double __z) \
N    { return (long double)fma((double)__x, (double)__y, (double)__z); }
Xinline __declspec(__nothrow) long double fmal(long double __x, long double __y, long double __z)     { return (long double)fma((double)__x, (double)__y, (double)__z); }
N#endif
Nextern _ARMABI_FPEXCEPT double fmax(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fmax(double  , double  );
Nextern _ARMABI_FPEXCEPT float fmaxf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) float fmaxf(float  , float  );
N_ARMDEFLD2(fmax);
X__declspec(__nothrow) long double fmaxl(long double , long double );
Nextern _ARMABI_FPEXCEPT double fmin(double /*x*/, double /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) double fmin(double  , double  );
Nextern _ARMABI_FPEXCEPT float fminf(float /*x*/, float /*y*/);
Xextern __declspec(__nothrow) __attribute__((const)) float fminf(float  , float  );
N_ARMDEFLD2(fmin);
X__declspec(__nothrow) long double fminl(long double , long double );
Nextern _ARMABI double log2(double /*x*/); /* * log base 2 of x. */
Xextern __declspec(__nothrow) double log2(double  );  
Nextern _ARMABI float log2f(float /*x*/);
Xextern __declspec(__nothrow) float log2f(float  );
N_ARMDEFLD1(log2);
X__declspec(__nothrow) long double log2l(long double );
Nextern _ARMABI long lrint(double /*x*/);
Xextern __declspec(__nothrow) long lrint(double  );
Nextern _ARMABI long lrintf(float /*x*/);
Xextern __declspec(__nothrow) long lrintf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long lrintl(long double __x) \
N    { return lrint((double)__x); }
Xinline __declspec(__nothrow) long lrintl(long double __x)     { return lrint((double)__x); }
N#endif
Nextern _ARMABI __LONGLONG llrint(double /*x*/);
Xextern __declspec(__nothrow) long long llrint(double  );
Nextern _ARMABI __LONGLONG llrintf(float /*x*/);
Xextern __declspec(__nothrow) long long llrintf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI __LONGLONG llrintl(long double __x) \
N    { return llrint((double)__x); }
Xinline __declspec(__nothrow) long long llrintl(long double __x)     { return llrint((double)__x); }
N#endif
Nextern _ARMABI long lround(double /*x*/);
Xextern __declspec(__nothrow) long lround(double  );
Nextern _ARMABI long lroundf(float /*x*/);
Xextern __declspec(__nothrow) long lroundf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI long lroundl(long double __x) \
N    { return lround((double)__x); }
Xinline __declspec(__nothrow) long lroundl(long double __x)     { return lround((double)__x); }
N#endif
Nextern _ARMABI __LONGLONG llround(double /*x*/);
Xextern __declspec(__nothrow) long long llround(double  );
Nextern _ARMABI __LONGLONG llroundf(float /*x*/);
Xextern __declspec(__nothrow) long long llroundf(float  );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI __LONGLONG llroundl(long double __x) \
N    { return llround((double)__x); }
Xinline __declspec(__nothrow) long long llroundl(long double __x)     { return llround((double)__x); }
N#endif
Nextern _ARMABI_PURE double nan(const char */*tagp*/);
Xextern __declspec(__nothrow) __attribute__((const)) double nan(const char * );
Nextern _ARMABI_PURE float nanf(const char */*tagp*/);
Xextern __declspec(__nothrow) __attribute__((const)) float nanf(const char * );
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE _ARMABI_PURE long double nanl(const char *__t) \
N    { return (long double)nan(__t); }
Xinline __declspec(__nothrow) __attribute__((const)) long double nanl(const char *__t)     { return (long double)nan(__t); }
N#endif
N#if defined(_WANT_SNAN) && defined(__SUPPORT_SNAN__)
X#if 0L && 0L
Sextern _ARMABI_PURE double nans(const char */*tagp*/);
Sextern _ARMABI_PURE float nansf(const char */*tagp*/);
S#ifdef __HAVE_LONGDOUBLE
S_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t) \
S    { return (long double)nans(__t); }
X_ARMABI_INLINE _ARMABI_FPEXCEPT long double nansl(const char *__t)     { return (long double)nans(__t); }
S#endif
N#endif 
Nextern _ARMABI_FPEXCEPT double nearbyint(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double nearbyint(double  );
Nextern _ARMABI_FPEXCEPT float nearbyintf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float nearbyintf(float  );
N_ARMDEFLD1(nearbyint);
X__declspec(__nothrow) long double nearbyintl(long double );
Nextern  double remquo(double /*x*/, double /*y*/, int */*quo*/);
Nextern  float remquof(float /*x*/, float /*y*/, int */*quo*/);
N#ifdef __HAVE_LONGDOUBLE
N_ARMABI_INLINE long double remquol(long double __x, long double __y, int *__q) \
N    { return (long double)remquo((double)__x, (double)__y, __q); }
Xinline long double remquol(long double __x, long double __y, int *__q)     { return (long double)remquo((double)__x, (double)__y, __q); }
N#endif
Nextern _ARMABI_FPEXCEPT double round(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double round(double  );
Nextern _ARMABI_FPEXCEPT float roundf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float roundf(float  );
N_ARMDEFLD1(round);
X__declspec(__nothrow) long double roundl(long double );
Nextern _ARMABI double tgamma(double /*x*/); /* * The gamma function of x. */
Xextern __declspec(__nothrow) double tgamma(double  );  
Nextern _ARMABI float tgammaf(float /*x*/);
Xextern __declspec(__nothrow) float tgammaf(float  );
N_ARMDEFLD1(tgamma);
X__declspec(__nothrow) long double tgammal(long double );
Nextern _ARMABI_FPEXCEPT double trunc(double /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) double trunc(double  );
Nextern _ARMABI_FPEXCEPT float truncf(float /*x*/);
Xextern __declspec(__nothrow) __attribute__((const)) float truncf(float  );
N_ARMDEFLD1(trunc);
X__declspec(__nothrow) long double truncl(long double );
N#endif
N
N#undef _ARMDEFLD1
N#undef _ARMDEFLD1P
N#undef _ARMDEFLD2
N
N#if defined(__cplusplus) && ((!defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)) || defined(__ARMCOMPILER_LIBCXX))
X#if 0L && ((!0L || 1L) || 0L)
S  extern "C++" {
S    inline int (fpclassify)(double __x) { return fpclassify(__x); }
S    inline bool (isfinite)(double __x) { return isfinite(__x); }
S    inline bool (isgreater)(double __x, double __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(double __x, double __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(double __x) { return isinf(__x); }
S    inline bool (isless)(double __x, double __y) { return isless(__x, __y); }
S    inline bool (islessequal)(double __x, double __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(double __x, double __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(double __x) { return isnan(__x); }
S    inline bool (isnormal)(double __x) { return isnormal(__x); }
S    inline bool (isunordered)(double __x, double __y) { return isunordered(__x, __y); }
S
S  }
N#endif
N
N#if defined(__cplusplus) && !defined(__ARMCOMPILER_LIBCXX)
X#if 0L && !0L
S  extern "C++" {
S    inline float abs(float __x)   { return fabsf(__x); }
S    inline float acos(float __x)  { return acosf(__x); }
S    inline float asin(float __x)  { return asinf(__x); }
S    inline float atan(float __x)  { return atanf(__x); }
S    inline float atan2(float __y, float __x)    { return atan2f(__y,__x); }
S    inline float ceil(float __x)  { return ceilf(__x); }
S    inline float cos(float __x)   { return cosf(__x); }
S    inline float cosh(float __x)  { return coshf(__x); }
S    inline float exp(float __x)   { return expf(__x); }
S    inline float fabs(float __x)  { return fabsf(__x); }
S    inline float floor(float __x) { return floorf(__x); }
S    inline float fmod(float __x, float __y)     { return fmodf(__x, __y); }
S    float frexp(float __x, int* __exp) __attribute__((__nonnull__(2)));
S    inline float frexp(float __x, int* __exp)   { return frexpf(__x, __exp); }
S    inline float ldexp(float __x, int __exp)    { return ldexpf(__x, __exp);}
S    inline float log(float __x)   { return logf(__x); }
S    inline float log10(float __x) { return log10f(__x); }
S    float modf(float __x, float* __iptr) __attribute__((__nonnull__(2)));
S    inline float modf(float __x, float* __iptr) { return modff(__x, __iptr); }
S    inline float pow(float __x, float __y)      { return powf(__x,__y); }
S    inline float pow(float __x, int __y)     { return powf(__x, (float)__y); }
S    inline float sin(float __x)   { return sinf(__x); }
S    inline float sinh(float __x)  { return sinhf(__x); }
S    inline float sqrt(float __x)  { return sqrtf(__x); }
S    inline float _sqrt(float __x) { return _sqrtf(__x); }
S    inline float tan(float __x)   { return tanf(__x); }
S    inline float tanh(float __x)  { return tanhf(__x); }
S
S    inline double abs(double __x) { return fabs(__x); }
S    inline double pow(double __x, int __y)
S                { return pow(__x, (double) __y); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double abs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double acos(long double __x)
S                { return (long double)acosl(__x); }
S    inline long double asin(long double __x)
S                { return (long double)asinl(__x); }
S    inline long double atan(long double __x)
S                { return (long double)atanl(__x); }
S    inline long double atan2(long double __y, long double __x)
S                { return (long double)atan2l(__y, __x); }
S    inline long double ceil(long double __x)
S                { return (long double)ceill( __x); }
S    inline long double cos(long double __x)
S                { return (long double)cosl(__x); }
S    inline long double cosh(long double __x)
S                { return (long double)coshl(__x); }
S    inline long double exp(long double __x)
S                { return (long double)expl(__x); }
S    inline long double fabs(long double __x)
S                { return (long double)fabsl(__x); }
S    inline long double floor(long double __x)
S                { return (long double)floorl(__x); }
S    inline long double fmod(long double __x, long double __y)
S                { return (long double)fmodl(__x, __y); }
S    long double frexp(long double __x, int* __p) __attribute__((__nonnull__(2)));
S    inline long double frexp(long double __x, int* __p)
S                { return (long double)frexpl(__x, __p); }
S    inline long double ldexp(long double __x, int __exp)
S                { return (long double)ldexpl(__x, __exp); }
S    inline long double log(long double __x)
S                { return (long double)logl(__x); }
S    inline long double log10(long double __x)
S                { return (long double)log10l(__x); }
S    long double modf(long double __x, long double* __p) __attribute__((__nonnull__(2)));
S    inline long double modf(long double __x, long double* __p)
S                { return (long double)modfl(__x, __p); }
S    inline long double pow(long double __x, long double __y)
S                { return (long double)powl(__x, __y); }
S    inline long double pow(long double __x, int __y)
S                { return (long double)powl(__x, __y); }
S    inline long double sin(long double __x)
S                { return (long double)sinl(__x); }
S    inline long double sinh(long double __x)
S                { return (long double)sinhl(__x); }
S    inline long double sqrt(long double __x)
S                { return (long double)sqrtl(__x); }
S    inline long double _sqrt(long double __x)
S                { return (long double)_sqrt((double) __x); }
S    inline long double tan(long double __x)
S                { return (long double)tanl(__x); }
S    inline long double tanh(long double __x)
S                { return (long double)tanhl(__x); }
S#endif
S
S#if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S    inline float acosh(float __x) { return acoshf(__x); }
S    inline float asinh(float __x) { return asinhf(__x); }
S    inline float atanh(float __x) { return atanhf(__x); }
S    inline float cbrt(float __x) { return cbrtf(__x); }
S    inline float erf(float __x) { return erff(__x); }
S    inline float erfc(float __x) { return erfcf(__x); }
S    inline float expm1(float __x) { return expm1f(__x); }
S    inline float log1p(float __x) { return log1pf(__x); }
S    inline float hypot(float __x, float __y) { return hypotf(__x, __y); }
S    inline float lgamma(float __x) { return lgammaf(__x); }
S    inline float remainder(float __x, float __y) { return remainderf(__x, __y); }
S    inline float rint(float __x) { return rintf(__x); }
S#endif
S
S#ifdef __USE_C99_MATH
S    inline float exp2(float __x) { return exp2f(__x); }
S    inline float fdim(float __x, float __y) { return fdimf(__x, __y); }
S    inline float fma(float __x, float __y, float __z) { return fmaf(__x, __y, __z); }
S    inline float fmax(float __x, float __y) { return fmaxf(__x, __y); }
S    inline float fmin(float __x, float __y) { return fminf(__x, __y); }
S    inline float log2(float __x) { return log2f(__x); }
S    inline _ARMABI long lrint(float __x) { return lrintf(__x); }
S    inline _ARMABI __LONGLONG llrint(float __x) { return llrintf(__x); }
S    inline _ARMABI long lround(float __x) { return lroundf(__x); }
S    inline _ARMABI __LONGLONG llround(float __x) { return llroundf(__x); }
S    inline _ARMABI_FPEXCEPT float nearbyint(float __x) { return nearbyintf(__x); }
S    inline float remquo(float __x, float __y, int *__q) { return remquof(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT float round(float __x) { return roundf(__x); }
S    inline float tgamma(float __x) { return tgammaf(__x); }
S    inline _ARMABI_FPEXCEPT float trunc(float __x) { return truncf(__x); }
S
S    inline int (fpclassify)(float __x) { return fpclassify(__x); }
S    inline bool (isfinite)(float __x) { return isfinite(__x); }
S    inline bool (isgreater)(float __x, float __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(float __x, float __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(float __x) { return isinf(__x); }
S    inline bool (isless)(float __x, float __y) { return isless(__x, __y); }
S    inline bool (islessequal)(float __x, float __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(float __x, float __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(float __x) { return isnan(__x); }
S    inline bool (isnormal)(float __x) { return isnormal(__x); }
S    inline bool (isunordered)(float __x, float __y) { return isunordered(__x, __y); }
S
S#ifdef __HAVE_LONGDOUBLE
S    inline long double acosh(long double __x) { return acoshl(__x); }
S    inline long double asinh(long double __x) { return asinhl(__x); }
S    inline long double atanh(long double __x) { return atanhl(__x); }
S    inline long double cbrt(long double __x) { return cbrtl(__x); }
S    inline long double erf(long double __x) { return erfl(__x); }
S    inline long double erfc(long double __x) { return erfcl(__x); }
S    inline long double expm1(long double __x) { return expm1l(__x); }
S    inline long double log1p(long double __x) { return log1pl(__x); }
S    inline long double hypot(long double __x, long double __y) { return hypotl(__x, __y); }
S    inline long double lgamma(long double __x) { return lgammal(__x); }
S    inline long double remainder(long double __x, long double __y) { return remainderl(__x, __y); }
S    inline long double rint(long double __x) { return rintl(__x); }
S    inline long double exp2(long double __x) { return exp2l(__x); }
S    inline long double fdim(long double __x, long double __y) { return fdiml(__x, __y); }
S    inline long double fma(long double __x, long double __y, long double __z) { return fmal(__x, __y, __z); }
S    inline long double fmax(long double __x, long double __y) { return fmaxl(__x, __y); }
S    inline long double fmin(long double __x, long double __y) { return fminl(__x, __y); }
S    inline long double log2(long double __x) { return log2l(__x); }
S    inline _ARMABI long lrint(long double __x) { return lrintl(__x); }
S    inline _ARMABI __LONGLONG llrint(long double __x) { return llrintl(__x); }
S    inline _ARMABI long lround(long double __x) { return lroundl(__x); }
S    inline _ARMABI __LONGLONG llround(long double __x) { return llroundl(__x); }
S    inline _ARMABI_FPEXCEPT long double nearbyint(long double __x) { return nearbyintl(__x); }
S    inline long double remquo(long double __x, long double __y, int *__q) { return remquol(__x, __y, __q); }
S    inline _ARMABI_FPEXCEPT long double round(long double __x) { return roundl(__x); }
S    inline long double tgamma(long double __x) { return tgammal(__x); }
S    inline _ARMABI_FPEXCEPT long double trunc(long double __x) { return truncl(__x); }
S    inline int (fpclassify)(long double __x) { return fpclassify(__x); }
S    inline bool (isfinite)(long double __x) { return isfinite(__x); }
S    inline bool (isgreater)(long double __x, long double __y) { return isgreater(__x, __y); }
S    inline bool (isgreaterequal)(long double __x, long double __y) { return isgreaterequal(__x, __y); }
S    inline bool (isinf)(long double __x) { return isinf(__x); }
S    inline bool (isless)(long double __x, long double __y) { return isless(__x, __y); }
S    inline bool (islessequal)(long double __x, long double __y) { return islessequal(__x, __y); }
S    inline bool (islessgreater)(long double __x, long double __y) { return islessgreater(__x, __y); }
S    inline bool (isnan)(long double __x) { return isnan(__x); }
S    inline bool (isnormal)(long double __x) { return isnormal(__x); }
S    inline bool (isunordered)(long double __x, long double __y) { return isunordered(__x, __y); }
S#endif
S
S#undef fpclassify
S#undef isfinite
S#undef isgreater
S#undef isgreaterequal
S#undef isinf
S#undef isless
S#undef islessequal
S#undef islessgreater
S#undef isnan
S#undef isnormal
S#undef isunordered
S
S#endif
S
S  }
N#endif
N
N    #ifdef __cplusplus
S        }  /* extern "C" */
S      }  /* namespace std */
N    #endif
N  #endif /* __MATH_DECLS */
N
N  #if _AEABI_PORTABILITY_LEVEL != 0 && !defined _AEABI_PORTABLE
X  #if _AEABI_PORTABILITY_LEVEL != 0 && !0L
S    #define _AEABI_PORTABLE
N  #endif
N
N  #if defined(__cplusplus) && !defined(__MATH_NO_EXPORTS)
X  #if 0L && !0L
S    using ::std::__use_accurate_range_reduction;
S    #ifndef __ARMCOMPILER_LIBCXX
S      using ::std::abs;
S    #endif
S    using ::std::acos;
S    using ::std::asin;
S    using ::std::atan2;
S    using ::std::atan;
S    using ::std::ceil;
S    using ::std::cos;
S    using ::std::cosh;
S    using ::std::exp;
S    using ::std::fabs;
S    using ::std::floor;
S    using ::std::fmod;
S    using ::std::frexp;
S    using ::std::ldexp;
S    using ::std::log10;
S    using ::std::log;
S    using ::std::modf;
S    using ::std::pow;
S    using ::std::sin;
S    using ::std::sinh;
S    using ::std::sqrt;
S    using ::std::_sqrt;
S    using ::std::_sqrtf;
S    using ::std::tan;
S    using ::std::tanh;
S    using ::std::_fabsf;
S    /* C99 float and long double versions in already-C89-reserved namespace */
S    using ::std::acosf;
S    using ::std::acosl;
S    using ::std::asinf;
S    using ::std::asinl;
S    using ::std::atan2f;
S    using ::std::atan2l;
S    using ::std::atanf;
S    using ::std::atanl;
S    using ::std::ceilf;
S    using ::std::ceill;
S    using ::std::cosf;
S    using ::std::coshf;
S    using ::std::coshl;
S    using ::std::cosl;
S    using ::std::expf;
S    using ::std::expl;
S    using ::std::fabsf;
S    using ::std::fabsl;
S    using ::std::floorf;
S    using ::std::floorl;
S    using ::std::fmodf;
S    using ::std::fmodl;
S    using ::std::frexpf;
S    using ::std::frexpl;
S    using ::std::ldexpf;
S    using ::std::ldexpl;
S    using ::std::log10f;
S    using ::std::log10l;
S    using ::std::logf;
S    using ::std::logl;
S    using ::std::modff;
S    using ::std::modfl;
S    using ::std::powf;
S    using ::std::powl;
S    using ::std::sinf;
S    using ::std::sinhf;
S    using ::std::sinhl;
S    using ::std::sinl;
S    using ::std::sqrtf;
S    using ::std::sqrtl;
S    using ::std::tanf;
S    using ::std::tanhf;
S    using ::std::tanhl;
S    using ::std::tanl;
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      /* C99 additions which for historical reasons appear in non-strict mode */
S      using ::std::acosh;
S      using ::std::asinh;
S      using ::std::atanh;
S      using ::std::cbrt;
S      using ::std::copysign;
S      using ::std::copysignf;
S      using ::std::erf;
S      using ::std::erfc;
S      using ::std::expm1;
S      using ::std::hypot;
S      using ::std::ilogb;
S      using ::std::ilogbf;
S      using ::std::ilogbl;
S      using ::std::lgamma;
S      using ::std::log1p;
S      using ::std::logb;
S      using ::std::logbf;
S      using ::std::logbl;
S      using ::std::nextafter;
S      using ::std::nextafterf;
S      using ::std::nextafterl;
S      using ::std::nexttoward;
S      using ::std::nexttowardf;
S      using ::std::nexttowardl;
S      using ::std::remainder;
S      using ::std::rint;
S      using ::std::scalbln;
S      using ::std::scalblnf;
S      using ::std::scalblnl;
S      using ::std::scalbn;
S      using ::std::scalbnf;
S      using ::std::scalbnl;
S      using ::std::math_errhandling;
S      using ::std::acoshf;
S      using ::std::acoshl;
S      using ::std::asinhf;
S      using ::std::asinhl;
S      using ::std::atanhf;
S      using ::std::atanhl;
S      using ::std::copysignl;
S      using ::std::cbrtf;
S      using ::std::cbrtl;
S      using ::std::erff;
S      using ::std::erfl;
S      using ::std::erfcf;
S      using ::std::erfcl;
S      using ::std::expm1f;
S      using ::std::expm1l;
S      using ::std::log1pf;
S      using ::std::log1pl;
S      using ::std::hypotf;
S      using ::std::hypotl;
S      using ::std::lgammaf;
S      using ::std::lgammal;
S      using ::std::remainderf;
S      using ::std::remainderl;
S      using ::std::rintf;
S      using ::std::rintl;
S      /* New in C99. */
S      using ::std::float_t;
S      using ::std::double_t;
S    #endif
S    #if (defined(__clang__) && !defined(__STRICT_ANSI)) || defined(__USE_C99_MATH)
S      /* Functions new in C99. */
S      using ::std::exp2;
S      using ::std::exp2f;
S      using ::std::exp2l;
S      using ::std::fdim;
S      using ::std::fdimf;
S      using ::std::fdiml;
S      using ::std::fma;
S      using ::std::fmaf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::fmal;
S#endif
S      using ::std::fmax;
S      using ::std::fmaxf;
S      using ::std::fmaxl;
S      using ::std::fmin;
S      using ::std::fminf;
S      using ::std::fminl;
S      using ::std::log2;
S      using ::std::log2f;
S      using ::std::log2l;
S      using ::std::lrint;
S      using ::std::lrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lrintl;
S#endif
S      using ::std::llrint;
S      using ::std::llrintf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llrintl;
S#endif
S      using ::std::lround;
S      using ::std::lroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::lroundl;
S#endif
S      using ::std::llround;
S      using ::std::llroundf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::llroundl;
S#endif
S      using ::std::nan;
S      using ::std::nanf;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::nanl;
S#endif
S      using ::std::nearbyint;
S      using ::std::nearbyintf;
S      using ::std::nearbyintl;
S      using ::std::remquo;
S      using ::std::remquof;
S#ifdef __HAVE_LONGDOUBLE
S      using ::std::remquol;
S#endif
S      using ::std::round;
S      using ::std::roundf;
S      using ::std::roundl;
S      using ::std::tgamma;
S      using ::std::tgammaf;
S      using ::std::tgammal;
S      using ::std::trunc;
S      using ::std::truncf;
S      using ::std::truncl;
S    #endif
S
S    #if !defined(__STRICT_ANSI__) || defined(__USE_C99_MATH)
S      using ::std::fpclassify;
S      using ::std::isfinite;
S      using ::std::isgreater;
S      using ::std::isgreaterequal;
S      using ::std::isinf;
S      using ::std::isless;
S      using ::std::islessequal;
S      using ::std::islessgreater;
S      using ::std::isnan;
S      using ::std::isnormal;
S      using ::std::isunordered;
S    #endif
N  #endif
N
N#undef __LONGLONG
N
N#endif /* __math_h */
N
N/* end of math.h */
L 48 "..\..\..\..\..\..\Drivers\BSP\Components\lps22hb\lps22hb_reg.h" 2
N
N/** @addtogroup LPS22HB
N  * @{
N  *
N  */
N
N/** @defgroup LPS22HB_sensors_common_types
N  * @{
N  *
N  */
N
N#ifndef MEMS_SHARED_TYPES
N#define MEMS_SHARED_TYPES
N
N/**
N  * @defgroup axisXbitXX_t
N  * @brief    These unions are useful to represent different sensors data type.
N  *           These unions are not need by the driver.
N  *
N  *           REMOVING the unions you are compliant with:
N  *           MISRA-C 2012 [Rule 19.2] -> " Union are not allowed "
N  *
N  * @{
N  *
N  */
N
Ntypedef union{
N  int16_t i16bit[3];
N  uint8_t u8bit[6];
N} axis3bit16_t;
N
Ntypedef union{
N  int16_t i16bit;
N  uint8_t u8bit[2];
N} axis1bit16_t;
N
Ntypedef union{
N  int32_t i32bit[3];
N  uint8_t u8bit[12];
N} axis3bit32_t;
N
Ntypedef union{
N  int32_t i32bit;
N  uint8_t u8bit[4];
N} axis1bit32_t;
N
N/**
N  * @}
N  *
N  */
N
Ntypedef struct{
N  uint8_t bit0       : 1;
N  uint8_t bit1       : 1;
N  uint8_t bit2       : 1;
N  uint8_t bit3       : 1;
N  uint8_t bit4       : 1;
N  uint8_t bit5       : 1;
N  uint8_t bit6       : 1;
N  uint8_t bit7       : 1;
N} bitwise_t;
N
N#define PROPERTY_DISABLE                (0U)
N#define PROPERTY_ENABLE                 (1U)
N
N#endif /* MEMS_SHARED_TYPES */
N
N/**
N  * @}
N  *
N  */
N
N/** @addtogroup  LPS22HB_Interfaces_Functions
N  * @brief       This section provide a set of functions used to read and
N  *              write a generic register of the device.
N  *              MANDATORY: return 0 -> no Error.
N  * @{
N  *
N  */
N
Ntypedef int32_t (*lps22hb_write_ptr)(void *, uint8_t, uint8_t*, uint16_t);
Ntypedef int32_t (*lps22hb_read_ptr) (void *, uint8_t, uint8_t*, uint16_t);
N
Ntypedef struct {
N  /** Component mandatory fields **/
N  lps22hb_write_ptr  write_reg;
N  lps22hb_read_ptr   read_reg;
N  /** Customizable optional pointer **/
N  void *handle;
N} lps22hb_ctx_t;
N
N/**
N  * @}
N  *
N  */
N
N
N/** @defgroup LSM9DS1_Infos
N  * @{
N  *
N  */
N
N  /** I2C Device Address 8 bit format: if SA0=0 -> 0xB9 if SA0=1 -> 0xBB **/
N#define LPS22HB_I2C_ADD_H   0xBBU
N#define LPS22HB_I2C_ADD_L   0xB9U
N
N/** Device Identification (Who am I) **/
N#define LPS22HB_ID            0xB1U
N
N/**
N  * @}
N  *
N  */
N
N#define LPS22HB_INTERRUPT_CFG  0x0BU
Ntypedef struct {
N  uint8_t pe               : 2; /* ple + phe -> pe */
N  uint8_t lir              : 1;
N  uint8_t diff_en          : 1;
N  uint8_t reset_az         : 1;
N  uint8_t autozero         : 1;
N  uint8_t reset_arp        : 1;
N  uint8_t autorifp         : 1;
N} lps22hb_interrupt_cfg_t;
N
N#define LPS22HB_THS_P_L        0x0CU
N#define LPS22HB_THS_P_H        0x0DU
N#define LPS22HB_WHO_AM_I       0x0FU
N#define LPS22HB_CTRL_REG1      0x10U
Ntypedef struct {
N  uint8_t sim              : 1;
N  uint8_t bdu              : 1;
N  uint8_t lpfp             : 2; /* en_lpfp + lpfp_cfg -> lpfp */
N  uint8_t odr              : 3;
N  uint8_t not_used_01      : 1;
N} lps22hb_ctrl_reg1_t;
N
N#define LPS22HB_CTRL_REG2      0x11U
Ntypedef struct {
N  uint8_t one_shot         : 1;
N  uint8_t not_used_01      : 1;
N  uint8_t swreset          : 1;
N  uint8_t i2c_dis          : 1;
N  uint8_t if_add_inc       : 1;
N  uint8_t stop_on_fth      : 1;
N  uint8_t fifo_en          : 1;
N  uint8_t boot             : 1;
N} lps22hb_ctrl_reg2_t;
N
N#define LPS22HB_CTRL_REG3      0x12U
Ntypedef struct {
N  uint8_t int_s            : 2;
N  uint8_t drdy             : 1;
N  uint8_t f_ovr            : 1;
N  uint8_t f_fth            : 1;
N  uint8_t f_fss5           : 1;
N  uint8_t pp_od            : 1;
N  uint8_t int_h_l          : 1;
N} lps22hb_ctrl_reg3_t;
N
N
N#define LPS22HB_FIFO_CTRL      0x14U
Ntypedef struct {
N  uint8_t wtm              : 5;
N  uint8_t f_mode           : 3;
N} lps22hb_fifo_ctrl_t;
N
N#define LPS22HB_REF_P_XL       0x15U
N#define LPS22HB_REF_P_L        0x16U
N#define LPS22HB_REF_P_H        0x17U
N#define LPS22HB_RPDS_L         0x18U
N#define LPS22HB_RPDS_H         0x19U
N
N#define LPS22HB_RES_CONF       0x1AU
Ntypedef struct {
N  uint8_t lc_en            : 1;
N  uint8_t not_used_01      : 7;
N} lps22hb_res_conf_t;
N
N#define LPS22HB_INT_SOURCE     0x25U
Ntypedef struct {
N  uint8_t ph               : 1;
N  uint8_t pl               : 1;
N  uint8_t ia               : 1;
N  uint8_t not_used_01      : 4;
N  uint8_t boot_status      : 1;
N} lps22hb_int_source_t;
N
N#define LPS22HB_FIFO_STATUS    0x26U
Ntypedef struct {
N  uint8_t fss              : 6;
N  uint8_t ovr              : 1;
N  uint8_t fth_fifo         : 1;
N} lps22hb_fifo_status_t;
N
N#define LPS22HB_STATUS         0x27U
Ntypedef struct {
N  uint8_t p_da             : 1;
N  uint8_t t_da             : 1;
N  uint8_t not_used_02      : 2;
N  uint8_t p_or             : 1;
N  uint8_t t_or             : 1;
N  uint8_t not_used_01      : 2;
N} lps22hb_status_t;
N
N#define LPS22HB_PRESS_OUT_XL   0x28U
N#define LPS22HB_PRESS_OUT_L    0x29U
N#define LPS22HB_PRESS_OUT_H    0x2AU
N#define LPS22HB_TEMP_OUT_L     0x2BU
N#define LPS22HB_TEMP_OUT_H     0x2CU
N#define LPS22HB_LPFP_RES       0x33U
N
N/**
N  * @defgroup LPS22HB_Register_Union
N  * @brief    This union group all the registers that has a bit-field
N  *           description.
N  *           This union is useful but not need by the driver.
N  *
N  *           REMOVING this union you are compliant with:
N  *           MISRA-C 2012 [Rule 19.2] -> " Union are not allowed "
N  *
N  * @{
N  *
N  */
N
Ntypedef union{
N  lps22hb_interrupt_cfg_t      interrupt_cfg;
N  lps22hb_ctrl_reg1_t          ctrl_reg1;
N  lps22hb_ctrl_reg2_t          ctrl_reg2;
N  lps22hb_ctrl_reg3_t          ctrl_reg3;
N  lps22hb_fifo_ctrl_t          fifo_ctrl;
N  lps22hb_res_conf_t           res_conf;
N  lps22hb_int_source_t         int_source;
N  lps22hb_fifo_status_t        fifo_status;
N  lps22hb_status_t             status;
N  bitwise_t                    bitwise;
N  uint8_t                      byte;
N} lps22hb_reg_t;
N
N/**
N  * @}
N  *
N  */
N
Nint32_t lps22hb_read_reg(lps22hb_ctx_t *ctx, uint8_t reg, uint8_t* data,
N                         uint16_t len);
Nint32_t lps22hb_write_reg(lps22hb_ctx_t *ctx, uint8_t reg, uint8_t* data,
N                          uint16_t len);
N
Nextern float_t lps22hb_from_lsb_to_hpa(int32_t lsb);
Nextern float_t lps22hb_from_lsb_to_degc(int16_t lsb);
N
Nint32_t lps22hb_autozero_rst_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_autozero_rst_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_autozero_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_autozero_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_pressure_snap_rst_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_pressure_snap_rst_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_pressure_snap_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_pressure_snap_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_block_data_update_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_block_data_update_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Ntypedef enum {
N  LPS22HB_LPF_ODR_DIV_2  = 0,
N  LPS22HB_LPF_ODR_DIV_9  = 2,
N  LPS22HB_LPF_ODR_DIV_20 = 3,
N} lps22hb_lpfp_t;
Nint32_t lps22hb_low_pass_filter_mode_set(lps22hb_ctx_t *ctx,
N                                         lps22hb_lpfp_t val);
Nint32_t lps22hb_low_pass_filter_mode_get(lps22hb_ctx_t *ctx,
N                                         lps22hb_lpfp_t *val);
N
Ntypedef enum {
N  LPS22HB_POWER_DOWN  = 0,
N  LPS22HB_ODR_1_Hz    = 1,
N  LPS22HB_ODR_10_Hz   = 2,
N  LPS22HB_ODR_25_Hz   = 3,
N  LPS22HB_ODR_50_Hz   = 4,
N  LPS22HB_ODR_75_Hz   = 5,
N} lps22hb_odr_t;
Nint32_t lps22hb_data_rate_set(lps22hb_ctx_t *ctx, lps22hb_odr_t val);
Nint32_t lps22hb_data_rate_get(lps22hb_ctx_t *ctx, lps22hb_odr_t *val);
N
Nint32_t lps22hb_one_shoot_trigger_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_one_shoot_trigger_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_pressure_ref_set(lps22hb_ctx_t *ctx, uint8_t *buff);
Nint32_t lps22hb_pressure_ref_get(lps22hb_ctx_t *ctx, uint8_t *buff);
N
Nint32_t lps22hb_pressure_offset_set(lps22hb_ctx_t *ctx, uint8_t *buff);
Nint32_t lps22hb_pressure_offset_get(lps22hb_ctx_t *ctx, uint8_t *buff);
N
Nint32_t lps22hb_press_data_ready_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_temp_data_ready_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_press_data_ovr_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_temp_data_ovr_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_pressure_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff);
N
Nint32_t lps22hb_temperature_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff);
N
Nint32_t lps22hb_low_pass_rst_get(lps22hb_ctx_t *ctx, uint8_t *buff);
N
Nint32_t lps22hb_device_id_get(lps22hb_ctx_t *ctx, uint8_t *buff);
N
Nint32_t lps22hb_reset_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_reset_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_boot_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_boot_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_low_power_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_low_power_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_boot_status_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Ntypedef struct{
N  lps22hb_fifo_status_t  fifo_status;
N  lps22hb_status_t       status;
N} lps22hb_dev_stat_t;
Nint32_t lps22hb_dev_status_get(lps22hb_ctx_t *ctx, lps22hb_dev_stat_t *val);
N
Ntypedef enum {
N  LPS22HB_NO_THRESHOLD = 0,
N  LPS22HB_POSITIVE     = 1,
N  LPS22HB_NEGATIVE     = 2,
N  LPS22HB_BOTH         = 3,
N} lps22hb_pe_t;
Nint32_t lps22hb_sign_of_int_threshold_set(lps22hb_ctx_t *ctx,
N                                          lps22hb_pe_t val);
Nint32_t lps22hb_sign_of_int_threshold_get(lps22hb_ctx_t *ctx,
N                                          lps22hb_pe_t *val);
N
Ntypedef enum {
N  LPS22HB_INT_PULSED  = 0,
N  LPS22HB_INT_LATCHED = 1,
N} lps22hb_lir_t;
Nint32_t lps22hb_int_notification_mode_set(lps22hb_ctx_t *ctx,
N                                          lps22hb_lir_t val);
Nint32_t lps22hb_int_notification_mode_get(lps22hb_ctx_t *ctx,
N                                          lps22hb_lir_t *val);
N
Nint32_t lps22hb_int_generation_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_int_generation_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_int_threshold_set(lps22hb_ctx_t *ctx, uint8_t *buff);
Nint32_t lps22hb_int_threshold_get(lps22hb_ctx_t *ctx, uint8_t *buff);
N
Ntypedef enum {
N  LPS22HB_DRDY_OR_FIFO_FLAGS = 0,
N  LPS22HB_HIGH_PRES_INT      = 1,
N  LPS22HB_LOW_PRES_INT       = 2,
N  LPS22HB_EVERY_PRES_INT     = 3,
N} lps22hb_int_s_t;
Nint32_t lps22hb_int_pin_mode_set(lps22hb_ctx_t *ctx, lps22hb_int_s_t val);
Nint32_t lps22hb_int_pin_mode_get(lps22hb_ctx_t *ctx, lps22hb_int_s_t *val);
N
Nint32_t lps22hb_drdy_on_int_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_drdy_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_fifo_ovr_on_int_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_fifo_ovr_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_fifo_threshold_on_int_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_fifo_threshold_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_fifo_full_on_int_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_fifo_full_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Ntypedef enum {
N  LPS22HB_PUSH_PULL  = 0,
N  LPS22HB_OPEN_DRAIN = 1,
N} lps22hb_pp_od_t;
Nint32_t lps22hb_pin_mode_set(lps22hb_ctx_t *ctx, lps22hb_pp_od_t val);
Nint32_t lps22hb_pin_mode_get(lps22hb_ctx_t *ctx, lps22hb_pp_od_t *val);
N
Ntypedef enum {
N  LPS22HB_ACTIVE_HIGH = 0,
N  LPS22HB_ACTIVE_LOW = 1,
N} lps22hb_int_h_l_t;
Nint32_t lps22hb_int_polarity_set(lps22hb_ctx_t *ctx, lps22hb_int_h_l_t val);
Nint32_t lps22hb_int_polarity_get(lps22hb_ctx_t *ctx, lps22hb_int_h_l_t *val);
N
Nint32_t lps22hb_int_source_get(lps22hb_ctx_t *ctx, lps22hb_int_source_t *val);
N
Nint32_t lps22hb_int_on_press_high_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_int_on_press_low_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_interrupt_event_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_stop_on_fifo_threshold_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_stop_on_fifo_threshold_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_fifo_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_fifo_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_fifo_watermark_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_fifo_watermark_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Ntypedef enum {
N  LPS22HB_BYPASS_MODE           = 0,
N  LPS22HB_FIFO_MODE             = 1,
N  LPS22HB_STREAM_MODE           = 2,
N  LPS22HB_STREAM_TO_FIFO_MODE   = 3,
N  LPS22HB_BYPASS_TO_STREAM_MODE = 4,
N  LPS22HB_DYNAMIC_STREAM_MODE   = 6,
N  LPS22HB_BYPASS_TO_FIFO_MODE   = 7,
N} lps22hb_f_mode_t;
Nint32_t lps22hb_fifo_mode_set(lps22hb_ctx_t *ctx, lps22hb_f_mode_t val);
Nint32_t lps22hb_fifo_mode_get(lps22hb_ctx_t *ctx, lps22hb_f_mode_t *val);
N
Nint32_t lps22hb_fifo_data_level_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_fifo_ovr_flag_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Nint32_t lps22hb_fifo_fth_flag_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
Ntypedef enum {
N  LPS22HB_SPI_4_WIRE = 0,
N  LPS22HB_SPI_3_WIRE = 1,
N} lps22hb_sim_t;
Nint32_t lps22hb_spi_mode_set(lps22hb_ctx_t *ctx, lps22hb_sim_t val);
Nint32_t lps22hb_spi_mode_get(lps22hb_ctx_t *ctx, lps22hb_sim_t *val);
N
Ntypedef enum {
N  LPS22HB_I2C_ENABLE = 0,
N  LPS22HB_I2C_DISABLE = 1,
N} lps22hb_i2c_dis_t;
Nint32_t lps22hb_i2c_interface_set(lps22hb_ctx_t *ctx, lps22hb_i2c_dis_t val);
Nint32_t lps22hb_i2c_interface_get(lps22hb_ctx_t *ctx, lps22hb_i2c_dis_t *val);
N
Nint32_t lps22hb_auto_add_inc_set(lps22hb_ctx_t *ctx, uint8_t val);
Nint32_t lps22hb_auto_add_inc_get(lps22hb_ctx_t *ctx, uint8_t *val);
N
N/**
N  *@}
N  *
N  */
N
N#ifdef __cplusplus
S}
N#endif
N
N#endif /* LPS22HB_REGS_H */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
L 38 "..\..\..\..\..\..\Drivers\BSP\Components\lps22hb\lps22hb_reg.c" 2
N
N/**
N  * @defgroup    LPS22HB
N  * @brief       This file provides a set of functions needed to drive the
N  *              ultra-compact piezoresistive absolute pressure sensor.
N  * @{
N  *
N  */
N
N/**
N  * @defgroup    LPS22HB_Interfaces_functions
N  * @brief       This section provide a set of functions used to read and
N  *              write a generic register of the device.
N  * @{
N  *
N  */
N
N/**
N  * @brief  Read generic device register
N  *
N  * @param  ctx   read / write interface definitions(ptr)
N  * @param  reg   register to read
N  * @param  data  pointer to buffer that store the data read(ptr)
N  * @param  len   number of consecutive register to read
N  * @retval       interface status (MANDATORY: return 0 -> no Error)
N  *
N  */
Nint32_t lps22hb_read_reg(lps22hb_ctx_t* ctx, uint8_t reg, uint8_t* data,
N                         uint16_t len)
N{
N  int32_t ret;
N  ret = ctx->read_reg(ctx->handle, reg, data, len);
N  return ret;
N}
N
N/**
N  * @brief  Write generic device register
N  *
N  * @param  ctx   read / write interface definitions(ptr)
N  * @param  reg   register to write
N  * @param  data  pointer to data to write in register reg(ptr)
N  * @param  len   number of consecutive register to write
N  * @retval       interface status (MANDATORY: return 0 -> no Error)
N  *
N  */
Nint32_t lps22hb_write_reg(lps22hb_ctx_t* ctx, uint8_t reg, uint8_t* data,
N                          uint16_t len)
N{
N  int32_t ret;
N  ret = ctx->write_reg(ctx->handle, reg, data, len);
N  return ret;
N}
N
N/**
N  * @}
N  *
N  */
N
N/**
N  * @defgroup    LPS22HB_Sensitivity
N  * @brief       These functions convert raw-data into engineering units.
N  * @{
N  *
N  */
N
Nfloat_t lps22hb_from_lsb_to_hpa(int32_t lsb)
N{
N  return ( (float_t)lsb / 4096.0f );
N}
N
Nfloat_t lps22hb_from_lsb_to_degc(int16_t lsb)
N{
N  return ( (float_t)lsb / 100.0f );
N}
N
N/**
N  * @}
N  *
N  */
N
N/**
N  * @defgroup    LPS22HB_data_generation_c
N  * @brief       This section group all the functions concerning data
N  *              generation
N  * @{
N  *
N  */
N
N
N/**
N  * @brief  Reset Autozero function.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of reset_az in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
N
Nint32_t lps22hb_autozero_rst_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  if(ret == 0){
N    interrupt_cfg.reset_az = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
X    ret = lps22hb_write_reg(ctx, 0x0BU,
N                            (uint8_t*)&interrupt_cfg, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Reset Autozero function.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of reset_az in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_autozero_rst_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  *val = interrupt_cfg.reset_az;
N
N  return ret;
N}
N
N/**
N  * @brief  Enable Autozero function.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of autozero in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_autozero_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  if(ret == 0){
N    interrupt_cfg.autozero = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
X    ret = lps22hb_write_reg(ctx, 0x0BU,
N                            (uint8_t*)&interrupt_cfg, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Enable Autozero function.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of autozero in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_autozero_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  *val = interrupt_cfg.autozero;
N
N  return ret;
N}
N
N/**
N  * @brief  Reset AutoRifP function.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of reset_arp in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_pressure_snap_rst_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  if(ret == 0){
N    interrupt_cfg.reset_arp = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
X    ret = lps22hb_write_reg(ctx, 0x0BU,
N                            (uint8_t*)&interrupt_cfg, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Reset AutoRifP function.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of reset_arp in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_pressure_snap_rst_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  *val = interrupt_cfg.reset_arp;
N
N  return ret;
N}
N
N/**
N  * @brief  Enable AutoRifP function.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of autorifp in reg INTERRUPT_CFG.
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_pressure_snap_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  if(ret == 0){
N    interrupt_cfg.autorifp = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
X    ret = lps22hb_write_reg(ctx, 0x0BU,
N                            (uint8_t*)&interrupt_cfg, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Enable AutoRifP function.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of autorifp in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_pressure_snap_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  *val = interrupt_cfg.autorifp;
N
N  return ret;
N}
N
N/**
N  * @brief  Block data update.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of bdu in reg CTRL_REG1
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_block_data_update_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_ctrl_reg1_t ctrl_reg1;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X  ret = lps22hb_read_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  if(ret == 0){
N    ctrl_reg1.bdu = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X    ret = lps22hb_write_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Block data update.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of bdu in reg CTRL_REG1
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_block_data_update_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_ctrl_reg1_t ctrl_reg1;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X  ret = lps22hb_read_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  *val = ctrl_reg1.bdu;
N
N  return ret;
N}
N
N/**
N  * @brief  Low-pass bandwidth selection.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of lpfp in reg CTRL_REG1
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_low_pass_filter_mode_set(lps22hb_ctx_t *ctx,
N                                          lps22hb_lpfp_t val)
N{
N  lps22hb_ctrl_reg1_t ctrl_reg1;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X  ret = lps22hb_read_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  if(ret == 0){
N    ctrl_reg1.lpfp = (uint8_t)val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X    ret = lps22hb_write_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief   Low-pass bandwidth selection.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Get the values of lpfp in reg CTRL_REG1
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_low_pass_filter_mode_get(lps22hb_ctx_t *ctx,
N                                         lps22hb_lpfp_t *val)
N{
N  lps22hb_ctrl_reg1_t ctrl_reg1;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X  ret = lps22hb_read_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  switch (ctrl_reg1.lpfp){
N    case LPS22HB_LPF_ODR_DIV_2:
N      *val = LPS22HB_LPF_ODR_DIV_2;
N      break;
N    case LPS22HB_LPF_ODR_DIV_9:
N      *val = LPS22HB_LPF_ODR_DIV_9;
N      break;
N    case LPS22HB_LPF_ODR_DIV_20:
N      *val = LPS22HB_LPF_ODR_DIV_20;
N      break;
N    default:
N      *val = LPS22HB_LPF_ODR_DIV_2;
N      break;
N  }
N  return ret;
N}
N
N/**
N  * @brief  Output data rate selection.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of odr in reg CTRL_REG1
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_data_rate_set(lps22hb_ctx_t *ctx, lps22hb_odr_t val)
N{
N  lps22hb_ctrl_reg1_t ctrl_reg1;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X  ret = lps22hb_read_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  if(ret == 0){
N    ctrl_reg1.odr = (uint8_t)val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X    ret = lps22hb_write_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Output data rate selection.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Get the values of odr in reg CTRL_REG1
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_data_rate_get(lps22hb_ctx_t *ctx, lps22hb_odr_t *val)
N{
N  lps22hb_ctrl_reg1_t ctrl_reg1;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X  ret = lps22hb_read_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  switch (ctrl_reg1.odr){
N    case LPS22HB_POWER_DOWN:
N      *val = LPS22HB_POWER_DOWN;
N      break;
N    case LPS22HB_ODR_1_Hz:
N      *val = LPS22HB_ODR_1_Hz;
N      break;
N    case LPS22HB_ODR_10_Hz:
N      *val = LPS22HB_ODR_10_Hz;
N      break;
N    case LPS22HB_ODR_25_Hz:
N      *val = LPS22HB_ODR_25_Hz;
N      break;
N    case LPS22HB_ODR_50_Hz:
N      *val = LPS22HB_ODR_50_Hz;
N      break;
N    case LPS22HB_ODR_75_Hz:
N      *val = LPS22HB_ODR_75_Hz;
N      break;
N    default:
N      *val = LPS22HB_ODR_1_Hz;
N      break;
N  }
N
N  return ret;
N}
N
N/**
N  * @brief  One-shot mode. Device perform a single measure.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of one_shot in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_one_shoot_trigger_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  if(ret == 0){
N    ctrl_reg2.one_shot = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X    ret = lps22hb_write_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  One-shot mode. Device perform a single measure.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of one_shot in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_one_shoot_trigger_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  *val = ctrl_reg2.one_shot;
N
N  return ret;
N}
N
N/**
N  * @brief  pressure_ref:   The Reference pressure value is a 24-bit data
N  *         expressed as 2’s complement. The value is used when AUTOZERO
N  *         or AUTORIFP function is enabled.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  buff   Buffer that contains data to write
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_pressure_ref_set(lps22hb_ctx_t *ctx, uint8_t *buff)
N{
N  int32_t ret;
N  ret =  lps22hb_write_reg(ctx, LPS22HB_REF_P_XL, buff, 3);
X  ret =  lps22hb_write_reg(ctx, 0x15U, buff, 3);
N  return ret;
N}
N
N/**
N  * @brief  pressure_ref:   The Reference pressure value is a 24-bit data
N  *         expressed as 2’s complement. The value is used when AUTOZERO
N  *         or AUTORIFP function is enabled.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  buff   Buffer that stores data read
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_pressure_ref_get(lps22hb_ctx_t *ctx, uint8_t *buff)
N{
N  int32_t ret;
N  ret =  lps22hb_read_reg(ctx, LPS22HB_REF_P_XL, buff, 3);
X  ret =  lps22hb_read_reg(ctx, 0x15U, buff, 3);
N  return ret;
N}
N
N/**
N  * @brief  The pressure offset value is 16-bit data that can be used to
N  *         implement one-point calibration (OPC) after soldering.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  buff   Buffer that contains data to write
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_pressure_offset_set(lps22hb_ctx_t *ctx, uint8_t *buff)
N{
N  int32_t ret;
N  ret =  lps22hb_write_reg(ctx, LPS22HB_RPDS_L, buff, 2);
X  ret =  lps22hb_write_reg(ctx, 0x18U, buff, 2);
N  return ret;
N}
N
N/**
N  * @brief  The pressure offset value is 16-bit data that can be used to
N  *         implement one-point calibration (OPC) after soldering.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  buff   Buffer that stores data read
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_pressure_offset_get(lps22hb_ctx_t *ctx, uint8_t *buff)
N{
N  int32_t ret;
N  ret =  lps22hb_read_reg(ctx, LPS22HB_RPDS_L, buff, 2);
X  ret =  lps22hb_read_reg(ctx, 0x18U, buff, 2);
N  return ret;
N}
N
N/**
N  * @brief  Pressure data available.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of p_da in reg STATUS
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_press_data_ready_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_status_t status;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t*)&status, 1);
X  ret = lps22hb_read_reg(ctx, 0x27U, (uint8_t*)&status, 1);
N  *val = status.p_da;
N
N  return ret;
N}
N
N/**
N  * @brief  Temperature data available.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of t_da in reg STATUS
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_temp_data_ready_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_status_t status;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t*)&status, 1);
X  ret = lps22hb_read_reg(ctx, 0x27U, (uint8_t*)&status, 1);
N  *val = status.t_da;
N
N  return ret;
N}
N
N/**
N  * @brief  Pressure data overrun.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of p_or in reg STATUS
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_press_data_ovr_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_status_t status;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t*)&status, 1);
X  ret = lps22hb_read_reg(ctx, 0x27U, (uint8_t*)&status, 1);
N  *val = status.p_or;
N
N  return ret;
N}
N
N/**
N  * @brief  Temperature data overrun.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of t_or in reg STATUS
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_temp_data_ovr_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_status_t status;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t*)&status, 1);
X  ret = lps22hb_read_reg(ctx, 0x27U, (uint8_t*)&status, 1);
N  *val = status.t_or;
N
N  return ret;
N}
N
N/**
N  * @brief  Pressure output value[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  buff   Buffer that stores data read
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_pressure_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
N{
N  int32_t ret;
N  ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
X  ret =  lps22hb_read_reg(ctx, 0x28U, buff, 3);
N  return ret;
N}
N
N/**
N  * @brief  temperature_raw:   Temperature output value[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  buff   Buffer that stores data read.
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_temperature_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
N{
N  int32_t ret;
N  ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
X  ret =  lps22hb_read_reg(ctx, 0x2BU, (uint8_t*) buff, 2);
N  return ret;
N}
N
N/**
N  * @brief  Low-pass filter reset register. If the LPFP is active, in
N  *         order to avoid the transitory phase, the filter can be
N  *         reset by reading this register before generating pressure
N  *         measurements.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  buff   Buffer that stores data read
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_low_pass_rst_get(lps22hb_ctx_t *ctx, uint8_t *buff)
N{
N  int32_t ret;
N  ret =  lps22hb_read_reg(ctx, LPS22HB_LPFP_RES, (uint8_t*) buff, 1);
X  ret =  lps22hb_read_reg(ctx, 0x33U, (uint8_t*) buff, 1);
N  return ret;
N}
N
N/**
N  * @}
N  *
N  */
N
N/**
N  * @defgroup    LPS22HB_common
N  * @brief       This section group common usefull functions
N  * @{
N  *
N  */
N
N/**
N  * @brief  Device Who am I[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  buff   Buffer that stores data read
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_device_id_get(lps22hb_ctx_t *ctx, uint8_t *buff)
N{
N  int32_t ret;
N  ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
X  ret =  lps22hb_read_reg(ctx, 0x0FU, (uint8_t*) buff, 1);
N  return ret;
N}
N
N/**
N  * @brief  Software reset. Restore the default values in user registers[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of swreset in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_reset_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  if(ret == 0){
N    ctrl_reg2.swreset = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X    ret = lps22hb_write_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Software reset. Restore the default values in user registers[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of swreset in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_reset_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  *val = ctrl_reg2.swreset;
N
N  return ret;
N}
N
N/**
N  * @brief  Reboot memory content. Reload the calibration parameters.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of boot in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_boot_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  if(ret == 0){
N    ctrl_reg2.boot = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X    ret = lps22hb_write_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Reboot memory content. Reload the calibration parameters.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of boot in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_boot_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  *val = ctrl_reg2.boot;
N
N  return ret;
N}
N
N/**
N  * @brief  Low current mode.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of lc_en in reg RES_CONF
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_low_power_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_res_conf_t res_conf;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
X  ret = lps22hb_read_reg(ctx, 0x1AU, (uint8_t*)&res_conf, 1);
N  if(ret == 0){
N    res_conf.lc_en = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
X    ret = lps22hb_write_reg(ctx, 0x1AU, (uint8_t*)&res_conf, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Low current mode.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of lc_en in reg RES_CONF
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_low_power_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_res_conf_t res_conf;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
X  ret = lps22hb_read_reg(ctx, 0x1AU, (uint8_t*)&res_conf, 1);
N  *val = res_conf.lc_en;
N
N  return ret;
N}
N
N/**
N  * @brief  If ‘1’ indicates that the Boot (Reboot) phase is running.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of boot_status in reg INT_SOURCE
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_boot_status_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_int_source_t int_source;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INT_SOURCE, (uint8_t*)&int_source, 1);
X  ret = lps22hb_read_reg(ctx, 0x25U, (uint8_t*)&int_source, 1);
N  *val = int_source.boot_status;
N
N  return ret;
N}
N
N/**
N  * @brief  All the status bit, FIFO and data generation[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Structure of registers from FIFO_STATUS to STATUS
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_dev_status_get(lps22hb_ctx_t *ctx, lps22hb_dev_stat_t *val)
N{
N  int32_t ret;
N  ret =  lps22hb_read_reg(ctx, LPS22HB_FIFO_STATUS, (uint8_t*) val, 2);
X  ret =  lps22hb_read_reg(ctx, 0x26U, (uint8_t*) val, 2);
N  return ret;
N}
N
N/**
N  * @}
N  *
N  */
N
N/**
N  * @defgroup    LPS22HB_interrupts
N  * @brief       This section group all the functions that manage interrupts
N  * @{
N  *
N  */
N
N/**
N  * @brief  Enable interrupt generation on pressure low/high event.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of pe in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_sign_of_int_threshold_set(lps22hb_ctx_t *ctx,
N                                           lps22hb_pe_t val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  if(ret == 0){
N    interrupt_cfg.pe = (uint8_t)val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
X    ret = lps22hb_write_reg(ctx, 0x0BU,
N                            (uint8_t*)&interrupt_cfg, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Enable interrupt generation on pressure low/high event.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Get the values of pe in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_sign_of_int_threshold_get(lps22hb_ctx_t *ctx,
N                                           lps22hb_pe_t *val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  switch (interrupt_cfg.pe){
N    case LPS22HB_NO_THRESHOLD:
N      *val = LPS22HB_NO_THRESHOLD;
N      break;
N    case LPS22HB_POSITIVE:
N      *val = LPS22HB_POSITIVE;
N      break;
N    case LPS22HB_NEGATIVE:
N      *val = LPS22HB_NEGATIVE;
N      break;
N    case LPS22HB_BOTH:
N      *val = LPS22HB_BOTH;
N      break;
N    default:
N      *val = LPS22HB_NO_THRESHOLD;
N      break;
N  }
N  return ret;
N}
N
N/**
N  * @brief  Interrupt request to the INT_SOURCE (25h) register
N  *         mode (pulsed / latched) [set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of lir in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_notification_mode_set(lps22hb_ctx_t *ctx,
N                                           lps22hb_lir_t val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  if(ret == 0){
N    interrupt_cfg.lir = (uint8_t)val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
X    ret = lps22hb_write_reg(ctx, 0x0BU,
N                            (uint8_t*)&interrupt_cfg, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief   Interrupt request to the INT_SOURCE (25h) register
N  *          mode (pulsed / latched) [get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Get the values of lir in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_notification_mode_get(lps22hb_ctx_t *ctx,
N                                          lps22hb_lir_t *val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  switch (interrupt_cfg.lir){
N    case LPS22HB_INT_PULSED:
N      *val = LPS22HB_INT_PULSED;
N      break;
N    case LPS22HB_INT_LATCHED:
N      *val = LPS22HB_INT_LATCHED;
N      break;
N    default:
N      *val = LPS22HB_INT_PULSED;
N      break;
N  }
N  return ret;
N}
N
N/**
N  * @brief  Enable interrupt generation.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of diff_en in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_generation_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  if(ret == 0){
N    interrupt_cfg.diff_en = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
X    ret = lps22hb_write_reg(ctx, 0x0BU,
N                            (uint8_t*)&interrupt_cfg, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Enable interrupt generation.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of diff_en in reg INTERRUPT_CFG
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_generation_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_interrupt_cfg_t interrupt_cfg;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
X  ret = lps22hb_read_reg(ctx, 0x0BU,
N                         (uint8_t*)&interrupt_cfg, 1);
N  *val = interrupt_cfg.diff_en;
N
N  return ret;
N}
N
N/**
N  * @brief  User-defined threshold value for pressure interrupt event[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  buff   Buffer that contains data to write
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_threshold_set(lps22hb_ctx_t *ctx, uint8_t *buff)
N{
N  int32_t ret;
N  ret =  lps22hb_write_reg(ctx, LPS22HB_THS_P_L, (uint8_t*) buff, 2);
X  ret =  lps22hb_write_reg(ctx, 0x0CU, (uint8_t*) buff, 2);
N  return ret;
N}
N
N/**
N  * @brief  User-defined threshold value for pressure interrupt event[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  buff   Buffer that stores data read
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_threshold_get(lps22hb_ctx_t *ctx, uint8_t *buff)
N{
N  int32_t ret;
N  ret =  lps22hb_read_reg(ctx, LPS22HB_THS_P_L, (uint8_t*) buff, 2);
X  ret =  lps22hb_read_reg(ctx, 0x0CU, (uint8_t*) buff, 2);
N  return ret;
N}
N
N/**
N  * @brief  Data signal on INT_DRDY pin control bits.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of int_s in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_pin_mode_set(lps22hb_ctx_t *ctx, lps22hb_int_s_t val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  if(ret == 0){
N    ctrl_reg3.int_s = (uint8_t)val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X    ret = lps22hb_write_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Data signal on INT_DRDY pin control bits.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Get the values of int_s in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_pin_mode_get(lps22hb_ctx_t *ctx, lps22hb_int_s_t *val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  switch (ctrl_reg3.int_s){
N    case LPS22HB_DRDY_OR_FIFO_FLAGS:
N      *val = LPS22HB_DRDY_OR_FIFO_FLAGS;
N      break;
N    case LPS22HB_HIGH_PRES_INT:
N      *val = LPS22HB_HIGH_PRES_INT;
N      break;
N    case LPS22HB_LOW_PRES_INT:
N      *val = LPS22HB_LOW_PRES_INT;
N      break;
N    case LPS22HB_EVERY_PRES_INT:
N      *val = LPS22HB_EVERY_PRES_INT;
N      break;
N    default:
N      *val = LPS22HB_DRDY_OR_FIFO_FLAGS;
N      break;
N  }
N  return ret;
N}
N
N/**
N  * @brief  Data-ready signal on INT_DRDY pin.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of drdy in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_drdy_on_int_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  if(ret == 0){
N    ctrl_reg3.drdy = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X    ret = lps22hb_write_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Data-ready signal on INT_DRDY pin.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of drdy in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_drdy_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  *val = ctrl_reg3.drdy;
N
N  return ret;
N}
N
N/**
N  * @brief  FIFO overrun interrupt on INT_DRDY pin.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of f_ovr in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_ovr_on_int_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  if(ret == 0){
N    ctrl_reg3.f_ovr = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X    ret = lps22hb_write_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  FIFO overrun interrupt on INT_DRDY pin.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of f_ovr in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_ovr_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  *val = ctrl_reg3.f_ovr;
N
N  return ret;
N}
N
N/**
N  * @brief  FIFO watermark status on INT_DRDY pin.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of f_fth in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_threshold_on_int_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  if(ret == 0){
N    ctrl_reg3.f_fth = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X    ret = lps22hb_write_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief   FIFO watermark status on INT_DRDY pin.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of f_fth in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_threshold_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  *val = ctrl_reg3.f_fth;
N
N  return ret;
N}
N
N/**
N  * @brief  FIFO full flag on INT_DRDY pin.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of f_fss5 in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_full_on_int_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  if(ret == 0){
N    ctrl_reg3.f_fss5 = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X    ret = lps22hb_write_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  FIFO full flag on INT_DRDY pin.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of f_fss5 in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_full_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  *val = ctrl_reg3.f_fss5;
N
N  return ret;
N}
N
N/**
N  * @brief  Push-pull/open drain selection on interrupt pads.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of pp_od in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_pin_mode_set(lps22hb_ctx_t *ctx, lps22hb_pp_od_t val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  if(ret == 0){
N    ctrl_reg3.pp_od = (uint8_t)val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X    ret = lps22hb_write_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Push-pull/open drain selection on interrupt pads.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Get the values of pp_od in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_pin_mode_get(lps22hb_ctx_t *ctx, lps22hb_pp_od_t *val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  switch (ctrl_reg3.pp_od){
N    case LPS22HB_PUSH_PULL:
N      *val = LPS22HB_PUSH_PULL;
N      break;
N    case LPS22HB_OPEN_DRAIN:
N      *val = LPS22HB_OPEN_DRAIN;
N      break;
N    default:
N      *val = LPS22HB_PUSH_PULL;
N      break;
N  }
N  return ret;
N}
N
N/**
N  * @brief  Interrupt active-high/low.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of int_h_l in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_polarity_set(lps22hb_ctx_t *ctx, lps22hb_int_h_l_t val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  if(ret == 0){
N    ctrl_reg3.int_h_l = (uint8_t)val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X    ret = lps22hb_write_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Interrupt active-high/low.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Get the values of int_h_l in reg CTRL_REG3
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_polarity_get(lps22hb_ctx_t *ctx, lps22hb_int_h_l_t *val)
N{
N  lps22hb_ctrl_reg3_t ctrl_reg3;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
X  ret = lps22hb_read_reg(ctx, 0x12U, (uint8_t*)&ctrl_reg3, 1);
N  switch (ctrl_reg3.int_h_l){
N    case LPS22HB_ACTIVE_HIGH:
N      *val = LPS22HB_ACTIVE_HIGH;
N      break;
N    case LPS22HB_ACTIVE_LOW:
N      *val = LPS22HB_ACTIVE_LOW;
N      break;
N    default:
N      *val = LPS22HB_ACTIVE_HIGH;
N      break;
N  }
N  return ret;
N}
N
N/**
N  * @brief  Interrupt source register[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Register INT_SOURCE
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_source_get(lps22hb_ctx_t *ctx, lps22hb_int_source_t *val)
N{
N  int32_t ret;
N  ret =  lps22hb_read_reg(ctx, LPS22HB_INT_SOURCE, (uint8_t*) val, 1);
X  ret =  lps22hb_read_reg(ctx, 0x25U, (uint8_t*) val, 1);
N  return ret;
N}
N
N/**
N  * @brief  Differential pressure high interrupt flag.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of ph in reg INT_SOURCE
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_on_press_high_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_int_source_t int_source;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INT_SOURCE, (uint8_t*)&int_source, 1);
X  ret = lps22hb_read_reg(ctx, 0x25U, (uint8_t*)&int_source, 1);
N  *val = int_source.ph;
N
N  return ret;
N}
N
N/**
N  * @brief  Differential pressure low interrupt flag.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of pl in reg INT_SOURCE
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_int_on_press_low_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_int_source_t int_source;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INT_SOURCE, (uint8_t*)&int_source, 1);
X  ret = lps22hb_read_reg(ctx, 0x25U, (uint8_t*)&int_source, 1);
N  *val = int_source.pl;
N
N  return ret;
N}
N
N/**
N  * @brief  Interrupt active flag.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of ia in reg INT_SOURCE
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_interrupt_event_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_int_source_t int_source;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_INT_SOURCE, (uint8_t*)&int_source, 1);
X  ret = lps22hb_read_reg(ctx, 0x25U, (uint8_t*)&int_source, 1);
N  *val = int_source.ia;
N
N  return ret;
N}
N
N/**
N  * @}
N  *
N  */
N
N/**
N  * @defgroup    LPS22HB_fifo
N  * @brief       This section group all the functions concerning the
N  *              fifo usage
N  * @{
N  *
N  */
N
N/**
N  * @brief   Stop on FIFO watermark. Enable FIFO watermark level use.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of stop_on_fth in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_stop_on_fifo_threshold_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  if(ret == 0){
N    ctrl_reg2.stop_on_fth = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X    ret = lps22hb_write_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief   Stop on FIFO watermark. Enable FIFO watermark level use.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of stop_on_fth in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_stop_on_fifo_threshold_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  *val = ctrl_reg2.stop_on_fth;
N
N  return ret;
N}
N
N/**
N  * @brief  FIFO enable.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of fifo_en in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  if(ret == 0){
N    ctrl_reg2.fifo_en = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X    ret = lps22hb_write_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  FIFO enable.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of fifo_en in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  *val = ctrl_reg2.fifo_en;
N
N  return ret;
N}
N
N/**
N  * @brief  FIFO watermark level selection.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of wtm in reg FIFO_CTRL
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_watermark_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_fifo_ctrl_t fifo_ctrl;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
X  ret = lps22hb_read_reg(ctx, 0x14U, (uint8_t*)&fifo_ctrl, 1);
N  if(ret == 0){
N    fifo_ctrl.wtm = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
X    ret = lps22hb_write_reg(ctx, 0x14U, (uint8_t*)&fifo_ctrl, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  FIFO watermark level selection.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of wtm in reg FIFO_CTRL
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_watermark_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_fifo_ctrl_t fifo_ctrl;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
X  ret = lps22hb_read_reg(ctx, 0x14U, (uint8_t*)&fifo_ctrl, 1);
N  *val = fifo_ctrl.wtm;
N
N  return ret;
N}
N
N/**
N  * @brief  FIFO mode selection.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of f_mode in reg FIFO_CTRL
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_mode_set(lps22hb_ctx_t *ctx, lps22hb_f_mode_t val)
N{
N  lps22hb_fifo_ctrl_t fifo_ctrl;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
X  ret = lps22hb_read_reg(ctx, 0x14U, (uint8_t*)&fifo_ctrl, 1);
N  if(ret == 0){
N    fifo_ctrl.f_mode = (uint8_t)val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
X    ret = lps22hb_write_reg(ctx, 0x14U, (uint8_t*)&fifo_ctrl, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  FIFO mode selection.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Get the values of f_mode in reg FIFO_CTRL
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_mode_get(lps22hb_ctx_t *ctx, lps22hb_f_mode_t *val)
N{
N  lps22hb_fifo_ctrl_t fifo_ctrl;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
X  ret = lps22hb_read_reg(ctx, 0x14U, (uint8_t*)&fifo_ctrl, 1);
N  switch (fifo_ctrl.f_mode){
N    case LPS22HB_BYPASS_MODE:
N      *val = LPS22HB_BYPASS_MODE;
N      break;
N    case LPS22HB_FIFO_MODE:
N      *val = LPS22HB_FIFO_MODE;
N      break;
N    case LPS22HB_STREAM_MODE:
N      *val = LPS22HB_STREAM_MODE;
N      break;
N    case LPS22HB_STREAM_TO_FIFO_MODE:
N      *val = LPS22HB_STREAM_TO_FIFO_MODE;
N      break;
N    case LPS22HB_BYPASS_TO_STREAM_MODE:
N      *val = LPS22HB_BYPASS_TO_STREAM_MODE;
N      break;
N    case LPS22HB_DYNAMIC_STREAM_MODE:
N      *val = LPS22HB_DYNAMIC_STREAM_MODE;
N      break;
N    case LPS22HB_BYPASS_TO_FIFO_MODE:
N      *val = LPS22HB_BYPASS_TO_FIFO_MODE;
N      break;
N    default:
N      *val = LPS22HB_BYPASS_MODE;
N      break;
N  }
N  return ret;
N}
N
N/**
N  * @brief  FIFO stored data level.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of fss in reg FIFO_STATUS
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_data_level_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_fifo_status_t fifo_status;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_STATUS, (uint8_t*)&fifo_status, 1);
X  ret = lps22hb_read_reg(ctx, 0x26U, (uint8_t*)&fifo_status, 1);
N  *val = fifo_status.fss;
N
N  return ret;
N}
N
N/**
N  * @brief  FIFO overrun status.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of ovr in reg FIFO_STATUS
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_ovr_flag_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_fifo_status_t fifo_status;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_STATUS, (uint8_t*)&fifo_status, 1);
X  ret = lps22hb_read_reg(ctx, 0x26U, (uint8_t*)&fifo_status, 1);
N  *val = fifo_status.ovr;
N
N  return ret;
N}
N
N/**
N  * @brief  FIFO watermark status.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of fth_fifo in reg FIFO_STATUS
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_fifo_fth_flag_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_fifo_status_t fifo_status;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_STATUS, (uint8_t*)&fifo_status, 1);
X  ret = lps22hb_read_reg(ctx, 0x26U, (uint8_t*)&fifo_status, 1);
N  *val = fifo_status.fth_fifo;
N
N  return ret;
N}
N
N/**
N  * @}
N  *
N  */
N
N/**
N  * @defgroup    LPS22HB_serial_interface
N  * @brief       This section group all the functions concerning serial
N  *              interface management
N  * @{
N  *
N  */
N
N/**
N  * @brief  SPI Serial Interface Mode selection.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of sim in reg CTRL_REG1
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_spi_mode_set(lps22hb_ctx_t *ctx, lps22hb_sim_t val)
N{
N  lps22hb_ctrl_reg1_t ctrl_reg1;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X  ret = lps22hb_read_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  if(ret == 0){
N    ctrl_reg1.sim = (uint8_t)val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X    ret = lps22hb_write_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  SPI Serial Interface Mode selection.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Get the values of sim in reg CTRL_REG1
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_spi_mode_get(lps22hb_ctx_t *ctx, lps22hb_sim_t *val)
N{
N  lps22hb_ctrl_reg1_t ctrl_reg1;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
X  ret = lps22hb_read_reg(ctx, 0x10U, (uint8_t*)&ctrl_reg1, 1);
N  switch (ctrl_reg1.sim){
N    case LPS22HB_SPI_4_WIRE:
N      *val = LPS22HB_SPI_4_WIRE;
N      break;
N    case LPS22HB_SPI_3_WIRE:
N      *val = LPS22HB_SPI_3_WIRE;
N      break;
N    default:
N      *val = LPS22HB_SPI_4_WIRE;
N      break;
N  }
N  return ret;
N}
N
N/**
N  * @brief  Disable I2C interface.[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of i2c_dis in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_i2c_interface_set(lps22hb_ctx_t *ctx, lps22hb_i2c_dis_t val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  if(ret == 0){
N    ctrl_reg2.i2c_dis = (uint8_t)val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X    ret = lps22hb_write_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Disable I2C interface.[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Get the values of i2c_dis in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_i2c_interface_get(lps22hb_ctx_t *ctx, lps22hb_i2c_dis_t *val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  switch (ctrl_reg2.i2c_dis){
N    case LPS22HB_I2C_ENABLE:
N      *val = LPS22HB_I2C_ENABLE;
N      break;
N    case LPS22HB_I2C_DISABLE:
N      *val = LPS22HB_I2C_DISABLE;
N      break;
N    default:
N      *val = LPS22HB_I2C_ENABLE;
N      break;
N  }
N  return ret;
N}
N
N/**
N  * @brief  Register address automatically incremented during a
N  *         multiple byte access with a serial interface (I2C or SPI).[set]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_auto_add_inc_set(lps22hb_ctx_t *ctx, uint8_t val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  if(ret == 0){
N    ctrl_reg2.if_add_inc = val;
N    ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X    ret = lps22hb_write_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  }
N  return ret;
N}
N
N/**
N  * @brief  Register address automatically incremented during a
N  *         multiple byte access with a serial interface (I2C or SPI).[get]
N  *
N  * @param  ctx    Read / write interface definitions
N  * @param  val    Change the values of if_add_inc in reg CTRL_REG2
N  * @retval        Interface status (MANDATORY: return 0 -> no Error).
N  *
N  */
Nint32_t lps22hb_auto_add_inc_get(lps22hb_ctx_t *ctx, uint8_t *val)
N{
N  lps22hb_ctrl_reg2_t ctrl_reg2;
N  int32_t ret;
N
N  ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
X  ret = lps22hb_read_reg(ctx, 0x11U, (uint8_t*)&ctrl_reg2, 1);
N  *val = ctrl_reg2.if_add_inc;
N
N  return ret;
N}
N
N/**
N  * @}
N  *
N  */
N
N/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
