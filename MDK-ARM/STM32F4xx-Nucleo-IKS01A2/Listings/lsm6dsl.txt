; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\lsm6dsl.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\lsm6dsl.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl\lsm6dsl.c]
                          THUMB

                          AREA ||i.LSM6DSL_ACC_Disable||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Disable PROC
;;;325     */
;;;326    int32_t LSM6DSL_ACC_Disable(LSM6DSL_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;327    {
000002  4604              MOV      r4,r0
;;;328      /* Check if the component is already disabled */
;;;329      if (pObj->acc_is_enabled == 0U)
000004  f8940029          LDRB     r0,[r4,#0x29]
000008  b908              CBNZ     r0,|L1.14|
;;;330      {
;;;331        return LSM6DSL_OK;
00000a  2000              MOVS     r0,#0
                  |L1.12|
;;;332      }
;;;333    
;;;334      /* Get current output data rate. */
;;;335      if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM6DSL_OK)
;;;336      {
;;;337        return LSM6DSL_ERROR;
;;;338      }
;;;339    
;;;340      /* Output data rate selection - power down. */
;;;341      if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
;;;342      {
;;;343        return LSM6DSL_ERROR;
;;;344      }
;;;345    
;;;346      pObj->acc_is_enabled = 0;
;;;347    
;;;348      return LSM6DSL_OK;
;;;349    }
00000c  bd10              POP      {r4,pc}
                  |L1.14|
00000e  f104012b          ADD      r1,r4,#0x2b           ;335
000012  f104001c          ADD      r0,r4,#0x1c           ;335
000016  f7fffffe          BL       lsm6dsl_xl_data_rate_get
00001a  b110              CBZ      r0,|L1.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;337
000020  e7f4              B        |L1.12|
                  |L1.34|
000022  2100              MOVS     r1,#0                 ;341
000024  f104001c          ADD      r0,r4,#0x1c           ;341
000028  f7fffffe          BL       lsm6dsl_xl_data_rate_set
00002c  b110              CBZ      r0,|L1.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;343
000032  e7eb              B        |L1.12|
                  |L1.52|
000034  2000              MOVS     r0,#0                 ;346
000036  f8840029          STRB     r0,[r4,#0x29]         ;346
00003a  bf00              NOP                            ;348
00003c  e7e6              B        |L1.12|
;;;350    
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Disable_6D_Orientation||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Disable_6D_Orientation PROC
;;;2239    */
;;;2240   int32_t LSM6DSL_ACC_Disable_6D_Orientation(LSM6DSL_Object_t *pObj)
000000  b51c              PUSH     {r2-r4,lr}
;;;2241   {
000002  4604              MOV      r4,r0
;;;2242     lsm6dsl_int1_route_t val1;
;;;2243     lsm6dsl_int2_route_t val2;
;;;2244   
;;;2245     /* Disable 6D orientation event on both INT1 and INT2 pins */
;;;2246     if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
000004  a901              ADD      r1,sp,#4
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00000e  b110              CBZ      r0,|L2.22|
;;;2247     {
;;;2248       return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L2.20|
;;;2249     }
;;;2250   
;;;2251     val1.int1_6d = PROPERTY_DISABLE;
;;;2252   
;;;2253     if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;2254     {
;;;2255       return LSM6DSL_ERROR;
;;;2256     }
;;;2257   
;;;2258     if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;2259     {
;;;2260       return LSM6DSL_ERROR;
;;;2261     }
;;;2262   
;;;2263     val2.int2_6d = PROPERTY_DISABLE;
;;;2264   
;;;2265     if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;2266     {
;;;2267       return LSM6DSL_ERROR;
;;;2268     }
;;;2269   
;;;2270     /* Reset 6D orientation. */
;;;2271     if (lsm6dsl_6d_threshold_set(&(pObj->Ctx), LSM6DSL_DEG_80) != LSM6DSL_OK)
;;;2272     {
;;;2273       return LSM6DSL_ERROR;
;;;2274     }
;;;2275   
;;;2276     return LSM6DSL_OK;
;;;2277   }
000014  bd1c              POP      {r2-r4,pc}
                  |L2.22|
000016  f89d0005          LDRB     r0,[sp,#5]            ;2251
00001a  f0200004          BIC      r0,r0,#4              ;2251
00001e  f88d0005          STRB     r0,[sp,#5]            ;2251
000022  f104001c          ADD      r0,r4,#0x1c           ;2253
000026  9901              LDR      r1,[sp,#4]            ;2253
000028  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00002c  b110              CBZ      r0,|L2.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;2255
000032  e7ef              B        |L2.20|
                  |L2.52|
000034  4669              MOV      r1,sp                 ;2258
000036  f104001c          ADD      r0,r4,#0x1c           ;2258
00003a  f7fffffe          BL       lsm6dsl_pin_int2_route_get
00003e  b110              CBZ      r0,|L2.70|
000040  f04f30ff          MOV      r0,#0xffffffff        ;2260
000044  e7e6              B        |L2.20|
                  |L2.70|
000046  f89d0001          LDRB     r0,[sp,#1]            ;2263
00004a  f0200004          BIC      r0,r0,#4              ;2263
00004e  f88d0001          STRB     r0,[sp,#1]            ;2263
000052  f104001c          ADD      r0,r4,#0x1c           ;2265
000056  9900              LDR      r1,[sp,#0]            ;2265
000058  f7fffffe          BL       lsm6dsl_pin_int2_route_set
00005c  b110              CBZ      r0,|L2.100|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;2267
000062  e7d7              B        |L2.20|
                  |L2.100|
000064  2100              MOVS     r1,#0                 ;2271
000066  f104001c          ADD      r0,r4,#0x1c           ;2271
00006a  f7fffffe          BL       lsm6dsl_6d_threshold_set
00006e  b110              CBZ      r0,|L2.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;2273
000074  e7ce              B        |L2.20|
                  |L2.118|
000076  2000              MOVS     r0,#0                 ;2276
000078  e7cc              B        |L2.20|
;;;2278   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Disable_Double_Tap_Detection||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Disable_Double_Tap_Detection PROC
;;;2016    */
;;;2017   int32_t LSM6DSL_ACC_Disable_Double_Tap_Detection(LSM6DSL_Object_t *pObj)
000000  b51c              PUSH     {r2-r4,lr}
;;;2018   {
000002  4604              MOV      r4,r0
;;;2019     lsm6dsl_int1_route_t val1;
;;;2020     lsm6dsl_int2_route_t val2;
;;;2021   
;;;2022     /* Disable double tap event on both INT1 and INT2 pins */
;;;2023     if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
000004  a901              ADD      r1,sp,#4
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00000e  b110              CBZ      r0,|L3.22|
;;;2024     {
;;;2025       return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L3.20|
;;;2026     }
;;;2027   
;;;2028     val1.int1_double_tap = PROPERTY_DISABLE;
;;;2029   
;;;2030     if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;2031     {
;;;2032       return LSM6DSL_ERROR;
;;;2033     }
;;;2034   
;;;2035     if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;2036     {
;;;2037       return LSM6DSL_ERROR;
;;;2038     }
;;;2039   
;;;2040     val2.int2_double_tap = PROPERTY_DISABLE;
;;;2041   
;;;2042     if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;2043     {
;;;2044       return LSM6DSL_ERROR;
;;;2045     }
;;;2046   
;;;2047     /* Only single tap enabled. */
;;;2048     if (lsm6dsl_tap_mode_set(&(pObj->Ctx), LSM6DSL_ONLY_SINGLE) != LSM6DSL_OK)
;;;2049     {
;;;2050       return LSM6DSL_ERROR;
;;;2051     }
;;;2052   
;;;2053     /* Reset tap duration time window. */
;;;2054     if (lsm6dsl_tap_dur_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;2055     {
;;;2056       return LSM6DSL_ERROR;
;;;2057     }
;;;2058   
;;;2059     /* Reset tap quiet time window. */
;;;2060     if (lsm6dsl_tap_quiet_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;2061     {
;;;2062       return LSM6DSL_ERROR;
;;;2063     }
;;;2064   
;;;2065     /* Reset tap shock time window. */
;;;2066     if (lsm6dsl_tap_shock_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;2067     {
;;;2068       return LSM6DSL_ERROR;
;;;2069     }
;;;2070   
;;;2071     /* Reset tap threshold. */
;;;2072     if (lsm6dsl_tap_threshold_x_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;2073     {
;;;2074       return LSM6DSL_ERROR;
;;;2075     }
;;;2076   
;;;2077     /* Disable Z direction in tap recognition. */
;;;2078     if (lsm6dsl_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSL_OK)
;;;2079     {
;;;2080       return LSM6DSL_ERROR;
;;;2081     }
;;;2082   
;;;2083     /* Disable Y direction in tap recognition. */
;;;2084     if (lsm6dsl_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSL_OK)
;;;2085     {
;;;2086       return LSM6DSL_ERROR;
;;;2087     }
;;;2088   
;;;2089     /* Disable X direction in tap recognition. */
;;;2090     if (lsm6dsl_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSL_OK)
;;;2091     {
;;;2092       return LSM6DSL_ERROR;
;;;2093     }
;;;2094   
;;;2095     return LSM6DSL_OK;
;;;2096   }
000014  bd1c              POP      {r2-r4,pc}
                  |L3.22|
000016  f89d0005          LDRB     r0,[sp,#5]            ;2028
00001a  f0200008          BIC      r0,r0,#8              ;2028
00001e  f88d0005          STRB     r0,[sp,#5]            ;2028
000022  f104001c          ADD      r0,r4,#0x1c           ;2030
000026  9901              LDR      r1,[sp,#4]            ;2030
000028  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00002c  b110              CBZ      r0,|L3.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;2032
000032  e7ef              B        |L3.20|
                  |L3.52|
000034  4669              MOV      r1,sp                 ;2035
000036  f104001c          ADD      r0,r4,#0x1c           ;2035
00003a  f7fffffe          BL       lsm6dsl_pin_int2_route_get
00003e  b110              CBZ      r0,|L3.70|
000040  f04f30ff          MOV      r0,#0xffffffff        ;2037
000044  e7e6              B        |L3.20|
                  |L3.70|
000046  f89d0001          LDRB     r0,[sp,#1]            ;2040
00004a  f0200008          BIC      r0,r0,#8              ;2040
00004e  f88d0001          STRB     r0,[sp,#1]            ;2040
000052  f104001c          ADD      r0,r4,#0x1c           ;2042
000056  9900              LDR      r1,[sp,#0]            ;2042
000058  f7fffffe          BL       lsm6dsl_pin_int2_route_set
00005c  b110              CBZ      r0,|L3.100|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;2044
000062  e7d7              B        |L3.20|
                  |L3.100|
000064  2100              MOVS     r1,#0                 ;2048
000066  f104001c          ADD      r0,r4,#0x1c           ;2048
00006a  f7fffffe          BL       lsm6dsl_tap_mode_set
00006e  b110              CBZ      r0,|L3.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;2050
000074  e7ce              B        |L3.20|
                  |L3.118|
000076  2100              MOVS     r1,#0                 ;2054
000078  f104001c          ADD      r0,r4,#0x1c           ;2054
00007c  f7fffffe          BL       lsm6dsl_tap_dur_set
000080  b110              CBZ      r0,|L3.136|
000082  f04f30ff          MOV      r0,#0xffffffff        ;2056
000086  e7c5              B        |L3.20|
                  |L3.136|
000088  2100              MOVS     r1,#0                 ;2060
00008a  f104001c          ADD      r0,r4,#0x1c           ;2060
00008e  f7fffffe          BL       lsm6dsl_tap_quiet_set
000092  b110              CBZ      r0,|L3.154|
000094  f04f30ff          MOV      r0,#0xffffffff        ;2062
000098  e7bc              B        |L3.20|
                  |L3.154|
00009a  2100              MOVS     r1,#0                 ;2066
00009c  f104001c          ADD      r0,r4,#0x1c           ;2066
0000a0  f7fffffe          BL       lsm6dsl_tap_shock_set
0000a4  b110              CBZ      r0,|L3.172|
0000a6  f04f30ff          MOV      r0,#0xffffffff        ;2068
0000aa  e7b3              B        |L3.20|
                  |L3.172|
0000ac  2100              MOVS     r1,#0                 ;2072
0000ae  f104001c          ADD      r0,r4,#0x1c           ;2072
0000b2  f7fffffe          BL       lsm6dsl_tap_threshold_x_set
0000b6  b110              CBZ      r0,|L3.190|
0000b8  f04f30ff          MOV      r0,#0xffffffff        ;2074
0000bc  e7aa              B        |L3.20|
                  |L3.190|
0000be  2100              MOVS     r1,#0                 ;2078
0000c0  f104001c          ADD      r0,r4,#0x1c           ;2078
0000c4  f7fffffe          BL       lsm6dsl_tap_detection_on_z_set
0000c8  b110              CBZ      r0,|L3.208|
0000ca  f04f30ff          MOV      r0,#0xffffffff        ;2080
0000ce  e7a1              B        |L3.20|
                  |L3.208|
0000d0  2100              MOVS     r1,#0                 ;2084
0000d2  f104001c          ADD      r0,r4,#0x1c           ;2084
0000d6  f7fffffe          BL       lsm6dsl_tap_detection_on_y_set
0000da  b110              CBZ      r0,|L3.226|
0000dc  f04f30ff          MOV      r0,#0xffffffff        ;2086
0000e0  e798              B        |L3.20|
                  |L3.226|
0000e2  2100              MOVS     r1,#0                 ;2090
0000e4  f104001c          ADD      r0,r4,#0x1c           ;2090
0000e8  f7fffffe          BL       lsm6dsl_tap_detection_on_x_set
0000ec  b110              CBZ      r0,|L3.244|
0000ee  f04f30ff          MOV      r0,#0xffffffff        ;2092
0000f2  e78f              B        |L3.20|
                  |L3.244|
0000f4  2000              MOVS     r0,#0                 ;2095
0000f6  e78d              B        |L3.20|
;;;2097   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Disable_Free_Fall_Detection||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Disable_Free_Fall_Detection PROC
;;;1082    */
;;;1083   int32_t LSM6DSL_ACC_Disable_Free_Fall_Detection(LSM6DSL_Object_t *pObj)
000000  b51c              PUSH     {r2-r4,lr}
;;;1084   {
000002  4604              MOV      r4,r0
;;;1085     lsm6dsl_int1_route_t val1;
;;;1086     lsm6dsl_int2_route_t val2;
;;;1087   
;;;1088     /* Disable free fall event on both INT1 and INT2 pins */
;;;1089     if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
000004  a901              ADD      r1,sp,#4
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00000e  b110              CBZ      r0,|L4.22|
;;;1090     {
;;;1091       return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L4.20|
;;;1092     }
;;;1093   
;;;1094     val1.int1_ff = PROPERTY_DISABLE;
;;;1095   
;;;1096     if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1097     {
;;;1098       return LSM6DSL_ERROR;
;;;1099     }
;;;1100   
;;;1101     if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;1102     {
;;;1103       return LSM6DSL_ERROR;
;;;1104     }
;;;1105   
;;;1106     val2.int2_ff = PROPERTY_DISABLE;
;;;1107   
;;;1108     if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;1109     {
;;;1110       return LSM6DSL_ERROR;
;;;1111     }
;;;1112   
;;;1113     /* FF_DUR setting */
;;;1114     if (lsm6dsl_ff_dur_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;1115     {
;;;1116       return LSM6DSL_ERROR;
;;;1117     }
;;;1118   
;;;1119     /* FF_THS setting */
;;;1120     if (lsm6dsl_ff_threshold_set(&(pObj->Ctx), LSM6DSL_FF_TSH_156mg) != LSM6DSL_OK)
;;;1121     {
;;;1122       return LSM6DSL_ERROR;
;;;1123     }
;;;1124   
;;;1125     return LSM6DSL_OK;
;;;1126   }
000014  bd1c              POP      {r2-r4,pc}
                  |L4.22|
000016  f89d0005          LDRB     r0,[sp,#5]            ;1094
00001a  f0200010          BIC      r0,r0,#0x10           ;1094
00001e  f88d0005          STRB     r0,[sp,#5]            ;1094
000022  f104001c          ADD      r0,r4,#0x1c           ;1096
000026  9901              LDR      r1,[sp,#4]            ;1096
000028  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00002c  b110              CBZ      r0,|L4.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;1098
000032  e7ef              B        |L4.20|
                  |L4.52|
000034  4669              MOV      r1,sp                 ;1101
000036  f104001c          ADD      r0,r4,#0x1c           ;1101
00003a  f7fffffe          BL       lsm6dsl_pin_int2_route_get
00003e  b110              CBZ      r0,|L4.70|
000040  f04f30ff          MOV      r0,#0xffffffff        ;1103
000044  e7e6              B        |L4.20|
                  |L4.70|
000046  f89d0001          LDRB     r0,[sp,#1]            ;1106
00004a  f0200010          BIC      r0,r0,#0x10           ;1106
00004e  f88d0001          STRB     r0,[sp,#1]            ;1106
000052  f104001c          ADD      r0,r4,#0x1c           ;1108
000056  9900              LDR      r1,[sp,#0]            ;1108
000058  f7fffffe          BL       lsm6dsl_pin_int2_route_set
00005c  b110              CBZ      r0,|L4.100|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;1110
000062  e7d7              B        |L4.20|
                  |L4.100|
000064  2100              MOVS     r1,#0                 ;1114
000066  f104001c          ADD      r0,r4,#0x1c           ;1114
00006a  f7fffffe          BL       lsm6dsl_ff_dur_set
00006e  b110              CBZ      r0,|L4.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;1116
000074  e7ce              B        |L4.20|
                  |L4.118|
000076  2100              MOVS     r1,#0                 ;1120
000078  f104001c          ADD      r0,r4,#0x1c           ;1120
00007c  f7fffffe          BL       lsm6dsl_ff_threshold_set
000080  b110              CBZ      r0,|L4.136|
000082  f04f30ff          MOV      r0,#0xffffffff        ;1122
000086  e7c5              B        |L4.20|
                  |L4.136|
000088  2000              MOVS     r0,#0                 ;1125
00008a  e7c3              B        |L4.20|
;;;1127   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Disable_Inactivity_Detection||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Disable_Inactivity_Detection PROC
;;;1655    */
;;;1656   int32_t LSM6DSL_ACC_Disable_Inactivity_Detection(LSM6DSL_Object_t *pObj)
000000  b51c              PUSH     {r2-r4,lr}
;;;1657   {
000002  4604              MOV      r4,r0
;;;1658     lsm6dsl_int1_route_t val1;
;;;1659     lsm6dsl_int2_route_t val2;
;;;1660   
;;;1661     /* Disable activity/inactivity event on both INT1 and INT2 pins */
;;;1662     if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
000004  a901              ADD      r1,sp,#4
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00000e  b110              CBZ      r0,|L5.22|
;;;1663     {
;;;1664       return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L5.20|
;;;1665     }
;;;1666   
;;;1667     val1.int1_inact_state = PROPERTY_DISABLE;
;;;1668   
;;;1669     if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1670     {
;;;1671       return LSM6DSL_ERROR;
;;;1672     }
;;;1673   
;;;1674     if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;1675     {
;;;1676       return LSM6DSL_ERROR;
;;;1677     }
;;;1678   
;;;1679     val2.int2_inact_state = PROPERTY_DISABLE;
;;;1680   
;;;1681     if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;1682     {
;;;1683       return LSM6DSL_ERROR;
;;;1684     }
;;;1685   
;;;1686     /* Disable inactivity detection. */
;;;1687     if (lsm6dsl_act_mode_set(&(pObj->Ctx), LSM6DSL_PROPERTY_DISABLE) != LSM6DSL_OK)
;;;1688     {
;;;1689       return LSM6DSL_ERROR;
;;;1690     }
;;;1691   
;;;1692     /* Reset wake up threshold. */
;;;1693     if (lsm6dsl_wkup_threshold_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;1694     {
;;;1695       return LSM6DSL_ERROR;
;;;1696     }
;;;1697   
;;;1698     /* SLEEP_DUR setting */
;;;1699     if (lsm6dsl_act_sleep_dur_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;1700     {
;;;1701       return LSM6DSL_ERROR;
;;;1702     }
;;;1703   
;;;1704     return LSM6DSL_OK;
;;;1705   }
000014  bd1c              POP      {r2-r4,pc}
                  |L5.22|
000016  f89d0005          LDRB     r0,[sp,#5]            ;1667
00001a  f0200080          BIC      r0,r0,#0x80           ;1667
00001e  f88d0005          STRB     r0,[sp,#5]            ;1667
000022  f104001c          ADD      r0,r4,#0x1c           ;1669
000026  9901              LDR      r1,[sp,#4]            ;1669
000028  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00002c  b110              CBZ      r0,|L5.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;1671
000032  e7ef              B        |L5.20|
                  |L5.52|
000034  4669              MOV      r1,sp                 ;1674
000036  f104001c          ADD      r0,r4,#0x1c           ;1674
00003a  f7fffffe          BL       lsm6dsl_pin_int2_route_get
00003e  b110              CBZ      r0,|L5.70|
000040  f04f30ff          MOV      r0,#0xffffffff        ;1676
000044  e7e6              B        |L5.20|
                  |L5.70|
000046  f89d0001          LDRB     r0,[sp,#1]            ;1679
00004a  f0200080          BIC      r0,r0,#0x80           ;1679
00004e  f88d0001          STRB     r0,[sp,#1]            ;1679
000052  f104001c          ADD      r0,r4,#0x1c           ;1681
000056  9900              LDR      r1,[sp,#0]            ;1681
000058  f7fffffe          BL       lsm6dsl_pin_int2_route_set
00005c  b110              CBZ      r0,|L5.100|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;1683
000062  e7d7              B        |L5.20|
                  |L5.100|
000064  2100              MOVS     r1,#0                 ;1687
000066  f104001c          ADD      r0,r4,#0x1c           ;1687
00006a  f7fffffe          BL       lsm6dsl_act_mode_set
00006e  b110              CBZ      r0,|L5.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;1689
000074  e7ce              B        |L5.20|
                  |L5.118|
000076  2100              MOVS     r1,#0                 ;1693
000078  f104001c          ADD      r0,r4,#0x1c           ;1693
00007c  f7fffffe          BL       lsm6dsl_wkup_threshold_set
000080  b110              CBZ      r0,|L5.136|
000082  f04f30ff          MOV      r0,#0xffffffff        ;1695
000086  e7c5              B        |L5.20|
                  |L5.136|
000088  2100              MOVS     r1,#0                 ;1699
00008a  f104001c          ADD      r0,r4,#0x1c           ;1699
00008e  f7fffffe          BL       lsm6dsl_act_sleep_dur_set
000092  b110              CBZ      r0,|L5.154|
000094  f04f30ff          MOV      r0,#0xffffffff        ;1701
000098  e7bc              B        |L5.20|
                  |L5.154|
00009a  2000              MOVS     r0,#0                 ;1704
00009c  e7ba              B        |L5.20|
;;;1706   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Disable_Pedometer||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Disable_Pedometer PROC
;;;1213    */
;;;1214   int32_t LSM6DSL_ACC_Disable_Pedometer(LSM6DSL_Object_t *pObj)
000000  b538              PUSH     {r3-r5,lr}
;;;1215   {
000002  4604              MOV      r4,r0
;;;1216     lsm6dsl_int1_route_t val1;
;;;1217   
;;;1218     /* Disable step detector on INT1 pin */
;;;1219     if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
000004  4669              MOV      r1,sp
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00000e  b110              CBZ      r0,|L6.22|
;;;1220     {
;;;1221       return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L6.20|
;;;1222     }
;;;1223   
;;;1224     val1.int1_step_detector = PROPERTY_DISABLE;
;;;1225   
;;;1226     if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1227     {
;;;1228       return LSM6DSL_ERROR;
;;;1229     }
;;;1230   
;;;1231     /* Disable pedometer algorithm. */
;;;1232     if (lsm6dsl_pedo_sens_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSL_OK)
;;;1233     {
;;;1234       return LSM6DSL_ERROR;
;;;1235     }
;;;1236   
;;;1237     /* Reset pedometer threshold. */
;;;1238     if (lsm6dsl_pedo_threshold_set(&(pObj->Ctx), 0x0) != LSM6DSL_OK)
;;;1239     {
;;;1240       return LSM6DSL_ERROR;
;;;1241     }
;;;1242   
;;;1243     return LSM6DSL_OK;
;;;1244   }
000014  bd38              POP      {r3-r5,pc}
                  |L6.22|
000016  f89d0000          LDRB     r0,[sp,#0]            ;1224
00001a  f0200080          BIC      r0,r0,#0x80           ;1224
00001e  f88d0000          STRB     r0,[sp,#0]            ;1224
000022  f104001c          ADD      r0,r4,#0x1c           ;1226
000026  9900              LDR      r1,[sp,#0]            ;1226
000028  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00002c  b110              CBZ      r0,|L6.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;1228
000032  e7ef              B        |L6.20|
                  |L6.52|
000034  2100              MOVS     r1,#0                 ;1232
000036  f104001c          ADD      r0,r4,#0x1c           ;1232
00003a  f7fffffe          BL       lsm6dsl_pedo_sens_set
00003e  b110              CBZ      r0,|L6.70|
000040  f04f30ff          MOV      r0,#0xffffffff        ;1234
000044  e7e6              B        |L6.20|
                  |L6.70|
000046  2100              MOVS     r1,#0                 ;1238
000048  f104001c          ADD      r0,r4,#0x1c           ;1238
00004c  f7fffffe          BL       lsm6dsl_pedo_threshold_set
000050  b110              CBZ      r0,|L6.88|
000052  f04f30ff          MOV      r0,#0xffffffff        ;1240
000056  e7dd              B        |L6.20|
                  |L6.88|
000058  2000              MOVS     r0,#0                 ;1243
00005a  e7db              B        |L6.20|
;;;1245   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Disable_Single_Tap_Detection||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Disable_Single_Tap_Detection PROC
;;;1831    */
;;;1832   int32_t LSM6DSL_ACC_Disable_Single_Tap_Detection(LSM6DSL_Object_t *pObj)
000000  b51c              PUSH     {r2-r4,lr}
;;;1833   {
000002  4604              MOV      r4,r0
;;;1834     lsm6dsl_int1_route_t val1;
;;;1835     lsm6dsl_int2_route_t val2;
;;;1836   
;;;1837     /* Disable single tap event on both INT1 and INT2 pins */
;;;1838     if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
000004  a901              ADD      r1,sp,#4
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00000e  b110              CBZ      r0,|L7.22|
;;;1839     {
;;;1840       return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L7.20|
;;;1841     }
;;;1842   
;;;1843     val1.int1_single_tap = PROPERTY_DISABLE;
;;;1844   
;;;1845     if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1846     {
;;;1847       return LSM6DSL_ERROR;
;;;1848     }
;;;1849   
;;;1850     if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;1851     {
;;;1852       return LSM6DSL_ERROR;
;;;1853     }
;;;1854   
;;;1855     val2.int2_single_tap = PROPERTY_DISABLE;
;;;1856   
;;;1857     if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;1858     {
;;;1859       return LSM6DSL_ERROR;
;;;1860     }
;;;1861   
;;;1862     /* Reset tap quiet time window. */
;;;1863     if (lsm6dsl_tap_quiet_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;1864     {
;;;1865       return LSM6DSL_ERROR;
;;;1866     }
;;;1867   
;;;1868     /* Reset tap shock time window. */
;;;1869     if (lsm6dsl_tap_shock_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;1870     {
;;;1871       return LSM6DSL_ERROR;
;;;1872     }
;;;1873   
;;;1874     /* Reset tap threshold. */
;;;1875     if (lsm6dsl_tap_threshold_x_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;1876     {
;;;1877       return LSM6DSL_ERROR;
;;;1878     }
;;;1879   
;;;1880     /* Disable Z direction in tap recognition. */
;;;1881     if (lsm6dsl_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSL_OK)
;;;1882     {
;;;1883       return LSM6DSL_ERROR;
;;;1884     }
;;;1885   
;;;1886     /* Disable Y direction in tap recognition. */
;;;1887     if (lsm6dsl_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSL_OK)
;;;1888     {
;;;1889       return LSM6DSL_ERROR;
;;;1890     }
;;;1891   
;;;1892     /* Disable X direction in tap recognition. */
;;;1893     if (lsm6dsl_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSL_OK)
;;;1894     {
;;;1895       return LSM6DSL_ERROR;
;;;1896     }
;;;1897   
;;;1898     return LSM6DSL_OK;
;;;1899   }
000014  bd1c              POP      {r2-r4,pc}
                  |L7.22|
000016  f89d0005          LDRB     r0,[sp,#5]            ;1843
00001a  f0200040          BIC      r0,r0,#0x40           ;1843
00001e  f88d0005          STRB     r0,[sp,#5]            ;1843
000022  f104001c          ADD      r0,r4,#0x1c           ;1845
000026  9901              LDR      r1,[sp,#4]            ;1845
000028  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00002c  b110              CBZ      r0,|L7.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;1847
000032  e7ef              B        |L7.20|
                  |L7.52|
000034  4669              MOV      r1,sp                 ;1850
000036  f104001c          ADD      r0,r4,#0x1c           ;1850
00003a  f7fffffe          BL       lsm6dsl_pin_int2_route_get
00003e  b110              CBZ      r0,|L7.70|
000040  f04f30ff          MOV      r0,#0xffffffff        ;1852
000044  e7e6              B        |L7.20|
                  |L7.70|
000046  f89d0001          LDRB     r0,[sp,#1]            ;1855
00004a  f0200040          BIC      r0,r0,#0x40           ;1855
00004e  f88d0001          STRB     r0,[sp,#1]            ;1855
000052  f104001c          ADD      r0,r4,#0x1c           ;1857
000056  9900              LDR      r1,[sp,#0]            ;1857
000058  f7fffffe          BL       lsm6dsl_pin_int2_route_set
00005c  b110              CBZ      r0,|L7.100|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;1859
000062  e7d7              B        |L7.20|
                  |L7.100|
000064  2100              MOVS     r1,#0                 ;1863
000066  f104001c          ADD      r0,r4,#0x1c           ;1863
00006a  f7fffffe          BL       lsm6dsl_tap_quiet_set
00006e  b110              CBZ      r0,|L7.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;1865
000074  e7ce              B        |L7.20|
                  |L7.118|
000076  2100              MOVS     r1,#0                 ;1869
000078  f104001c          ADD      r0,r4,#0x1c           ;1869
00007c  f7fffffe          BL       lsm6dsl_tap_shock_set
000080  b110              CBZ      r0,|L7.136|
000082  f04f30ff          MOV      r0,#0xffffffff        ;1871
000086  e7c5              B        |L7.20|
                  |L7.136|
000088  2100              MOVS     r1,#0                 ;1875
00008a  f104001c          ADD      r0,r4,#0x1c           ;1875
00008e  f7fffffe          BL       lsm6dsl_tap_threshold_x_set
000092  b110              CBZ      r0,|L7.154|
000094  f04f30ff          MOV      r0,#0xffffffff        ;1877
000098  e7bc              B        |L7.20|
                  |L7.154|
00009a  2100              MOVS     r1,#0                 ;1881
00009c  f104001c          ADD      r0,r4,#0x1c           ;1881
0000a0  f7fffffe          BL       lsm6dsl_tap_detection_on_z_set
0000a4  b110              CBZ      r0,|L7.172|
0000a6  f04f30ff          MOV      r0,#0xffffffff        ;1883
0000aa  e7b3              B        |L7.20|
                  |L7.172|
0000ac  2100              MOVS     r1,#0                 ;1887
0000ae  f104001c          ADD      r0,r4,#0x1c           ;1887
0000b2  f7fffffe          BL       lsm6dsl_tap_detection_on_y_set
0000b6  b110              CBZ      r0,|L7.190|
0000b8  f04f30ff          MOV      r0,#0xffffffff        ;1889
0000bc  e7aa              B        |L7.20|
                  |L7.190|
0000be  2100              MOVS     r1,#0                 ;1893
0000c0  f104001c          ADD      r0,r4,#0x1c           ;1893
0000c4  f7fffffe          BL       lsm6dsl_tap_detection_on_x_set
0000c8  b110              CBZ      r0,|L7.208|
0000ca  f04f30ff          MOV      r0,#0xffffffff        ;1895
0000ce  e7a1              B        |L7.20|
                  |L7.208|
0000d0  2000              MOVS     r0,#0                 ;1898
0000d2  e79f              B        |L7.20|
;;;1900   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Disable_Step_Counter_Reset||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Disable_Step_Counter_Reset PROC
;;;1281    */
;;;1282   int32_t LSM6DSL_ACC_Disable_Step_Counter_Reset(LSM6DSL_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;1283   {
000002  4604              MOV      r4,r0
;;;1284     if (lsm6dsl_pedo_step_reset_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSL_OK)
000004  2100              MOVS     r1,#0
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm6dsl_pedo_step_reset_set
00000e  b110              CBZ      r0,|L8.22|
;;;1285     {
;;;1286       return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L8.20|
;;;1287     }
;;;1288   
;;;1289     return LSM6DSL_OK;
;;;1290   }
000014  bd10              POP      {r4,pc}
                  |L8.22|
000016  2000              MOVS     r0,#0                 ;1289
000018  e7fc              B        |L8.20|
;;;1291   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Disable_Tilt_Detection||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Disable_Tilt_Detection PROC
;;;1381    */
;;;1382   int32_t LSM6DSL_ACC_Disable_Tilt_Detection(LSM6DSL_Object_t *pObj)
000000  b51c              PUSH     {r2-r4,lr}
;;;1383   {
000002  4604              MOV      r4,r0
;;;1384     lsm6dsl_int1_route_t val1;
;;;1385     lsm6dsl_int2_route_t val2;
;;;1386   
;;;1387     /* Disable tilt event on both INT1 and INT2 pins */
;;;1388     if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
000004  a901              ADD      r1,sp,#4
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00000e  b110              CBZ      r0,|L9.22|
;;;1389     {
;;;1390       return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L9.20|
;;;1391     }
;;;1392   
;;;1393     val1.int1_tilt = PROPERTY_DISABLE;
;;;1394   
;;;1395     if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1396     {
;;;1397       return LSM6DSL_ERROR;
;;;1398     }
;;;1399   
;;;1400     if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;1401     {
;;;1402       return LSM6DSL_ERROR;
;;;1403     }
;;;1404   
;;;1405     val2.int2_tilt = PROPERTY_DISABLE;
;;;1406   
;;;1407     if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;1408     {
;;;1409       return LSM6DSL_ERROR;
;;;1410     }
;;;1411   
;;;1412     /* Disable tilt calculation. */
;;;1413     if (lsm6dsl_tilt_sens_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM6DSL_OK)
;;;1414     {
;;;1415       return LSM6DSL_ERROR;
;;;1416     }
;;;1417   
;;;1418     return LSM6DSL_OK;
;;;1419   }
000014  bd1c              POP      {r2-r4,pc}
                  |L9.22|
000016  f89d0005          LDRB     r0,[sp,#5]            ;1393
00001a  f0200002          BIC      r0,r0,#2              ;1393
00001e  f88d0005          STRB     r0,[sp,#5]            ;1393
000022  f104001c          ADD      r0,r4,#0x1c           ;1395
000026  9901              LDR      r1,[sp,#4]            ;1395
000028  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00002c  b110              CBZ      r0,|L9.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;1397
000032  e7ef              B        |L9.20|
                  |L9.52|
000034  4669              MOV      r1,sp                 ;1400
000036  f104001c          ADD      r0,r4,#0x1c           ;1400
00003a  f7fffffe          BL       lsm6dsl_pin_int2_route_get
00003e  b110              CBZ      r0,|L9.70|
000040  f04f30ff          MOV      r0,#0xffffffff        ;1402
000044  e7e6              B        |L9.20|
                  |L9.70|
000046  f89d0001          LDRB     r0,[sp,#1]            ;1405
00004a  f0200002          BIC      r0,r0,#2              ;1405
00004e  f88d0001          STRB     r0,[sp,#1]            ;1405
000052  f104001c          ADD      r0,r4,#0x1c           ;1407
000056  9900              LDR      r1,[sp,#0]            ;1407
000058  f7fffffe          BL       lsm6dsl_pin_int2_route_set
00005c  b110              CBZ      r0,|L9.100|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;1409
000062  e7d7              B        |L9.20|
                  |L9.100|
000064  2100              MOVS     r1,#0                 ;1413
000066  f104001c          ADD      r0,r4,#0x1c           ;1413
00006a  f7fffffe          BL       lsm6dsl_tilt_sens_set
00006e  b110              CBZ      r0,|L9.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;1415
000074  e7ce              B        |L9.20|
                  |L9.118|
000076  2000              MOVS     r0,#0                 ;1418
000078  e7cc              B        |L9.20|
;;;1420   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Disable_Wake_Up_Detection||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Disable_Wake_Up_Detection PROC
;;;1500    */
;;;1501   int32_t LSM6DSL_ACC_Disable_Wake_Up_Detection(LSM6DSL_Object_t *pObj)
000000  b51c              PUSH     {r2-r4,lr}
;;;1502   {
000002  4604              MOV      r4,r0
;;;1503     lsm6dsl_int1_route_t val1;
;;;1504     lsm6dsl_int2_route_t val2;
;;;1505   
;;;1506     /* Disable wake up event on both INT1 and INT2 pins */
;;;1507     if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
000004  a901              ADD      r1,sp,#4
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00000e  b110              CBZ      r0,|L10.22|
;;;1508     {
;;;1509       return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L10.20|
;;;1510     }
;;;1511   
;;;1512     val1.int1_wu = PROPERTY_DISABLE;
;;;1513   
;;;1514     if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1515     {
;;;1516       return LSM6DSL_ERROR;
;;;1517     }
;;;1518   
;;;1519     if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;1520     {
;;;1521       return LSM6DSL_ERROR;
;;;1522     }
;;;1523   
;;;1524     val2.int2_wu = PROPERTY_DISABLE;
;;;1525   
;;;1526     if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;1527     {
;;;1528       return LSM6DSL_ERROR;
;;;1529     }
;;;1530   
;;;1531     /* Reset wake up threshold. */
;;;1532     if (lsm6dsl_wkup_threshold_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;1533     {
;;;1534       return LSM6DSL_ERROR;
;;;1535     }
;;;1536   
;;;1537     /* WAKE_DUR setting */
;;;1538     if (lsm6dsl_wkup_dur_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;1539     {
;;;1540       return LSM6DSL_ERROR;
;;;1541     }
;;;1542   
;;;1543     return LSM6DSL_OK;
;;;1544   }
000014  bd1c              POP      {r2-r4,pc}
                  |L10.22|
000016  f89d0005          LDRB     r0,[sp,#5]            ;1512
00001a  f0200020          BIC      r0,r0,#0x20           ;1512
00001e  f88d0005          STRB     r0,[sp,#5]            ;1512
000022  f104001c          ADD      r0,r4,#0x1c           ;1514
000026  9901              LDR      r1,[sp,#4]            ;1514
000028  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00002c  b110              CBZ      r0,|L10.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;1516
000032  e7ef              B        |L10.20|
                  |L10.52|
000034  4669              MOV      r1,sp                 ;1519
000036  f104001c          ADD      r0,r4,#0x1c           ;1519
00003a  f7fffffe          BL       lsm6dsl_pin_int2_route_get
00003e  b110              CBZ      r0,|L10.70|
000040  f04f30ff          MOV      r0,#0xffffffff        ;1521
000044  e7e6              B        |L10.20|
                  |L10.70|
000046  f89d0001          LDRB     r0,[sp,#1]            ;1524
00004a  f0200020          BIC      r0,r0,#0x20           ;1524
00004e  f88d0001          STRB     r0,[sp,#1]            ;1524
000052  f104001c          ADD      r0,r4,#0x1c           ;1526
000056  9900              LDR      r1,[sp,#0]            ;1526
000058  f7fffffe          BL       lsm6dsl_pin_int2_route_set
00005c  b110              CBZ      r0,|L10.100|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;1528
000062  e7d7              B        |L10.20|
                  |L10.100|
000064  2100              MOVS     r1,#0                 ;1532
000066  f104001c          ADD      r0,r4,#0x1c           ;1532
00006a  f7fffffe          BL       lsm6dsl_wkup_threshold_set
00006e  b110              CBZ      r0,|L10.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;1534
000074  e7ce              B        |L10.20|
                  |L10.118|
000076  2100              MOVS     r1,#0                 ;1538
000078  f104001c          ADD      r0,r4,#0x1c           ;1538
00007c  f7fffffe          BL       lsm6dsl_wkup_dur_set
000080  b110              CBZ      r0,|L10.136|
000082  f04f30ff          MOV      r0,#0xffffffff        ;1540
000086  e7c5              B        |L10.20|
                  |L10.136|
000088  2000              MOVS     r0,#0                 ;1543
00008a  e7c3              B        |L10.20|
;;;1545   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Enable||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Enable PROC
;;;301     */
;;;302    int32_t LSM6DSL_ACC_Enable(LSM6DSL_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;303    {
000002  4604              MOV      r4,r0
;;;304      /* Check if the component is already enabled */
;;;305      if (pObj->acc_is_enabled == 1U)
000004  f8940029          LDRB     r0,[r4,#0x29]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L11.16|
;;;306      {
;;;307        return LSM6DSL_OK;
00000c  2000              MOVS     r0,#0
                  |L11.14|
;;;308      }
;;;309    
;;;310      /* Output data rate selection. */
;;;311      if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM6DSL_OK)
;;;312      {
;;;313        return LSM6DSL_ERROR;
;;;314      }
;;;315    
;;;316      pObj->acc_is_enabled = 1;
;;;317    
;;;318      return LSM6DSL_OK;
;;;319    }
00000e  bd10              POP      {r4,pc}
                  |L11.16|
000010  f894102b          LDRB     r1,[r4,#0x2b]         ;311
000014  f104001c          ADD      r0,r4,#0x1c           ;311
000018  f7fffffe          BL       lsm6dsl_xl_data_rate_set
00001c  b110              CBZ      r0,|L11.36|
00001e  f04f30ff          MOV      r0,#0xffffffff        ;313
000022  e7f4              B        |L11.14|
                  |L11.36|
000024  2001              MOVS     r0,#1                 ;316
000026  f8840029          STRB     r0,[r4,#0x29]         ;316
00002a  2000              MOVS     r0,#0                 ;318
00002c  e7ef              B        |L11.14|
;;;320    
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Enable_6D_Orientation||, CODE, READONLY, ALIGN=2

                  LSM6DSL_ACC_Enable_6D_Orientation PROC
;;;2171    */
;;;2172   int32_t LSM6DSL_ACC_Enable_6D_Orientation(LSM6DSL_Object_t *pObj, LSM6DSL_SensorIntPin_t IntPin)
000000  b57c              PUSH     {r2-r6,lr}
;;;2173   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2174     int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;2175     lsm6dsl_int1_route_t val1;
;;;2176     lsm6dsl_int2_route_t val2;
;;;2177   
;;;2178     /* Output Data Rate selection */
;;;2179     if (LSM6DSL_ACC_SetOutputDataRate(pObj, 416.0f) != LSM6DSL_OK)
000008  ed9f0a2b          VLDR     s0,|L12.184|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LSM6DSL_ACC_SetOutputDataRate
000012  b108              CBZ      r0,|L12.24|
;;;2180     {
;;;2181       return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L12.22|
;;;2182     }
;;;2183   
;;;2184     /* Full scale selection */
;;;2185     if (LSM6DSL_ACC_SetFullScale(pObj, 2) != LSM6DSL_OK)
;;;2186     {
;;;2187       return LSM6DSL_ERROR;
;;;2188     }
;;;2189   
;;;2190     /* 6D orientation enabled. */
;;;2191     if (lsm6dsl_6d_threshold_set(&(pObj->Ctx), LSM6DSL_DEG_60) != LSM6DSL_OK)
;;;2192     {
;;;2193       return LSM6DSL_ERROR;
;;;2194     }
;;;2195   
;;;2196     /* Enable 6D orientation event on either INT1 or INT2 pin */
;;;2197     switch (IntPin)
;;;2198     {
;;;2199       case LSM6DSL_INT1_PIN:
;;;2200         if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
;;;2201         {
;;;2202           return LSM6DSL_ERROR;
;;;2203         }
;;;2204   
;;;2205         val1.int1_6d = PROPERTY_ENABLE;
;;;2206   
;;;2207         if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;2208         {
;;;2209           return LSM6DSL_ERROR;
;;;2210         }
;;;2211         break;
;;;2212   
;;;2213       case LSM6DSL_INT2_PIN:
;;;2214         if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;2215         {
;;;2216           return LSM6DSL_ERROR;
;;;2217         }
;;;2218   
;;;2219         val2.int2_6d = PROPERTY_ENABLE;
;;;2220   
;;;2221         if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;2222         {
;;;2223           return LSM6DSL_ERROR;
;;;2224         }
;;;2225         break;
;;;2226   
;;;2227       default:
;;;2228         ret = LSM6DSL_ERROR;
;;;2229         break;
;;;2230     }
;;;2231   
;;;2232     return ret;
;;;2233   }
000016  bd7c              POP      {r2-r6,pc}
                  |L12.24|
000018  2102              MOVS     r1,#2                 ;2185
00001a  4620              MOV      r0,r4                 ;2185
00001c  f7fffffe          BL       LSM6DSL_ACC_SetFullScale
000020  b110              CBZ      r0,|L12.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;2187
000026  e7f6              B        |L12.22|
                  |L12.40|
000028  2102              MOVS     r1,#2                 ;2191
00002a  f104001c          ADD      r0,r4,#0x1c           ;2191
00002e  f7fffffe          BL       lsm6dsl_6d_threshold_set
000032  b110              CBZ      r0,|L12.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;2193
000038  e7ed              B        |L12.22|
                  |L12.58|
00003a  b115              CBZ      r5,|L12.66|
00003c  2d01              CMP      r5,#1                 ;2197
00003e  d134              BNE      |L12.170|
000040  e019              B        |L12.118|
                  |L12.66|
000042  a901              ADD      r1,sp,#4              ;2200
000044  f104001c          ADD      r0,r4,#0x1c           ;2200
000048  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00004c  b110              CBZ      r0,|L12.84|
00004e  f04f30ff          MOV      r0,#0xffffffff        ;2202
000052  e7e0              B        |L12.22|
                  |L12.84|
000054  f89d0005          LDRB     r0,[sp,#5]            ;2205
000058  f0200004          BIC      r0,r0,#4              ;2205
00005c  1d00              ADDS     r0,r0,#4              ;2205
00005e  f88d0005          STRB     r0,[sp,#5]            ;2205
000062  f104001c          ADD      r0,r4,#0x1c           ;2207
000066  9901              LDR      r1,[sp,#4]            ;2207
000068  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00006c  b110              CBZ      r0,|L12.116|
00006e  f04f30ff          MOV      r0,#0xffffffff        ;2209
000072  e7d0              B        |L12.22|
                  |L12.116|
000074  e01c              B        |L12.176|
                  |L12.118|
000076  4669              MOV      r1,sp                 ;2214
000078  f104001c          ADD      r0,r4,#0x1c           ;2214
00007c  f7fffffe          BL       lsm6dsl_pin_int2_route_get
000080  b110              CBZ      r0,|L12.136|
000082  f04f30ff          MOV      r0,#0xffffffff        ;2216
000086  e7c6              B        |L12.22|
                  |L12.136|
000088  f89d0001          LDRB     r0,[sp,#1]            ;2219
00008c  f0200004          BIC      r0,r0,#4              ;2219
000090  1d00              ADDS     r0,r0,#4              ;2219
000092  f88d0001          STRB     r0,[sp,#1]            ;2219
000096  f104001c          ADD      r0,r4,#0x1c           ;2221
00009a  9900              LDR      r1,[sp,#0]            ;2221
00009c  f7fffffe          BL       lsm6dsl_pin_int2_route_set
0000a0  b110              CBZ      r0,|L12.168|
0000a2  f04f30ff          MOV      r0,#0xffffffff        ;2223
0000a6  e7b6              B        |L12.22|
                  |L12.168|
0000a8  e002              B        |L12.176|
                  |L12.170|
0000aa  f04f36ff          MOV      r6,#0xffffffff        ;2228
0000ae  bf00              NOP                            ;2229
                  |L12.176|
0000b0  bf00              NOP                            ;2211
0000b2  4630              MOV      r0,r6                 ;2232
0000b4  e7af              B        |L12.22|
;;;2234   
                          ENDP

0000b6  0000              DCW      0x0000
                  |L12.184|
0000b8  43d00000          DCFS     0x43d00000 ; 416

                          AREA ||i.LSM6DSL_ACC_Enable_Double_Tap_Detection||, CODE, READONLY, ALIGN=2

                  LSM6DSL_ACC_Enable_Double_Tap_Detection PROC
;;;1906    */
;;;1907   int32_t LSM6DSL_ACC_Enable_Double_Tap_Detection(LSM6DSL_Object_t *pObj, LSM6DSL_SensorIntPin_t IntPin)
000000  b57c              PUSH     {r2-r6,lr}
;;;1908   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1909     int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;1910     lsm6dsl_int1_route_t val1;
;;;1911     lsm6dsl_int2_route_t val2;
;;;1912   
;;;1913     /* Output Data Rate selection */
;;;1914     if (LSM6DSL_ACC_SetOutputDataRate(pObj, 416.0f) != LSM6DSL_OK)
000008  ed9f0a4a          VLDR     s0,|L13.308|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LSM6DSL_ACC_SetOutputDataRate
000012  b108              CBZ      r0,|L13.24|
;;;1915     {
;;;1916       return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L13.22|
;;;1917     }
;;;1918   
;;;1919     /* Full scale selection */
;;;1920     if (LSM6DSL_ACC_SetFullScale(pObj, 2) != LSM6DSL_OK)
;;;1921     {
;;;1922       return LSM6DSL_ERROR;
;;;1923     }
;;;1924   
;;;1925     /* Enable X direction in tap recognition. */
;;;1926     if (lsm6dsl_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
;;;1927     {
;;;1928       return LSM6DSL_ERROR;
;;;1929     }
;;;1930   
;;;1931     /* Enable Y direction in tap recognition. */
;;;1932     if (lsm6dsl_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
;;;1933     {
;;;1934       return LSM6DSL_ERROR;
;;;1935     }
;;;1936   
;;;1937     /* Enable Z direction in tap recognition. */
;;;1938     if (lsm6dsl_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
;;;1939     {
;;;1940       return LSM6DSL_ERROR;
;;;1941     }
;;;1942   
;;;1943     /* Set tap threshold. */
;;;1944     if (lsm6dsl_tap_threshold_x_set(&(pObj->Ctx), 0x08) != LSM6DSL_OK)
;;;1945     {
;;;1946       return LSM6DSL_ERROR;
;;;1947     }
;;;1948   
;;;1949     /* Set tap shock time window. */
;;;1950     if (lsm6dsl_tap_shock_set(&(pObj->Ctx), 0x03) != LSM6DSL_OK)
;;;1951     {
;;;1952       return LSM6DSL_ERROR;
;;;1953     }
;;;1954   
;;;1955     /* Set tap quiet time window. */
;;;1956     if (lsm6dsl_tap_quiet_set(&(pObj->Ctx), 0x03) != LSM6DSL_OK)
;;;1957     {
;;;1958       return LSM6DSL_ERROR;
;;;1959     }
;;;1960   
;;;1961     /* Set tap duration time window. */
;;;1962     if (lsm6dsl_tap_dur_set(&(pObj->Ctx), 0x08) != LSM6DSL_OK)
;;;1963     {
;;;1964       return LSM6DSL_ERROR;
;;;1965     }
;;;1966   
;;;1967     /* Single and double tap enabled. */
;;;1968     if (lsm6dsl_tap_mode_set(&(pObj->Ctx), LSM6DSL_BOTH_SINGLE_DOUBLE) != LSM6DSL_OK)
;;;1969     {
;;;1970       return LSM6DSL_ERROR;
;;;1971     }
;;;1972   
;;;1973     /* Enable double tap event on either INT1 or INT2 pin */
;;;1974     switch (IntPin)
;;;1975     {
;;;1976       case LSM6DSL_INT1_PIN:
;;;1977         if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
;;;1978         {
;;;1979           return LSM6DSL_ERROR;
;;;1980         }
;;;1981   
;;;1982         val1.int1_double_tap = PROPERTY_ENABLE;
;;;1983   
;;;1984         if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1985         {
;;;1986           return LSM6DSL_ERROR;
;;;1987         }
;;;1988         break;
;;;1989   
;;;1990       case LSM6DSL_INT2_PIN:
;;;1991         if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;1992         {
;;;1993           return LSM6DSL_ERROR;
;;;1994         }
;;;1995   
;;;1996         val2.int2_double_tap = PROPERTY_ENABLE;
;;;1997   
;;;1998         if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;1999         {
;;;2000           return LSM6DSL_ERROR;
;;;2001         }
;;;2002         break;
;;;2003   
;;;2004       default:
;;;2005         ret = LSM6DSL_ERROR;
;;;2006         break;
;;;2007     }
;;;2008   
;;;2009     return ret;
;;;2010   }
000016  bd7c              POP      {r2-r6,pc}
                  |L13.24|
000018  2102              MOVS     r1,#2                 ;1920
00001a  4620              MOV      r0,r4                 ;1920
00001c  f7fffffe          BL       LSM6DSL_ACC_SetFullScale
000020  b110              CBZ      r0,|L13.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;1922
000026  e7f6              B        |L13.22|
                  |L13.40|
000028  2101              MOVS     r1,#1                 ;1926
00002a  f104001c          ADD      r0,r4,#0x1c           ;1926
00002e  f7fffffe          BL       lsm6dsl_tap_detection_on_x_set
000032  b110              CBZ      r0,|L13.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;1928
000038  e7ed              B        |L13.22|
                  |L13.58|
00003a  2101              MOVS     r1,#1                 ;1932
00003c  f104001c          ADD      r0,r4,#0x1c           ;1932
000040  f7fffffe          BL       lsm6dsl_tap_detection_on_y_set
000044  b110              CBZ      r0,|L13.76|
000046  f04f30ff          MOV      r0,#0xffffffff        ;1934
00004a  e7e4              B        |L13.22|
                  |L13.76|
00004c  2101              MOVS     r1,#1                 ;1938
00004e  f104001c          ADD      r0,r4,#0x1c           ;1938
000052  f7fffffe          BL       lsm6dsl_tap_detection_on_z_set
000056  b110              CBZ      r0,|L13.94|
000058  f04f30ff          MOV      r0,#0xffffffff        ;1940
00005c  e7db              B        |L13.22|
                  |L13.94|
00005e  2108              MOVS     r1,#8                 ;1944
000060  f104001c          ADD      r0,r4,#0x1c           ;1944
000064  f7fffffe          BL       lsm6dsl_tap_threshold_x_set
000068  b110              CBZ      r0,|L13.112|
00006a  f04f30ff          MOV      r0,#0xffffffff        ;1946
00006e  e7d2              B        |L13.22|
                  |L13.112|
000070  2103              MOVS     r1,#3                 ;1950
000072  f104001c          ADD      r0,r4,#0x1c           ;1950
000076  f7fffffe          BL       lsm6dsl_tap_shock_set
00007a  b110              CBZ      r0,|L13.130|
00007c  f04f30ff          MOV      r0,#0xffffffff        ;1952
000080  e7c9              B        |L13.22|
                  |L13.130|
000082  2103              MOVS     r1,#3                 ;1956
000084  f104001c          ADD      r0,r4,#0x1c           ;1956
000088  f7fffffe          BL       lsm6dsl_tap_quiet_set
00008c  b110              CBZ      r0,|L13.148|
00008e  f04f30ff          MOV      r0,#0xffffffff        ;1958
000092  e7c0              B        |L13.22|
                  |L13.148|
000094  2108              MOVS     r1,#8                 ;1962
000096  f104001c          ADD      r0,r4,#0x1c           ;1962
00009a  f7fffffe          BL       lsm6dsl_tap_dur_set
00009e  b110              CBZ      r0,|L13.166|
0000a0  f04f30ff          MOV      r0,#0xffffffff        ;1964
0000a4  e7b7              B        |L13.22|
                  |L13.166|
0000a6  2101              MOVS     r1,#1                 ;1968
0000a8  f104001c          ADD      r0,r4,#0x1c           ;1968
0000ac  f7fffffe          BL       lsm6dsl_tap_mode_set
0000b0  b110              CBZ      r0,|L13.184|
0000b2  f04f30ff          MOV      r0,#0xffffffff        ;1970
0000b6  e7ae              B        |L13.22|
                  |L13.184|
0000b8  b115              CBZ      r5,|L13.192|
0000ba  2d01              CMP      r5,#1                 ;1974
0000bc  d134              BNE      |L13.296|
0000be  e019              B        |L13.244|
                  |L13.192|
0000c0  a901              ADD      r1,sp,#4              ;1977
0000c2  f104001c          ADD      r0,r4,#0x1c           ;1977
0000c6  f7fffffe          BL       lsm6dsl_pin_int1_route_get
0000ca  b110              CBZ      r0,|L13.210|
0000cc  f04f30ff          MOV      r0,#0xffffffff        ;1979
0000d0  e7a1              B        |L13.22|
                  |L13.210|
0000d2  f89d0005          LDRB     r0,[sp,#5]            ;1982
0000d6  f0200008          BIC      r0,r0,#8              ;1982
0000da  3008              ADDS     r0,r0,#8              ;1982
0000dc  f88d0005          STRB     r0,[sp,#5]            ;1982
0000e0  f104001c          ADD      r0,r4,#0x1c           ;1984
0000e4  9901              LDR      r1,[sp,#4]            ;1984
0000e6  f7fffffe          BL       lsm6dsl_pin_int1_route_set
0000ea  b110              CBZ      r0,|L13.242|
0000ec  f04f30ff          MOV      r0,#0xffffffff        ;1986
0000f0  e791              B        |L13.22|
                  |L13.242|
0000f2  e01c              B        |L13.302|
                  |L13.244|
0000f4  4669              MOV      r1,sp                 ;1991
0000f6  f104001c          ADD      r0,r4,#0x1c           ;1991
0000fa  f7fffffe          BL       lsm6dsl_pin_int2_route_get
0000fe  b110              CBZ      r0,|L13.262|
000100  f04f30ff          MOV      r0,#0xffffffff        ;1993
000104  e787              B        |L13.22|
                  |L13.262|
000106  f89d0001          LDRB     r0,[sp,#1]            ;1996
00010a  f0200008          BIC      r0,r0,#8              ;1996
00010e  3008              ADDS     r0,r0,#8              ;1996
000110  f88d0001          STRB     r0,[sp,#1]            ;1996
000114  f104001c          ADD      r0,r4,#0x1c           ;1998
000118  9900              LDR      r1,[sp,#0]            ;1998
00011a  f7fffffe          BL       lsm6dsl_pin_int2_route_set
00011e  b110              CBZ      r0,|L13.294|
000120  f04f30ff          MOV      r0,#0xffffffff        ;2000
000124  e777              B        |L13.22|
                  |L13.294|
000126  e002              B        |L13.302|
                  |L13.296|
000128  f04f36ff          MOV      r6,#0xffffffff        ;2005
00012c  bf00              NOP                            ;2006
                  |L13.302|
00012e  bf00              NOP                            ;1988
000130  4630              MOV      r0,r6                 ;2009
000132  e770              B        |L13.22|
;;;2011   
                          ENDP

                  |L13.308|
000134  43d00000          DCFS     0x43d00000 ; 416

                          AREA ||i.LSM6DSL_ACC_Enable_Free_Fall_Detection||, CODE, READONLY, ALIGN=2

                  LSM6DSL_ACC_Enable_Free_Fall_Detection PROC
;;;990     */
;;;991    int32_t LSM6DSL_ACC_Enable_Free_Fall_Detection(LSM6DSL_Object_t *pObj, LSM6DSL_SensorIntPin_t IntPin)
000000  b57c              PUSH     {r2-r6,lr}
;;;992    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;993      int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;994      lsm6dsl_int1_route_t val1;
;;;995      lsm6dsl_int2_route_t val2;
;;;996    
;;;997      /* Output Data Rate selection */
;;;998      if (LSM6DSL_ACC_SetOutputDataRate(pObj, 416.0f) != LSM6DSL_OK)
000008  ed9f0a3d          VLDR     s0,|L14.256|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LSM6DSL_ACC_SetOutputDataRate
000012  b108              CBZ      r0,|L14.24|
;;;999      {
;;;1000       return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L14.22|
;;;1001     }
;;;1002   
;;;1003     /* Full scale selection */
;;;1004     if (LSM6DSL_ACC_SetFullScale(pObj, 2) != LSM6DSL_OK)
;;;1005     {
;;;1006       return LSM6DSL_ERROR;
;;;1007     }
;;;1008   
;;;1009     /* FF_DUR setting */
;;;1010     if (lsm6dsl_ff_dur_set(&(pObj->Ctx), 0x06) != LSM6DSL_OK)
;;;1011     {
;;;1012       return LSM6DSL_ERROR;
;;;1013     }
;;;1014   
;;;1015     /* WAKE_DUR setting */
;;;1016     if (lsm6dsl_wkup_dur_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;1017     {
;;;1018       return LSM6DSL_ERROR;
;;;1019     }
;;;1020   
;;;1021     /* TIMER_HR setting */
;;;1022     if (lsm6dsl_timestamp_res_set(&(pObj->Ctx), LSM6DSL_LSB_6ms4) != LSM6DSL_OK)
;;;1023     {
;;;1024       return LSM6DSL_ERROR;
;;;1025     }
;;;1026   
;;;1027     /* SLEEP_DUR setting */
;;;1028     if (lsm6dsl_act_sleep_dur_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;1029     {
;;;1030       return LSM6DSL_ERROR;
;;;1031     }
;;;1032   
;;;1033     /* FF_THS setting */
;;;1034     if (lsm6dsl_ff_threshold_set(&(pObj->Ctx), LSM6DSL_FF_TSH_312mg) != LSM6DSL_OK)
;;;1035     {
;;;1036       return LSM6DSL_ERROR;
;;;1037     }
;;;1038   
;;;1039     /* Enable free fall event on either INT1 or INT2 pin */
;;;1040     switch (IntPin)
;;;1041     {
;;;1042       case LSM6DSL_INT1_PIN:
;;;1043         if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
;;;1044         {
;;;1045           return LSM6DSL_ERROR;
;;;1046         }
;;;1047   
;;;1048         val1.int1_ff = PROPERTY_ENABLE;
;;;1049   
;;;1050         if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1051         {
;;;1052           return LSM6DSL_ERROR;
;;;1053         }
;;;1054         break;
;;;1055   
;;;1056       case LSM6DSL_INT2_PIN:
;;;1057         if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;1058         {
;;;1059           return LSM6DSL_ERROR;
;;;1060         }
;;;1061   
;;;1062         val2.int2_ff = PROPERTY_ENABLE;
;;;1063   
;;;1064         if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;1065         {
;;;1066           return LSM6DSL_ERROR;
;;;1067         }
;;;1068         break;
;;;1069   
;;;1070       default:
;;;1071         ret = LSM6DSL_ERROR;
;;;1072         break;
;;;1073     }
;;;1074   
;;;1075     return ret;
;;;1076   }
000016  bd7c              POP      {r2-r6,pc}
                  |L14.24|
000018  2102              MOVS     r1,#2                 ;1004
00001a  4620              MOV      r0,r4                 ;1004
00001c  f7fffffe          BL       LSM6DSL_ACC_SetFullScale
000020  b110              CBZ      r0,|L14.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;1006
000026  e7f6              B        |L14.22|
                  |L14.40|
000028  2106              MOVS     r1,#6                 ;1010
00002a  f104001c          ADD      r0,r4,#0x1c           ;1010
00002e  f7fffffe          BL       lsm6dsl_ff_dur_set
000032  b110              CBZ      r0,|L14.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;1012
000038  e7ed              B        |L14.22|
                  |L14.58|
00003a  2100              MOVS     r1,#0                 ;1016
00003c  f104001c          ADD      r0,r4,#0x1c           ;1016
000040  f7fffffe          BL       lsm6dsl_wkup_dur_set
000044  b110              CBZ      r0,|L14.76|
000046  f04f30ff          MOV      r0,#0xffffffff        ;1018
00004a  e7e4              B        |L14.22|
                  |L14.76|
00004c  2100              MOVS     r1,#0                 ;1022
00004e  f104001c          ADD      r0,r4,#0x1c           ;1022
000052  f7fffffe          BL       lsm6dsl_timestamp_res_set
000056  b110              CBZ      r0,|L14.94|
000058  f04f30ff          MOV      r0,#0xffffffff        ;1024
00005c  e7db              B        |L14.22|
                  |L14.94|
00005e  2100              MOVS     r1,#0                 ;1028
000060  f104001c          ADD      r0,r4,#0x1c           ;1028
000064  f7fffffe          BL       lsm6dsl_act_sleep_dur_set
000068  b110              CBZ      r0,|L14.112|
00006a  f04f30ff          MOV      r0,#0xffffffff        ;1030
00006e  e7d2              B        |L14.22|
                  |L14.112|
000070  2103              MOVS     r1,#3                 ;1034
000072  f104001c          ADD      r0,r4,#0x1c           ;1034
000076  f7fffffe          BL       lsm6dsl_ff_threshold_set
00007a  b110              CBZ      r0,|L14.130|
00007c  f04f30ff          MOV      r0,#0xffffffff        ;1036
000080  e7c9              B        |L14.22|
                  |L14.130|
000082  b115              CBZ      r5,|L14.138|
000084  2d01              CMP      r5,#1                 ;1040
000086  d134              BNE      |L14.242|
000088  e019              B        |L14.190|
                  |L14.138|
00008a  a901              ADD      r1,sp,#4              ;1043
00008c  f104001c          ADD      r0,r4,#0x1c           ;1043
000090  f7fffffe          BL       lsm6dsl_pin_int1_route_get
000094  b110              CBZ      r0,|L14.156|
000096  f04f30ff          MOV      r0,#0xffffffff        ;1045
00009a  e7bc              B        |L14.22|
                  |L14.156|
00009c  f89d0005          LDRB     r0,[sp,#5]            ;1048
0000a0  f0200010          BIC      r0,r0,#0x10           ;1048
0000a4  3010              ADDS     r0,r0,#0x10           ;1048
0000a6  f88d0005          STRB     r0,[sp,#5]            ;1048
0000aa  f104001c          ADD      r0,r4,#0x1c           ;1050
0000ae  9901              LDR      r1,[sp,#4]            ;1050
0000b0  f7fffffe          BL       lsm6dsl_pin_int1_route_set
0000b4  b110              CBZ      r0,|L14.188|
0000b6  f04f30ff          MOV      r0,#0xffffffff        ;1052
0000ba  e7ac              B        |L14.22|
                  |L14.188|
0000bc  e01c              B        |L14.248|
                  |L14.190|
0000be  4669              MOV      r1,sp                 ;1057
0000c0  f104001c          ADD      r0,r4,#0x1c           ;1057
0000c4  f7fffffe          BL       lsm6dsl_pin_int2_route_get
0000c8  b110              CBZ      r0,|L14.208|
0000ca  f04f30ff          MOV      r0,#0xffffffff        ;1059
0000ce  e7a2              B        |L14.22|
                  |L14.208|
0000d0  f89d0001          LDRB     r0,[sp,#1]            ;1062
0000d4  f0200010          BIC      r0,r0,#0x10           ;1062
0000d8  3010              ADDS     r0,r0,#0x10           ;1062
0000da  f88d0001          STRB     r0,[sp,#1]            ;1062
0000de  f104001c          ADD      r0,r4,#0x1c           ;1064
0000e2  9900              LDR      r1,[sp,#0]            ;1064
0000e4  f7fffffe          BL       lsm6dsl_pin_int2_route_set
0000e8  b110              CBZ      r0,|L14.240|
0000ea  f04f30ff          MOV      r0,#0xffffffff        ;1066
0000ee  e792              B        |L14.22|
                  |L14.240|
0000f0  e002              B        |L14.248|
                  |L14.242|
0000f2  f04f36ff          MOV      r6,#0xffffffff        ;1071
0000f6  bf00              NOP                            ;1072
                  |L14.248|
0000f8  bf00              NOP                            ;1054
0000fa  4630              MOV      r0,r6                 ;1075
0000fc  e78b              B        |L14.22|
;;;1077   
                          ENDP

0000fe  0000              DCW      0x0000
                  |L14.256|
000100  43d00000          DCFS     0x43d00000 ; 416

                          AREA ||i.LSM6DSL_ACC_Enable_Inactivity_Detection||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Enable_Inactivity_Detection PROC
;;;1585    */
;;;1586   int32_t LSM6DSL_ACC_Enable_Inactivity_Detection(LSM6DSL_Object_t *pObj, LSM6DSL_SensorIntPin_t IntPin)
000000  b57c              PUSH     {r2-r6,lr}
;;;1587   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1588     int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;1589     lsm6dsl_int1_route_t val1;
;;;1590     lsm6dsl_int2_route_t val2;
;;;1591   
;;;1592     /* Output Data Rate and Full scale must be selected externally */
;;;1593   
;;;1594     /* SLEEP_DUR setting */
;;;1595     if (lsm6dsl_act_sleep_dur_set(&(pObj->Ctx), 0x01) != LSM6DSL_OK)
000008  2101              MOVS     r1,#1
00000a  f104001c          ADD      r0,r4,#0x1c
00000e  f7fffffe          BL       lsm6dsl_act_sleep_dur_set
000012  b108              CBZ      r0,|L15.24|
;;;1596     {
;;;1597       return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L15.22|
;;;1598     }
;;;1599   
;;;1600     /* Set wake up threshold. */
;;;1601     if (lsm6dsl_wkup_threshold_set(&(pObj->Ctx), 0x02) != LSM6DSL_OK)
;;;1602     {
;;;1603       return LSM6DSL_ERROR;
;;;1604     }
;;;1605   
;;;1606     /* Enable inactivity detection. Gyroscope is left configured as it is */
;;;1607     if (lsm6dsl_act_mode_set(&(pObj->Ctx), LSM6DSL_XL_12Hz5_GY_NOT_AFFECTED) != LSM6DSL_OK)
;;;1608     {
;;;1609       return LSM6DSL_ERROR;
;;;1610     }
;;;1611   
;;;1612     /* Enable activity/inactivity event on either INT1 or INT2 pin */
;;;1613     switch (IntPin)
;;;1614     {
;;;1615       case LSM6DSL_INT1_PIN:
;;;1616         if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
;;;1617         {
;;;1618           return LSM6DSL_ERROR;
;;;1619         }
;;;1620   
;;;1621         val1.int1_inact_state = PROPERTY_ENABLE;
;;;1622   
;;;1623         if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1624         {
;;;1625           return LSM6DSL_ERROR;
;;;1626         }
;;;1627         break;
;;;1628   
;;;1629       case LSM6DSL_INT2_PIN:
;;;1630         if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;1631         {
;;;1632           return LSM6DSL_ERROR;
;;;1633         }
;;;1634   
;;;1635         val2.int2_inact_state = PROPERTY_ENABLE;
;;;1636   
;;;1637         if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;1638         {
;;;1639           return LSM6DSL_ERROR;
;;;1640         }
;;;1641         break;
;;;1642   
;;;1643       default:
;;;1644         ret = LSM6DSL_ERROR;
;;;1645         break;
;;;1646     }
;;;1647   
;;;1648     return ret;
;;;1649   }
000016  bd7c              POP      {r2-r6,pc}
                  |L15.24|
000018  2102              MOVS     r1,#2                 ;1601
00001a  f104001c          ADD      r0,r4,#0x1c           ;1601
00001e  f7fffffe          BL       lsm6dsl_wkup_threshold_set
000022  b110              CBZ      r0,|L15.42|
000024  f04f30ff          MOV      r0,#0xffffffff        ;1603
000028  e7f5              B        |L15.22|
                  |L15.42|
00002a  2101              MOVS     r1,#1                 ;1607
00002c  f104001c          ADD      r0,r4,#0x1c           ;1607
000030  f7fffffe          BL       lsm6dsl_act_mode_set
000034  b110              CBZ      r0,|L15.60|
000036  f04f30ff          MOV      r0,#0xffffffff        ;1609
00003a  e7ec              B        |L15.22|
                  |L15.60|
00003c  b115              CBZ      r5,|L15.68|
00003e  2d01              CMP      r5,#1                 ;1613
000040  d134              BNE      |L15.172|
000042  e019              B        |L15.120|
                  |L15.68|
000044  a901              ADD      r1,sp,#4              ;1616
000046  f104001c          ADD      r0,r4,#0x1c           ;1616
00004a  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00004e  b110              CBZ      r0,|L15.86|
000050  f04f30ff          MOV      r0,#0xffffffff        ;1618
000054  e7df              B        |L15.22|
                  |L15.86|
000056  f89d0005          LDRB     r0,[sp,#5]            ;1621
00005a  f0200080          BIC      r0,r0,#0x80           ;1621
00005e  3080              ADDS     r0,r0,#0x80           ;1621
000060  f88d0005          STRB     r0,[sp,#5]            ;1621
000064  f104001c          ADD      r0,r4,#0x1c           ;1623
000068  9901              LDR      r1,[sp,#4]            ;1623
00006a  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00006e  b110              CBZ      r0,|L15.118|
000070  f04f30ff          MOV      r0,#0xffffffff        ;1625
000074  e7cf              B        |L15.22|
                  |L15.118|
000076  e01c              B        |L15.178|
                  |L15.120|
000078  4669              MOV      r1,sp                 ;1630
00007a  f104001c          ADD      r0,r4,#0x1c           ;1630
00007e  f7fffffe          BL       lsm6dsl_pin_int2_route_get
000082  b110              CBZ      r0,|L15.138|
000084  f04f30ff          MOV      r0,#0xffffffff        ;1632
000088  e7c5              B        |L15.22|
                  |L15.138|
00008a  f89d0001          LDRB     r0,[sp,#1]            ;1635
00008e  f0200080          BIC      r0,r0,#0x80           ;1635
000092  3080              ADDS     r0,r0,#0x80           ;1635
000094  f88d0001          STRB     r0,[sp,#1]            ;1635
000098  f104001c          ADD      r0,r4,#0x1c           ;1637
00009c  9900              LDR      r1,[sp,#0]            ;1637
00009e  f7fffffe          BL       lsm6dsl_pin_int2_route_set
0000a2  b110              CBZ      r0,|L15.170|
0000a4  f04f30ff          MOV      r0,#0xffffffff        ;1639
0000a8  e7b5              B        |L15.22|
                  |L15.170|
0000aa  e002              B        |L15.178|
                  |L15.172|
0000ac  f04f36ff          MOV      r6,#0xffffffff        ;1644
0000b0  bf00              NOP                            ;1645
                  |L15.178|
0000b2  bf00              NOP                            ;1627
0000b4  4630              MOV      r0,r6                 ;1648
0000b6  e7ae              B        |L15.22|
;;;1650   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Enable_Pedometer||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Enable_Pedometer PROC
;;;1164    */
;;;1165   int32_t LSM6DSL_ACC_Enable_Pedometer(LSM6DSL_Object_t *pObj)
000000  b538              PUSH     {r3-r5,lr}
;;;1166   {
000002  4604              MOV      r4,r0
;;;1167     lsm6dsl_int1_route_t val;
;;;1168   
;;;1169     /* Output Data Rate selection */
;;;1170     if (LSM6DSL_ACC_SetOutputDataRate(pObj, 26.0f) != LSM6DSL_OK)
000004  eeb30a0a          VMOV.F32 s0,#26.00000000
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       LSM6DSL_ACC_SetOutputDataRate
00000e  b110              CBZ      r0,|L16.22|
;;;1171     {
;;;1172       return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L16.20|
;;;1173     }
;;;1174   
;;;1175     /* Full scale selection */
;;;1176     if (LSM6DSL_ACC_SetFullScale(pObj, 2) != LSM6DSL_OK)
;;;1177     {
;;;1178       return LSM6DSL_ERROR;
;;;1179     }
;;;1180   
;;;1181     /* Set pedometer threshold. */
;;;1182     if (lsm6dsl_pedo_threshold_set(&(pObj->Ctx), 0x17) != LSM6DSL_OK)
;;;1183     {
;;;1184       return LSM6DSL_ERROR;
;;;1185     }
;;;1186   
;;;1187     /* Enable pedometer algorithm. */
;;;1188     if (lsm6dsl_pedo_sens_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
;;;1189     {
;;;1190       return LSM6DSL_ERROR;
;;;1191     }
;;;1192   
;;;1193     /* Enable step detector on INT1 pin */
;;;1194     if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val) != LSM6DSL_OK)
;;;1195     {
;;;1196       return LSM6DSL_ERROR;
;;;1197     }
;;;1198   
;;;1199     val.int1_step_detector = PROPERTY_ENABLE;
;;;1200   
;;;1201     if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val) != LSM6DSL_OK)
;;;1202     {
;;;1203       return LSM6DSL_ERROR;
;;;1204     }
;;;1205   
;;;1206     return LSM6DSL_OK;
;;;1207   }
000014  bd38              POP      {r3-r5,pc}
                  |L16.22|
000016  2102              MOVS     r1,#2                 ;1176
000018  4620              MOV      r0,r4                 ;1176
00001a  f7fffffe          BL       LSM6DSL_ACC_SetFullScale
00001e  b110              CBZ      r0,|L16.38|
000020  f04f30ff          MOV      r0,#0xffffffff        ;1178
000024  e7f6              B        |L16.20|
                  |L16.38|
000026  2117              MOVS     r1,#0x17              ;1182
000028  f104001c          ADD      r0,r4,#0x1c           ;1182
00002c  f7fffffe          BL       lsm6dsl_pedo_threshold_set
000030  b110              CBZ      r0,|L16.56|
000032  f04f30ff          MOV      r0,#0xffffffff        ;1184
000036  e7ed              B        |L16.20|
                  |L16.56|
000038  2101              MOVS     r1,#1                 ;1188
00003a  f104001c          ADD      r0,r4,#0x1c           ;1188
00003e  f7fffffe          BL       lsm6dsl_pedo_sens_set
000042  b110              CBZ      r0,|L16.74|
000044  f04f30ff          MOV      r0,#0xffffffff        ;1190
000048  e7e4              B        |L16.20|
                  |L16.74|
00004a  4669              MOV      r1,sp                 ;1194
00004c  f104001c          ADD      r0,r4,#0x1c           ;1194
000050  f7fffffe          BL       lsm6dsl_pin_int1_route_get
000054  b110              CBZ      r0,|L16.92|
000056  f04f30ff          MOV      r0,#0xffffffff        ;1196
00005a  e7db              B        |L16.20|
                  |L16.92|
00005c  f89d0000          LDRB     r0,[sp,#0]            ;1199
000060  f0200080          BIC      r0,r0,#0x80           ;1199
000064  3080              ADDS     r0,r0,#0x80           ;1199
000066  f88d0000          STRB     r0,[sp,#0]            ;1199
00006a  f104001c          ADD      r0,r4,#0x1c           ;1201
00006e  9900              LDR      r1,[sp,#0]            ;1201
000070  f7fffffe          BL       lsm6dsl_pin_int1_route_set
000074  b110              CBZ      r0,|L16.124|
000076  f04f30ff          MOV      r0,#0xffffffff        ;1203
00007a  e7cb              B        |L16.20|
                  |L16.124|
00007c  2000              MOVS     r0,#0                 ;1206
00007e  e7c9              B        |L16.20|
;;;1208   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Enable_Single_Tap_Detection||, CODE, READONLY, ALIGN=2

                  LSM6DSL_ACC_Enable_Single_Tap_Detection PROC
;;;1729    */
;;;1730   int32_t LSM6DSL_ACC_Enable_Single_Tap_Detection(LSM6DSL_Object_t *pObj, LSM6DSL_SensorIntPin_t IntPin)
000000  b57c              PUSH     {r2-r6,lr}
;;;1731   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1732     int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;1733     lsm6dsl_int1_route_t val1;
;;;1734     lsm6dsl_int2_route_t val2;
;;;1735   
;;;1736     /* Output Data Rate selection */
;;;1737     if (LSM6DSL_ACC_SetOutputDataRate(pObj, 416.0f) != LSM6DSL_OK)
000008  ed9f0a41          VLDR     s0,|L17.272|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LSM6DSL_ACC_SetOutputDataRate
000012  b108              CBZ      r0,|L17.24|
;;;1738     {
;;;1739       return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L17.22|
;;;1740     }
;;;1741   
;;;1742     /* Full scale selection */
;;;1743     if (LSM6DSL_ACC_SetFullScale(pObj, 2) != LSM6DSL_OK)
;;;1744     {
;;;1745       return LSM6DSL_ERROR;
;;;1746     }
;;;1747   
;;;1748     /* Enable X direction in tap recognition. */
;;;1749     if (lsm6dsl_tap_detection_on_x_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
;;;1750     {
;;;1751       return LSM6DSL_ERROR;
;;;1752     }
;;;1753   
;;;1754     /* Enable Y direction in tap recognition. */
;;;1755     if (lsm6dsl_tap_detection_on_y_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
;;;1756     {
;;;1757       return LSM6DSL_ERROR;
;;;1758     }
;;;1759   
;;;1760     /* Enable Z direction in tap recognition. */
;;;1761     if (lsm6dsl_tap_detection_on_z_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
;;;1762     {
;;;1763       return LSM6DSL_ERROR;
;;;1764     }
;;;1765   
;;;1766     /* Set tap threshold. */
;;;1767     if (lsm6dsl_tap_threshold_x_set(&(pObj->Ctx), 0x08) != LSM6DSL_OK)
;;;1768     {
;;;1769       return LSM6DSL_ERROR;
;;;1770     }
;;;1771   
;;;1772     /* Set tap shock time window. */
;;;1773     if (lsm6dsl_tap_shock_set(&(pObj->Ctx), 0x02) != LSM6DSL_OK)
;;;1774     {
;;;1775       return LSM6DSL_ERROR;
;;;1776     }
;;;1777   
;;;1778     /* Set tap quiet time window. */
;;;1779     if (lsm6dsl_tap_quiet_set(&(pObj->Ctx), 0x01) != LSM6DSL_OK)
;;;1780     {
;;;1781       return LSM6DSL_ERROR;
;;;1782     }
;;;1783   
;;;1784     /* _NOTE_: Tap duration time window - don't care for single tap. */
;;;1785   
;;;1786     /* _NOTE_: Single/Double Tap event - don't care of this flag for single tap. */
;;;1787   
;;;1788     /* Enable single tap event on either INT1 or INT2 pin */
;;;1789     switch (IntPin)
;;;1790     {
;;;1791       case LSM6DSL_INT1_PIN:
;;;1792         if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
;;;1793         {
;;;1794           return LSM6DSL_ERROR;
;;;1795         }
;;;1796   
;;;1797         val1.int1_single_tap = PROPERTY_ENABLE;
;;;1798   
;;;1799         if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1800         {
;;;1801           return LSM6DSL_ERROR;
;;;1802         }
;;;1803         break;
;;;1804   
;;;1805       case LSM6DSL_INT2_PIN:
;;;1806         if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;1807         {
;;;1808           return LSM6DSL_ERROR;
;;;1809         }
;;;1810   
;;;1811         val2.int2_single_tap = PROPERTY_ENABLE;
;;;1812   
;;;1813         if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;1814         {
;;;1815           return LSM6DSL_ERROR;
;;;1816         }
;;;1817         break;
;;;1818   
;;;1819       default:
;;;1820         ret = LSM6DSL_ERROR;
;;;1821         break;
;;;1822     }
;;;1823   
;;;1824     return ret;
;;;1825   }
000016  bd7c              POP      {r2-r6,pc}
                  |L17.24|
000018  2102              MOVS     r1,#2                 ;1743
00001a  4620              MOV      r0,r4                 ;1743
00001c  f7fffffe          BL       LSM6DSL_ACC_SetFullScale
000020  b110              CBZ      r0,|L17.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;1745
000026  e7f6              B        |L17.22|
                  |L17.40|
000028  2101              MOVS     r1,#1                 ;1749
00002a  f104001c          ADD      r0,r4,#0x1c           ;1749
00002e  f7fffffe          BL       lsm6dsl_tap_detection_on_x_set
000032  b110              CBZ      r0,|L17.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;1751
000038  e7ed              B        |L17.22|
                  |L17.58|
00003a  2101              MOVS     r1,#1                 ;1755
00003c  f104001c          ADD      r0,r4,#0x1c           ;1755
000040  f7fffffe          BL       lsm6dsl_tap_detection_on_y_set
000044  b110              CBZ      r0,|L17.76|
000046  f04f30ff          MOV      r0,#0xffffffff        ;1757
00004a  e7e4              B        |L17.22|
                  |L17.76|
00004c  2101              MOVS     r1,#1                 ;1761
00004e  f104001c          ADD      r0,r4,#0x1c           ;1761
000052  f7fffffe          BL       lsm6dsl_tap_detection_on_z_set
000056  b110              CBZ      r0,|L17.94|
000058  f04f30ff          MOV      r0,#0xffffffff        ;1763
00005c  e7db              B        |L17.22|
                  |L17.94|
00005e  2108              MOVS     r1,#8                 ;1767
000060  f104001c          ADD      r0,r4,#0x1c           ;1767
000064  f7fffffe          BL       lsm6dsl_tap_threshold_x_set
000068  b110              CBZ      r0,|L17.112|
00006a  f04f30ff          MOV      r0,#0xffffffff        ;1769
00006e  e7d2              B        |L17.22|
                  |L17.112|
000070  2102              MOVS     r1,#2                 ;1773
000072  f104001c          ADD      r0,r4,#0x1c           ;1773
000076  f7fffffe          BL       lsm6dsl_tap_shock_set
00007a  b110              CBZ      r0,|L17.130|
00007c  f04f30ff          MOV      r0,#0xffffffff        ;1775
000080  e7c9              B        |L17.22|
                  |L17.130|
000082  2101              MOVS     r1,#1                 ;1779
000084  f104001c          ADD      r0,r4,#0x1c           ;1779
000088  f7fffffe          BL       lsm6dsl_tap_quiet_set
00008c  b110              CBZ      r0,|L17.148|
00008e  f04f30ff          MOV      r0,#0xffffffff        ;1781
000092  e7c0              B        |L17.22|
                  |L17.148|
000094  b115              CBZ      r5,|L17.156|
000096  2d01              CMP      r5,#1                 ;1789
000098  d134              BNE      |L17.260|
00009a  e019              B        |L17.208|
                  |L17.156|
00009c  a901              ADD      r1,sp,#4              ;1792
00009e  f104001c          ADD      r0,r4,#0x1c           ;1792
0000a2  f7fffffe          BL       lsm6dsl_pin_int1_route_get
0000a6  b110              CBZ      r0,|L17.174|
0000a8  f04f30ff          MOV      r0,#0xffffffff        ;1794
0000ac  e7b3              B        |L17.22|
                  |L17.174|
0000ae  f89d0005          LDRB     r0,[sp,#5]            ;1797
0000b2  f0200040          BIC      r0,r0,#0x40           ;1797
0000b6  3040              ADDS     r0,r0,#0x40           ;1797
0000b8  f88d0005          STRB     r0,[sp,#5]            ;1797
0000bc  f104001c          ADD      r0,r4,#0x1c           ;1799
0000c0  9901              LDR      r1,[sp,#4]            ;1799
0000c2  f7fffffe          BL       lsm6dsl_pin_int1_route_set
0000c6  b110              CBZ      r0,|L17.206|
0000c8  f04f30ff          MOV      r0,#0xffffffff        ;1801
0000cc  e7a3              B        |L17.22|
                  |L17.206|
0000ce  e01c              B        |L17.266|
                  |L17.208|
0000d0  4669              MOV      r1,sp                 ;1806
0000d2  f104001c          ADD      r0,r4,#0x1c           ;1806
0000d6  f7fffffe          BL       lsm6dsl_pin_int2_route_get
0000da  b110              CBZ      r0,|L17.226|
0000dc  f04f30ff          MOV      r0,#0xffffffff        ;1808
0000e0  e799              B        |L17.22|
                  |L17.226|
0000e2  f89d0001          LDRB     r0,[sp,#1]            ;1811
0000e6  f0200040          BIC      r0,r0,#0x40           ;1811
0000ea  3040              ADDS     r0,r0,#0x40           ;1811
0000ec  f88d0001          STRB     r0,[sp,#1]            ;1811
0000f0  f104001c          ADD      r0,r4,#0x1c           ;1813
0000f4  9900              LDR      r1,[sp,#0]            ;1813
0000f6  f7fffffe          BL       lsm6dsl_pin_int2_route_set
0000fa  b110              CBZ      r0,|L17.258|
0000fc  f04f30ff          MOV      r0,#0xffffffff        ;1815
000100  e789              B        |L17.22|
                  |L17.258|
000102  e002              B        |L17.266|
                  |L17.260|
000104  f04f36ff          MOV      r6,#0xffffffff        ;1820
000108  bf00              NOP                            ;1821
                  |L17.266|
00010a  bf00              NOP                            ;1803
00010c  4630              MOV      r0,r6                 ;1824
00010e  e782              B        |L17.22|
;;;1826   
                          ENDP

                  |L17.272|
000110  43d00000          DCFS     0x43d00000 ; 416

                          AREA ||i.LSM6DSL_ACC_Enable_Step_Counter_Reset||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Enable_Step_Counter_Reset PROC
;;;1266    */
;;;1267   int32_t LSM6DSL_ACC_Enable_Step_Counter_Reset(LSM6DSL_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;1268   {
000002  4604              MOV      r4,r0
;;;1269     if (lsm6dsl_pedo_step_reset_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
000004  2101              MOVS     r1,#1
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm6dsl_pedo_step_reset_set
00000e  b110              CBZ      r0,|L18.22|
;;;1270     {
;;;1271       return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L18.20|
;;;1272     }
;;;1273   
;;;1274     return LSM6DSL_OK;
;;;1275   }
000014  bd10              POP      {r4,pc}
                  |L18.22|
000016  2000              MOVS     r0,#0                 ;1274
000018  e7fc              B        |L18.20|
;;;1276   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Enable_Tilt_Detection||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Enable_Tilt_Detection PROC
;;;1313    */
;;;1314   int32_t LSM6DSL_ACC_Enable_Tilt_Detection(LSM6DSL_Object_t *pObj, LSM6DSL_SensorIntPin_t IntPin)
000000  b57c              PUSH     {r2-r6,lr}
;;;1315   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1316     int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;1317     lsm6dsl_int1_route_t val1;
;;;1318     lsm6dsl_int2_route_t val2;
;;;1319   
;;;1320     /* Output Data Rate selection */
;;;1321     if (LSM6DSL_ACC_SetOutputDataRate(pObj, 26.0f) != LSM6DSL_OK)
000008  eeb30a0a          VMOV.F32 s0,#26.00000000
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LSM6DSL_ACC_SetOutputDataRate
000012  b108              CBZ      r0,|L19.24|
;;;1322     {
;;;1323       return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L19.22|
;;;1324     }
;;;1325   
;;;1326     /* Full scale selection */
;;;1327     if (LSM6DSL_ACC_SetFullScale(pObj, 2) != LSM6DSL_OK)
;;;1328     {
;;;1329       return LSM6DSL_ERROR;
;;;1330     }
;;;1331   
;;;1332     /* Enable tilt calculation. */
;;;1333     if (lsm6dsl_tilt_sens_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
;;;1334     {
;;;1335       return LSM6DSL_ERROR;
;;;1336     }
;;;1337   
;;;1338     /* Enable tilt event on either INT1 or INT2 pin */
;;;1339     switch (IntPin)
;;;1340     {
;;;1341       case LSM6DSL_INT1_PIN:
;;;1342         if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
;;;1343         {
;;;1344           return LSM6DSL_ERROR;
;;;1345         }
;;;1346   
;;;1347         val1.int1_tilt = PROPERTY_ENABLE;
;;;1348   
;;;1349         if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1350         {
;;;1351           return LSM6DSL_ERROR;
;;;1352         }
;;;1353         break;
;;;1354   
;;;1355       case LSM6DSL_INT2_PIN:
;;;1356         if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;1357         {
;;;1358           return LSM6DSL_ERROR;
;;;1359         }
;;;1360   
;;;1361         val2.int2_tilt = PROPERTY_ENABLE;
;;;1362   
;;;1363         if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;1364         {
;;;1365           return LSM6DSL_ERROR;
;;;1366         }
;;;1367         break;
;;;1368   
;;;1369       default:
;;;1370         ret = LSM6DSL_ERROR;
;;;1371         break;
;;;1372     }
;;;1373   
;;;1374     return ret;
;;;1375   }
000016  bd7c              POP      {r2-r6,pc}
                  |L19.24|
000018  2102              MOVS     r1,#2                 ;1327
00001a  4620              MOV      r0,r4                 ;1327
00001c  f7fffffe          BL       LSM6DSL_ACC_SetFullScale
000020  b110              CBZ      r0,|L19.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;1329
000026  e7f6              B        |L19.22|
                  |L19.40|
000028  2101              MOVS     r1,#1                 ;1333
00002a  f104001c          ADD      r0,r4,#0x1c           ;1333
00002e  f7fffffe          BL       lsm6dsl_tilt_sens_set
000032  b110              CBZ      r0,|L19.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;1335
000038  e7ed              B        |L19.22|
                  |L19.58|
00003a  b115              CBZ      r5,|L19.66|
00003c  2d01              CMP      r5,#1                 ;1339
00003e  d134              BNE      |L19.170|
000040  e019              B        |L19.118|
                  |L19.66|
000042  a901              ADD      r1,sp,#4              ;1342
000044  f104001c          ADD      r0,r4,#0x1c           ;1342
000048  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00004c  b110              CBZ      r0,|L19.84|
00004e  f04f30ff          MOV      r0,#0xffffffff        ;1344
000052  e7e0              B        |L19.22|
                  |L19.84|
000054  f89d0005          LDRB     r0,[sp,#5]            ;1347
000058  f0200002          BIC      r0,r0,#2              ;1347
00005c  1c80              ADDS     r0,r0,#2              ;1347
00005e  f88d0005          STRB     r0,[sp,#5]            ;1347
000062  f104001c          ADD      r0,r4,#0x1c           ;1349
000066  9901              LDR      r1,[sp,#4]            ;1349
000068  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00006c  b110              CBZ      r0,|L19.116|
00006e  f04f30ff          MOV      r0,#0xffffffff        ;1351
000072  e7d0              B        |L19.22|
                  |L19.116|
000074  e01c              B        |L19.176|
                  |L19.118|
000076  4669              MOV      r1,sp                 ;1356
000078  f104001c          ADD      r0,r4,#0x1c           ;1356
00007c  f7fffffe          BL       lsm6dsl_pin_int2_route_get
000080  b110              CBZ      r0,|L19.136|
000082  f04f30ff          MOV      r0,#0xffffffff        ;1358
000086  e7c6              B        |L19.22|
                  |L19.136|
000088  f89d0001          LDRB     r0,[sp,#1]            ;1361
00008c  f0200002          BIC      r0,r0,#2              ;1361
000090  1c80              ADDS     r0,r0,#2              ;1361
000092  f88d0001          STRB     r0,[sp,#1]            ;1361
000096  f104001c          ADD      r0,r4,#0x1c           ;1363
00009a  9900              LDR      r1,[sp,#0]            ;1363
00009c  f7fffffe          BL       lsm6dsl_pin_int2_route_set
0000a0  b110              CBZ      r0,|L19.168|
0000a2  f04f30ff          MOV      r0,#0xffffffff        ;1365
0000a6  e7b6              B        |L19.22|
                  |L19.168|
0000a8  e002              B        |L19.176|
                  |L19.170|
0000aa  f04f36ff          MOV      r6,#0xffffffff        ;1370
0000ae  bf00              NOP                            ;1371
                  |L19.176|
0000b0  bf00              NOP                            ;1353
0000b2  4630              MOV      r0,r6                 ;1374
0000b4  e7af              B        |L19.22|
;;;1376   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Enable_Wake_Up_Detection||, CODE, READONLY, ALIGN=2

                  LSM6DSL_ACC_Enable_Wake_Up_Detection PROC
;;;1426    */
;;;1427   int32_t LSM6DSL_ACC_Enable_Wake_Up_Detection(LSM6DSL_Object_t *pObj, LSM6DSL_SensorIntPin_t IntPin)
000000  b57c              PUSH     {r2-r6,lr}
;;;1428   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1429     int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;1430     lsm6dsl_int1_route_t val1;
;;;1431     lsm6dsl_int2_route_t val2;
;;;1432   
;;;1433     /* Output Data Rate selection */
;;;1434     if (LSM6DSL_ACC_SetOutputDataRate(pObj, 416.0f) != LSM6DSL_OK)
000008  ed9f0a2f          VLDR     s0,|L20.200|
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LSM6DSL_ACC_SetOutputDataRate
000012  b108              CBZ      r0,|L20.24|
;;;1435     {
;;;1436       return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L20.22|
;;;1437     }
;;;1438   
;;;1439     /* Full scale selection */
;;;1440     if (LSM6DSL_ACC_SetFullScale(pObj, 2) != LSM6DSL_OK)
;;;1441     {
;;;1442       return LSM6DSL_ERROR;
;;;1443     }
;;;1444   
;;;1445     /* WAKE_DUR setting */
;;;1446     if (lsm6dsl_wkup_dur_set(&(pObj->Ctx), 0x00) != LSM6DSL_OK)
;;;1447     {
;;;1448       return LSM6DSL_ERROR;
;;;1449     }
;;;1450   
;;;1451     /* Set wake up threshold. */
;;;1452     if (lsm6dsl_wkup_threshold_set(&(pObj->Ctx), 0x02) != LSM6DSL_OK)
;;;1453     {
;;;1454       return LSM6DSL_ERROR;
;;;1455     }
;;;1456   
;;;1457     /* Enable wake up event on either INT1 or INT2 pin */
;;;1458     switch (IntPin)
;;;1459     {
;;;1460       case LSM6DSL_INT1_PIN:
;;;1461         if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &val1) != LSM6DSL_OK)
;;;1462         {
;;;1463           return LSM6DSL_ERROR;
;;;1464         }
;;;1465   
;;;1466         val1.int1_wu = PROPERTY_ENABLE;
;;;1467   
;;;1468         if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), val1) != LSM6DSL_OK)
;;;1469         {
;;;1470           return LSM6DSL_ERROR;
;;;1471         }
;;;1472         break;
;;;1473   
;;;1474       case LSM6DSL_INT2_PIN:
;;;1475         if (lsm6dsl_pin_int2_route_get(&(pObj->Ctx), &val2) != LSM6DSL_OK)
;;;1476         {
;;;1477           return LSM6DSL_ERROR;
;;;1478         }
;;;1479   
;;;1480         val2.int2_wu = PROPERTY_ENABLE;
;;;1481   
;;;1482         if (lsm6dsl_pin_int2_route_set(&(pObj->Ctx), val2) != LSM6DSL_OK)
;;;1483         {
;;;1484           return LSM6DSL_ERROR;
;;;1485         }
;;;1486         break;
;;;1487   
;;;1488       default:
;;;1489         ret = LSM6DSL_ERROR;
;;;1490         break;
;;;1491     }
;;;1492   
;;;1493     return ret;
;;;1494   }
000016  bd7c              POP      {r2-r6,pc}
                  |L20.24|
000018  2102              MOVS     r1,#2                 ;1440
00001a  4620              MOV      r0,r4                 ;1440
00001c  f7fffffe          BL       LSM6DSL_ACC_SetFullScale
000020  b110              CBZ      r0,|L20.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;1442
000026  e7f6              B        |L20.22|
                  |L20.40|
000028  2100              MOVS     r1,#0                 ;1446
00002a  f104001c          ADD      r0,r4,#0x1c           ;1446
00002e  f7fffffe          BL       lsm6dsl_wkup_dur_set
000032  b110              CBZ      r0,|L20.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;1448
000038  e7ed              B        |L20.22|
                  |L20.58|
00003a  2102              MOVS     r1,#2                 ;1452
00003c  f104001c          ADD      r0,r4,#0x1c           ;1452
000040  f7fffffe          BL       lsm6dsl_wkup_threshold_set
000044  b110              CBZ      r0,|L20.76|
000046  f04f30ff          MOV      r0,#0xffffffff        ;1454
00004a  e7e4              B        |L20.22|
                  |L20.76|
00004c  b115              CBZ      r5,|L20.84|
00004e  2d01              CMP      r5,#1                 ;1458
000050  d134              BNE      |L20.188|
000052  e019              B        |L20.136|
                  |L20.84|
000054  a901              ADD      r1,sp,#4              ;1461
000056  f104001c          ADD      r0,r4,#0x1c           ;1461
00005a  f7fffffe          BL       lsm6dsl_pin_int1_route_get
00005e  b110              CBZ      r0,|L20.102|
000060  f04f30ff          MOV      r0,#0xffffffff        ;1463
000064  e7d7              B        |L20.22|
                  |L20.102|
000066  f89d0005          LDRB     r0,[sp,#5]            ;1466
00006a  f0200020          BIC      r0,r0,#0x20           ;1466
00006e  3020              ADDS     r0,r0,#0x20           ;1466
000070  f88d0005          STRB     r0,[sp,#5]            ;1466
000074  f104001c          ADD      r0,r4,#0x1c           ;1468
000078  9901              LDR      r1,[sp,#4]            ;1468
00007a  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00007e  b110              CBZ      r0,|L20.134|
000080  f04f30ff          MOV      r0,#0xffffffff        ;1470
000084  e7c7              B        |L20.22|
                  |L20.134|
000086  e01c              B        |L20.194|
                  |L20.136|
000088  4669              MOV      r1,sp                 ;1475
00008a  f104001c          ADD      r0,r4,#0x1c           ;1475
00008e  f7fffffe          BL       lsm6dsl_pin_int2_route_get
000092  b110              CBZ      r0,|L20.154|
000094  f04f30ff          MOV      r0,#0xffffffff        ;1477
000098  e7bd              B        |L20.22|
                  |L20.154|
00009a  f89d0001          LDRB     r0,[sp,#1]            ;1480
00009e  f0200020          BIC      r0,r0,#0x20           ;1480
0000a2  3020              ADDS     r0,r0,#0x20           ;1480
0000a4  f88d0001          STRB     r0,[sp,#1]            ;1480
0000a8  f104001c          ADD      r0,r4,#0x1c           ;1482
0000ac  9900              LDR      r1,[sp,#0]            ;1482
0000ae  f7fffffe          BL       lsm6dsl_pin_int2_route_set
0000b2  b110              CBZ      r0,|L20.186|
0000b4  f04f30ff          MOV      r0,#0xffffffff        ;1484
0000b8  e7ad              B        |L20.22|
                  |L20.186|
0000ba  e002              B        |L20.194|
                  |L20.188|
0000bc  f04f36ff          MOV      r6,#0xffffffff        ;1489
0000c0  bf00              NOP                            ;1490
                  |L20.194|
0000c2  bf00              NOP                            ;1472
0000c4  4630              MOV      r0,r6                 ;1493
0000c6  e7a6              B        |L20.22|
;;;1495   
                          ENDP

                  |L20.200|
0000c8  43d00000          DCFS     0x43d00000 ; 416

                          AREA ||i.LSM6DSL_ACC_GetAxes||, CODE, READONLY, ALIGN=2

                  LSM6DSL_ACC_GetAxes PROC
;;;586     */
;;;587    int32_t LSM6DSL_ACC_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *Acceleration)
000000  b53e              PUSH     {r1-r5,lr}
;;;588    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;589      axis3bit16_t data_raw;
;;;590      float sensitivity = 0.0f;
000006  ed9f0a20          VLDR     s0,|L21.136|
00000a  ed8d0a00          VSTR     s0,[sp,#0]
;;;591    
;;;592      /* Read raw data values. */
;;;593      if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
00000e  a901              ADD      r1,sp,#4
000010  f105001c          ADD      r0,r5,#0x1c
000014  f7fffffe          BL       lsm6dsl_acceleration_raw_get
000018  b110              CBZ      r0,|L21.32|
;;;594      {
;;;595        return LSM6DSL_ERROR;
00001a  f04f30ff          MOV      r0,#0xffffffff
                  |L21.30|
;;;596      }
;;;597    
;;;598      /* Get LSM6DSL actual sensitivity. */
;;;599      if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
;;;600      {
;;;601        return LSM6DSL_ERROR;
;;;602      }
;;;603    
;;;604      /* Calculate the data. */
;;;605      Acceleration->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
;;;606      Acceleration->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
;;;607      Acceleration->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
;;;608    
;;;609      return LSM6DSL_OK;
;;;610    }
00001e  bd3e              POP      {r1-r5,pc}
                  |L21.32|
000020  4669              MOV      r1,sp                 ;599
000022  4628              MOV      r0,r5                 ;599
000024  f7fffffe          BL       LSM6DSL_ACC_GetSensitivity
000028  b110              CBZ      r0,|L21.48|
00002a  f04f30ff          MOV      r0,#0xffffffff        ;601
00002e  e7f6              B        |L21.30|
                  |L21.48|
000030  f9bd0004          LDRSH    r0,[sp,#4]            ;605
000034  ee000a10          VMOV     s0,r0                 ;605
000038  eeb80ac0          VCVT.F32.S32 s0,s0                 ;605
00003c  eddd0a00          VLDR     s1,[sp,#0]            ;605
000040  ee200a20          VMUL.F32 s0,s0,s1              ;605
000044  eebd0ac0          VCVT.S32.F32 s0,s0                 ;605
000048  ed840a00          VSTR     s0,[r4,#0]            ;605
00004c  f9bd0006          LDRSH    r0,[sp,#6]            ;606
000050  ee000a10          VMOV     s0,r0                 ;606
000054  eeb80ac0          VCVT.F32.S32 s0,s0                 ;606
000058  eddd0a00          VLDR     s1,[sp,#0]            ;606
00005c  ee200a20          VMUL.F32 s0,s0,s1              ;606
000060  eebd0ac0          VCVT.S32.F32 s0,s0                 ;606
000064  ed840a01          VSTR     s0,[r4,#4]            ;606
000068  f9bd0008          LDRSH    r0,[sp,#8]            ;607
00006c  ee000a10          VMOV     s0,r0                 ;607
000070  eeb80ac0          VCVT.F32.S32 s0,s0                 ;607
000074  eddd0a00          VLDR     s1,[sp,#0]            ;607
000078  ee200a20          VMUL.F32 s0,s0,s1              ;607
00007c  eebd0ac0          VCVT.S32.F32 s0,s0                 ;607
000080  ed840a02          VSTR     s0,[r4,#8]            ;607
000084  2000              MOVS     r0,#0                 ;609
000086  e7ca              B        |L21.30|
;;;611    
                          ENDP

                  |L21.136|
000088  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.LSM6DSL_ACC_GetAxesRaw||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_GetAxesRaw PROC
;;;562     */
;;;563    int32_t LSM6DSL_ACC_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
000000  b57c              PUSH     {r2-r6,lr}
;;;564    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;565      axis3bit16_t data_raw;
;;;566    
;;;567      /* Read raw data values. */
;;;568      if (lsm6dsl_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
000006  4669              MOV      r1,sp
000008  f105001c          ADD      r0,r5,#0x1c
00000c  f7fffffe          BL       lsm6dsl_acceleration_raw_get
000010  b110              CBZ      r0,|L22.24|
;;;569      {
;;;570        return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L22.22|
;;;571      }
;;;572    
;;;573      /* Format the data. */
;;;574      Value->x = data_raw.i16bit[0];
;;;575      Value->y = data_raw.i16bit[1];
;;;576      Value->z = data_raw.i16bit[2];
;;;577    
;;;578      return LSM6DSL_OK;
;;;579    }
000016  bd7c              POP      {r2-r6,pc}
                  |L22.24|
000018  f8bd0000          LDRH     r0,[sp,#0]            ;574
00001c  8020              STRH     r0,[r4,#0]            ;574
00001e  f8bd0002          LDRH     r0,[sp,#2]            ;575
000022  8060              STRH     r0,[r4,#2]            ;575
000024  f8bd0004          LDRH     r0,[sp,#4]            ;576
000028  80a0              STRH     r0,[r4,#4]            ;576
00002a  2000              MOVS     r0,#0                 ;578
00002c  e7f3              B        |L22.22|
;;;580    
                          ENDP


                          AREA ||i.LSM6DSL_ACC_GetFullScale||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_GetFullScale PROC
;;;494     */
;;;495    int32_t LSM6DSL_ACC_GetFullScale(LSM6DSL_Object_t *pObj, int32_t *FullScale)
000000  b5f8              PUSH     {r3-r7,lr}
;;;496    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;497      int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;498      lsm6dsl_fs_xl_t fs_low_level;
;;;499    
;;;500      /* Read actual full scale selection from sensor. */
;;;501      if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm6dsl_xl_full_scale_get
000012  b108              CBZ      r0,|L23.24|
;;;502      {
;;;503        return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L23.22|
;;;504      }
;;;505    
;;;506      switch (fs_low_level)
;;;507      {
;;;508        case LSM6DSL_2g:
;;;509          *FullScale =  2;
;;;510          break;
;;;511    
;;;512        case LSM6DSL_4g:
;;;513          *FullScale =  4;
;;;514          break;
;;;515    
;;;516        case LSM6DSL_8g:
;;;517          *FullScale =  8;
;;;518          break;
;;;519    
;;;520        case LSM6DSL_16g:
;;;521          *FullScale = 16;
;;;522          break;
;;;523    
;;;524        default:
;;;525          ret = LSM6DSL_ERROR;
;;;526          break;
;;;527      }
;;;528    
;;;529      return ret;
;;;530    }
000016  bdf8              POP      {r3-r7,pc}
                  |L23.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;506
00001c  b130              CBZ      r0,|L23.44|
00001e  2801              CMP      r0,#1                 ;506
000020  d00d              BEQ      |L23.62|
000022  2802              CMP      r0,#2                 ;506
000024  d005              BEQ      |L23.50|
000026  2803              CMP      r0,#3                 ;506
000028  d10c              BNE      |L23.68|
00002a  e005              B        |L23.56|
                  |L23.44|
00002c  2002              MOVS     r0,#2                 ;509
00002e  6020              STR      r0,[r4,#0]            ;509
000030  e00b              B        |L23.74|
                  |L23.50|
000032  2004              MOVS     r0,#4                 ;513
000034  6020              STR      r0,[r4,#0]            ;513
000036  e008              B        |L23.74|
                  |L23.56|
000038  2008              MOVS     r0,#8                 ;517
00003a  6020              STR      r0,[r4,#0]            ;517
00003c  e005              B        |L23.74|
                  |L23.62|
00003e  2010              MOVS     r0,#0x10              ;521
000040  6020              STR      r0,[r4,#0]            ;521
000042  e002              B        |L23.74|
                  |L23.68|
000044  f04f36ff          MOV      r6,#0xffffffff        ;525
000048  bf00              NOP                            ;526
                  |L23.74|
00004a  bf00              NOP                            ;510
00004c  4630              MOV      r0,r6                 ;529
00004e  e7e2              B        |L23.22|
;;;531    
                          ENDP


                          AREA ||i.LSM6DSL_ACC_GetOutputDataRate||, CODE, READONLY, ALIGN=2

                  LSM6DSL_ACC_GetOutputDataRate PROC
;;;400     */
;;;401    int32_t LSM6DSL_ACC_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;402    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;403      int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;404      lsm6dsl_odr_xl_t odr_low_level;
;;;405    
;;;406      /* Get current output data rate. */
;;;407      if (lsm6dsl_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm6dsl_xl_data_rate_get
000012  b108              CBZ      r0,|L24.24|
;;;408      {
;;;409        return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L24.22|
;;;410      }
;;;411    
;;;412      switch (odr_low_level)
;;;413      {
;;;414        case LSM6DSL_XL_ODR_OFF:
;;;415          *Odr = 0.0f;
;;;416          break;
;;;417    
;;;418        case LSM6DSL_XL_ODR_1Hz6:
;;;419          *Odr = 1.6f;
;;;420          break;
;;;421    
;;;422        case LSM6DSL_XL_ODR_12Hz5:
;;;423          *Odr = 12.5f;
;;;424          break;
;;;425    
;;;426        case LSM6DSL_XL_ODR_26Hz:
;;;427          *Odr = 26.0f;
;;;428          break;
;;;429    
;;;430        case LSM6DSL_XL_ODR_52Hz:
;;;431          *Odr = 52.0f;
;;;432          break;
;;;433    
;;;434        case LSM6DSL_XL_ODR_104Hz:
;;;435          *Odr = 104.0f;
;;;436          break;
;;;437    
;;;438        case LSM6DSL_XL_ODR_208Hz:
;;;439          *Odr = 208.0f;
;;;440          break;
;;;441    
;;;442        case LSM6DSL_XL_ODR_416Hz:
;;;443          *Odr = 416.0f;
;;;444          break;
;;;445    
;;;446        case LSM6DSL_XL_ODR_833Hz:
;;;447          *Odr = 833.0f;
;;;448          break;
;;;449    
;;;450        case LSM6DSL_XL_ODR_1k66Hz:
;;;451          *Odr = 1660.0f;
;;;452          break;
;;;453    
;;;454        case LSM6DSL_XL_ODR_3k33Hz:
;;;455          *Odr = 3330.0f;
;;;456          break;
;;;457    
;;;458        case LSM6DSL_XL_ODR_6k66Hz:
;;;459          *Odr = 6660.0f;
;;;460          break;
;;;461    
;;;462        default:
;;;463          ret = LSM6DSL_ERROR;
;;;464          break;
;;;465      }
;;;466    
;;;467      return ret;
;;;468    }
000016  bdf8              POP      {r3-r7,pc}
                  |L24.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;412
00001c  280c              CMP      r0,#0xc               ;412
00001e  d243              BCS      |L24.168|
000020  e8dff000          TBB      [pc,r0]               ;412
000024  0610151a          DCB      0x06,0x10,0x15,0x1a
000028  1f24292e          DCB      0x1f,0x24,0x29,0x2e
00002c  33383d0b          DCB      0x33,0x38,0x3d,0x0b
000030  ed9f0a20          VLDR     s0,|L24.180|
000034  ed840a00          VSTR     s0,[r4,#0]            ;415
000038  e039              B        |L24.174|
00003a  ed9f0a1f          VLDR     s0,|L24.184|
00003e  ed840a00          VSTR     s0,[r4,#0]            ;419
000042  e034              B        |L24.174|
000044  eeb20a09          VMOV.F32 s0,#12.50000000       ;423
000048  ed840a00          VSTR     s0,[r4,#0]            ;423
00004c  e02f              B        |L24.174|
00004e  eeb30a0a          VMOV.F32 s0,#26.00000000       ;427
000052  ed840a00          VSTR     s0,[r4,#0]            ;427
000056  e02a              B        |L24.174|
000058  ed9f0a18          VLDR     s0,|L24.188|
00005c  ed840a00          VSTR     s0,[r4,#0]            ;431
000060  e025              B        |L24.174|
000062  ed9f0a17          VLDR     s0,|L24.192|
000066  ed840a00          VSTR     s0,[r4,#0]            ;435
00006a  e020              B        |L24.174|
00006c  ed9f0a15          VLDR     s0,|L24.196|
000070  ed840a00          VSTR     s0,[r4,#0]            ;439
000074  e01b              B        |L24.174|
000076  ed9f0a14          VLDR     s0,|L24.200|
00007a  ed840a00          VSTR     s0,[r4,#0]            ;443
00007e  e016              B        |L24.174|
000080  ed9f0a12          VLDR     s0,|L24.204|
000084  ed840a00          VSTR     s0,[r4,#0]            ;447
000088  e011              B        |L24.174|
00008a  ed9f0a11          VLDR     s0,|L24.208|
00008e  ed840a00          VSTR     s0,[r4,#0]            ;451
000092  e00c              B        |L24.174|
000094  ed9f0a0f          VLDR     s0,|L24.212|
000098  ed840a00          VSTR     s0,[r4,#0]            ;455
00009c  e007              B        |L24.174|
00009e  ed9f0a0e          VLDR     s0,|L24.216|
0000a2  ed840a00          VSTR     s0,[r4,#0]            ;459
0000a6  e002              B        |L24.174|
                  |L24.168|
0000a8  f04f36ff          MOV      r6,#0xffffffff        ;463
0000ac  bf00              NOP                            ;464
                  |L24.174|
0000ae  bf00              NOP                            ;416
0000b0  4630              MOV      r0,r6                 ;467
0000b2  e7b0              B        |L24.22|
;;;469    
                          ENDP

                  |L24.180|
0000b4  00000000          DCFS     0x00000000 ; 0
                  |L24.184|
0000b8  3fcccccd          DCFS     0x3fcccccd ; 1.6000000238418579
                  |L24.188|
0000bc  42500000          DCFS     0x42500000 ; 52
                  |L24.192|
0000c0  42d00000          DCFS     0x42d00000 ; 104
                  |L24.196|
0000c4  43500000          DCFS     0x43500000 ; 208
                  |L24.200|
0000c8  43d00000          DCFS     0x43d00000 ; 416
                  |L24.204|
0000cc  44504000          DCFS     0x44504000 ; 833
                  |L24.208|
0000d0  44cf8000          DCFS     0x44cf8000 ; 1660
                  |L24.212|
0000d4  45502000          DCFS     0x45502000 ; 3330
                  |L24.216|
0000d8  45d02000          DCFS     0x45d02000 ; 6660

                          AREA ||i.LSM6DSL_ACC_GetSensitivity||, CODE, READONLY, ALIGN=2

                  LSM6DSL_ACC_GetSensitivity PROC
;;;356     */
;;;357    int32_t LSM6DSL_ACC_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
000000  b5f8              PUSH     {r3-r7,lr}
;;;358    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;359      int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;360      lsm6dsl_fs_xl_t full_scale;
;;;361    
;;;362      /* Read actual full scale selection from sensor. */
;;;363      if (lsm6dsl_xl_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm6dsl_xl_full_scale_get
000012  b108              CBZ      r0,|L25.24|
;;;364      {
;;;365        return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L25.22|
;;;366      }
;;;367    
;;;368      /* Store the Sensitivity based on actual full scale. */
;;;369      switch (full_scale)
;;;370      {
;;;371        case LSM6DSL_2g:
;;;372          *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_2G;
;;;373          break;
;;;374    
;;;375        case LSM6DSL_4g:
;;;376          *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_4G;
;;;377          break;
;;;378    
;;;379        case LSM6DSL_8g:
;;;380          *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_8G;
;;;381          break;
;;;382    
;;;383        case LSM6DSL_16g:
;;;384          *Sensitivity = LSM6DSL_ACC_SENSITIVITY_FS_16G;
;;;385          break;
;;;386    
;;;387        default:
;;;388          ret = LSM6DSL_ERROR;
;;;389          break;
;;;390      }
;;;391    
;;;392      return ret;
;;;393    }
000016  bdf8              POP      {r3-r7,pc}
                  |L25.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;369
00001c  b130              CBZ      r0,|L25.44|
00001e  2801              CMP      r0,#1                 ;369
000020  d013              BEQ      |L25.74|
000022  2802              CMP      r0,#2                 ;369
000024  d007              BEQ      |L25.54|
000026  2803              CMP      r0,#3                 ;369
000028  d114              BNE      |L25.84|
00002a  e009              B        |L25.64|
                  |L25.44|
00002c  ed9f0a0c          VLDR     s0,|L25.96|
000030  ed840a00          VSTR     s0,[r4,#0]            ;372
000034  e011              B        |L25.90|
                  |L25.54|
000036  ed9f0a0b          VLDR     s0,|L25.100|
00003a  ed840a00          VSTR     s0,[r4,#0]            ;376
00003e  e00c              B        |L25.90|
                  |L25.64|
000040  ed9f0a09          VLDR     s0,|L25.104|
000044  ed840a00          VSTR     s0,[r4,#0]            ;380
000048  e007              B        |L25.90|
                  |L25.74|
00004a  ed9f0a08          VLDR     s0,|L25.108|
00004e  ed840a00          VSTR     s0,[r4,#0]            ;384
000052  e002              B        |L25.90|
                  |L25.84|
000054  f04f36ff          MOV      r6,#0xffffffff        ;388
000058  bf00              NOP                            ;389
                  |L25.90|
00005a  bf00              NOP                            ;373
00005c  4630              MOV      r0,r6                 ;392
00005e  e7da              B        |L25.22|
;;;394    
                          ENDP

                  |L25.96|
000060  3d79db23          DCFS     0x3d79db23 ; 0.061000000685453415
                  |L25.100|
000064  3df9db23          DCFS     0x3df9db23 ; 0.12200000137090683
                  |L25.104|
000068  3e79db23          DCFS     0x3e79db23 ; 0.24400000274181366
                  |L25.108|
00006c  3ef9db23          DCFS     0x3ef9db23 ; 0.48800000548362732

                          AREA ||i.LSM6DSL_ACC_Get_6D_Orientation_XH||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Get_6D_Orientation_XH PROC
;;;2320    */
;;;2321   int32_t LSM6DSL_ACC_Get_6D_Orientation_XH(LSM6DSL_Object_t *pObj, uint8_t *XHigh)
000000  b538              PUSH     {r3-r5,lr}
;;;2322   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2323     lsm6dsl_d6d_src_t data;
;;;2324   
;;;2325     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSL_OK)
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211d              MOVS     r1,#0x1d
00000c  f105001c          ADD      r0,r5,#0x1c
000010  f7fffffe          BL       lsm6dsl_read_reg
000014  b110              CBZ      r0,|L26.28|
;;;2326     {
;;;2327       return LSM6DSL_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L26.26|
;;;2328     }
;;;2329   
;;;2330     *XHigh = data.xh;
;;;2331   
;;;2332     return LSM6DSL_OK;
;;;2333   }
00001a  bd38              POP      {r3-r5,pc}
                  |L26.28|
00001c  f89d0000          LDRB     r0,[sp,#0]            ;2330
000020  f3c00040          UBFX     r0,r0,#1,#1           ;2330
000024  7020              STRB     r0,[r4,#0]            ;2330
000026  2000              MOVS     r0,#0                 ;2332
000028  e7f7              B        |L26.26|
;;;2334   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Get_6D_Orientation_XL||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Get_6D_Orientation_XL PROC
;;;2300    */
;;;2301   int32_t LSM6DSL_ACC_Get_6D_Orientation_XL(LSM6DSL_Object_t *pObj, uint8_t *XLow)
000000  b538              PUSH     {r3-r5,lr}
;;;2302   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2303     lsm6dsl_d6d_src_t data;
;;;2304   
;;;2305     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSL_OK)
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211d              MOVS     r1,#0x1d
00000c  f105001c          ADD      r0,r5,#0x1c
000010  f7fffffe          BL       lsm6dsl_read_reg
000014  b110              CBZ      r0,|L27.28|
;;;2306     {
;;;2307       return LSM6DSL_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L27.26|
;;;2308     }
;;;2309   
;;;2310     *XLow = data.xl;
;;;2311   
;;;2312     return LSM6DSL_OK;
;;;2313   }
00001a  bd38              POP      {r3-r5,pc}
                  |L27.28|
00001c  f89d0000          LDRB     r0,[sp,#0]            ;2310
000020  f0000001          AND      r0,r0,#1              ;2310
000024  7020              STRB     r0,[r4,#0]            ;2310
000026  2000              MOVS     r0,#0                 ;2312
000028  e7f7              B        |L27.26|
;;;2314   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Get_6D_Orientation_YH||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Get_6D_Orientation_YH PROC
;;;2360    */
;;;2361   int32_t LSM6DSL_ACC_Get_6D_Orientation_YH(LSM6DSL_Object_t *pObj, uint8_t *YHigh)
000000  b538              PUSH     {r3-r5,lr}
;;;2362   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2363     lsm6dsl_d6d_src_t data;
;;;2364   
;;;2365     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSL_OK)
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211d              MOVS     r1,#0x1d
00000c  f105001c          ADD      r0,r5,#0x1c
000010  f7fffffe          BL       lsm6dsl_read_reg
000014  b110              CBZ      r0,|L28.28|
;;;2366     {
;;;2367       return LSM6DSL_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L28.26|
;;;2368     }
;;;2369   
;;;2370     *YHigh = data.yh;
;;;2371   
;;;2372     return LSM6DSL_OK;
;;;2373   }
00001a  bd38              POP      {r3-r5,pc}
                  |L28.28|
00001c  f89d0000          LDRB     r0,[sp,#0]            ;2370
000020  f3c000c0          UBFX     r0,r0,#3,#1           ;2370
000024  7020              STRB     r0,[r4,#0]            ;2370
000026  2000              MOVS     r0,#0                 ;2372
000028  e7f7              B        |L28.26|
;;;2374   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Get_6D_Orientation_YL||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Get_6D_Orientation_YL PROC
;;;2340    */
;;;2341   int32_t LSM6DSL_ACC_Get_6D_Orientation_YL(LSM6DSL_Object_t *pObj, uint8_t *YLow)
000000  b538              PUSH     {r3-r5,lr}
;;;2342   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2343     lsm6dsl_d6d_src_t data;
;;;2344   
;;;2345     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSL_OK)
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211d              MOVS     r1,#0x1d
00000c  f105001c          ADD      r0,r5,#0x1c
000010  f7fffffe          BL       lsm6dsl_read_reg
000014  b110              CBZ      r0,|L29.28|
;;;2346     {
;;;2347       return LSM6DSL_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L29.26|
;;;2348     }
;;;2349   
;;;2350     *YLow = data.yl;
;;;2351   
;;;2352     return LSM6DSL_OK;
;;;2353   }
00001a  bd38              POP      {r3-r5,pc}
                  |L29.28|
00001c  f89d0000          LDRB     r0,[sp,#0]            ;2350
000020  f3c00080          UBFX     r0,r0,#2,#1           ;2350
000024  7020              STRB     r0,[r4,#0]            ;2350
000026  2000              MOVS     r0,#0                 ;2352
000028  e7f7              B        |L29.26|
;;;2354   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Get_6D_Orientation_ZH||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Get_6D_Orientation_ZH PROC
;;;2400    */
;;;2401   int32_t LSM6DSL_ACC_Get_6D_Orientation_ZH(LSM6DSL_Object_t *pObj, uint8_t *ZHigh)
000000  b538              PUSH     {r3-r5,lr}
;;;2402   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2403     lsm6dsl_d6d_src_t data;
;;;2404   
;;;2405     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSL_OK)
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211d              MOVS     r1,#0x1d
00000c  f105001c          ADD      r0,r5,#0x1c
000010  f7fffffe          BL       lsm6dsl_read_reg
000014  b110              CBZ      r0,|L30.28|
;;;2406     {
;;;2407       return LSM6DSL_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L30.26|
;;;2408     }
;;;2409   
;;;2410     *ZHigh = data.zh;
;;;2411   
;;;2412     return LSM6DSL_OK;
;;;2413   }
00001a  bd38              POP      {r3-r5,pc}
                  |L30.28|
00001c  f89d0000          LDRB     r0,[sp,#0]            ;2410
000020  f3c01040          UBFX     r0,r0,#5,#1           ;2410
000024  7020              STRB     r0,[r4,#0]            ;2410
000026  2000              MOVS     r0,#0                 ;2412
000028  e7f7              B        |L30.26|
;;;2414   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Get_6D_Orientation_ZL||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Get_6D_Orientation_ZL PROC
;;;2380    */
;;;2381   int32_t LSM6DSL_ACC_Get_6D_Orientation_ZL(LSM6DSL_Object_t *pObj, uint8_t *ZLow)
000000  b538              PUSH     {r3-r5,lr}
;;;2382   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2383     lsm6dsl_d6d_src_t data;
;;;2384   
;;;2385     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_D6D_SRC, (uint8_t *)&data, 1) != LSM6DSL_OK)
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211d              MOVS     r1,#0x1d
00000c  f105001c          ADD      r0,r5,#0x1c
000010  f7fffffe          BL       lsm6dsl_read_reg
000014  b110              CBZ      r0,|L31.28|
;;;2386     {
;;;2387       return LSM6DSL_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L31.26|
;;;2388     }
;;;2389   
;;;2390     *ZLow = data.zl;
;;;2391   
;;;2392     return LSM6DSL_OK;
;;;2393   }
00001a  bd38              POP      {r3-r5,pc}
                  |L31.28|
00001c  f89d0000          LDRB     r0,[sp,#0]            ;2390
000020  f3c01000          UBFX     r0,r0,#4,#1           ;2390
000024  7020              STRB     r0,[r4,#0]            ;2390
000026  2000              MOVS     r0,#0                 ;2392
000028  e7f7              B        |L31.26|
;;;2394   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Get_DRDY_Status||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Get_DRDY_Status PROC
;;;2563    */
;;;2564   int32_t LSM6DSL_ACC_Get_DRDY_Status(LSM6DSL_Object_t *pObj, uint8_t *Status)
000000  b570              PUSH     {r4-r6,lr}
;;;2565   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2566     if (lsm6dsl_xl_flag_data_ready_get(&(pObj->Ctx), Status) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_xl_flag_data_ready_get
000010  b110              CBZ      r0,|L32.24|
;;;2567     {
;;;2568       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L32.22|
;;;2569     }
;;;2570   
;;;2571     return LSM6DSL_OK;
;;;2572   }
000016  bd70              POP      {r4-r6,pc}
                  |L32.24|
000018  2000              MOVS     r0,#0                 ;2571
00001a  e7fc              B        |L32.22|
;;;2573   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Get_Event_Status||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Get_Event_Status PROC
;;;2420    */
;;;2421   int32_t LSM6DSL_ACC_Get_Event_Status(LSM6DSL_Object_t *pObj, LSM6DSL_Event_Status_t *Status)
000000  b530              PUSH     {r4,r5,lr}
;;;2422   {
000002  b087              SUB      sp,sp,#0x1c
000004  4605              MOV      r5,r0
000006  460c              MOV      r4,r1
;;;2423     lsm6dsl_wake_up_src_t wake_up_src;
;;;2424     lsm6dsl_tap_src_t tap_src;
;;;2425     lsm6dsl_d6d_src_t d6d_src;
;;;2426     lsm6dsl_func_src1_t func_src;
;;;2427     lsm6dsl_md1_cfg_t md1_cfg;
;;;2428     lsm6dsl_md2_cfg_t md2_cfg;
;;;2429     lsm6dsl_int1_ctrl_t int1_ctrl;
;;;2430   
;;;2431     (void)memset((void *)Status, 0x0, sizeof(LSM6DSL_Event_Status_t));
000008  2000              MOVS     r0,#0
00000a  6020              STR      r0,[r4,#0]
;;;2432   
;;;2433     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_WAKE_UP_SRC, (uint8_t *)&wake_up_src, 1) != LSM6DSL_OK)
00000c  2301              MOVS     r3,#1
00000e  aa06              ADD      r2,sp,#0x18
000010  211b              MOVS     r1,#0x1b
000012  f105001c          ADD      r0,r5,#0x1c
000016  f7fffffe          BL       lsm6dsl_read_reg
00001a  b118              CBZ      r0,|L33.36|
;;;2434     {
;;;2435       return LSM6DSL_ERROR;
00001c  f04f30ff          MOV      r0,#0xffffffff
                  |L33.32|
;;;2436     }
;;;2437   
;;;2438     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_TAP_SRC, (uint8_t *)&tap_src, 1) != LSM6DSL_OK)
;;;2439     {
;;;2440       return LSM6DSL_ERROR;
;;;2441     }
;;;2442   
;;;2443     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_D6D_SRC, (uint8_t *)&d6d_src, 1) != LSM6DSL_OK)
;;;2444     {
;;;2445       return LSM6DSL_ERROR;
;;;2446     }
;;;2447   
;;;2448     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_FUNC_SRC1, (uint8_t *)&func_src, 1) != LSM6DSL_OK)
;;;2449     {
;;;2450       return LSM6DSL_ERROR;
;;;2451     }
;;;2452   
;;;2453     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_MD1_CFG, (uint8_t *)&md1_cfg, 1) != LSM6DSL_OK)
;;;2454     {
;;;2455       return LSM6DSL_ERROR;
;;;2456     }
;;;2457   
;;;2458     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_MD2_CFG, (uint8_t *)&md2_cfg, 1) != LSM6DSL_OK)
;;;2459     {
;;;2460       return LSM6DSL_ERROR;
;;;2461     }
;;;2462   
;;;2463     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_INT1_CTRL, (uint8_t *)&int1_ctrl, 1) != LSM6DSL_OK)
;;;2464     {
;;;2465       return LSM6DSL_ERROR;
;;;2466     }
;;;2467   
;;;2468     if ((md1_cfg.int1_ff == 1U) || (md2_cfg.int2_ff == 1U))
;;;2469     {
;;;2470       if (wake_up_src.ff_ia == 1U)
;;;2471       {
;;;2472         Status->FreeFallStatus = 1;
;;;2473       }
;;;2474     }
;;;2475   
;;;2476     if ((md1_cfg.int1_wu == 1U) || (md2_cfg.int2_wu == 1U))
;;;2477     {
;;;2478       if (wake_up_src.wu_ia == 1U)
;;;2479       {
;;;2480         Status->WakeUpStatus = 1;
;;;2481       }
;;;2482     }
;;;2483   
;;;2484     if ((md1_cfg.int1_inact_state == 1U) || (md2_cfg.int2_inact_state == 1U))
;;;2485     {
;;;2486       if (wake_up_src.sleep_state_ia == 1U)
;;;2487       {
;;;2488         Status->SleepStatus = 1;
;;;2489       }
;;;2490     }
;;;2491   
;;;2492     if ((md1_cfg.int1_single_tap == 1U) || (md2_cfg.int2_single_tap == 1U))
;;;2493     {
;;;2494       if (tap_src.single_tap == 1U)
;;;2495       {
;;;2496         Status->TapStatus = 1;
;;;2497       }
;;;2498     }
;;;2499   
;;;2500     if ((md1_cfg.int1_double_tap == 1U) || (md2_cfg.int2_double_tap == 1U))
;;;2501     {
;;;2502       if (tap_src.double_tap == 1U)
;;;2503       {
;;;2504         Status->DoubleTapStatus = 1;
;;;2505       }
;;;2506     }
;;;2507   
;;;2508     if ((md1_cfg.int1_6d == 1U) || (md2_cfg.int2_6d == 1U))
;;;2509     {
;;;2510       if (d6d_src.d6d_ia == 1U)
;;;2511       {
;;;2512         Status->D6DOrientationStatus = 1;
;;;2513       }
;;;2514     }
;;;2515   
;;;2516     if (int1_ctrl.int1_step_detector == 1U)
;;;2517     {
;;;2518       if (func_src.step_detected == 1U)
;;;2519       {
;;;2520         Status->StepStatus = 1;
;;;2521       }
;;;2522     }
;;;2523   
;;;2524     if ((md1_cfg.int1_tilt == 1U) || (md2_cfg.int2_tilt == 1U))
;;;2525     {
;;;2526       if (func_src.tilt_ia == 1U)
;;;2527       {
;;;2528         Status->TiltStatus = 1;
;;;2529       }
;;;2530     }
;;;2531   
;;;2532     return LSM6DSL_OK;
;;;2533   }
000020  b007              ADD      sp,sp,#0x1c
000022  bd30              POP      {r4,r5,pc}
                  |L33.36|
000024  2301              MOVS     r3,#1                 ;2438
000026  aa05              ADD      r2,sp,#0x14           ;2438
000028  211c              MOVS     r1,#0x1c              ;2438
00002a  f105001c          ADD      r0,r5,#0x1c           ;2438
00002e  f7fffffe          BL       lsm6dsl_read_reg
000032  b110              CBZ      r0,|L33.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;2440
000038  e7f2              B        |L33.32|
                  |L33.58|
00003a  2301              MOVS     r3,#1                 ;2443
00003c  aa04              ADD      r2,sp,#0x10           ;2443
00003e  211d              MOVS     r1,#0x1d              ;2443
000040  f105001c          ADD      r0,r5,#0x1c           ;2443
000044  f7fffffe          BL       lsm6dsl_read_reg
000048  b110              CBZ      r0,|L33.80|
00004a  f04f30ff          MOV      r0,#0xffffffff        ;2445
00004e  e7e7              B        |L33.32|
                  |L33.80|
000050  2301              MOVS     r3,#1                 ;2448
000052  aa03              ADD      r2,sp,#0xc            ;2448
000054  2153              MOVS     r1,#0x53              ;2448
000056  f105001c          ADD      r0,r5,#0x1c           ;2448
00005a  f7fffffe          BL       lsm6dsl_read_reg
00005e  b110              CBZ      r0,|L33.102|
000060  f04f30ff          MOV      r0,#0xffffffff        ;2450
000064  e7dc              B        |L33.32|
                  |L33.102|
000066  2301              MOVS     r3,#1                 ;2453
000068  aa02              ADD      r2,sp,#8              ;2453
00006a  215e              MOVS     r1,#0x5e              ;2453
00006c  f105001c          ADD      r0,r5,#0x1c           ;2453
000070  f7fffffe          BL       lsm6dsl_read_reg
000074  b110              CBZ      r0,|L33.124|
000076  f04f30ff          MOV      r0,#0xffffffff        ;2455
00007a  e7d1              B        |L33.32|
                  |L33.124|
00007c  2301              MOVS     r3,#1                 ;2458
00007e  aa01              ADD      r2,sp,#4              ;2458
000080  215f              MOVS     r1,#0x5f              ;2458
000082  f105001c          ADD      r0,r5,#0x1c           ;2458
000086  f7fffffe          BL       lsm6dsl_read_reg
00008a  b110              CBZ      r0,|L33.146|
00008c  f04f30ff          MOV      r0,#0xffffffff        ;2460
000090  e7c6              B        |L33.32|
                  |L33.146|
000092  2301              MOVS     r3,#1                 ;2463
000094  466a              MOV      r2,sp                 ;2463
000096  210d              MOVS     r1,#0xd               ;2463
000098  f105001c          ADD      r0,r5,#0x1c           ;2463
00009c  f7fffffe          BL       lsm6dsl_read_reg
0000a0  b110              CBZ      r0,|L33.168|
0000a2  f04f30ff          MOV      r0,#0xffffffff        ;2465
0000a6  e7bb              B        |L33.32|
                  |L33.168|
0000a8  f89d0008          LDRB     r0,[sp,#8]            ;2468
0000ac  f3c01000          UBFX     r0,r0,#4,#1           ;2468
0000b0  b920              CBNZ     r0,|L33.188|
0000b2  f89d0004          LDRB     r0,[sp,#4]            ;2468
0000b6  f3c01000          UBFX     r0,r0,#4,#1           ;2468
0000ba  b148              CBZ      r0,|L33.208|
                  |L33.188|
0000bc  f89d0018          LDRB     r0,[sp,#0x18]         ;2470
0000c0  f3c01040          UBFX     r0,r0,#5,#1           ;2470
0000c4  b120              CBZ      r0,|L33.208|
0000c6  6820              LDR      r0,[r4,#0]            ;2472
0000c8  f0200001          BIC      r0,r0,#1              ;2472
0000cc  1c40              ADDS     r0,r0,#1              ;2472
0000ce  6020              STR      r0,[r4,#0]            ;2472
                  |L33.208|
0000d0  f89d0008          LDRB     r0,[sp,#8]            ;2476
0000d4  f3c01040          UBFX     r0,r0,#5,#1           ;2476
0000d8  b920              CBNZ     r0,|L33.228|
0000da  f89d0004          LDRB     r0,[sp,#4]            ;2476
0000de  f3c01040          UBFX     r0,r0,#5,#1           ;2476
0000e2  b148              CBZ      r0,|L33.248|
                  |L33.228|
0000e4  f89d0018          LDRB     r0,[sp,#0x18]         ;2478
0000e8  f3c000c0          UBFX     r0,r0,#3,#1           ;2478
0000ec  b120              CBZ      r0,|L33.248|
0000ee  6820              LDR      r0,[r4,#0]            ;2480
0000f0  f0200008          BIC      r0,r0,#8              ;2480
0000f4  3008              ADDS     r0,r0,#8              ;2480
0000f6  6020              STR      r0,[r4,#0]            ;2480
                  |L33.248|
0000f8  f89d0008          LDRB     r0,[sp,#8]            ;2484
0000fc  2101              MOVS     r1,#1                 ;2484
0000fe  ebb11fd0          CMP      r1,r0,LSR #7          ;2484
000102  d004              BEQ      |L33.270|
000104  f89d0004          LDRB     r0,[sp,#4]            ;2484
000108  ebb11fd0          CMP      r1,r0,LSR #7          ;2484
00010c  d109              BNE      |L33.290|
                  |L33.270|
00010e  f89d0018          LDRB     r0,[sp,#0x18]         ;2486
000112  f3c01000          UBFX     r0,r0,#4,#1           ;2486
000116  b120              CBZ      r0,|L33.290|
000118  6820              LDR      r0,[r4,#0]            ;2488
00011a  f0200080          BIC      r0,r0,#0x80           ;2488
00011e  3080              ADDS     r0,r0,#0x80           ;2488
000120  6020              STR      r0,[r4,#0]            ;2488
                  |L33.290|
000122  f89d0008          LDRB     r0,[sp,#8]            ;2492
000126  f3c01080          UBFX     r0,r0,#6,#1           ;2492
00012a  b920              CBNZ     r0,|L33.310|
00012c  f89d0004          LDRB     r0,[sp,#4]            ;2492
000130  f3c01080          UBFX     r0,r0,#6,#1           ;2492
000134  b148              CBZ      r0,|L33.330|
                  |L33.310|
000136  f89d0014          LDRB     r0,[sp,#0x14]         ;2494
00013a  f3c01040          UBFX     r0,r0,#5,#1           ;2494
00013e  b120              CBZ      r0,|L33.330|
000140  6820              LDR      r0,[r4,#0]            ;2496
000142  f0200002          BIC      r0,r0,#2              ;2496
000146  1c80              ADDS     r0,r0,#2              ;2496
000148  6020              STR      r0,[r4,#0]            ;2496
                  |L33.330|
00014a  f89d0008          LDRB     r0,[sp,#8]            ;2500
00014e  f3c000c0          UBFX     r0,r0,#3,#1           ;2500
000152  b920              CBNZ     r0,|L33.350|
000154  f89d0004          LDRB     r0,[sp,#4]            ;2500
000158  f3c000c0          UBFX     r0,r0,#3,#1           ;2500
00015c  b148              CBZ      r0,|L33.370|
                  |L33.350|
00015e  f89d0014          LDRB     r0,[sp,#0x14]         ;2502
000162  f3c01000          UBFX     r0,r0,#4,#1           ;2502
000166  b120              CBZ      r0,|L33.370|
000168  6820              LDR      r0,[r4,#0]            ;2504
00016a  f0200004          BIC      r0,r0,#4              ;2504
00016e  1d00              ADDS     r0,r0,#4              ;2504
000170  6020              STR      r0,[r4,#0]            ;2504
                  |L33.370|
000172  f89d0008          LDRB     r0,[sp,#8]            ;2508
000176  f3c00080          UBFX     r0,r0,#2,#1           ;2508
00017a  b920              CBNZ     r0,|L33.390|
00017c  f89d0004          LDRB     r0,[sp,#4]            ;2508
000180  f3c00080          UBFX     r0,r0,#2,#1           ;2508
000184  b148              CBZ      r0,|L33.410|
                  |L33.390|
000186  f89d0010          LDRB     r0,[sp,#0x10]         ;2510
00018a  f3c01080          UBFX     r0,r0,#6,#1           ;2510
00018e  b120              CBZ      r0,|L33.410|
000190  6820              LDR      r0,[r4,#0]            ;2512
000192  f0200040          BIC      r0,r0,#0x40           ;2512
000196  3040              ADDS     r0,r0,#0x40           ;2512
000198  6020              STR      r0,[r4,#0]            ;2512
                  |L33.410|
00019a  f89d0000          LDRB     r0,[sp,#0]            ;2516
00019e  2101              MOVS     r1,#1                 ;2516
0001a0  ebb11fd0          CMP      r1,r0,LSR #7          ;2516
0001a4  d109              BNE      |L33.442|
0001a6  f89d000c          LDRB     r0,[sp,#0xc]          ;2518
0001aa  f3c01000          UBFX     r0,r0,#4,#1           ;2518
0001ae  b120              CBZ      r0,|L33.442|
0001b0  6820              LDR      r0,[r4,#0]            ;2520
0001b2  f0200010          BIC      r0,r0,#0x10           ;2520
0001b6  3010              ADDS     r0,r0,#0x10           ;2520
0001b8  6020              STR      r0,[r4,#0]            ;2520
                  |L33.442|
0001ba  f89d0008          LDRB     r0,[sp,#8]            ;2524
0001be  f3c00040          UBFX     r0,r0,#1,#1           ;2524
0001c2  b920              CBNZ     r0,|L33.462|
0001c4  f89d0004          LDRB     r0,[sp,#4]            ;2524
0001c8  f3c00040          UBFX     r0,r0,#1,#1           ;2524
0001cc  b148              CBZ      r0,|L33.482|
                  |L33.462|
0001ce  f89d000c          LDRB     r0,[sp,#0xc]          ;2526
0001d2  f3c01040          UBFX     r0,r0,#5,#1           ;2526
0001d6  b120              CBZ      r0,|L33.482|
0001d8  6820              LDR      r0,[r4,#0]            ;2528
0001da  f0200020          BIC      r0,r0,#0x20           ;2528
0001de  3020              ADDS     r0,r0,#0x20           ;2528
0001e0  6020              STR      r0,[r4,#0]            ;2528
                  |L33.482|
0001e2  2000              MOVS     r0,#0                 ;2532
0001e4  e71c              B        |L33.32|
;;;2534   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Get_Init_Status||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Get_Init_Status PROC
;;;2579    */
;;;2580   int32_t LSM6DSL_ACC_Get_Init_Status(LSM6DSL_Object_t *pObj, uint8_t *Status)
000000  4602              MOV      r2,r0
;;;2581   {
;;;2582     if (pObj == NULL)
000002  b912              CBNZ     r2,|L34.10|
;;;2583     {
;;;2584       return LSM6DSL_ERROR;
000004  f04f30ff          MOV      r0,#0xffffffff
                  |L34.8|
;;;2585     }
;;;2586   
;;;2587     *Status = pObj->is_initialized;
;;;2588   
;;;2589     return LSM6DSL_OK;
;;;2590   }
000008  4770              BX       lr
                  |L34.10|
00000a  f8920028          LDRB     r0,[r2,#0x28]         ;2587
00000e  7008              STRB     r0,[r1,#0]            ;2587
000010  2000              MOVS     r0,#0                 ;2589
000012  e7f9              B        |L34.8|
;;;2591   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Get_Step_Count||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Get_Step_Count PROC
;;;1251    */
;;;1252   int32_t LSM6DSL_ACC_Get_Step_Count(LSM6DSL_Object_t *pObj, uint16_t *StepCount)
000000  b570              PUSH     {r4-r6,lr}
;;;1253   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1254     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_STEP_COUNTER_L, (uint8_t *)StepCount, 2) != LSM6DSL_OK)
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  214b              MOVS     r1,#0x4b
00000c  f105001c          ADD      r0,r5,#0x1c
000010  f7fffffe          BL       lsm6dsl_read_reg
000014  b110              CBZ      r0,|L35.28|
;;;1255     {
;;;1256       return LSM6DSL_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L35.26|
;;;1257     }
;;;1258   
;;;1259     return LSM6DSL_OK;
;;;1260   }
00001a  bd70              POP      {r4-r6,pc}
                  |L35.28|
00001c  2000              MOVS     r0,#0                 ;1259
00001e  e7fc              B        |L35.26|
;;;1261   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_SetFullScale||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_SetFullScale PROC
;;;537     */
;;;538    int32_t LSM6DSL_ACC_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
000000  b570              PUSH     {r4-r6,lr}
;;;539    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;540      lsm6dsl_fs_xl_t new_fs;
;;;541    
;;;542      /* Seems like MISRA C-2012 rule 14.3a violation but only from single file statical analysis point of view because
;;;543         the parameter passed to the function is not known at the moment of analysis */
;;;544      new_fs = (FullScale <= 2) ? LSM6DSL_2g
000006  2c02              CMP      r4,#2
000008  dc01              BGT      |L36.14|
00000a  2000              MOVS     r0,#0
00000c  e008              B        |L36.32|
                  |L36.14|
;;;545               : (FullScale <= 4) ? LSM6DSL_4g
00000e  2c04              CMP      r4,#4
000010  dc01              BGT      |L36.22|
000012  2002              MOVS     r0,#2
000014  e004              B        |L36.32|
                  |L36.22|
;;;546               : (FullScale <= 8) ? LSM6DSL_8g
000016  2c08              CMP      r4,#8
000018  dc01              BGT      |L36.30|
00001a  2003              MOVS     r0,#3
00001c  e000              B        |L36.32|
                  |L36.30|
;;;547               :                    LSM6DSL_16g;
00001e  2001              MOVS     r0,#1
                  |L36.32|
000020  4606              MOV      r6,r0
;;;548    
;;;549      if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
000022  4631              MOV      r1,r6
000024  f105001c          ADD      r0,r5,#0x1c
000028  f7fffffe          BL       lsm6dsl_xl_full_scale_set
00002c  b110              CBZ      r0,|L36.52|
;;;550      {
;;;551        return LSM6DSL_ERROR;
00002e  f04f30ff          MOV      r0,#0xffffffff
                  |L36.50|
;;;552      }
;;;553    
;;;554      return LSM6DSL_OK;
;;;555    }
000032  bd70              POP      {r4-r6,pc}
                  |L36.52|
000034  2000              MOVS     r0,#0                 ;554
000036  e7fc              B        |L36.50|
;;;556    
                          ENDP


                          AREA ||i.LSM6DSL_ACC_SetOutputDataRate||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_SetOutputDataRate PROC
;;;475     */
;;;476    int32_t LSM6DSL_ACC_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
000000  b510              PUSH     {r4,lr}
;;;477    {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;478      /* Check if the component is enabled */
;;;479      if (pObj->acc_is_enabled == 1U)
00000c  f8940029          LDRB     r0,[r4,#0x29]
000010  2801              CMP      r0,#1
000012  d107              BNE      |L37.36|
;;;480      {
;;;481        return LSM6DSL_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
000014  eeb00a48          VMOV.F32 s0,s16
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       LSM6DSL_ACC_SetOutputDataRate_When_Enabled
                  |L37.30|
;;;482      }
;;;483      else
;;;484      {
;;;485        return LSM6DSL_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
;;;486      }
;;;487    }
00001e  ecbd8b02          VPOP     {d8}
000022  bd10              POP      {r4,pc}
                  |L37.36|
000024  eeb00a48          VMOV.F32 s0,s16                ;485
000028  4620              MOV      r0,r4                 ;485
00002a  f7fffffe          BL       LSM6DSL_ACC_SetOutputDataRate_When_Disabled
00002e  e7f6              B        |L37.30|
;;;488    
                          ENDP


                          AREA ||i.LSM6DSL_ACC_SetOutputDataRate_When_Disabled||, CODE, READONLY, ALIGN=2

                  LSM6DSL_ACC_SetOutputDataRate_When_Disabled PROC
;;;3115    */
;;;3116   static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
000000  4601              MOV      r1,r0
;;;3117   {
;;;3118     pObj->acc_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
000002  eef20a09          VMOV.F32 s1,#12.50000000
000006  eeb40ae0          VCMPE.F32 s0,s1
00000a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000e  d801              BHI      |L38.20|
000010  2001              MOVS     r0,#1
000012  e048              B        |L38.166|
                  |L38.20|
;;;3119                   : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
000014  eef30a0a          VMOV.F32 s1,#26.00000000
000018  eeb40ae0          VCMPE.F32 s0,s1
00001c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000020  d801              BHI      |L38.38|
000022  2002              MOVS     r0,#2
000024  e03f              B        |L38.166|
                  |L38.38|
;;;3120                   : (Odr <=   52.0f) ? LSM6DSL_XL_ODR_52Hz
000026  eddf0a22          VLDR     s1,|L38.176|
00002a  eeb40ae0          VCMPE.F32 s0,s1
00002e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000032  d801              BHI      |L38.56|
000034  2003              MOVS     r0,#3
000036  e036              B        |L38.166|
                  |L38.56|
;;;3121                   : (Odr <=  104.0f) ? LSM6DSL_XL_ODR_104Hz
000038  eddf0a1e          VLDR     s1,|L38.180|
00003c  eeb40ae0          VCMPE.F32 s0,s1
000040  eef1fa10          VMRS     APSR_nzcv,FPSCR
000044  d801              BHI      |L38.74|
000046  2004              MOVS     r0,#4
000048  e02d              B        |L38.166|
                  |L38.74|
;;;3122                   : (Odr <=  208.0f) ? LSM6DSL_XL_ODR_208Hz
00004a  eddf0a1b          VLDR     s1,|L38.184|
00004e  eeb40ae0          VCMPE.F32 s0,s1
000052  eef1fa10          VMRS     APSR_nzcv,FPSCR
000056  d801              BHI      |L38.92|
000058  2005              MOVS     r0,#5
00005a  e024              B        |L38.166|
                  |L38.92|
;;;3123                   : (Odr <=  416.0f) ? LSM6DSL_XL_ODR_416Hz
00005c  eddf0a17          VLDR     s1,|L38.188|
000060  eeb40ae0          VCMPE.F32 s0,s1
000064  eef1fa10          VMRS     APSR_nzcv,FPSCR
000068  d801              BHI      |L38.110|
00006a  2006              MOVS     r0,#6
00006c  e01b              B        |L38.166|
                  |L38.110|
;;;3124                   : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
00006e  eddf0a14          VLDR     s1,|L38.192|
000072  eeb40ae0          VCMPE.F32 s0,s1
000076  eef1fa10          VMRS     APSR_nzcv,FPSCR
00007a  d801              BHI      |L38.128|
00007c  2007              MOVS     r0,#7
00007e  e012              B        |L38.166|
                  |L38.128|
;;;3125                   : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
000080  eddf0a10          VLDR     s1,|L38.196|
000084  eeb40ae0          VCMPE.F32 s0,s1
000088  eef1fa10          VMRS     APSR_nzcv,FPSCR
00008c  d801              BHI      |L38.146|
00008e  2008              MOVS     r0,#8
000090  e009              B        |L38.166|
                  |L38.146|
;;;3126                   : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
000092  eddf0a0d          VLDR     s1,|L38.200|
000096  eeb40ae0          VCMPE.F32 s0,s1
00009a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00009e  d801              BHI      |L38.164|
0000a0  2009              MOVS     r0,#9
0000a2  e000              B        |L38.166|
                  |L38.164|
;;;3127                   :                    LSM6DSL_XL_ODR_6k66Hz;
0000a4  200a              MOVS     r0,#0xa
                  |L38.166|
0000a6  f881002b          STRB     r0,[r1,#0x2b]
;;;3128   
;;;3129     return LSM6DSL_OK;
0000aa  2000              MOVS     r0,#0
;;;3130   }
0000ac  4770              BX       lr
;;;3131   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L38.176|
0000b0  42500000          DCFS     0x42500000 ; 52
                  |L38.180|
0000b4  42d00000          DCFS     0x42d00000 ; 104
                  |L38.184|
0000b8  43500000          DCFS     0x43500000 ; 208
                  |L38.188|
0000bc  43d00000          DCFS     0x43d00000 ; 416
                  |L38.192|
0000c0  44504000          DCFS     0x44504000 ; 833
                  |L38.196|
0000c4  44cf8000          DCFS     0x44cf8000 ; 1660
                  |L38.200|
0000c8  45502000          DCFS     0x45502000 ; 3330

                          AREA ||i.LSM6DSL_ACC_SetOutputDataRate_When_Enabled||, CODE, READONLY, ALIGN=2

                  LSM6DSL_ACC_SetOutputDataRate_When_Enabled PROC
;;;3085    */
;;;3086   static int32_t LSM6DSL_ACC_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
000000  b570              PUSH     {r4-r6,lr}
;;;3087   {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;3088     lsm6dsl_odr_xl_t new_odr;
;;;3089   
;;;3090     new_odr = (Odr <=   12.5f) ? LSM6DSL_XL_ODR_12Hz5
00000c  eeb20a09          VMOV.F32 s0,#12.50000000
000010  eeb48ac0          VCMPE.F32 s16,s0
000014  eef1fa10          VMRS     APSR_nzcv,FPSCR
000018  d801              BHI      |L39.30|
00001a  2001              MOVS     r0,#1
00001c  e048              B        |L39.176|
                  |L39.30|
;;;3091             : (Odr <=   26.0f) ? LSM6DSL_XL_ODR_26Hz
00001e  eeb30a0a          VMOV.F32 s0,#26.00000000
000022  eeb48ac0          VCMPE.F32 s16,s0
000026  eef1fa10          VMRS     APSR_nzcv,FPSCR
00002a  d801              BHI      |L39.48|
00002c  2002              MOVS     r0,#2
00002e  e03f              B        |L39.176|
                  |L39.48|
;;;3092             : (Odr <=   52.0f) ? LSM6DSL_XL_ODR_52Hz
000030  ed9f0a26          VLDR     s0,|L39.204|
000034  eeb48ac0          VCMPE.F32 s16,s0
000038  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003c  d801              BHI      |L39.66|
00003e  2003              MOVS     r0,#3
000040  e036              B        |L39.176|
                  |L39.66|
;;;3093             : (Odr <=  104.0f) ? LSM6DSL_XL_ODR_104Hz
000042  ed9f0a23          VLDR     s0,|L39.208|
000046  eeb48ac0          VCMPE.F32 s16,s0
00004a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00004e  d801              BHI      |L39.84|
000050  2004              MOVS     r0,#4
000052  e02d              B        |L39.176|
                  |L39.84|
;;;3094             : (Odr <=  208.0f) ? LSM6DSL_XL_ODR_208Hz
000054  ed9f0a1f          VLDR     s0,|L39.212|
000058  eeb48ac0          VCMPE.F32 s16,s0
00005c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000060  d801              BHI      |L39.102|
000062  2005              MOVS     r0,#5
000064  e024              B        |L39.176|
                  |L39.102|
;;;3095             : (Odr <=  416.0f) ? LSM6DSL_XL_ODR_416Hz
000066  ed9f0a1c          VLDR     s0,|L39.216|
00006a  eeb48ac0          VCMPE.F32 s16,s0
00006e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000072  d801              BHI      |L39.120|
000074  2006              MOVS     r0,#6
000076  e01b              B        |L39.176|
                  |L39.120|
;;;3096             : (Odr <=  833.0f) ? LSM6DSL_XL_ODR_833Hz
000078  ed9f0a18          VLDR     s0,|L39.220|
00007c  eeb48ac0          VCMPE.F32 s16,s0
000080  eef1fa10          VMRS     APSR_nzcv,FPSCR
000084  d801              BHI      |L39.138|
000086  2007              MOVS     r0,#7
000088  e012              B        |L39.176|
                  |L39.138|
;;;3097             : (Odr <= 1660.0f) ? LSM6DSL_XL_ODR_1k66Hz
00008a  ed9f0a15          VLDR     s0,|L39.224|
00008e  eeb48ac0          VCMPE.F32 s16,s0
000092  eef1fa10          VMRS     APSR_nzcv,FPSCR
000096  d801              BHI      |L39.156|
000098  2008              MOVS     r0,#8
00009a  e009              B        |L39.176|
                  |L39.156|
;;;3098             : (Odr <= 3330.0f) ? LSM6DSL_XL_ODR_3k33Hz
00009c  ed9f0a11          VLDR     s0,|L39.228|
0000a0  eeb48ac0          VCMPE.F32 s16,s0
0000a4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000a8  d801              BHI      |L39.174|
0000aa  2009              MOVS     r0,#9
0000ac  e000              B        |L39.176|
                  |L39.174|
;;;3099             :                    LSM6DSL_XL_ODR_6k66Hz;
0000ae  200a              MOVS     r0,#0xa
                  |L39.176|
0000b0  4605              MOV      r5,r0
;;;3100   
;;;3101     /* Output data rate selection. */
;;;3102     if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
0000b2  4629              MOV      r1,r5
0000b4  f104001c          ADD      r0,r4,#0x1c
0000b8  f7fffffe          BL       lsm6dsl_xl_data_rate_set
0000bc  b120              CBZ      r0,|L39.200|
;;;3103     {
;;;3104       return LSM6DSL_ERROR;
0000be  f04f30ff          MOV      r0,#0xffffffff
                  |L39.194|
;;;3105     }
;;;3106   
;;;3107     return LSM6DSL_OK;
;;;3108   }
0000c2  ecbd8b02          VPOP     {d8}
0000c6  bd70              POP      {r4-r6,pc}
                  |L39.200|
0000c8  2000              MOVS     r0,#0                 ;3107
0000ca  e7fa              B        |L39.194|
;;;3109   
                          ENDP

                  |L39.204|
0000cc  42500000          DCFS     0x42500000 ; 52
                  |L39.208|
0000d0  42d00000          DCFS     0x42d00000 ; 104
                  |L39.212|
0000d4  43500000          DCFS     0x43500000 ; 208
                  |L39.216|
0000d8  43d00000          DCFS     0x43d00000 ; 416
                  |L39.220|
0000dc  44504000          DCFS     0x44504000 ; 833
                  |L39.224|
0000e0  44cf8000          DCFS     0x44cf8000 ; 1660
                  |L39.228|
0000e4  45502000          DCFS     0x45502000 ; 3330

                          AREA ||i.LSM6DSL_ACC_Set_6D_Orientation_Threshold||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_6D_Orientation_Threshold PROC
;;;2284    */
;;;2285   int32_t LSM6DSL_ACC_Set_6D_Orientation_Threshold(LSM6DSL_Object_t *pObj, uint8_t Threshold)
000000  b570              PUSH     {r4-r6,lr}
;;;2286   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2287     if (lsm6dsl_6d_threshold_set(&(pObj->Ctx), (lsm6dsl_sixd_ths_t)Threshold) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_6d_threshold_set
000010  b110              CBZ      r0,|L40.24|
;;;2288     {
;;;2289       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L40.22|
;;;2290     }
;;;2291   
;;;2292     return LSM6DSL_OK;
;;;2293   }
000016  bd70              POP      {r4-r6,pc}
                  |L40.24|
000018  2000              MOVS     r0,#0                 ;2292
00001a  e7fc              B        |L40.22|
;;;2294   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_Free_Fall_Duration||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_Free_Fall_Duration PROC
;;;1149    */
;;;1150   int32_t LSM6DSL_ACC_Set_Free_Fall_Duration(LSM6DSL_Object_t *pObj, uint8_t Duration)
000000  b570              PUSH     {r4-r6,lr}
;;;1151   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1152     if (lsm6dsl_ff_dur_set(&(pObj->Ctx), Duration) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_ff_dur_set
000010  b110              CBZ      r0,|L41.24|
;;;1153     {
;;;1154       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L41.22|
;;;1155     }
;;;1156   
;;;1157     return LSM6DSL_OK;
;;;1158   }
000016  bd70              POP      {r4-r6,pc}
                  |L41.24|
000018  2000              MOVS     r0,#0                 ;1157
00001a  e7fc              B        |L41.22|
;;;1159   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_Free_Fall_Threshold||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_Free_Fall_Threshold PROC
;;;1133    */
;;;1134   int32_t LSM6DSL_ACC_Set_Free_Fall_Threshold(LSM6DSL_Object_t *pObj, uint8_t Threshold)
000000  b570              PUSH     {r4-r6,lr}
;;;1135   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1136     if (lsm6dsl_ff_threshold_set(&(pObj->Ctx), (lsm6dsl_ff_ths_t)Threshold) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_ff_threshold_set
000010  b110              CBZ      r0,|L42.24|
;;;1137     {
;;;1138       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L42.22|
;;;1139     }
;;;1140   
;;;1141     return LSM6DSL_OK;
;;;1142   }
000016  bd70              POP      {r4-r6,pc}
                  |L42.24|
000018  2000              MOVS     r0,#0                 ;1141
00001a  e7fc              B        |L42.22|
;;;1143   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_INT1_DRDY||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_INT1_DRDY PROC
;;;2597    */
;;;2598   int32_t LSM6DSL_ACC_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
000000  b538              PUSH     {r3-r5,lr}
;;;2599   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2600     lsm6dsl_int1_route_t reg;
;;;2601   
;;;2602     if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
000006  4669              MOV      r1,sp
000008  f105001c          ADD      r0,r5,#0x1c
00000c  f7fffffe          BL       lsm6dsl_pin_int1_route_get
000010  b110              CBZ      r0,|L43.24|
;;;2603     {
;;;2604       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L43.22|
;;;2605     }
;;;2606   
;;;2607     if (Val <= 1)
;;;2608     {
;;;2609       reg.int1_drdy_xl = Val;
;;;2610     }
;;;2611     else
;;;2612     {
;;;2613       return LSM6DSL_ERROR;
;;;2614     }
;;;2615   
;;;2616     if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
;;;2617     {
;;;2618       return LSM6DSL_ERROR;
;;;2619     }
;;;2620   
;;;2621     return LSM6DSL_OK;
;;;2622   }
000016  bd38              POP      {r3-r5,pc}
                  |L43.24|
000018  2c01              CMP      r4,#1                 ;2607
00001a  dc06              BGT      |L43.42|
00001c  f89d0000          LDRB     r0,[sp,#0]            ;2609
000020  f3640000          BFI      r0,r4,#0,#1           ;2609
000024  f88d0000          STRB     r0,[sp,#0]            ;2609
000028  e002              B        |L43.48|
                  |L43.42|
00002a  f04f30ff          MOV      r0,#0xffffffff        ;2613
00002e  e7f2              B        |L43.22|
                  |L43.48|
000030  f105001c          ADD      r0,r5,#0x1c           ;2616
000034  9900              LDR      r1,[sp,#0]            ;2616
000036  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00003a  b110              CBZ      r0,|L43.66|
00003c  f04f30ff          MOV      r0,#0xffffffff        ;2618
000040  e7e9              B        |L43.22|
                  |L43.66|
000042  2000              MOVS     r0,#0                 ;2621
000044  e7e7              B        |L43.22|
;;;2623   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_Pedometer_Threshold||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_Pedometer_Threshold PROC
;;;1297    */
;;;1298   int32_t LSM6DSL_ACC_Set_Pedometer_Threshold(LSM6DSL_Object_t *pObj, uint8_t Threshold)
000000  b570              PUSH     {r4-r6,lr}
;;;1299   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1300     if (lsm6dsl_pedo_threshold_set(&(pObj->Ctx), Threshold) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_pedo_threshold_set
000010  b110              CBZ      r0,|L44.24|
;;;1301     {
;;;1302       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L44.22|
;;;1303     }
;;;1304   
;;;1305     return LSM6DSL_OK;
;;;1306   }
000016  bd70              POP      {r4-r6,pc}
                  |L44.24|
000018  2000              MOVS     r0,#0                 ;1305
00001a  e7fc              B        |L44.22|
;;;1307   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_SelfTest||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_SelfTest PROC
;;;2540    */
;;;2541   int32_t LSM6DSL_ACC_Set_SelfTest(LSM6DSL_Object_t *pObj, uint8_t Val)
000000  b570              PUSH     {r4-r6,lr}
;;;2542   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2543     lsm6dsl_st_xl_t reg;
;;;2544   
;;;2545     reg = (Val == 0U)  ? LSM6DSL_XL_ST_DISABLE
000006  b90c              CBNZ     r4,|L45.12|
000008  2000              MOVS     r0,#0
00000a  e008              B        |L45.30|
                  |L45.12|
;;;2546         : (Val == 1U)  ? LSM6DSL_XL_ST_POSITIVE
00000c  2c01              CMP      r4,#1
00000e  d101              BNE      |L45.20|
000010  2001              MOVS     r0,#1
000012  e004              B        |L45.30|
                  |L45.20|
;;;2547         : (Val == 2U)  ? LSM6DSL_XL_ST_NEGATIVE
000014  2c02              CMP      r4,#2
000016  d101              BNE      |L45.28|
000018  2002              MOVS     r0,#2
00001a  e000              B        |L45.30|
                  |L45.28|
;;;2548         :                LSM6DSL_XL_ST_ND;
00001c  2003              MOVS     r0,#3
                  |L45.30|
00001e  4606              MOV      r6,r0
;;;2549   
;;;2550     if (lsm6dsl_xl_self_test_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
000020  4631              MOV      r1,r6
000022  f105001c          ADD      r0,r5,#0x1c
000026  f7fffffe          BL       lsm6dsl_xl_self_test_set
00002a  b110              CBZ      r0,|L45.50|
;;;2551     {
;;;2552       return LSM6DSL_ERROR;
00002c  f04f30ff          MOV      r0,#0xffffffff
                  |L45.48|
;;;2553     }
;;;2554   
;;;2555     return LSM6DSL_OK;
;;;2556   }
000030  bd70              POP      {r4-r6,pc}
                  |L45.50|
000032  2000              MOVS     r0,#0                 ;2555
000034  e7fc              B        |L45.48|
;;;2557   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_Sleep_Duration||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_Sleep_Duration PROC
;;;1712    */
;;;1713   int32_t LSM6DSL_ACC_Set_Sleep_Duration(LSM6DSL_Object_t *pObj, uint8_t Duration)
000000  b570              PUSH     {r4-r6,lr}
;;;1714   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1715     /* Set sleep duration. */
;;;1716     if (lsm6dsl_act_sleep_dur_set(&(pObj->Ctx), Duration) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_act_sleep_dur_set
000010  b110              CBZ      r0,|L46.24|
;;;1717     {
;;;1718       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L46.22|
;;;1719     }
;;;1720   
;;;1721     return LSM6DSL_OK;
;;;1722   }
000016  bd70              POP      {r4-r6,pc}
                  |L46.24|
000018  2000              MOVS     r0,#0                 ;1721
00001a  e7fc              B        |L46.22|
;;;1723   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_Tap_Duration_Time||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_Tap_Duration_Time PROC
;;;2154    */
;;;2155   int32_t LSM6DSL_ACC_Set_Tap_Duration_Time(LSM6DSL_Object_t *pObj, uint8_t Time)
000000  b570              PUSH     {r4-r6,lr}
;;;2156   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2157     /* Set tap duration time window. */
;;;2158     if (lsm6dsl_tap_dur_set(&(pObj->Ctx), Time) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_tap_dur_set
000010  b110              CBZ      r0,|L47.24|
;;;2159     {
;;;2160       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L47.22|
;;;2161     }
;;;2162   
;;;2163     return LSM6DSL_OK;
;;;2164   }
000016  bd70              POP      {r4-r6,pc}
                  |L47.24|
000018  2000              MOVS     r0,#0                 ;2163
00001a  e7fc              B        |L47.22|
;;;2165   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_Tap_Quiet_Time||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_Tap_Quiet_Time PROC
;;;2137    */
;;;2138   int32_t LSM6DSL_ACC_Set_Tap_Quiet_Time(LSM6DSL_Object_t *pObj, uint8_t Time)
000000  b570              PUSH     {r4-r6,lr}
;;;2139   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2140     /* Set tap quiet time window. */
;;;2141     if (lsm6dsl_tap_quiet_set(&(pObj->Ctx), Time) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_tap_quiet_set
000010  b110              CBZ      r0,|L48.24|
;;;2142     {
;;;2143       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L48.22|
;;;2144     }
;;;2145   
;;;2146     return LSM6DSL_OK;
;;;2147   }
000016  bd70              POP      {r4-r6,pc}
                  |L48.24|
000018  2000              MOVS     r0,#0                 ;2146
00001a  e7fc              B        |L48.22|
;;;2148   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_Tap_Shock_Time||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_Tap_Shock_Time PROC
;;;2120    */
;;;2121   int32_t LSM6DSL_ACC_Set_Tap_Shock_Time(LSM6DSL_Object_t *pObj, uint8_t Time)
000000  b570              PUSH     {r4-r6,lr}
;;;2122   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2123     /* Set tap shock time window. */
;;;2124     if (lsm6dsl_tap_shock_set(&(pObj->Ctx), Time) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_tap_shock_set
000010  b110              CBZ      r0,|L49.24|
;;;2125     {
;;;2126       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L49.22|
;;;2127     }
;;;2128   
;;;2129     return LSM6DSL_OK;
;;;2130   }
000016  bd70              POP      {r4-r6,pc}
                  |L49.24|
000018  2000              MOVS     r0,#0                 ;2129
00001a  e7fc              B        |L49.22|
;;;2131   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_Tap_Threshold||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_Tap_Threshold PROC
;;;2103    */
;;;2104   int32_t LSM6DSL_ACC_Set_Tap_Threshold(LSM6DSL_Object_t *pObj, uint8_t Threshold)
000000  b570              PUSH     {r4-r6,lr}
;;;2105   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2106     /* Set tap threshold. */
;;;2107     if (lsm6dsl_tap_threshold_x_set(&(pObj->Ctx), Threshold) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_tap_threshold_x_set
000010  b110              CBZ      r0,|L50.24|
;;;2108     {
;;;2109       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L50.22|
;;;2110     }
;;;2111   
;;;2112     return LSM6DSL_OK;
;;;2113   }
000016  bd70              POP      {r4-r6,pc}
                  |L50.24|
000018  2000              MOVS     r0,#0                 ;2112
00001a  e7fc              B        |L50.22|
;;;2114   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_Wake_Up_Duration||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_Wake_Up_Duration PROC
;;;1568    */
;;;1569   int32_t LSM6DSL_ACC_Set_Wake_Up_Duration(LSM6DSL_Object_t *pObj, uint8_t Duration)
000000  b570              PUSH     {r4-r6,lr}
;;;1570   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1571     /* Set wake up duration. */
;;;1572     if (lsm6dsl_wkup_dur_set(&(pObj->Ctx), Duration) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_wkup_dur_set
000010  b110              CBZ      r0,|L51.24|
;;;1573     {
;;;1574       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L51.22|
;;;1575     }
;;;1576   
;;;1577     return LSM6DSL_OK;
;;;1578   }
000016  bd70              POP      {r4-r6,pc}
                  |L51.24|
000018  2000              MOVS     r0,#0                 ;1577
00001a  e7fc              B        |L51.22|
;;;1579   
                          ENDP


                          AREA ||i.LSM6DSL_ACC_Set_Wake_Up_Threshold||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ACC_Set_Wake_Up_Threshold PROC
;;;1551    */
;;;1552   int32_t LSM6DSL_ACC_Set_Wake_Up_Threshold(LSM6DSL_Object_t *pObj, uint8_t Threshold)
000000  b570              PUSH     {r4-r6,lr}
;;;1553   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1554     /* Set wake up threshold. */
;;;1555     if (lsm6dsl_wkup_threshold_set(&(pObj->Ctx), Threshold) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_wkup_threshold_set
000010  b110              CBZ      r0,|L52.24|
;;;1556     {
;;;1557       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L52.22|
;;;1558     }
;;;1559   
;;;1560     return LSM6DSL_OK;
;;;1561   }
000016  bd70              POP      {r4-r6,pc}
                  |L52.24|
000018  2000              MOVS     r0,#0                 ;1560
00001a  e7fc              B        |L52.22|
;;;1562   
                          ENDP


                          AREA ||i.LSM6DSL_DeInit||, CODE, READONLY, ALIGN=1

                  LSM6DSL_DeInit PROC
;;;234     */
;;;235    int32_t LSM6DSL_DeInit(LSM6DSL_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;236    {
000002  4604              MOV      r4,r0
;;;237      /* Disable the component */
;;;238      if (LSM6DSL_ACC_Disable(pObj) != LSM6DSL_OK)
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       LSM6DSL_ACC_Disable
00000a  b110              CBZ      r0,|L53.18|
;;;239      {
;;;240        return LSM6DSL_ERROR;
00000c  f04f30ff          MOV      r0,#0xffffffff
                  |L53.16|
;;;241      }
;;;242    
;;;243      if (LSM6DSL_GYRO_Disable(pObj) != LSM6DSL_OK)
;;;244      {
;;;245        return LSM6DSL_ERROR;
;;;246      }
;;;247    
;;;248      /* Reset output data rate. */
;;;249      pObj->acc_odr = LSM6DSL_XL_ODR_OFF;
;;;250      pObj->gyro_odr = LSM6DSL_GY_ODR_OFF;
;;;251    
;;;252      pObj->is_initialized = 0;
;;;253    
;;;254      return LSM6DSL_OK;
;;;255    }
000010  bd10              POP      {r4,pc}
                  |L53.18|
000012  4620              MOV      r0,r4                 ;243
000014  f7fffffe          BL       LSM6DSL_GYRO_Disable
000018  b110              CBZ      r0,|L53.32|
00001a  f04f30ff          MOV      r0,#0xffffffff        ;245
00001e  e7f7              B        |L53.16|
                  |L53.32|
000020  2000              MOVS     r0,#0                 ;249
000022  3428              ADDS     r4,r4,#0x28           ;249
000024  70e0              STRB     r0,[r4,#3]            ;249
000026  7120              STRB     r0,[r4,#4]            ;250
000028  f8040928          STRB     r0,[r4],#-0x28        ;252
00002c  bf00              NOP                            ;254
00002e  e7ef              B        |L53.16|
;;;256    
                          ENDP


                          AREA ||i.LSM6DSL_FIFO_ACC_Get_Axis||, CODE, READONLY, ALIGN=2

                  LSM6DSL_FIFO_ACC_Get_Axis PROC
;;;2974    */
;;;2975   int32_t LSM6DSL_FIFO_ACC_Get_Axis(LSM6DSL_Object_t *pObj, int32_t *Acceleration)
000000  b570              PUSH     {r4-r6,lr}
;;;2976   {
000002  ed2d8b02          VPUSH    {d8}
000006  b082              SUB      sp,sp,#8
000008  4606              MOV      r6,r0
00000a  460d              MOV      r5,r1
;;;2977     uint8_t data[2];
;;;2978     int16_t data_raw;
;;;2979     float sensitivity = 0.0f;
00000c  ed9f0a15          VLDR     s0,|L54.100|
000010  ed8d0a00          VSTR     s0,[sp,#0]
;;;2980     float acceleration_float;
;;;2981   
;;;2982     if (LSM6DSL_FIFO_Get_Data(pObj, data) != LSM6DSL_OK)
000014  a901              ADD      r1,sp,#4
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       LSM6DSL_FIFO_Get_Data
00001c  b128              CBZ      r0,|L54.42|
;;;2983     {
;;;2984       return LSM6DSL_ERROR;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L54.34|
;;;2985     }
;;;2986   
;;;2987     data_raw = ((int16_t)data[1] << 8) | data[0];
;;;2988   
;;;2989     if (LSM6DSL_ACC_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
;;;2990     {
;;;2991       return LSM6DSL_ERROR;
;;;2992     }
;;;2993   
;;;2994     acceleration_float = (float)data_raw * sensitivity;
;;;2995     *Acceleration = (int32_t)acceleration_float;
;;;2996   
;;;2997     return LSM6DSL_OK;
;;;2998   }
000022  b002              ADD      sp,sp,#8
000024  ecbd8b02          VPOP     {d8}
000028  bd70              POP      {r4-r6,pc}
                  |L54.42|
00002a  f89d0004          LDRB     r0,[sp,#4]            ;2987
00002e  f89d1005          LDRB     r1,[sp,#5]            ;2987
000032  ea402001          ORR      r0,r0,r1,LSL #8       ;2987
000036  b204              SXTH     r4,r0                 ;2987
000038  4669              MOV      r1,sp                 ;2989
00003a  4630              MOV      r0,r6                 ;2989
00003c  f7fffffe          BL       LSM6DSL_ACC_GetSensitivity
000040  b110              CBZ      r0,|L54.72|
000042  f04f30ff          MOV      r0,#0xffffffff        ;2991
000046  e7ec              B        |L54.34|
                  |L54.72|
000048  ee004a10          VMOV     s0,r4                 ;2994
00004c  eeb80ac0          VCVT.F32.S32 s0,s0                 ;2994
000050  eddd0a00          VLDR     s1,[sp,#0]            ;2994
000054  ee208a20          VMUL.F32 s16,s0,s1             ;2994
000058  eebd0ac8          VCVT.S32.F32 s0,s16                ;2995
00005c  ed850a00          VSTR     s0,[r5,#0]            ;2995
000060  2000              MOVS     r0,#0                 ;2997
000062  e7de              B        |L54.34|
;;;2999   
                          ENDP

                  |L54.100|
000064  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.LSM6DSL_FIFO_ACC_Set_Decimation||, CODE, READONLY, ALIGN=1

                  LSM6DSL_FIFO_ACC_Set_Decimation PROC
;;;2933    */
;;;2934   int32_t LSM6DSL_FIFO_ACC_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
000000  b570              PUSH     {r4-r6,lr}
;;;2935   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2936     int32_t ret = LSM6DSL_OK;
000006  2500              MOVS     r5,#0
;;;2937   
;;;2938     /* Verify that the passed parameter contains one of the valid values. */
;;;2939     switch ((lsm6dsl_dec_fifo_xl_t)Decimation)
000008  2c08              CMP      r4,#8
00000a  d20d              BCS      |L55.40|
00000c  e8dff004          TBB      [pc,r4]
000010  04050607          DCB      0x04,0x05,0x06,0x07
000014  08090a0b          DCB      0x08,0x09,0x0a,0x0b
;;;2940     {
;;;2941       case LSM6DSL_FIFO_XL_DISABLE:
;;;2942       case LSM6DSL_FIFO_XL_NO_DEC:
000018  bf00              NOP      
;;;2943       case LSM6DSL_FIFO_XL_DEC_2:
00001a  bf00              NOP      
;;;2944       case LSM6DSL_FIFO_XL_DEC_3:
00001c  bf00              NOP      
;;;2945       case LSM6DSL_FIFO_XL_DEC_4:
00001e  bf00              NOP      
;;;2946       case LSM6DSL_FIFO_XL_DEC_8:
000020  bf00              NOP      
;;;2947       case LSM6DSL_FIFO_XL_DEC_16:
000022  bf00              NOP      
;;;2948       case LSM6DSL_FIFO_XL_DEC_32:
000024  bf00              NOP      
;;;2949         break;
000026  e002              B        |L55.46|
                  |L55.40|
;;;2950   
;;;2951       default:
;;;2952         ret = LSM6DSL_ERROR;
000028  f04f35ff          MOV      r5,#0xffffffff
;;;2953         break;
00002c  bf00              NOP      
                  |L55.46|
00002e  bf00              NOP                            ;2949
;;;2954     }
;;;2955   
;;;2956     if (ret == LSM6DSL_ERROR)
000030  1c68              ADDS     r0,r5,#1
000032  b908              CBNZ     r0,|L55.56|
;;;2957     {
;;;2958       return ret;
000034  4628              MOV      r0,r5
                  |L55.54|
;;;2959     }
;;;2960   
;;;2961     if (lsm6dsl_fifo_xl_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_xl_t)Decimation) != LSM6DSL_OK)
;;;2962     {
;;;2963       return LSM6DSL_ERROR;
;;;2964     }
;;;2965   
;;;2966     return ret;
;;;2967   }
000036  bd70              POP      {r4-r6,pc}
                  |L55.56|
000038  4621              MOV      r1,r4                 ;2961
00003a  f106001c          ADD      r0,r6,#0x1c           ;2961
00003e  f7fffffe          BL       lsm6dsl_fifo_xl_batch_set
000042  b110              CBZ      r0,|L55.74|
000044  f04f30ff          MOV      r0,#0xffffffff        ;2963
000048  e7f5              B        |L55.54|
                  |L55.74|
00004a  4628              MOV      r0,r5                 ;2966
00004c  e7f3              B        |L55.54|
;;;2968   
                          ENDP


                          AREA ||i.LSM6DSL_FIFO_GYRO_Get_Axis||, CODE, READONLY, ALIGN=2

                  LSM6DSL_FIFO_GYRO_Get_Axis PROC
;;;3046    */
;;;3047   int32_t LSM6DSL_FIFO_GYRO_Get_Axis(LSM6DSL_Object_t *pObj, int32_t *AngularVelocity)
000000  b570              PUSH     {r4-r6,lr}
;;;3048   {
000002  ed2d8b02          VPUSH    {d8}
000006  b082              SUB      sp,sp,#8
000008  4606              MOV      r6,r0
00000a  460d              MOV      r5,r1
;;;3049     uint8_t data[2];
;;;3050     int16_t data_raw;
;;;3051     float sensitivity = 0.0f;
00000c  ed9f0a15          VLDR     s0,|L56.100|
000010  ed8d0a00          VSTR     s0,[sp,#0]
;;;3052     float angular_velocity_float;
;;;3053   
;;;3054     if (LSM6DSL_FIFO_Get_Data(pObj, data) != LSM6DSL_OK)
000014  a901              ADD      r1,sp,#4
000016  4630              MOV      r0,r6
000018  f7fffffe          BL       LSM6DSL_FIFO_Get_Data
00001c  b128              CBZ      r0,|L56.42|
;;;3055     {
;;;3056       return LSM6DSL_ERROR;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L56.34|
;;;3057     }
;;;3058   
;;;3059     data_raw = ((int16_t)data[1] << 8) | data[0];
;;;3060   
;;;3061     if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
;;;3062     {
;;;3063       return LSM6DSL_ERROR;
;;;3064     }
;;;3065   
;;;3066     angular_velocity_float = (float)data_raw * sensitivity;
;;;3067     *AngularVelocity = (int32_t)angular_velocity_float;
;;;3068   
;;;3069     return LSM6DSL_OK;
;;;3070   }
000022  b002              ADD      sp,sp,#8
000024  ecbd8b02          VPOP     {d8}
000028  bd70              POP      {r4-r6,pc}
                  |L56.42|
00002a  f89d0004          LDRB     r0,[sp,#4]            ;3059
00002e  f89d1005          LDRB     r1,[sp,#5]            ;3059
000032  ea402001          ORR      r0,r0,r1,LSL #8       ;3059
000036  b204              SXTH     r4,r0                 ;3059
000038  4669              MOV      r1,sp                 ;3061
00003a  4630              MOV      r0,r6                 ;3061
00003c  f7fffffe          BL       LSM6DSL_GYRO_GetSensitivity
000040  b110              CBZ      r0,|L56.72|
000042  f04f30ff          MOV      r0,#0xffffffff        ;3063
000046  e7ec              B        |L56.34|
                  |L56.72|
000048  ee004a10          VMOV     s0,r4                 ;3066
00004c  eeb80ac0          VCVT.F32.S32 s0,s0                 ;3066
000050  eddd0a00          VLDR     s1,[sp,#0]            ;3066
000054  ee208a20          VMUL.F32 s16,s0,s1             ;3066
000058  eebd0ac8          VCVT.S32.F32 s0,s16                ;3067
00005c  ed850a00          VSTR     s0,[r5,#0]            ;3067
000060  2000              MOVS     r0,#0                 ;3069
000062  e7de              B        |L56.34|
;;;3071   
                          ENDP

                  |L56.100|
000064  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.LSM6DSL_FIFO_GYRO_Set_Decimation||, CODE, READONLY, ALIGN=1

                  LSM6DSL_FIFO_GYRO_Set_Decimation PROC
;;;3005    */
;;;3006   int32_t LSM6DSL_FIFO_GYRO_Set_Decimation(LSM6DSL_Object_t *pObj, uint8_t Decimation)
000000  b570              PUSH     {r4-r6,lr}
;;;3007   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3008     int32_t ret = LSM6DSL_OK;
000006  2500              MOVS     r5,#0
;;;3009   
;;;3010     /* Verify that the passed parameter contains one of the valid values. */
;;;3011     switch ((lsm6dsl_dec_fifo_gyro_t)Decimation)
000008  2c08              CMP      r4,#8
00000a  d20d              BCS      |L57.40|
00000c  e8dff004          TBB      [pc,r4]
000010  04050607          DCB      0x04,0x05,0x06,0x07
000014  08090a0b          DCB      0x08,0x09,0x0a,0x0b
;;;3012     {
;;;3013       case LSM6DSL_FIFO_GY_DISABLE:
;;;3014       case LSM6DSL_FIFO_GY_NO_DEC:
000018  bf00              NOP      
;;;3015       case LSM6DSL_FIFO_GY_DEC_2:
00001a  bf00              NOP      
;;;3016       case LSM6DSL_FIFO_GY_DEC_3:
00001c  bf00              NOP      
;;;3017       case LSM6DSL_FIFO_GY_DEC_4:
00001e  bf00              NOP      
;;;3018       case LSM6DSL_FIFO_GY_DEC_8:
000020  bf00              NOP      
;;;3019       case LSM6DSL_FIFO_GY_DEC_16:
000022  bf00              NOP      
;;;3020       case LSM6DSL_FIFO_GY_DEC_32:
000024  bf00              NOP      
;;;3021         break;
000026  e002              B        |L57.46|
                  |L57.40|
;;;3022   
;;;3023       default:
;;;3024         ret = LSM6DSL_ERROR;
000028  f04f35ff          MOV      r5,#0xffffffff
;;;3025         break;
00002c  bf00              NOP      
                  |L57.46|
00002e  bf00              NOP                            ;3021
;;;3026     }
;;;3027   
;;;3028     if (ret == LSM6DSL_ERROR)
000030  1c68              ADDS     r0,r5,#1
000032  b908              CBNZ     r0,|L57.56|
;;;3029     {
;;;3030       return ret;
000034  4628              MOV      r0,r5
                  |L57.54|
;;;3031     }
;;;3032   
;;;3033     if (lsm6dsl_fifo_gy_batch_set(&(pObj->Ctx), (lsm6dsl_dec_fifo_gyro_t)Decimation) != LSM6DSL_OK)
;;;3034     {
;;;3035       return LSM6DSL_ERROR;
;;;3036     }
;;;3037   
;;;3038     return ret;
;;;3039   }
000036  bd70              POP      {r4-r6,pc}
                  |L57.56|
000038  4621              MOV      r1,r4                 ;3033
00003a  f106001c          ADD      r0,r6,#0x1c           ;3033
00003e  f7fffffe          BL       lsm6dsl_fifo_gy_batch_set
000042  b110              CBZ      r0,|L57.74|
000044  f04f30ff          MOV      r0,#0xffffffff        ;3035
000048  e7f5              B        |L57.54|
                  |L57.74|
00004a  4628              MOV      r0,r5                 ;3038
00004c  e7f3              B        |L57.54|
;;;3040   
                          ENDP


                          AREA ||i.LSM6DSL_FIFO_Get_Data||, CODE, READONLY, ALIGN=1

                  LSM6DSL_FIFO_Get_Data PROC
;;;2917    */
;;;2918   int32_t LSM6DSL_FIFO_Get_Data(LSM6DSL_Object_t *pObj, uint8_t *Data)
000000  b570              PUSH     {r4-r6,lr}
;;;2919   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2920     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_FIFO_DATA_OUT_L, Data, 2) != LSM6DSL_OK)
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  213e              MOVS     r1,#0x3e
00000c  f105001c          ADD      r0,r5,#0x1c
000010  f7fffffe          BL       lsm6dsl_read_reg
000014  b110              CBZ      r0,|L58.28|
;;;2921     {
;;;2922       return LSM6DSL_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L58.26|
;;;2923     }
;;;2924   
;;;2925     return LSM6DSL_OK;
;;;2926   }
00001a  bd70              POP      {r4-r6,pc}
                  |L58.28|
00001c  2000              MOVS     r0,#0                 ;2925
00001e  e7fc              B        |L58.26|
;;;2927   
                          ENDP


                          AREA ||i.LSM6DSL_FIFO_Get_Full_Status||, CODE, READONLY, ALIGN=1

                  LSM6DSL_FIFO_Get_Full_Status PROC
;;;2757    */
;;;2758   int32_t LSM6DSL_FIFO_Get_Full_Status(LSM6DSL_Object_t *pObj, uint8_t *Status)
000000  b538              PUSH     {r3-r5,lr}
;;;2759   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2760     lsm6dsl_reg_t reg;
;;;2761   
;;;2762     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_FIFO_STATUS2, &reg.byte, 1) != LSM6DSL_OK)
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213b              MOVS     r1,#0x3b
00000c  f105001c          ADD      r0,r5,#0x1c
000010  f7fffffe          BL       lsm6dsl_read_reg
000014  b110              CBZ      r0,|L59.28|
;;;2763     {
;;;2764       return LSM6DSL_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L59.26|
;;;2765     }
;;;2766   
;;;2767     *Status = reg.fifo_status2.fifo_full_smart;
;;;2768   
;;;2769     return LSM6DSL_OK;
;;;2770   }
00001a  bd38              POP      {r3-r5,pc}
                  |L59.28|
00001c  f89d0000          LDRB     r0,[sp,#0]            ;2767
000020  f3c01040          UBFX     r0,r0,#5,#1           ;2767
000024  7020              STRB     r0,[r4,#0]            ;2767
000026  2000              MOVS     r0,#0                 ;2769
000028  e7f7              B        |L59.26|
;;;2771   
                          ENDP


                          AREA ||i.LSM6DSL_FIFO_Get_Num_Samples||, CODE, READONLY, ALIGN=1

                  LSM6DSL_FIFO_Get_Num_Samples PROC
;;;2741    */
;;;2742   int32_t LSM6DSL_FIFO_Get_Num_Samples(LSM6DSL_Object_t *pObj, uint16_t *NumSamples)
000000  b570              PUSH     {r4-r6,lr}
;;;2743   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2744     if (lsm6dsl_fifo_data_level_get(&(pObj->Ctx), NumSamples) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_fifo_data_level_get
000010  b110              CBZ      r0,|L60.24|
;;;2745     {
;;;2746       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L60.22|
;;;2747     }
;;;2748   
;;;2749     return LSM6DSL_OK;
;;;2750   }
000016  bd70              POP      {r4-r6,pc}
                  |L60.24|
000018  2000              MOVS     r0,#0                 ;2749
00001a  e7fc              B        |L60.22|
;;;2751   
                          ENDP


                          AREA ||i.LSM6DSL_FIFO_Get_Pattern||, CODE, READONLY, ALIGN=1

                  LSM6DSL_FIFO_Get_Pattern PROC
;;;2901    */
;;;2902   int32_t LSM6DSL_FIFO_Get_Pattern(LSM6DSL_Object_t *pObj, uint16_t *Pattern)
000000  b570              PUSH     {r4-r6,lr}
;;;2903   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2904     if (lsm6dsl_fifo_pattern_get(&(pObj->Ctx), Pattern) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_fifo_pattern_get
000010  b110              CBZ      r0,|L61.24|
;;;2905     {
;;;2906       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L61.22|
;;;2907     }
;;;2908   
;;;2909     return LSM6DSL_OK;
;;;2910   }
000016  bd70              POP      {r4-r6,pc}
                  |L61.24|
000018  2000              MOVS     r0,#0                 ;2909
00001a  e7fc              B        |L61.22|
;;;2911   
                          ENDP


                          AREA ||i.LSM6DSL_FIFO_Set_INT1_FIFO_Full||, CODE, READONLY, ALIGN=1

                  LSM6DSL_FIFO_Set_INT1_FIFO_Full PROC
;;;2806    */
;;;2807   int32_t LSM6DSL_FIFO_Set_INT1_FIFO_Full(LSM6DSL_Object_t *pObj, uint8_t Status)
000000  b538              PUSH     {r3-r5,lr}
;;;2808   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2809     lsm6dsl_reg_t reg;
;;;2810   
;;;2811     if (lsm6dsl_read_reg(&(pObj->Ctx), LSM6DSL_INT1_CTRL, &reg.byte, 1) != LSM6DSL_OK)
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210d              MOVS     r1,#0xd
00000c  f104001c          ADD      r0,r4,#0x1c
000010  f7fffffe          BL       lsm6dsl_read_reg
000014  b110              CBZ      r0,|L62.28|
;;;2812     {
;;;2813       return LSM6DSL_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L62.26|
;;;2814     }
;;;2815   
;;;2816     reg.int1_ctrl.int1_full_flag = Status;
;;;2817   
;;;2818     if (lsm6dsl_write_reg(&(pObj->Ctx), LSM6DSL_INT1_CTRL, &reg.byte, 1) != LSM6DSL_OK)
;;;2819     {
;;;2820       return LSM6DSL_ERROR;
;;;2821     }
;;;2822   
;;;2823     return LSM6DSL_OK;
;;;2824   }
00001a  bd38              POP      {r3-r5,pc}
                  |L62.28|
00001c  f89d0000          LDRB     r0,[sp,#0]            ;2816
000020  f3651045          BFI      r0,r5,#5,#1           ;2816
000024  9000              STR      r0,[sp,#0]            ;2816
000026  2301              MOVS     r3,#1                 ;2818
000028  466a              MOV      r2,sp                 ;2818
00002a  210d              MOVS     r1,#0xd               ;2818
00002c  f104001c          ADD      r0,r4,#0x1c           ;2818
000030  f7fffffe          BL       lsm6dsl_write_reg
000034  b110              CBZ      r0,|L62.60|
000036  f04f30ff          MOV      r0,#0xffffffff        ;2820
00003a  e7ee              B        |L62.26|
                  |L62.60|
00003c  2000              MOVS     r0,#0                 ;2823
00003e  e7ec              B        |L62.26|
;;;2825   
                          ENDP


                          AREA ||i.LSM6DSL_FIFO_Set_Mode||, CODE, READONLY, ALIGN=1

                  LSM6DSL_FIFO_Set_Mode PROC
;;;2863    */
;;;2864   int32_t LSM6DSL_FIFO_Set_Mode(LSM6DSL_Object_t *pObj, uint8_t Mode)
000000  b570              PUSH     {r4-r6,lr}
;;;2865   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2866     int32_t ret = LSM6DSL_OK;
000006  2500              MOVS     r5,#0
;;;2867   
;;;2868     /* Verify that the passed parameter contains one of the valid values. */
;;;2869     switch ((lsm6dsl_fifo_mode_t)Mode)
000008  2c07              CMP      r4,#7
00000a  d20a              BCS      |L63.34|
00000c  e8dff004          TBB      [pc,r4]
000010  04050906          DCB      0x04,0x05,0x09,0x06
000014  07090800          DCB      0x07,0x09,0x08,0x00
;;;2870     {
;;;2871       case LSM6DSL_BYPASS_MODE:
;;;2872       case LSM6DSL_FIFO_MODE:
000018  bf00              NOP      
;;;2873       case LSM6DSL_STREAM_TO_FIFO_MODE:
00001a  bf00              NOP      
;;;2874       case LSM6DSL_BYPASS_TO_STREAM_MODE:
00001c  bf00              NOP      
;;;2875       case LSM6DSL_STREAM_MODE:
00001e  bf00              NOP      
;;;2876         break;
000020  e002              B        |L63.40|
                  |L63.34|
;;;2877   
;;;2878       default:
;;;2879         ret = LSM6DSL_ERROR;
000022  f04f35ff          MOV      r5,#0xffffffff
;;;2880         break;
000026  bf00              NOP      
                  |L63.40|
000028  bf00              NOP                            ;2876
;;;2881     }
;;;2882   
;;;2883     if (ret == LSM6DSL_ERROR)
00002a  1c68              ADDS     r0,r5,#1
00002c  b908              CBNZ     r0,|L63.50|
;;;2884     {
;;;2885       return ret;
00002e  4628              MOV      r0,r5
                  |L63.48|
;;;2886     }
;;;2887   
;;;2888     if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), (lsm6dsl_fifo_mode_t)Mode) != LSM6DSL_OK)
;;;2889     {
;;;2890       return LSM6DSL_ERROR;
;;;2891     }
;;;2892   
;;;2893     return ret;
;;;2894   }
000030  bd70              POP      {r4-r6,pc}
                  |L63.50|
000032  4621              MOV      r1,r4                 ;2888
000034  f106001c          ADD      r0,r6,#0x1c           ;2888
000038  f7fffffe          BL       lsm6dsl_fifo_mode_set
00003c  b110              CBZ      r0,|L63.68|
00003e  f04f30ff          MOV      r0,#0xffffffff        ;2890
000042  e7f5              B        |L63.48|
                  |L63.68|
000044  4628              MOV      r0,r5                 ;2893
000046  e7f3              B        |L63.48|
;;;2895   
                          ENDP


                          AREA ||i.LSM6DSL_FIFO_Set_ODR_Value||, CODE, READONLY, ALIGN=2

                  LSM6DSL_FIFO_Set_ODR_Value PROC
;;;2777    */
;;;2778   int32_t LSM6DSL_FIFO_Set_ODR_Value(LSM6DSL_Object_t *pObj, float Odr)
000000  b570              PUSH     {r4-r6,lr}
;;;2779   {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;2780     lsm6dsl_odr_fifo_t new_odr;
;;;2781   
;;;2782     new_odr = (Odr <=   12.5f) ? LSM6DSL_FIFO_12Hz5
00000c  eeb20a09          VMOV.F32 s0,#12.50000000
000010  eeb48ac0          VCMPE.F32 s16,s0
000014  eef1fa10          VMRS     APSR_nzcv,FPSCR
000018  d801              BHI      |L64.30|
00001a  2001              MOVS     r0,#1
00001c  e048              B        |L64.176|
                  |L64.30|
;;;2783             : (Odr <=   26.0f) ? LSM6DSL_FIFO_26Hz
00001e  eeb30a0a          VMOV.F32 s0,#26.00000000
000022  eeb48ac0          VCMPE.F32 s16,s0
000026  eef1fa10          VMRS     APSR_nzcv,FPSCR
00002a  d801              BHI      |L64.48|
00002c  2002              MOVS     r0,#2
00002e  e03f              B        |L64.176|
                  |L64.48|
;;;2784             : (Odr <=   52.0f) ? LSM6DSL_FIFO_52Hz
000030  ed9f0a26          VLDR     s0,|L64.204|
000034  eeb48ac0          VCMPE.F32 s16,s0
000038  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003c  d801              BHI      |L64.66|
00003e  2003              MOVS     r0,#3
000040  e036              B        |L64.176|
                  |L64.66|
;;;2785             : (Odr <=  104.0f) ? LSM6DSL_FIFO_104Hz
000042  ed9f0a23          VLDR     s0,|L64.208|
000046  eeb48ac0          VCMPE.F32 s16,s0
00004a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00004e  d801              BHI      |L64.84|
000050  2004              MOVS     r0,#4
000052  e02d              B        |L64.176|
                  |L64.84|
;;;2786             : (Odr <=  208.0f) ? LSM6DSL_FIFO_208Hz
000054  ed9f0a1f          VLDR     s0,|L64.212|
000058  eeb48ac0          VCMPE.F32 s16,s0
00005c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000060  d801              BHI      |L64.102|
000062  2005              MOVS     r0,#5
000064  e024              B        |L64.176|
                  |L64.102|
;;;2787             : (Odr <=  416.0f) ? LSM6DSL_FIFO_416Hz
000066  ed9f0a1c          VLDR     s0,|L64.216|
00006a  eeb48ac0          VCMPE.F32 s16,s0
00006e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000072  d801              BHI      |L64.120|
000074  2006              MOVS     r0,#6
000076  e01b              B        |L64.176|
                  |L64.120|
;;;2788             : (Odr <=  833.0f) ? LSM6DSL_FIFO_833Hz
000078  ed9f0a18          VLDR     s0,|L64.220|
00007c  eeb48ac0          VCMPE.F32 s16,s0
000080  eef1fa10          VMRS     APSR_nzcv,FPSCR
000084  d801              BHI      |L64.138|
000086  2007              MOVS     r0,#7
000088  e012              B        |L64.176|
                  |L64.138|
;;;2789             : (Odr <= 1660.0f) ? LSM6DSL_FIFO_1k66Hz
00008a  ed9f0a15          VLDR     s0,|L64.224|
00008e  eeb48ac0          VCMPE.F32 s16,s0
000092  eef1fa10          VMRS     APSR_nzcv,FPSCR
000096  d801              BHI      |L64.156|
000098  2008              MOVS     r0,#8
00009a  e009              B        |L64.176|
                  |L64.156|
;;;2790             : (Odr <= 3330.0f) ? LSM6DSL_FIFO_3k33Hz
00009c  ed9f0a11          VLDR     s0,|L64.228|
0000a0  eeb48ac0          VCMPE.F32 s16,s0
0000a4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000a8  d801              BHI      |L64.174|
0000aa  2009              MOVS     r0,#9
0000ac  e000              B        |L64.176|
                  |L64.174|
;;;2791             :                    LSM6DSL_FIFO_6k66Hz;
0000ae  200a              MOVS     r0,#0xa
                  |L64.176|
0000b0  4605              MOV      r5,r0
;;;2792   
;;;2793     if (lsm6dsl_fifo_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
0000b2  4629              MOV      r1,r5
0000b4  f104001c          ADD      r0,r4,#0x1c
0000b8  f7fffffe          BL       lsm6dsl_fifo_data_rate_set
0000bc  b120              CBZ      r0,|L64.200|
;;;2794     {
;;;2795       return LSM6DSL_ERROR;
0000be  f04f30ff          MOV      r0,#0xffffffff
                  |L64.194|
;;;2796     }
;;;2797   
;;;2798     return LSM6DSL_OK;
;;;2799   }
0000c2  ecbd8b02          VPOP     {d8}
0000c6  bd70              POP      {r4-r6,pc}
                  |L64.200|
0000c8  2000              MOVS     r0,#0                 ;2798
0000ca  e7fa              B        |L64.194|
;;;2800   
                          ENDP

                  |L64.204|
0000cc  42500000          DCFS     0x42500000 ; 52
                  |L64.208|
0000d0  42d00000          DCFS     0x42d00000 ; 104
                  |L64.212|
0000d4  43500000          DCFS     0x43500000 ; 208
                  |L64.216|
0000d8  43d00000          DCFS     0x43d00000 ; 416
                  |L64.220|
0000dc  44504000          DCFS     0x44504000 ; 833
                  |L64.224|
0000e0  44cf8000          DCFS     0x44cf8000 ; 1660
                  |L64.228|
0000e4  45502000          DCFS     0x45502000 ; 3330

                          AREA ||i.LSM6DSL_FIFO_Set_Stop_On_Fth||, CODE, READONLY, ALIGN=1

                  LSM6DSL_FIFO_Set_Stop_On_Fth PROC
;;;2847    */
;;;2848   int32_t LSM6DSL_FIFO_Set_Stop_On_Fth(LSM6DSL_Object_t *pObj, uint8_t Status)
000000  b570              PUSH     {r4-r6,lr}
;;;2849   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2850     if (lsm6dsl_fifo_stop_on_wtm_set(&(pObj->Ctx), Status) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_fifo_stop_on_wtm_set
000010  b110              CBZ      r0,|L65.24|
;;;2851     {
;;;2852       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L65.22|
;;;2853     }
;;;2854   
;;;2855     return LSM6DSL_OK;
;;;2856   }
000016  bd70              POP      {r4-r6,pc}
                  |L65.24|
000018  2000              MOVS     r0,#0                 ;2855
00001a  e7fc              B        |L65.22|
;;;2857   
                          ENDP


                          AREA ||i.LSM6DSL_FIFO_Set_Watermark_Level||, CODE, READONLY, ALIGN=1

                  LSM6DSL_FIFO_Set_Watermark_Level PROC
;;;2831    */
;;;2832   int32_t LSM6DSL_FIFO_Set_Watermark_Level(LSM6DSL_Object_t *pObj, uint16_t Watermark)
000000  b570              PUSH     {r4-r6,lr}
;;;2833   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2834     if (lsm6dsl_fifo_watermark_set(&(pObj->Ctx), Watermark) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_fifo_watermark_set
000010  b110              CBZ      r0,|L66.24|
;;;2835     {
;;;2836       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L66.22|
;;;2837     }
;;;2838   
;;;2839     return LSM6DSL_OK;
;;;2840   }
000016  bd70              POP      {r4-r6,pc}
                  |L66.24|
000018  2000              MOVS     r0,#0                 ;2839
00001a  e7fc              B        |L66.22|
;;;2841   
                          ENDP


                          AREA ||i.LSM6DSL_GYRO_Disable||, CODE, READONLY, ALIGN=1

                  LSM6DSL_GYRO_Disable PROC
;;;640     */
;;;641    int32_t LSM6DSL_GYRO_Disable(LSM6DSL_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;642    {
000002  4604              MOV      r4,r0
;;;643      /* Check if the component is already disabled */
;;;644      if (pObj->gyro_is_enabled == 0U)
000004  f894002a          LDRB     r0,[r4,#0x2a]
000008  b908              CBNZ     r0,|L67.14|
;;;645      {
;;;646        return LSM6DSL_OK;
00000a  2000              MOVS     r0,#0
                  |L67.12|
;;;647      }
;;;648    
;;;649      /* Get current output data rate. */
;;;650      if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &pObj->gyro_odr) != LSM6DSL_OK)
;;;651      {
;;;652        return LSM6DSL_ERROR;
;;;653      }
;;;654    
;;;655      /* Output data rate selection - power down. */
;;;656      if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
;;;657      {
;;;658        return LSM6DSL_ERROR;
;;;659      }
;;;660    
;;;661      pObj->gyro_is_enabled = 0;
;;;662    
;;;663      return LSM6DSL_OK;
;;;664    }
00000c  bd10              POP      {r4,pc}
                  |L67.14|
00000e  f104012c          ADD      r1,r4,#0x2c           ;650
000012  f104001c          ADD      r0,r4,#0x1c           ;650
000016  f7fffffe          BL       lsm6dsl_gy_data_rate_get
00001a  b110              CBZ      r0,|L67.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;652
000020  e7f4              B        |L67.12|
                  |L67.34|
000022  2100              MOVS     r1,#0                 ;656
000024  f104001c          ADD      r0,r4,#0x1c           ;656
000028  f7fffffe          BL       lsm6dsl_gy_data_rate_set
00002c  b110              CBZ      r0,|L67.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;658
000032  e7eb              B        |L67.12|
                  |L67.52|
000034  2000              MOVS     r0,#0                 ;661
000036  f884002a          STRB     r0,[r4,#0x2a]         ;661
00003a  bf00              NOP                            ;663
00003c  e7e6              B        |L67.12|
;;;665    
                          ENDP


                          AREA ||i.LSM6DSL_GYRO_Enable||, CODE, READONLY, ALIGN=1

                  LSM6DSL_GYRO_Enable PROC
;;;616     */
;;;617    int32_t LSM6DSL_GYRO_Enable(LSM6DSL_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;618    {
000002  4604              MOV      r4,r0
;;;619      /* Check if the component is already enabled */
;;;620      if (pObj->gyro_is_enabled == 1U)
000004  f894002a          LDRB     r0,[r4,#0x2a]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L68.16|
;;;621      {
;;;622        return LSM6DSL_OK;
00000c  2000              MOVS     r0,#0
                  |L68.14|
;;;623      }
;;;624    
;;;625      /* Output data rate selection. */
;;;626      if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), pObj->gyro_odr) != LSM6DSL_OK)
;;;627      {
;;;628        return LSM6DSL_ERROR;
;;;629      }
;;;630    
;;;631      pObj->gyro_is_enabled = 1;
;;;632    
;;;633      return LSM6DSL_OK;
;;;634    }
00000e  bd10              POP      {r4,pc}
                  |L68.16|
000010  f894102c          LDRB     r1,[r4,#0x2c]         ;626
000014  f104001c          ADD      r0,r4,#0x1c           ;626
000018  f7fffffe          BL       lsm6dsl_gy_data_rate_set
00001c  b110              CBZ      r0,|L68.36|
00001e  f04f30ff          MOV      r0,#0xffffffff        ;628
000022  e7f4              B        |L68.14|
                  |L68.36|
000024  2001              MOVS     r0,#1                 ;631
000026  f884002a          STRB     r0,[r4,#0x2a]         ;631
00002a  2000              MOVS     r0,#0                 ;633
00002c  e7ef              B        |L68.14|
;;;635    
                          ENDP


                          AREA ||i.LSM6DSL_GYRO_GetAxes||, CODE, READONLY, ALIGN=1

                  LSM6DSL_GYRO_GetAxes PROC
;;;904     */
;;;905    int32_t LSM6DSL_GYRO_GetAxes(LSM6DSL_Object_t *pObj, LSM6DSL_Axes_t *AngularRate)
000000  b53e              PUSH     {r1-r5,lr}
;;;906    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;907      axis3bit16_t data_raw;
;;;908      float sensitivity;
;;;909    
;;;910      /* Read raw data values. */
;;;911      if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
000006  a901              ADD      r1,sp,#4
000008  f105001c          ADD      r0,r5,#0x1c
00000c  f7fffffe          BL       lsm6dsl_angular_rate_raw_get
000010  b110              CBZ      r0,|L69.24|
;;;912      {
;;;913        return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L69.22|
;;;914      }
;;;915    
;;;916      /* Get LSM6DSL actual sensitivity. */
;;;917      if (LSM6DSL_GYRO_GetSensitivity(pObj, &sensitivity) != LSM6DSL_OK)
;;;918      {
;;;919        return LSM6DSL_ERROR;
;;;920      }
;;;921    
;;;922      /* Calculate the data. */
;;;923      AngularRate->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
;;;924      AngularRate->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
;;;925      AngularRate->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
;;;926    
;;;927      return LSM6DSL_OK;
;;;928    }
000016  bd3e              POP      {r1-r5,pc}
                  |L69.24|
000018  4669              MOV      r1,sp                 ;917
00001a  4628              MOV      r0,r5                 ;917
00001c  f7fffffe          BL       LSM6DSL_GYRO_GetSensitivity
000020  b110              CBZ      r0,|L69.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;919
000026  e7f6              B        |L69.22|
                  |L69.40|
000028  f9bd0004          LDRSH    r0,[sp,#4]            ;923
00002c  ee000a10          VMOV     s0,r0                 ;923
000030  eeb80ac0          VCVT.F32.S32 s0,s0                 ;923
000034  eddd0a00          VLDR     s1,[sp,#0]            ;923
000038  ee200a20          VMUL.F32 s0,s0,s1              ;923
00003c  eebd0ac0          VCVT.S32.F32 s0,s0                 ;923
000040  ed840a00          VSTR     s0,[r4,#0]            ;923
000044  f9bd0006          LDRSH    r0,[sp,#6]            ;924
000048  ee000a10          VMOV     s0,r0                 ;924
00004c  eeb80ac0          VCVT.F32.S32 s0,s0                 ;924
000050  eddd0a00          VLDR     s1,[sp,#0]            ;924
000054  ee200a20          VMUL.F32 s0,s0,s1              ;924
000058  eebd0ac0          VCVT.S32.F32 s0,s0                 ;924
00005c  ed840a01          VSTR     s0,[r4,#4]            ;924
000060  f9bd0008          LDRSH    r0,[sp,#8]            ;925
000064  ee000a10          VMOV     s0,r0                 ;925
000068  eeb80ac0          VCVT.F32.S32 s0,s0                 ;925
00006c  eddd0a00          VLDR     s1,[sp,#0]            ;925
000070  ee200a20          VMUL.F32 s0,s0,s1              ;925
000074  eebd0ac0          VCVT.S32.F32 s0,s0                 ;925
000078  ed840a02          VSTR     s0,[r4,#8]            ;925
00007c  2000              MOVS     r0,#0                 ;927
00007e  e7ca              B        |L69.22|
;;;929    
                          ENDP


                          AREA ||i.LSM6DSL_GYRO_GetAxesRaw||, CODE, READONLY, ALIGN=1

                  LSM6DSL_GYRO_GetAxesRaw PROC
;;;880     */
;;;881    int32_t LSM6DSL_GYRO_GetAxesRaw(LSM6DSL_Object_t *pObj, LSM6DSL_AxesRaw_t *Value)
000000  b57c              PUSH     {r2-r6,lr}
;;;882    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;883      axis3bit16_t data_raw;
;;;884    
;;;885      /* Read raw data values. */
;;;886      if (lsm6dsl_angular_rate_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM6DSL_OK)
000006  4669              MOV      r1,sp
000008  f105001c          ADD      r0,r5,#0x1c
00000c  f7fffffe          BL       lsm6dsl_angular_rate_raw_get
000010  b110              CBZ      r0,|L70.24|
;;;887      {
;;;888        return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L70.22|
;;;889      }
;;;890    
;;;891      /* Format the data. */
;;;892      Value->x = data_raw.i16bit[0];
;;;893      Value->y = data_raw.i16bit[1];
;;;894      Value->z = data_raw.i16bit[2];
;;;895    
;;;896      return LSM6DSL_OK;
;;;897    }
000016  bd7c              POP      {r2-r6,pc}
                  |L70.24|
000018  f8bd0000          LDRH     r0,[sp,#0]            ;892
00001c  8020              STRH     r0,[r4,#0]            ;892
00001e  f8bd0002          LDRH     r0,[sp,#2]            ;893
000022  8060              STRH     r0,[r4,#2]            ;893
000024  f8bd0004          LDRH     r0,[sp,#4]            ;894
000028  80a0              STRH     r0,[r4,#4]            ;894
00002a  2000              MOVS     r0,#0                 ;896
00002c  e7f3              B        |L70.22|
;;;898    
                          ENDP


                          AREA ||i.LSM6DSL_GYRO_GetFullScale||, CODE, READONLY, ALIGN=1

                  LSM6DSL_GYRO_GetFullScale PROC
;;;809     */
;;;810    int32_t LSM6DSL_GYRO_GetFullScale(LSM6DSL_Object_t *pObj, int32_t  *FullScale)
000000  b5f8              PUSH     {r3-r7,lr}
;;;811    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;812      int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;813      lsm6dsl_fs_g_t fs_low_level;
;;;814    
;;;815      /* Read actual full scale selection from sensor. */
;;;816      if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM6DSL_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm6dsl_gy_full_scale_get
000012  b108              CBZ      r0,|L71.24|
;;;817      {
;;;818        return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L71.22|
;;;819      }
;;;820    
;;;821      switch (fs_low_level)
;;;822      {
;;;823        case LSM6DSL_125dps:
;;;824          *FullScale =  125;
;;;825          break;
;;;826    
;;;827        case LSM6DSL_250dps:
;;;828          *FullScale =  250;
;;;829          break;
;;;830    
;;;831        case LSM6DSL_500dps:
;;;832          *FullScale =  500;
;;;833          break;
;;;834    
;;;835        case LSM6DSL_1000dps:
;;;836          *FullScale = 1000;
;;;837          break;
;;;838    
;;;839        case LSM6DSL_2000dps:
;;;840          *FullScale = 2000;
;;;841          break;
;;;842    
;;;843        default:
;;;844          ret = LSM6DSL_ERROR;
;;;845          break;
;;;846      }
;;;847    
;;;848      return ret;
;;;849    }
000016  bdf8              POP      {r3-r7,pc}
                  |L71.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;821
00001c  2807              CMP      r0,#7                 ;821
00001e  d217              BCS      |L71.80|
000020  e8dff000          TBB      [pc,r0]               ;821
000024  07040a16          DCB      0x07,0x04,0x0a,0x16
000028  0e161200          DCB      0x0e,0x16,0x12,0x00
00002c  207d              MOVS     r0,#0x7d              ;824
00002e  6020              STR      r0,[r4,#0]            ;824
000030  e011              B        |L71.86|
000032  20fa              MOVS     r0,#0xfa              ;828
000034  6020              STR      r0,[r4,#0]            ;828
000036  e00e              B        |L71.86|
000038  f44f70fa          MOV      r0,#0x1f4             ;832
00003c  6020              STR      r0,[r4,#0]            ;832
00003e  e00a              B        |L71.86|
000040  f44f707a          MOV      r0,#0x3e8             ;836
000044  6020              STR      r0,[r4,#0]            ;836
000046  e006              B        |L71.86|
000048  f44f60fa          MOV      r0,#0x7d0             ;840
00004c  6020              STR      r0,[r4,#0]            ;840
00004e  e002              B        |L71.86|
                  |L71.80|
000050  f04f36ff          MOV      r6,#0xffffffff        ;844
000054  bf00              NOP                            ;845
                  |L71.86|
000056  bf00              NOP                            ;825
000058  4630              MOV      r0,r6                 ;848
00005a  e7dc              B        |L71.22|
;;;850    
                          ENDP


                          AREA ||i.LSM6DSL_GYRO_GetOutputDataRate||, CODE, READONLY, ALIGN=2

                  LSM6DSL_GYRO_GetOutputDataRate PROC
;;;719     */
;;;720    int32_t LSM6DSL_GYRO_GetOutputDataRate(LSM6DSL_Object_t *pObj, float *Odr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;721    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;722      int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;723      lsm6dsl_odr_g_t odr_low_level;
;;;724    
;;;725      /* Get current output data rate. */
;;;726      if (lsm6dsl_gy_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM6DSL_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm6dsl_gy_data_rate_get
000012  b108              CBZ      r0,|L72.24|
;;;727      {
;;;728        return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L72.22|
;;;729      }
;;;730    
;;;731      switch (odr_low_level)
;;;732      {
;;;733        case LSM6DSL_GY_ODR_OFF:
;;;734          *Odr = 0.0f;
;;;735          break;
;;;736    
;;;737        case LSM6DSL_GY_ODR_12Hz5:
;;;738          *Odr = 12.5f;
;;;739          break;
;;;740    
;;;741        case LSM6DSL_GY_ODR_26Hz:
;;;742          *Odr = 26.0f;
;;;743          break;
;;;744    
;;;745        case LSM6DSL_GY_ODR_52Hz:
;;;746          *Odr = 52.0f;
;;;747          break;
;;;748    
;;;749        case LSM6DSL_GY_ODR_104Hz:
;;;750          *Odr = 104.0f;
;;;751          break;
;;;752    
;;;753        case LSM6DSL_GY_ODR_208Hz:
;;;754          *Odr = 208.0f;
;;;755          break;
;;;756    
;;;757        case LSM6DSL_GY_ODR_416Hz:
;;;758          *Odr = 416.0f;
;;;759          break;
;;;760    
;;;761        case LSM6DSL_GY_ODR_833Hz:
;;;762          *Odr = 833.0f;
;;;763          break;
;;;764    
;;;765        case LSM6DSL_GY_ODR_1k66Hz:
;;;766          *Odr =  1660.0f;
;;;767          break;
;;;768    
;;;769        case LSM6DSL_GY_ODR_3k33Hz:
;;;770          *Odr =  3330.0f;
;;;771          break;
;;;772    
;;;773        case LSM6DSL_GY_ODR_6k66Hz:
;;;774          *Odr =  6660.0f;
;;;775          break;
;;;776    
;;;777        default:
;;;778          ret = LSM6DSL_ERROR;
;;;779          break;
;;;780      }
;;;781    
;;;782      return ret;
;;;783    }
000016  bdf8              POP      {r3-r7,pc}
                  |L72.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;731
00001c  280b              CMP      r0,#0xb               ;731
00001e  d23e              BCS      |L72.158|
000020  e8dff000          TBB      [pc,r0]               ;731
000024  060b1015          DCB      0x06,0x0b,0x10,0x15
000028  1a1f2429          DCB      0x1a,0x1f,0x24,0x29
00002c  2e333800          DCB      0x2e,0x33,0x38,0x00
000030  ed9f0a1e          VLDR     s0,|L72.172|
000034  ed840a00          VSTR     s0,[r4,#0]            ;734
000038  e034              B        |L72.164|
00003a  eeb20a09          VMOV.F32 s0,#12.50000000       ;738
00003e  ed840a00          VSTR     s0,[r4,#0]            ;738
000042  e02f              B        |L72.164|
000044  eeb30a0a          VMOV.F32 s0,#26.00000000       ;742
000048  ed840a00          VSTR     s0,[r4,#0]            ;742
00004c  e02a              B        |L72.164|
00004e  ed9f0a18          VLDR     s0,|L72.176|
000052  ed840a00          VSTR     s0,[r4,#0]            ;746
000056  e025              B        |L72.164|
000058  ed9f0a16          VLDR     s0,|L72.180|
00005c  ed840a00          VSTR     s0,[r4,#0]            ;750
000060  e020              B        |L72.164|
000062  ed9f0a15          VLDR     s0,|L72.184|
000066  ed840a00          VSTR     s0,[r4,#0]            ;754
00006a  e01b              B        |L72.164|
00006c  ed9f0a13          VLDR     s0,|L72.188|
000070  ed840a00          VSTR     s0,[r4,#0]            ;758
000074  e016              B        |L72.164|
000076  ed9f0a12          VLDR     s0,|L72.192|
00007a  ed840a00          VSTR     s0,[r4,#0]            ;762
00007e  e011              B        |L72.164|
000080  ed9f0a10          VLDR     s0,|L72.196|
000084  ed840a00          VSTR     s0,[r4,#0]            ;766
000088  e00c              B        |L72.164|
00008a  ed9f0a0f          VLDR     s0,|L72.200|
00008e  ed840a00          VSTR     s0,[r4,#0]            ;770
000092  e007              B        |L72.164|
000094  ed9f0a0d          VLDR     s0,|L72.204|
000098  ed840a00          VSTR     s0,[r4,#0]            ;774
00009c  e002              B        |L72.164|
                  |L72.158|
00009e  f04f36ff          MOV      r6,#0xffffffff        ;778
0000a2  bf00              NOP                            ;779
                  |L72.164|
0000a4  bf00              NOP                            ;735
0000a6  4630              MOV      r0,r6                 ;782
0000a8  e7b5              B        |L72.22|
;;;784    
                          ENDP

0000aa  0000              DCW      0x0000
                  |L72.172|
0000ac  00000000          DCFS     0x00000000 ; 0
                  |L72.176|
0000b0  42500000          DCFS     0x42500000 ; 52
                  |L72.180|
0000b4  42d00000          DCFS     0x42d00000 ; 104
                  |L72.184|
0000b8  43500000          DCFS     0x43500000 ; 208
                  |L72.188|
0000bc  43d00000          DCFS     0x43d00000 ; 416
                  |L72.192|
0000c0  44504000          DCFS     0x44504000 ; 833
                  |L72.196|
0000c4  44cf8000          DCFS     0x44cf8000 ; 1660
                  |L72.200|
0000c8  45502000          DCFS     0x45502000 ; 3330
                  |L72.204|
0000cc  45d02000          DCFS     0x45d02000 ; 6660

                          AREA ||i.LSM6DSL_GYRO_GetSensitivity||, CODE, READONLY, ALIGN=2

                  LSM6DSL_GYRO_GetSensitivity PROC
;;;671     */
;;;672    int32_t LSM6DSL_GYRO_GetSensitivity(LSM6DSL_Object_t *pObj, float *Sensitivity)
000000  b5f8              PUSH     {r3-r7,lr}
;;;673    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;674      int32_t ret = LSM6DSL_OK;
000006  2600              MOVS     r6,#0
;;;675      lsm6dsl_fs_g_t full_scale;
;;;676    
;;;677      /* Read actual full scale selection from sensor. */
;;;678      if (lsm6dsl_gy_full_scale_get(&(pObj->Ctx), &full_scale) != LSM6DSL_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm6dsl_gy_full_scale_get
000012  b108              CBZ      r0,|L73.24|
;;;679      {
;;;680        return LSM6DSL_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L73.22|
;;;681      }
;;;682    
;;;683      /* Store the sensitivity based on actual full scale. */
;;;684      switch (full_scale)
;;;685      {
;;;686        case LSM6DSL_125dps:
;;;687          *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_125DPS;
;;;688          break;
;;;689    
;;;690        case LSM6DSL_250dps:
;;;691          *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_250DPS;
;;;692          break;
;;;693    
;;;694        case LSM6DSL_500dps:
;;;695          *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_500DPS;
;;;696          break;
;;;697    
;;;698        case LSM6DSL_1000dps:
;;;699          *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_1000DPS;
;;;700          break;
;;;701    
;;;702        case LSM6DSL_2000dps:
;;;703          *Sensitivity = LSM6DSL_GYRO_SENSITIVITY_FS_2000DPS;
;;;704          break;
;;;705    
;;;706        default:
;;;707          ret = LSM6DSL_ERROR;
;;;708          break;
;;;709      }
;;;710    
;;;711      return ret;
;;;712    }
000016  bdf8              POP      {r3-r7,pc}
                  |L73.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;684
00001c  2807              CMP      r0,#7                 ;684
00001e  d21e              BCS      |L73.94|
000020  e8dff000          TBB      [pc,r0]               ;684
000024  09040e1d          DCB      0x09,0x04,0x0e,0x1d
000028  131d1800          DCB      0x13,0x1d,0x18,0x00
00002c  ed9f0a0f          VLDR     s0,|L73.108|
000030  ed840a00          VSTR     s0,[r4,#0]            ;687
000034  e016              B        |L73.100|
000036  ed9f0a0e          VLDR     s0,|L73.112|
00003a  ed840a00          VSTR     s0,[r4,#0]            ;691
00003e  e011              B        |L73.100|
000040  ed9f0a0c          VLDR     s0,|L73.116|
000044  ed840a00          VSTR     s0,[r4,#0]            ;695
000048  e00c              B        |L73.100|
00004a  ed9f0a0b          VLDR     s0,|L73.120|
00004e  ed840a00          VSTR     s0,[r4,#0]            ;699
000052  e007              B        |L73.100|
000054  ed9f0a09          VLDR     s0,|L73.124|
000058  ed840a00          VSTR     s0,[r4,#0]            ;703
00005c  e002              B        |L73.100|
                  |L73.94|
00005e  f04f36ff          MOV      r6,#0xffffffff        ;707
000062  bf00              NOP                            ;708
                  |L73.100|
000064  bf00              NOP                            ;688
000066  4630              MOV      r0,r6                 ;711
000068  e7d5              B        |L73.22|
;;;713    
                          ENDP

00006a  0000              DCW      0x0000
                  |L73.108|
00006c  408c0000          DCFS     0x408c0000 ; 4.375
                  |L73.112|
000070  410c0000          DCFS     0x410c0000 ; 8.75
                  |L73.116|
000074  418c0000          DCFS     0x418c0000 ; 17.5
                  |L73.120|
000078  420c0000          DCFS     0x420c0000 ; 35
                  |L73.124|
00007c  428c0000          DCFS     0x428c0000 ; 70

                          AREA ||i.LSM6DSL_GYRO_Get_DRDY_Status||, CODE, READONLY, ALIGN=1

                  LSM6DSL_GYRO_Get_DRDY_Status PROC
;;;2653    */
;;;2654   int32_t LSM6DSL_GYRO_Get_DRDY_Status(LSM6DSL_Object_t *pObj, uint8_t *Status)
000000  b570              PUSH     {r4-r6,lr}
;;;2655   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;2656     if (lsm6dsl_gy_flag_data_ready_get(&(pObj->Ctx), Status) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_gy_flag_data_ready_get
000010  b110              CBZ      r0,|L74.24|
;;;2657     {
;;;2658       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L74.22|
;;;2659     }
;;;2660   
;;;2661     return LSM6DSL_OK;
;;;2662   }
000016  bd70              POP      {r4-r6,pc}
                  |L74.24|
000018  2000              MOVS     r0,#0                 ;2661
00001a  e7fc              B        |L74.22|
;;;2663   
                          ENDP


                          AREA ||i.LSM6DSL_GYRO_Get_Init_Status||, CODE, READONLY, ALIGN=1

                  LSM6DSL_GYRO_Get_Init_Status PROC
;;;2669    */
;;;2670   int32_t LSM6DSL_GYRO_Get_Init_Status(LSM6DSL_Object_t *pObj, uint8_t *Status)
000000  4602              MOV      r2,r0
;;;2671   {
;;;2672     if (pObj == NULL)
000002  b912              CBNZ     r2,|L75.10|
;;;2673     {
;;;2674       return LSM6DSL_ERROR;
000004  f04f30ff          MOV      r0,#0xffffffff
                  |L75.8|
;;;2675     }
;;;2676   
;;;2677     *Status = pObj->is_initialized;
;;;2678   
;;;2679     return LSM6DSL_OK;
;;;2680   }
000008  4770              BX       lr
                  |L75.10|
00000a  f8920028          LDRB     r0,[r2,#0x28]         ;2677
00000e  7008              STRB     r0,[r1,#0]            ;2677
000010  2000              MOVS     r0,#0                 ;2679
000012  e7f9              B        |L75.8|
;;;2681   
                          ENDP


                          AREA ||i.LSM6DSL_GYRO_SetFullScale||, CODE, READONLY, ALIGN=1

                  LSM6DSL_GYRO_SetFullScale PROC
;;;856     */
;;;857    int32_t LSM6DSL_GYRO_SetFullScale(LSM6DSL_Object_t *pObj, int32_t FullScale)
000000  b570              PUSH     {r4-r6,lr}
;;;858    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;859      lsm6dsl_fs_g_t new_fs;
;;;860    
;;;861      new_fs = (FullScale <= 125)  ? LSM6DSL_125dps
000006  2c7d              CMP      r4,#0x7d
000008  dc01              BGT      |L76.14|
00000a  2001              MOVS     r0,#1
00000c  e00e              B        |L76.44|
                  |L76.14|
;;;862               : (FullScale <= 250)  ? LSM6DSL_250dps
00000e  2cfa              CMP      r4,#0xfa
000010  dc01              BGT      |L76.22|
000012  2000              MOVS     r0,#0
000014  e00a              B        |L76.44|
                  |L76.22|
;;;863               : (FullScale <= 500)  ? LSM6DSL_500dps
000016  f5b47ffa          CMP      r4,#0x1f4
00001a  dc01              BGT      |L76.32|
00001c  2002              MOVS     r0,#2
00001e  e005              B        |L76.44|
                  |L76.32|
;;;864               : (FullScale <= 1000) ? LSM6DSL_1000dps
000020  f5b47f7a          CMP      r4,#0x3e8
000024  dc01              BGT      |L76.42|
000026  2004              MOVS     r0,#4
000028  e000              B        |L76.44|
                  |L76.42|
;;;865               :                       LSM6DSL_2000dps;
00002a  2006              MOVS     r0,#6
                  |L76.44|
00002c  4606              MOV      r6,r0
;;;866    
;;;867      if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), new_fs) != LSM6DSL_OK)
00002e  4631              MOV      r1,r6
000030  f105001c          ADD      r0,r5,#0x1c
000034  f7fffffe          BL       lsm6dsl_gy_full_scale_set
000038  b110              CBZ      r0,|L76.64|
;;;868      {
;;;869        return LSM6DSL_ERROR;
00003a  f04f30ff          MOV      r0,#0xffffffff
                  |L76.62|
;;;870      }
;;;871    
;;;872      return LSM6DSL_OK;
;;;873    }
00003e  bd70              POP      {r4-r6,pc}
                  |L76.64|
000040  2000              MOVS     r0,#0                 ;872
000042  e7fc              B        |L76.62|
;;;874    
                          ENDP


                          AREA ||i.LSM6DSL_GYRO_SetOutputDataRate||, CODE, READONLY, ALIGN=1

                  LSM6DSL_GYRO_SetOutputDataRate PROC
;;;790     */
;;;791    int32_t LSM6DSL_GYRO_SetOutputDataRate(LSM6DSL_Object_t *pObj, float Odr)
000000  b510              PUSH     {r4,lr}
;;;792    {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;793      /* Check if the component is enabled */
;;;794      if (pObj->gyro_is_enabled == 1U)
00000c  f894002a          LDRB     r0,[r4,#0x2a]
000010  2801              CMP      r0,#1
000012  d107              BNE      |L77.36|
;;;795      {
;;;796        return LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(pObj, Odr);
000014  eeb00a48          VMOV.F32 s0,s16
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       LSM6DSL_GYRO_SetOutputDataRate_When_Enabled
                  |L77.30|
;;;797      }
;;;798      else
;;;799      {
;;;800        return LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(pObj, Odr);
;;;801      }
;;;802    }
00001e  ecbd8b02          VPOP     {d8}
000022  bd10              POP      {r4,pc}
                  |L77.36|
000024  eeb00a48          VMOV.F32 s0,s16                ;800
000028  4620              MOV      r0,r4                 ;800
00002a  f7fffffe          BL       LSM6DSL_GYRO_SetOutputDataRate_When_Disabled
00002e  e7f6              B        |L77.30|
;;;803    
                          ENDP


                          AREA ||i.LSM6DSL_GYRO_SetOutputDataRate_When_Disabled||, CODE, READONLY, ALIGN=2

                  LSM6DSL_GYRO_SetOutputDataRate_When_Disabled PROC
;;;3167    */
;;;3168   static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Disabled(LSM6DSL_Object_t *pObj, float Odr)
000000  4601              MOV      r1,r0
;;;3169   {
;;;3170     pObj->gyro_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
000002  eef20a09          VMOV.F32 s1,#12.50000000
000006  eeb40ae0          VCMPE.F32 s0,s1
00000a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000e  d801              BHI      |L78.20|
000010  2001              MOVS     r0,#1
000012  e048              B        |L78.166|
                  |L78.20|
;;;3171                    : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
000014  eef30a0a          VMOV.F32 s1,#26.00000000
000018  eeb40ae0          VCMPE.F32 s0,s1
00001c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000020  d801              BHI      |L78.38|
000022  2002              MOVS     r0,#2
000024  e03f              B        |L78.166|
                  |L78.38|
;;;3172                    : (Odr <=   52.0f) ? LSM6DSL_GY_ODR_52Hz
000026  eddf0a22          VLDR     s1,|L78.176|
00002a  eeb40ae0          VCMPE.F32 s0,s1
00002e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000032  d801              BHI      |L78.56|
000034  2003              MOVS     r0,#3
000036  e036              B        |L78.166|
                  |L78.56|
;;;3173                    : (Odr <=  104.0f) ? LSM6DSL_GY_ODR_104Hz
000038  eddf0a1e          VLDR     s1,|L78.180|
00003c  eeb40ae0          VCMPE.F32 s0,s1
000040  eef1fa10          VMRS     APSR_nzcv,FPSCR
000044  d801              BHI      |L78.74|
000046  2004              MOVS     r0,#4
000048  e02d              B        |L78.166|
                  |L78.74|
;;;3174                    : (Odr <=  208.0f) ? LSM6DSL_GY_ODR_208Hz
00004a  eddf0a1b          VLDR     s1,|L78.184|
00004e  eeb40ae0          VCMPE.F32 s0,s1
000052  eef1fa10          VMRS     APSR_nzcv,FPSCR
000056  d801              BHI      |L78.92|
000058  2005              MOVS     r0,#5
00005a  e024              B        |L78.166|
                  |L78.92|
;;;3175                    : (Odr <=  416.0f) ? LSM6DSL_GY_ODR_416Hz
00005c  eddf0a17          VLDR     s1,|L78.188|
000060  eeb40ae0          VCMPE.F32 s0,s1
000064  eef1fa10          VMRS     APSR_nzcv,FPSCR
000068  d801              BHI      |L78.110|
00006a  2006              MOVS     r0,#6
00006c  e01b              B        |L78.166|
                  |L78.110|
;;;3176                    : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
00006e  eddf0a14          VLDR     s1,|L78.192|
000072  eeb40ae0          VCMPE.F32 s0,s1
000076  eef1fa10          VMRS     APSR_nzcv,FPSCR
00007a  d801              BHI      |L78.128|
00007c  2007              MOVS     r0,#7
00007e  e012              B        |L78.166|
                  |L78.128|
;;;3177                    : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
000080  eddf0a10          VLDR     s1,|L78.196|
000084  eeb40ae0          VCMPE.F32 s0,s1
000088  eef1fa10          VMRS     APSR_nzcv,FPSCR
00008c  d801              BHI      |L78.146|
00008e  2008              MOVS     r0,#8
000090  e009              B        |L78.166|
                  |L78.146|
;;;3178                    : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
000092  eddf0a0d          VLDR     s1,|L78.200|
000096  eeb40ae0          VCMPE.F32 s0,s1
00009a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00009e  d801              BHI      |L78.164|
0000a0  2009              MOVS     r0,#9
0000a2  e000              B        |L78.166|
                  |L78.164|
;;;3179                    :                    LSM6DSL_GY_ODR_6k66Hz;
0000a4  200a              MOVS     r0,#0xa
                  |L78.166|
0000a6  f881002c          STRB     r0,[r1,#0x2c]
;;;3180   
;;;3181     return LSM6DSL_OK;
0000aa  2000              MOVS     r0,#0
;;;3182   }
0000ac  4770              BX       lr
;;;3183   
                          ENDP

0000ae  0000              DCW      0x0000
                  |L78.176|
0000b0  42500000          DCFS     0x42500000 ; 52
                  |L78.180|
0000b4  42d00000          DCFS     0x42d00000 ; 104
                  |L78.184|
0000b8  43500000          DCFS     0x43500000 ; 208
                  |L78.188|
0000bc  43d00000          DCFS     0x43d00000 ; 416
                  |L78.192|
0000c0  44504000          DCFS     0x44504000 ; 833
                  |L78.196|
0000c4  44cf8000          DCFS     0x44cf8000 ; 1660
                  |L78.200|
0000c8  45502000          DCFS     0x45502000 ; 3330

                          AREA ||i.LSM6DSL_GYRO_SetOutputDataRate_When_Enabled||, CODE, READONLY, ALIGN=2

                  LSM6DSL_GYRO_SetOutputDataRate_When_Enabled PROC
;;;3137    */
;;;3138   static int32_t LSM6DSL_GYRO_SetOutputDataRate_When_Enabled(LSM6DSL_Object_t *pObj, float Odr)
000000  b570              PUSH     {r4-r6,lr}
;;;3139   {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;3140     lsm6dsl_odr_g_t new_odr;
;;;3141   
;;;3142     new_odr = (Odr <=   12.5f) ? LSM6DSL_GY_ODR_12Hz5
00000c  eeb20a09          VMOV.F32 s0,#12.50000000
000010  eeb48ac0          VCMPE.F32 s16,s0
000014  eef1fa10          VMRS     APSR_nzcv,FPSCR
000018  d801              BHI      |L79.30|
00001a  2001              MOVS     r0,#1
00001c  e048              B        |L79.176|
                  |L79.30|
;;;3143             : (Odr <=   26.0f) ? LSM6DSL_GY_ODR_26Hz
00001e  eeb30a0a          VMOV.F32 s0,#26.00000000
000022  eeb48ac0          VCMPE.F32 s16,s0
000026  eef1fa10          VMRS     APSR_nzcv,FPSCR
00002a  d801              BHI      |L79.48|
00002c  2002              MOVS     r0,#2
00002e  e03f              B        |L79.176|
                  |L79.48|
;;;3144             : (Odr <=   52.0f) ? LSM6DSL_GY_ODR_52Hz
000030  ed9f0a26          VLDR     s0,|L79.204|
000034  eeb48ac0          VCMPE.F32 s16,s0
000038  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003c  d801              BHI      |L79.66|
00003e  2003              MOVS     r0,#3
000040  e036              B        |L79.176|
                  |L79.66|
;;;3145             : (Odr <=  104.0f) ? LSM6DSL_GY_ODR_104Hz
000042  ed9f0a23          VLDR     s0,|L79.208|
000046  eeb48ac0          VCMPE.F32 s16,s0
00004a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00004e  d801              BHI      |L79.84|
000050  2004              MOVS     r0,#4
000052  e02d              B        |L79.176|
                  |L79.84|
;;;3146             : (Odr <=  208.0f) ? LSM6DSL_GY_ODR_208Hz
000054  ed9f0a1f          VLDR     s0,|L79.212|
000058  eeb48ac0          VCMPE.F32 s16,s0
00005c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000060  d801              BHI      |L79.102|
000062  2005              MOVS     r0,#5
000064  e024              B        |L79.176|
                  |L79.102|
;;;3147             : (Odr <=  416.0f) ? LSM6DSL_GY_ODR_416Hz
000066  ed9f0a1c          VLDR     s0,|L79.216|
00006a  eeb48ac0          VCMPE.F32 s16,s0
00006e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000072  d801              BHI      |L79.120|
000074  2006              MOVS     r0,#6
000076  e01b              B        |L79.176|
                  |L79.120|
;;;3148             : (Odr <=  833.0f) ? LSM6DSL_GY_ODR_833Hz
000078  ed9f0a18          VLDR     s0,|L79.220|
00007c  eeb48ac0          VCMPE.F32 s16,s0
000080  eef1fa10          VMRS     APSR_nzcv,FPSCR
000084  d801              BHI      |L79.138|
000086  2007              MOVS     r0,#7
000088  e012              B        |L79.176|
                  |L79.138|
;;;3149             : (Odr <= 1660.0f) ? LSM6DSL_GY_ODR_1k66Hz
00008a  ed9f0a15          VLDR     s0,|L79.224|
00008e  eeb48ac0          VCMPE.F32 s16,s0
000092  eef1fa10          VMRS     APSR_nzcv,FPSCR
000096  d801              BHI      |L79.156|
000098  2008              MOVS     r0,#8
00009a  e009              B        |L79.176|
                  |L79.156|
;;;3150             : (Odr <= 3330.0f) ? LSM6DSL_GY_ODR_3k33Hz
00009c  ed9f0a11          VLDR     s0,|L79.228|
0000a0  eeb48ac0          VCMPE.F32 s16,s0
0000a4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000a8  d801              BHI      |L79.174|
0000aa  2009              MOVS     r0,#9
0000ac  e000              B        |L79.176|
                  |L79.174|
;;;3151             :                    LSM6DSL_GY_ODR_6k66Hz;
0000ae  200a              MOVS     r0,#0xa
                  |L79.176|
0000b0  4605              MOV      r5,r0
;;;3152   
;;;3153     /* Output data rate selection. */
;;;3154     if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), new_odr) != LSM6DSL_OK)
0000b2  4629              MOV      r1,r5
0000b4  f104001c          ADD      r0,r4,#0x1c
0000b8  f7fffffe          BL       lsm6dsl_gy_data_rate_set
0000bc  b120              CBZ      r0,|L79.200|
;;;3155     {
;;;3156       return LSM6DSL_ERROR;
0000be  f04f30ff          MOV      r0,#0xffffffff
                  |L79.194|
;;;3157     }
;;;3158   
;;;3159     return LSM6DSL_OK;
;;;3160   }
0000c2  ecbd8b02          VPOP     {d8}
0000c6  bd70              POP      {r4-r6,pc}
                  |L79.200|
0000c8  2000              MOVS     r0,#0                 ;3159
0000ca  e7fa              B        |L79.194|
;;;3161   
                          ENDP

                  |L79.204|
0000cc  42500000          DCFS     0x42500000 ; 52
                  |L79.208|
0000d0  42d00000          DCFS     0x42d00000 ; 104
                  |L79.212|
0000d4  43500000          DCFS     0x43500000 ; 208
                  |L79.216|
0000d8  43d00000          DCFS     0x43d00000 ; 416
                  |L79.220|
0000dc  44504000          DCFS     0x44504000 ; 833
                  |L79.224|
0000e0  44cf8000          DCFS     0x44cf8000 ; 1660
                  |L79.228|
0000e4  45502000          DCFS     0x45502000 ; 3330

                          AREA ||i.LSM6DSL_GYRO_Set_INT1_DRDY||, CODE, READONLY, ALIGN=1

                  LSM6DSL_GYRO_Set_INT1_DRDY PROC
;;;2687    */
;;;2688   int32_t LSM6DSL_GYRO_Set_INT1_DRDY(LSM6DSL_Object_t *pObj, uint8_t Val)
000000  b538              PUSH     {r3-r5,lr}
;;;2689   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2690     lsm6dsl_int1_route_t reg;
;;;2691   
;;;2692     if (lsm6dsl_pin_int1_route_get(&(pObj->Ctx), &reg) != LSM6DSL_OK)
000006  4669              MOV      r1,sp
000008  f105001c          ADD      r0,r5,#0x1c
00000c  f7fffffe          BL       lsm6dsl_pin_int1_route_get
000010  b110              CBZ      r0,|L80.24|
;;;2693     {
;;;2694       return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L80.22|
;;;2695     }
;;;2696   
;;;2697     if (Val <= 1)
;;;2698     {
;;;2699       reg.int1_drdy_g = Val;
;;;2700     }
;;;2701     else
;;;2702     {
;;;2703       return LSM6DSL_ERROR;
;;;2704     }
;;;2705   
;;;2706     if (lsm6dsl_pin_int1_route_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
;;;2707     {
;;;2708       return LSM6DSL_ERROR;
;;;2709     }
;;;2710   
;;;2711     return LSM6DSL_OK;
;;;2712   }
000016  bd38              POP      {r3-r5,pc}
                  |L80.24|
000018  2c01              CMP      r4,#1                 ;2697
00001a  dc06              BGT      |L80.42|
00001c  f89d0000          LDRB     r0,[sp,#0]            ;2699
000020  f3640041          BFI      r0,r4,#1,#1           ;2699
000024  f88d0000          STRB     r0,[sp,#0]            ;2699
000028  e002              B        |L80.48|
                  |L80.42|
00002a  f04f30ff          MOV      r0,#0xffffffff        ;2703
00002e  e7f2              B        |L80.22|
                  |L80.48|
000030  f105001c          ADD      r0,r5,#0x1c           ;2706
000034  9900              LDR      r1,[sp,#0]            ;2706
000036  f7fffffe          BL       lsm6dsl_pin_int1_route_set
00003a  b110              CBZ      r0,|L80.66|
00003c  f04f30ff          MOV      r0,#0xffffffff        ;2708
000040  e7e9              B        |L80.22|
                  |L80.66|
000042  2000              MOVS     r0,#0                 ;2711
000044  e7e7              B        |L80.22|
;;;2713   
                          ENDP


                          AREA ||i.LSM6DSL_GYRO_Set_SelfTest||, CODE, READONLY, ALIGN=1

                  LSM6DSL_GYRO_Set_SelfTest PROC
;;;2629    */
;;;2630   int32_t LSM6DSL_GYRO_Set_SelfTest(LSM6DSL_Object_t *pObj, uint8_t Val)
000000  b570              PUSH     {r4-r6,lr}
;;;2631   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2632     lsm6dsl_st_g_t reg;
;;;2633   
;;;2634     reg = (Val == 0U)  ? LSM6DSL_GY_ST_DISABLE
000006  b90c              CBNZ     r4,|L81.12|
000008  2000              MOVS     r0,#0
00000a  e008              B        |L81.30|
                  |L81.12|
;;;2635         : (Val == 1U)  ? LSM6DSL_GY_ST_POSITIVE
00000c  2c01              CMP      r4,#1
00000e  d101              BNE      |L81.20|
000010  2001              MOVS     r0,#1
000012  e004              B        |L81.30|
                  |L81.20|
;;;2636         : (Val == 2U)  ? LSM6DSL_GY_ST_NEGATIVE
000014  2c02              CMP      r4,#2
000016  d101              BNE      |L81.28|
000018  2003              MOVS     r0,#3
00001a  e000              B        |L81.30|
                  |L81.28|
;;;2637         :                LSM6DSL_GY_ST_ND;
00001c  2004              MOVS     r0,#4
                  |L81.30|
00001e  4606              MOV      r6,r0
;;;2638   
;;;2639   
;;;2640     if (lsm6dsl_gy_self_test_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
000020  4631              MOV      r1,r6
000022  f105001c          ADD      r0,r5,#0x1c
000026  f7fffffe          BL       lsm6dsl_gy_self_test_set
00002a  b110              CBZ      r0,|L81.50|
;;;2641     {
;;;2642       return LSM6DSL_ERROR;
00002c  f04f30ff          MOV      r0,#0xffffffff
                  |L81.48|
;;;2643     }
;;;2644   
;;;2645     return LSM6DSL_OK;
;;;2646   }
000030  bd70              POP      {r4-r6,pc}
                  |L81.50|
000032  2000              MOVS     r0,#0                 ;2645
000034  e7fc              B        |L81.48|
;;;2647   
                          ENDP


                          AREA ||i.LSM6DSL_GetCapabilities||, CODE, READONLY, ALIGN=2

                  LSM6DSL_GetCapabilities PROC
;;;278     */
;;;279    int32_t LSM6DSL_GetCapabilities(LSM6DSL_Object_t *pObj, LSM6DSL_Capabilities_t *Capabilities)
000000  4602              MOV      r2,r0
;;;280    {
;;;281      /* Prevent unused argument(s) compilation warning */
;;;282      (void)(pObj);
;;;283    
;;;284      Capabilities->Acc          = 1;
000002  2001              MOVS     r0,#1
000004  7008              STRB     r0,[r1,#0]
;;;285      Capabilities->Gyro         = 1;
000006  7048              STRB     r0,[r1,#1]
;;;286      Capabilities->Magneto      = 0;
000008  2000              MOVS     r0,#0
00000a  7088              STRB     r0,[r1,#2]
;;;287      Capabilities->LowPower     = 0;
00000c  70c8              STRB     r0,[r1,#3]
;;;288      Capabilities->GyroMaxFS    = 2000;
00000e  f44f60fa          MOV      r0,#0x7d0
000012  6048              STR      r0,[r1,#4]
;;;289      Capabilities->AccMaxFS     = 16;
000014  2010              MOVS     r0,#0x10
000016  6088              STR      r0,[r1,#8]
;;;290      Capabilities->MagMaxFS     = 0;
000018  2000              MOVS     r0,#0
00001a  60c8              STR      r0,[r1,#0xc]
;;;291      Capabilities->GyroMaxOdr   = 6660.0f;
00001c  ed9f0a06          VLDR     s0,|L82.56|
000020  ed810a04          VSTR     s0,[r1,#0x10]
;;;292      Capabilities->AccMaxOdr    = 6660.0f;
000024  ed9f0a04          VLDR     s0,|L82.56|
000028  ed810a05          VSTR     s0,[r1,#0x14]
;;;293      Capabilities->MagMaxOdr    = 0.0f;
00002c  ed9f0a03          VLDR     s0,|L82.60|
000030  ed810a06          VSTR     s0,[r1,#0x18]
;;;294      return LSM6DSL_OK;
;;;295    }
000034  4770              BX       lr
;;;296    
                          ENDP

000036  0000              DCW      0x0000
                  |L82.56|
000038  45d02000          DCFS     0x45d02000 ; 6660
                  |L82.60|
00003c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.LSM6DSL_Init||, CODE, READONLY, ALIGN=1

                  LSM6DSL_Init PROC
;;;173     */
;;;174    int32_t LSM6DSL_Init(LSM6DSL_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;175    {
000002  4604              MOV      r4,r0
;;;176      /* Enable register address automatically incremented during a multiple byte
;;;177      access with a serial interface. */
;;;178      if (lsm6dsl_auto_increment_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
000004  2101              MOVS     r1,#1
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm6dsl_auto_increment_set
00000e  b110              CBZ      r0,|L83.22|
;;;179      {
;;;180        return LSM6DSL_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L83.20|
;;;181      }
;;;182    
;;;183      /* Enable BDU */
;;;184      if (lsm6dsl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM6DSL_OK)
;;;185      {
;;;186        return LSM6DSL_ERROR;
;;;187      }
;;;188    
;;;189      /* FIFO mode selection */
;;;190      if (lsm6dsl_fifo_mode_set(&(pObj->Ctx), LSM6DSL_BYPASS_MODE) != LSM6DSL_OK)
;;;191      {
;;;192        return LSM6DSL_ERROR;
;;;193      }
;;;194    
;;;195      /* Select default output data rate. */
;;;196      pObj->acc_odr = LSM6DSL_XL_ODR_104Hz;
;;;197    
;;;198      /* Output data rate selection - power down. */
;;;199      if (lsm6dsl_xl_data_rate_set(&(pObj->Ctx), LSM6DSL_XL_ODR_OFF) != LSM6DSL_OK)
;;;200      {
;;;201        return LSM6DSL_ERROR;
;;;202      }
;;;203    
;;;204      /* Full scale selection. */
;;;205      if (lsm6dsl_xl_full_scale_set(&(pObj->Ctx), LSM6DSL_2g) != LSM6DSL_OK)
;;;206      {
;;;207        return LSM6DSL_ERROR;
;;;208      }
;;;209    
;;;210      /* Select default output data rate. */
;;;211      pObj->gyro_odr = LSM6DSL_GY_ODR_104Hz;
;;;212    
;;;213      /* Output data rate selection - power down. */
;;;214      if (lsm6dsl_gy_data_rate_set(&(pObj->Ctx), LSM6DSL_GY_ODR_OFF) != LSM6DSL_OK)
;;;215      {
;;;216        return LSM6DSL_ERROR;
;;;217      }
;;;218    
;;;219      /* Full scale selection. */
;;;220      if (lsm6dsl_gy_full_scale_set(&(pObj->Ctx), LSM6DSL_2000dps) != LSM6DSL_OK)
;;;221      {
;;;222        return LSM6DSL_ERROR;
;;;223      }
;;;224    
;;;225      pObj->is_initialized = 1;
;;;226    
;;;227      return LSM6DSL_OK;
;;;228    }
000014  bd10              POP      {r4,pc}
                  |L83.22|
000016  2101              MOVS     r1,#1                 ;184
000018  f104001c          ADD      r0,r4,#0x1c           ;184
00001c  f7fffffe          BL       lsm6dsl_block_data_update_set
000020  b110              CBZ      r0,|L83.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;186
000026  e7f5              B        |L83.20|
                  |L83.40|
000028  2100              MOVS     r1,#0                 ;190
00002a  f104001c          ADD      r0,r4,#0x1c           ;190
00002e  f7fffffe          BL       lsm6dsl_fifo_mode_set
000032  b110              CBZ      r0,|L83.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;192
000038  e7ec              B        |L83.20|
                  |L83.58|
00003a  2004              MOVS     r0,#4                 ;196
00003c  f884002b          STRB     r0,[r4,#0x2b]         ;196
000040  2100              MOVS     r1,#0                 ;199
000042  f104001c          ADD      r0,r4,#0x1c           ;199
000046  f7fffffe          BL       lsm6dsl_xl_data_rate_set
00004a  b110              CBZ      r0,|L83.82|
00004c  f04f30ff          MOV      r0,#0xffffffff        ;201
000050  e7e0              B        |L83.20|
                  |L83.82|
000052  2100              MOVS     r1,#0                 ;205
000054  f104001c          ADD      r0,r4,#0x1c           ;205
000058  f7fffffe          BL       lsm6dsl_xl_full_scale_set
00005c  b110              CBZ      r0,|L83.100|
00005e  f04f30ff          MOV      r0,#0xffffffff        ;207
000062  e7d7              B        |L83.20|
                  |L83.100|
000064  2004              MOVS     r0,#4                 ;211
000066  f884002c          STRB     r0,[r4,#0x2c]         ;211
00006a  2100              MOVS     r1,#0                 ;214
00006c  f104001c          ADD      r0,r4,#0x1c           ;214
000070  f7fffffe          BL       lsm6dsl_gy_data_rate_set
000074  b110              CBZ      r0,|L83.124|
000076  f04f30ff          MOV      r0,#0xffffffff        ;216
00007a  e7cb              B        |L83.20|
                  |L83.124|
00007c  2106              MOVS     r1,#6                 ;220
00007e  f104001c          ADD      r0,r4,#0x1c           ;220
000082  f7fffffe          BL       lsm6dsl_gy_full_scale_set
000086  b110              CBZ      r0,|L83.142|
000088  f04f30ff          MOV      r0,#0xffffffff        ;222
00008c  e7c2              B        |L83.20|
                  |L83.142|
00008e  2001              MOVS     r0,#1                 ;225
000090  f8840028          STRB     r0,[r4,#0x28]         ;225
000094  2000              MOVS     r0,#0                 ;227
000096  e7bd              B        |L83.20|
;;;229    
                          ENDP


                          AREA ||i.LSM6DSL_ReadID||, CODE, READONLY, ALIGN=1

                  LSM6DSL_ReadID PROC
;;;262     */
;;;263    int32_t LSM6DSL_ReadID(LSM6DSL_Object_t *pObj, uint8_t *Id)
000000  b570              PUSH     {r4-r6,lr}
;;;264    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;265      if (lsm6dsl_device_id_get(&(pObj->Ctx), Id) != LSM6DSL_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm6dsl_device_id_get
000010  b110              CBZ      r0,|L84.24|
;;;266      {
;;;267        return LSM6DSL_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L84.22|
;;;268      }
;;;269    
;;;270      return LSM6DSL_OK;
;;;271    }
000016  bd70              POP      {r4-r6,pc}
                  |L84.24|
000018  2000              MOVS     r0,#0                 ;270
00001a  e7fc              B        |L84.22|
;;;272    
                          ENDP


                          AREA ||i.LSM6DSL_Read_Reg||, CODE, READONLY, ALIGN=1

                  LSM6DSL_Read_Reg PROC
;;;936     */
;;;937    int32_t LSM6DSL_Read_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t *Data)
000000  b570              PUSH     {r4-r6,lr}
;;;938    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;939      if (lsm6dsl_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM6DSL_OK)
000008  2301              MOVS     r3,#1
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  f104001c          ADD      r0,r4,#0x1c
000012  f7fffffe          BL       lsm6dsl_read_reg
000016  b110              CBZ      r0,|L85.30|
;;;940      {
;;;941        return LSM6DSL_ERROR;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L85.28|
;;;942      }
;;;943    
;;;944      return LSM6DSL_OK;
;;;945    }
00001c  bd70              POP      {r4-r6,pc}
                  |L85.30|
00001e  2000              MOVS     r0,#0                 ;944
000020  e7fc              B        |L85.28|
;;;946    
                          ENDP


                          AREA ||i.LSM6DSL_RegisterBusIO||, CODE, READONLY, ALIGN=2

                  LSM6DSL_RegisterBusIO PROC
;;;116     */
;;;117    int32_t LSM6DSL_RegisterBusIO(LSM6DSL_Object_t *pObj, LSM6DSL_IO_t *pIO)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;118    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;119      int32_t ret = LSM6DSL_OK;
000008  2600              MOVS     r6,#0
;;;120    
;;;121      if (pObj == NULL)
00000a  b90c              CBNZ     r4,|L86.16|
;;;122      {
;;;123        ret = LSM6DSL_ERROR;
00000c  1e76              SUBS     r6,r6,#1
00000e  e02d              B        |L86.108|
                  |L86.16|
;;;124      }
;;;125      else
;;;126      {
;;;127        pObj->IO.Init      = pIO->Init;
000010  6828              LDR      r0,[r5,#0]
000012  6020              STR      r0,[r4,#0]
;;;128        pObj->IO.DeInit    = pIO->DeInit;
000014  6868              LDR      r0,[r5,#4]
000016  6060              STR      r0,[r4,#4]
;;;129        pObj->IO.BusType   = pIO->BusType;
000018  68a8              LDR      r0,[r5,#8]
00001a  60a0              STR      r0,[r4,#8]
;;;130        pObj->IO.Address   = pIO->Address;
00001c  7b28              LDRB     r0,[r5,#0xc]
00001e  7320              STRB     r0,[r4,#0xc]
;;;131        pObj->IO.WriteReg  = pIO->WriteReg;
000020  6928              LDR      r0,[r5,#0x10]
000022  6120              STR      r0,[r4,#0x10]
;;;132        pObj->IO.ReadReg   = pIO->ReadReg;
000024  6968              LDR      r0,[r5,#0x14]
000026  6160              STR      r0,[r4,#0x14]
;;;133        pObj->IO.GetTick   = pIO->GetTick;
000028  69a8              LDR      r0,[r5,#0x18]
00002a  61a0              STR      r0,[r4,#0x18]
;;;134    
;;;135        pObj->Ctx.read_reg  = ReadRegWrap;
00002c  4911              LDR      r1,|L86.116|
00002e  6221              STR      r1,[r4,#0x20]
;;;136        pObj->Ctx.write_reg = WriteRegWrap;
000030  4811              LDR      r0,|L86.120|
000032  61e0              STR      r0,[r4,#0x1c]
;;;137        pObj->Ctx.handle   = pObj;
000034  6264              STR      r4,[r4,#0x24]
;;;138    
;;;139        if (pObj->IO.Init == NULL)
000036  6820              LDR      r0,[r4,#0]
000038  b910              CBNZ     r0,|L86.64|
;;;140        {
;;;141          ret = LSM6DSL_ERROR;
00003a  f04f36ff          MOV      r6,#0xffffffff
00003e  e015              B        |L86.108|
                  |L86.64|
;;;142        }
;;;143        else if (pObj->IO.Init() != LSM6DSL_OK)
000040  6820              LDR      r0,[r4,#0]
000042  4780              BLX      r0
000044  b110              CBZ      r0,|L86.76|
;;;144        {
;;;145          ret = LSM6DSL_ERROR;
000046  f04f36ff          MOV      r6,#0xffffffff
00004a  e00f              B        |L86.108|
                  |L86.76|
;;;146        }
;;;147        else
;;;148        {
;;;149          if (pObj->IO.BusType == LSM6DSL_SPI_3WIRES_BUS) /* SPI 3-Wires */
00004c  68a0              LDR      r0,[r4,#8]
00004e  2802              CMP      r0,#2
000050  d10c              BNE      |L86.108|
;;;150          {
;;;151            /* Enable the SPI 3-Wires support only the first time */
;;;152            if (pObj->is_initialized == 0U)
000052  f8940028          LDRB     r0,[r4,#0x28]
000056  b948              CBNZ     r0,|L86.108|
;;;153            {
;;;154              /* Enable SPI 3-Wires on the component */
;;;155              uint8_t data = 0x0C;
000058  270c              MOVS     r7,#0xc
;;;156    
;;;157              if (LSM6DSL_Write_Reg(pObj, LSM6DSL_CTRL3_C, data) != LSM6DSL_OK)
00005a  463a              MOV      r2,r7
00005c  2112              MOVS     r1,#0x12
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       LSM6DSL_Write_Reg
000064  b108              CBZ      r0,|L86.106|
;;;158              {
;;;159                ret = LSM6DSL_ERROR;
000066  f04f36ff          MOV      r6,#0xffffffff
                  |L86.106|
;;;160              }
;;;161            }
00006a  bf00              NOP      
                  |L86.108|
;;;162          }
;;;163        }
;;;164      }
;;;165    
;;;166      return ret;
00006c  4630              MOV      r0,r6
;;;167    }
00006e  e8bd81f0          POP      {r4-r8,pc}
;;;168    
                          ENDP

000072  0000              DCW      0x0000
                  |L86.116|
                          DCD      ReadRegWrap
                  |L86.120|
                          DCD      WriteRegWrap

                          AREA ||i.LSM6DSL_Set_DRDY_Mode||, CODE, READONLY, ALIGN=1

                  LSM6DSL_Set_DRDY_Mode PROC
;;;2719    */
;;;2720   int32_t LSM6DSL_Set_DRDY_Mode(LSM6DSL_Object_t *pObj, uint8_t Val)
000000  b570              PUSH     {r4-r6,lr}
;;;2721   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2722     lsm6dsl_drdy_pulsed_g_t reg;
;;;2723   
;;;2724     reg = (Val == 0U)  ? LSM6DSL_DRDY_LATCHED
000006  b90c              CBNZ     r4,|L87.12|
000008  2000              MOVS     r0,#0
00000a  e004              B        |L87.22|
                  |L87.12|
;;;2725         : (Val == 1U)  ? LSM6DSL_DRDY_PULSED
00000c  2c01              CMP      r4,#1
00000e  d101              BNE      |L87.20|
000010  2001              MOVS     r0,#1
000012  e000              B        |L87.22|
                  |L87.20|
;;;2726         :                LSM6DSL_DRDY_ND;
000014  2002              MOVS     r0,#2
                  |L87.22|
000016  4606              MOV      r6,r0
;;;2727   
;;;2728     if (lsm6dsl_data_ready_mode_set(&(pObj->Ctx), reg) != LSM6DSL_OK)
000018  4631              MOV      r1,r6
00001a  f105001c          ADD      r0,r5,#0x1c
00001e  f7fffffe          BL       lsm6dsl_data_ready_mode_set
000022  b110              CBZ      r0,|L87.42|
;;;2729     {
;;;2730       return LSM6DSL_ERROR;
000024  f04f30ff          MOV      r0,#0xffffffff
                  |L87.40|
;;;2731     }
;;;2732   
;;;2733     return LSM6DSL_OK;
;;;2734   }
000028  bd70              POP      {r4-r6,pc}
                  |L87.42|
00002a  2000              MOVS     r0,#0                 ;2733
00002c  e7fc              B        |L87.40|
;;;2735   
                          ENDP


                          AREA ||i.LSM6DSL_Set_Interrupt_Latch||, CODE, READONLY, ALIGN=1

                  LSM6DSL_Set_Interrupt_Latch PROC
;;;969     */
;;;970    int32_t LSM6DSL_Set_Interrupt_Latch(LSM6DSL_Object_t *pObj, uint8_t Status)
000000  b570              PUSH     {r4-r6,lr}
;;;971    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;972      if (Status > 1U)
000006  2c01              CMP      r4,#1
000008  d902              BLS      |L88.16|
;;;973      {
;;;974        return LSM6DSL_ERROR;
00000a  f04f30ff          MOV      r0,#0xffffffff
                  |L88.14|
;;;975      }
;;;976    
;;;977      if (lsm6dsl_int_notification_set(&(pObj->Ctx), (lsm6dsl_lir_t)Status) != LSM6DSL_OK)
;;;978      {
;;;979        return LSM6DSL_ERROR;
;;;980      }
;;;981    
;;;982      return LSM6DSL_OK;
;;;983    }
00000e  bd70              POP      {r4-r6,pc}
                  |L88.16|
000010  4621              MOV      r1,r4                 ;977
000012  f105001c          ADD      r0,r5,#0x1c           ;977
000016  f7fffffe          BL       lsm6dsl_int_notification_set
00001a  b110              CBZ      r0,|L88.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;979
000020  e7f5              B        |L88.14|
                  |L88.34|
000022  2000              MOVS     r0,#0                 ;982
000024  e7f3              B        |L88.14|
;;;984    
                          ENDP


                          AREA ||i.LSM6DSL_Write_Reg||, CODE, READONLY, ALIGN=1

                  LSM6DSL_Write_Reg PROC
;;;953     */
;;;954    int32_t LSM6DSL_Write_Reg(LSM6DSL_Object_t *pObj, uint8_t Reg, uint8_t Data)
000000  b537              PUSH     {r0-r2,r4,r5,lr}
;;;955    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;956      if (lsm6dsl_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM6DSL_OK)
000006  2301              MOVS     r3,#1
000008  aa02              ADD      r2,sp,#8
00000a  4629              MOV      r1,r5
00000c  f104001c          ADD      r0,r4,#0x1c
000010  f7fffffe          BL       lsm6dsl_write_reg
000014  b110              CBZ      r0,|L89.28|
;;;957      {
;;;958        return LSM6DSL_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L89.26|
;;;959      }
;;;960    
;;;961      return LSM6DSL_OK;
;;;962    }
00001a  bd3e              POP      {r1-r5,pc}
                  |L89.28|
00001c  2000              MOVS     r0,#0                 ;961
00001e  e7fc              B        |L89.26|
;;;963    
                          ENDP


                          AREA ||i.ReadRegWrap||, CODE, READONLY, ALIGN=1

                  ReadRegWrap PROC
;;;3191    */
;;;3192   static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3193   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;3194     LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
00000c  4625              MOV      r5,r4
;;;3195   
;;;3196     return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
00000e  7b28              LDRB     r0,[r5,#0xc]
000010  4643              MOV      r3,r8
000012  463a              MOV      r2,r7
000014  4631              MOV      r1,r6
000016  f8d5c014          LDR      r12,[r5,#0x14]
00001a  47e0              BLX      r12
;;;3197   }
00001c  e8bd81f0          POP      {r4-r8,pc}
;;;3198   
                          ENDP


                          AREA ||i.WriteRegWrap||, CODE, READONLY, ALIGN=1

                  WriteRegWrap PROC
;;;3206    */
;;;3207   static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;3208   {
000004  4604              MOV      r4,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;3209     LSM6DSL_Object_t *pObj = (LSM6DSL_Object_t *)Handle;
00000c  4625              MOV      r5,r4
;;;3210   
;;;3211     return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
00000e  7b28              LDRB     r0,[r5,#0xc]
000010  4643              MOV      r3,r8
000012  463a              MOV      r2,r7
000014  4631              MOV      r1,r6
000016  f8d5c010          LDR      r12,[r5,#0x10]
00001a  47e0              BLX      r12
;;;3212   }
00001c  e8bd81f0          POP      {r4-r8,pc}
;;;3213   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  LSM6DSL_COMMON_Driver
                          DCD      LSM6DSL_Init
                          DCD      LSM6DSL_DeInit
                          DCD      LSM6DSL_ReadID
                          DCD      LSM6DSL_GetCapabilities
                  LSM6DSL_ACC_Driver
                          DCD      LSM6DSL_ACC_Enable
                          DCD      LSM6DSL_ACC_Disable
                          DCD      LSM6DSL_ACC_GetSensitivity
                          DCD      LSM6DSL_ACC_GetOutputDataRate
                          DCD      LSM6DSL_ACC_SetOutputDataRate
                          DCD      LSM6DSL_ACC_GetFullScale
                          DCD      LSM6DSL_ACC_SetFullScale
                          DCD      LSM6DSL_ACC_GetAxes
                          DCD      LSM6DSL_ACC_GetAxesRaw
                  LSM6DSL_GYRO_Driver
                          DCD      LSM6DSL_GYRO_Enable
                          DCD      LSM6DSL_GYRO_Disable
                          DCD      LSM6DSL_GYRO_GetSensitivity
                          DCD      LSM6DSL_GYRO_GetOutputDataRate
                          DCD      LSM6DSL_GYRO_SetOutputDataRate
                          DCD      LSM6DSL_GYRO_GetFullScale
                          DCD      LSM6DSL_GYRO_SetFullScale
                          DCD      LSM6DSL_GYRO_GetAxes
                          DCD      LSM6DSL_GYRO_GetAxesRaw
