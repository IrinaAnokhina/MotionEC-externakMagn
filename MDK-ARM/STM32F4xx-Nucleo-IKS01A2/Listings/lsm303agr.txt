; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\lsm303agr.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\lsm303agr.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr\lsm303agr.c]
                          THUMB

                          AREA ||i.LSM303AGR_ACC_DeInit||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_DeInit PROC
;;;223     */
;;;224    int32_t LSM303AGR_ACC_DeInit(LSM303AGR_ACC_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;225    {
000002  4604              MOV      r4,r0
;;;226      /* Disable the component */
;;;227      if (LSM303AGR_ACC_Disable(pObj) != LSM303AGR_OK)
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       LSM303AGR_ACC_Disable
00000a  b110              CBZ      r0,|L1.18|
;;;228      {
;;;229        return LSM303AGR_ERROR;
00000c  f04f30ff          MOV      r0,#0xffffffff
                  |L1.16|
;;;230      }
;;;231    
;;;232      /* Reset output data rate. */
;;;233      pObj->acc_odr = LSM303AGR_XL_POWER_DOWN;
;;;234      pObj->is_initialized = 0;
;;;235    
;;;236      return LSM303AGR_OK;
;;;237    }
000010  bd10              POP      {r4,pc}
                  |L1.18|
000012  2000              MOVS     r0,#0                 ;233
000014  f884002a          STRB     r0,[r4,#0x2a]         ;233
000018  f8840028          STRB     r0,[r4,#0x28]         ;234
00001c  bf00              NOP                            ;236
00001e  e7f7              B        |L1.16|
;;;238    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_Disable||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_Disable PROC
;;;307     */
;;;308    int32_t LSM303AGR_ACC_Disable(LSM303AGR_ACC_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;309    {
000002  4604              MOV      r4,r0
;;;310      /* Check if the component is already disabled */
;;;311      if (pObj->acc_is_enabled == 0U)
000004  f8940029          LDRB     r0,[r4,#0x29]
000008  b908              CBNZ     r0,|L2.14|
;;;312      {
;;;313        return LSM303AGR_OK;
00000a  2000              MOVS     r0,#0
                  |L2.12|
;;;314      }
;;;315    
;;;316      /* Get current output data rate. */
;;;317      if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &pObj->acc_odr) != LSM303AGR_OK)
;;;318      {
;;;319        return LSM303AGR_ERROR;
;;;320      }
;;;321    
;;;322      /* Output data rate selection - power down. */
;;;323      if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
;;;324      {
;;;325        return LSM303AGR_ERROR;
;;;326      }
;;;327    
;;;328      pObj->acc_is_enabled = 0;
;;;329    
;;;330      return LSM303AGR_OK;
;;;331    }
00000c  bd10              POP      {r4,pc}
                  |L2.14|
00000e  f104012a          ADD      r1,r4,#0x2a           ;317
000012  f104001c          ADD      r0,r4,#0x1c           ;317
000016  f7fffffe          BL       lsm303agr_xl_data_rate_get
00001a  b110              CBZ      r0,|L2.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;319
000020  e7f4              B        |L2.12|
                  |L2.34|
000022  2100              MOVS     r1,#0                 ;323
000024  f104001c          ADD      r0,r4,#0x1c           ;323
000028  f7fffffe          BL       lsm303agr_xl_data_rate_set
00002c  b110              CBZ      r0,|L2.52|
00002e  f04f30ff          MOV      r0,#0xffffffff        ;325
000032  e7eb              B        |L2.12|
                  |L2.52|
000034  2000              MOVS     r0,#0                 ;328
000036  f8840029          STRB     r0,[r4,#0x29]         ;328
00003a  bf00              NOP                            ;330
00003c  e7e6              B        |L2.12|
;;;332    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_Enable||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_Enable PROC
;;;283     */
;;;284    int32_t LSM303AGR_ACC_Enable(LSM303AGR_ACC_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;285    {
000002  4604              MOV      r4,r0
;;;286      /* Check if the component is already enabled */
;;;287      if (pObj->acc_is_enabled == 1U)
000004  f8940029          LDRB     r0,[r4,#0x29]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L3.16|
;;;288      {
;;;289        return LSM303AGR_OK;
00000c  2000              MOVS     r0,#0
                  |L3.14|
;;;290      }
;;;291    
;;;292      /* Output data rate selection. */
;;;293      if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), pObj->acc_odr) != LSM303AGR_OK)
;;;294      {
;;;295        return LSM303AGR_ERROR;
;;;296      }
;;;297    
;;;298      pObj->acc_is_enabled = 1;
;;;299    
;;;300      return LSM303AGR_OK;
;;;301    }
00000e  bd10              POP      {r4,pc}
                  |L3.16|
000010  f894102a          LDRB     r1,[r4,#0x2a]         ;293
000014  f104001c          ADD      r0,r4,#0x1c           ;293
000018  f7fffffe          BL       lsm303agr_xl_data_rate_set
00001c  b110              CBZ      r0,|L3.36|
00001e  f04f30ff          MOV      r0,#0xffffffff        ;295
000022  e7f4              B        |L3.14|
                  |L3.36|
000024  2001              MOVS     r0,#1                 ;298
000026  f8840029          STRB     r0,[r4,#0x29]         ;298
00002a  2000              MOVS     r0,#0                 ;300
00002c  e7ef              B        |L3.14|
;;;302    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_GetAxes||, CODE, READONLY, ALIGN=2

                  LSM303AGR_ACC_GetAxes PROC
;;;652     */
;;;653    int32_t LSM303AGR_ACC_GetAxes(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Axes_t *Acceleration)
000000  b53e              PUSH     {r1-r5,lr}
;;;654    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;655      LSM303AGR_AxesRaw_t data_raw;
;;;656      float sensitivity = 0.0f;
000006  ed9f0a20          VLDR     s0,|L4.136|
00000a  ed8d0a00          VSTR     s0,[sp,#0]
;;;657    
;;;658      /* Read raw data values. */
;;;659      if (LSM303AGR_ACC_GetAxesRaw(pObj, &data_raw) != LSM303AGR_OK)
00000e  a901              ADD      r1,sp,#4
000010  4628              MOV      r0,r5
000012  f7fffffe          BL       LSM303AGR_ACC_GetAxesRaw
000016  b110              CBZ      r0,|L4.30|
;;;660      {
;;;661        return LSM303AGR_ERROR;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L4.28|
;;;662      }
;;;663    
;;;664      /* Get LSM303AGR actual sensitivity. */
;;;665      if (LSM303AGR_ACC_GetSensitivity(pObj, &sensitivity) != LSM303AGR_OK)
;;;666      {
;;;667        return LSM303AGR_ERROR;
;;;668      }
;;;669    
;;;670      /* Calculate the data. */
;;;671      Acceleration->x = (int32_t)((float)((float)data_raw.x * sensitivity));
;;;672      Acceleration->y = (int32_t)((float)((float)data_raw.y * sensitivity));
;;;673      Acceleration->z = (int32_t)((float)((float)data_raw.z * sensitivity));
;;;674    
;;;675      return LSM303AGR_OK;
;;;676    }
00001c  bd3e              POP      {r1-r5,pc}
                  |L4.30|
00001e  4669              MOV      r1,sp                 ;665
000020  4628              MOV      r0,r5                 ;665
000022  f7fffffe          BL       LSM303AGR_ACC_GetSensitivity
000026  b110              CBZ      r0,|L4.46|
000028  f04f30ff          MOV      r0,#0xffffffff        ;667
00002c  e7f6              B        |L4.28|
                  |L4.46|
00002e  f9bd0004          LDRSH    r0,[sp,#4]            ;671
000032  ee000a10          VMOV     s0,r0                 ;671
000036  eeb80ac0          VCVT.F32.S32 s0,s0                 ;671
00003a  eddd0a00          VLDR     s1,[sp,#0]            ;671
00003e  ee200a20          VMUL.F32 s0,s0,s1              ;671
000042  eebd0ac0          VCVT.S32.F32 s0,s0                 ;671
000046  ed840a00          VSTR     s0,[r4,#0]            ;671
00004a  f9bd0006          LDRSH    r0,[sp,#6]            ;672
00004e  ee000a10          VMOV     s0,r0                 ;672
000052  eeb80ac0          VCVT.F32.S32 s0,s0                 ;672
000056  eddd0a00          VLDR     s1,[sp,#0]            ;672
00005a  ee200a20          VMUL.F32 s0,s0,s1              ;672
00005e  eebd0ac0          VCVT.S32.F32 s0,s0                 ;672
000062  ed840a01          VSTR     s0,[r4,#4]            ;672
000066  f9bd0008          LDRSH    r0,[sp,#8]            ;673
00006a  ee000a10          VMOV     s0,r0                 ;673
00006e  eeb80ac0          VCVT.F32.S32 s0,s0                 ;673
000072  eddd0a00          VLDR     s1,[sp,#0]            ;673
000076  ee200a20          VMUL.F32 s0,s0,s1              ;673
00007a  eebd0ac0          VCVT.S32.F32 s0,s0                 ;673
00007e  ed840a02          VSTR     s0,[r4,#8]            ;673
000082  2000              MOVS     r0,#0                 ;675
000084  e7ca              B        |L4.28|
;;;677    
                          ENDP

000086  0000              DCW      0x0000
                  |L4.136|
000088  00000000          DCFS     0x00000000 ; 0

                          AREA ||i.LSM303AGR_ACC_GetAxesRaw||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_GetAxesRaw PROC
;;;594     */
;;;595    int32_t LSM303AGR_ACC_GetAxesRaw(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
000000  b5fe              PUSH     {r1-r7,lr}
;;;596    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;597      int16_t divisor = 1;
000006  2601              MOVS     r6,#1
;;;598      axis3bit16_t data_raw;
;;;599      int32_t ret = LSM303AGR_OK;
000008  2700              MOVS     r7,#0
;;;600      lsm303agr_op_md_a_t op_mode;
;;;601    
;;;602      /* Read operative mode from sensor. */
;;;603      if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
00000a  4669              MOV      r1,sp
00000c  f105001c          ADD      r0,r5,#0x1c
000010  f7fffffe          BL       lsm303agr_xl_operating_mode_get
000014  b108              CBZ      r0,|L5.26|
;;;604      {
;;;605        return LSM303AGR_ERROR;
000016  1eb0              SUBS     r0,r6,#2
                  |L5.24|
;;;606      }
;;;607    
;;;608      /* Store the sensitivity based on actual full scale. */
;;;609      switch (op_mode)
;;;610      {
;;;611        case LSM303AGR_HR_12bit:
;;;612          divisor = 16;
;;;613          break;
;;;614    
;;;615        case LSM303AGR_NM_10bit:
;;;616          divisor = 64;
;;;617          break;
;;;618    
;;;619        case LSM303AGR_LP_8bit:
;;;620          divisor = 256;
;;;621          break;
;;;622    
;;;623        default:
;;;624          ret = LSM303AGR_ERROR;
;;;625          break;
;;;626      }
;;;627    
;;;628      if (ret == LSM303AGR_ERROR)
;;;629      {
;;;630        return ret;
;;;631      }
;;;632    
;;;633      /* Read raw data values. */
;;;634      if (lsm303agr_acceleration_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
;;;635      {
;;;636        return LSM303AGR_ERROR;
;;;637      }
;;;638    
;;;639      /* Format the data. */
;;;640      Value->x = (data_raw.i16bit[0] / divisor);
;;;641      Value->y = (data_raw.i16bit[1] / divisor);
;;;642      Value->z = (data_raw.i16bit[2] / divisor);
;;;643    
;;;644      return ret;
;;;645    }
000018  bdfe              POP      {r1-r7,pc}
                  |L5.26|
00001a  f89d0000          LDRB     r0,[sp,#0]            ;609
00001e  b120              CBZ      r0,|L5.42|
000020  2801              CMP      r0,#1                 ;609
000022  d004              BEQ      |L5.46|
000024  2802              CMP      r0,#2                 ;609
000026  d107              BNE      |L5.56|
000028  e003              B        |L5.50|
                  |L5.42|
00002a  2610              MOVS     r6,#0x10              ;612
00002c  e007              B        |L5.62|
                  |L5.46|
00002e  2640              MOVS     r6,#0x40              ;616
000030  e005              B        |L5.62|
                  |L5.50|
000032  f44f7680          MOV      r6,#0x100             ;620
000036  e002              B        |L5.62|
                  |L5.56|
000038  f04f37ff          MOV      r7,#0xffffffff        ;624
00003c  bf00              NOP                            ;625
                  |L5.62|
00003e  bf00              NOP                            ;613
000040  1c78              ADDS     r0,r7,#1              ;628
000042  b908              CBNZ     r0,|L5.72|
000044  4638              MOV      r0,r7                 ;630
000046  e7e7              B        |L5.24|
                  |L5.72|
000048  a901              ADD      r1,sp,#4              ;634
00004a  f105001c          ADD      r0,r5,#0x1c           ;634
00004e  f7fffffe          BL       lsm303agr_acceleration_raw_get
000052  b110              CBZ      r0,|L5.90|
000054  f04f30ff          MOV      r0,#0xffffffff        ;636
000058  e7de              B        |L5.24|
                  |L5.90|
00005a  f9bd0004          LDRSH    r0,[sp,#4]            ;640
00005e  fb90f0f6          SDIV     r0,r0,r6              ;640
000062  b200              SXTH     r0,r0                 ;640
000064  8020              STRH     r0,[r4,#0]            ;640
000066  f9bd0006          LDRSH    r0,[sp,#6]            ;641
00006a  fb90f0f6          SDIV     r0,r0,r6              ;641
00006e  b200              SXTH     r0,r0                 ;641
000070  8060              STRH     r0,[r4,#2]            ;641
000072  f9bd0008          LDRSH    r0,[sp,#8]            ;642
000076  fb90f0f6          SDIV     r0,r0,r6              ;642
00007a  b200              SXTH     r0,r0                 ;642
00007c  80a0              STRH     r0,[r4,#4]            ;642
00007e  4638              MOV      r0,r7                 ;644
000080  e7ca              B        |L5.24|
;;;646    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_GetCapabilities||, CODE, READONLY, ALIGN=2

                  LSM303AGR_ACC_GetCapabilities PROC
;;;260     */
;;;261    int32_t LSM303AGR_ACC_GetCapabilities(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
000000  4602              MOV      r2,r0
;;;262    {
;;;263      /* Prevent unused argument(s) compilation warning */
;;;264      (void)(pObj);
;;;265    
;;;266      Capabilities->Acc          = 1;
000002  2001              MOVS     r0,#1
000004  7008              STRB     r0,[r1,#0]
;;;267      Capabilities->Gyro         = 0;
000006  2000              MOVS     r0,#0
000008  7048              STRB     r0,[r1,#1]
;;;268      Capabilities->Magneto      = 0;
00000a  7088              STRB     r0,[r1,#2]
;;;269      Capabilities->LowPower     = 0;
00000c  70c8              STRB     r0,[r1,#3]
;;;270      Capabilities->GyroMaxFS    = 0;
00000e  6048              STR      r0,[r1,#4]
;;;271      Capabilities->AccMaxFS     = 16;
000010  2010              MOVS     r0,#0x10
000012  6088              STR      r0,[r1,#8]
;;;272      Capabilities->MagMaxFS     = 0;
000014  2000              MOVS     r0,#0
000016  60c8              STR      r0,[r1,#0xc]
;;;273      Capabilities->GyroMaxOdr   = 0.0f;
000018  ed9f0a06          VLDR     s0,|L6.52|
00001c  ed810a04          VSTR     s0,[r1,#0x10]
;;;274      Capabilities->AccMaxOdr    = 400.0f;
000020  ed9f0a05          VLDR     s0,|L6.56|
000024  ed810a05          VSTR     s0,[r1,#0x14]
;;;275      Capabilities->MagMaxOdr    = 0.0f;
000028  ed9f0a02          VLDR     s0,|L6.52|
00002c  ed810a06          VSTR     s0,[r1,#0x18]
;;;276      return LSM303AGR_OK;
;;;277    }
000030  4770              BX       lr
;;;278    
                          ENDP

000032  0000              DCW      0x0000
                  |L6.52|
000034  00000000          DCFS     0x00000000 ; 0
                  |L6.56|
000038  43c80000          DCFS     0x43c80000 ; 400

                          AREA ||i.LSM303AGR_ACC_GetFullScale||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_GetFullScale PROC
;;;528     */
;;;529    int32_t LSM303AGR_ACC_GetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t *FullScale)
000000  b5f8              PUSH     {r3-r7,lr}
;;;530    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;531      int32_t ret = LSM303AGR_OK;
000006  2600              MOVS     r6,#0
;;;532      lsm303agr_fs_a_t fs_low_level;
;;;533    
;;;534      /* Read actual full scale selection from sensor. */
;;;535      if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fs_low_level) != LSM303AGR_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm303agr_xl_full_scale_get
000012  b108              CBZ      r0,|L7.24|
;;;536      {
;;;537        return LSM303AGR_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L7.22|
;;;538      }
;;;539    
;;;540      switch (fs_low_level)
;;;541      {
;;;542        case LSM303AGR_2g:
;;;543          *FullScale =  2;
;;;544          break;
;;;545    
;;;546        case LSM303AGR_4g:
;;;547          *FullScale =  4;
;;;548          break;
;;;549    
;;;550        case LSM303AGR_8g:
;;;551          *FullScale =  8;
;;;552          break;
;;;553    
;;;554        case LSM303AGR_16g:
;;;555          *FullScale = 16;
;;;556          break;
;;;557    
;;;558        default:
;;;559          ret = LSM303AGR_ERROR;
;;;560          break;
;;;561      }
;;;562    
;;;563      return ret;
;;;564    }
000016  bdf8              POP      {r3-r7,pc}
                  |L7.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;540
00001c  b130              CBZ      r0,|L7.44|
00001e  2801              CMP      r0,#1                 ;540
000020  d007              BEQ      |L7.50|
000022  2802              CMP      r0,#2                 ;540
000024  d008              BEQ      |L7.56|
000026  2803              CMP      r0,#3                 ;540
000028  d10c              BNE      |L7.68|
00002a  e008              B        |L7.62|
                  |L7.44|
00002c  2002              MOVS     r0,#2                 ;543
00002e  6020              STR      r0,[r4,#0]            ;543
000030  e00b              B        |L7.74|
                  |L7.50|
000032  2004              MOVS     r0,#4                 ;547
000034  6020              STR      r0,[r4,#0]            ;547
000036  e008              B        |L7.74|
                  |L7.56|
000038  2008              MOVS     r0,#8                 ;551
00003a  6020              STR      r0,[r4,#0]            ;551
00003c  e005              B        |L7.74|
                  |L7.62|
00003e  2010              MOVS     r0,#0x10              ;555
000040  6020              STR      r0,[r4,#0]            ;555
000042  e002              B        |L7.74|
                  |L7.68|
000044  f04f36ff          MOV      r6,#0xffffffff        ;559
000048  bf00              NOP                            ;560
                  |L7.74|
00004a  bf00              NOP                            ;544
00004c  4630              MOV      r0,r6                 ;563
00004e  e7e2              B        |L7.22|
;;;565    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_GetOutputDataRate||, CODE, READONLY, ALIGN=2

                  LSM303AGR_ACC_GetOutputDataRate PROC
;;;387     */
;;;388    int32_t LSM303AGR_ACC_GetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float *Odr)
000000  b57c              PUSH     {r2-r6,lr}
;;;389    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;390      int32_t ret = LSM303AGR_OK;
000006  2600              MOVS     r6,#0
;;;391      lsm303agr_op_md_a_t op_mode;
;;;392      lsm303agr_odr_a_t odr_low_level;
;;;393    
;;;394      /* Read operative mode from sensor. */
;;;395      if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
000008  a901              ADD      r1,sp,#4
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm303agr_xl_operating_mode_get
000012  b108              CBZ      r0,|L8.24|
;;;396      {
;;;397        return LSM303AGR_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L8.22|
;;;398      }
;;;399    
;;;400      /* Get current output data rate. */
;;;401      if (lsm303agr_xl_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
;;;402      {
;;;403        return LSM303AGR_ERROR;
;;;404      }
;;;405    
;;;406      if (op_mode == LSM303AGR_LP_8bit) /* LP mode */
;;;407      {
;;;408        switch (odr_low_level)
;;;409        {
;;;410          case LSM303AGR_XL_POWER_DOWN:
;;;411            *Odr = 0.0f;
;;;412            break;
;;;413    
;;;414          case LSM303AGR_XL_ODR_1Hz:
;;;415            *Odr = 1.0f;
;;;416            break;
;;;417    
;;;418          case LSM303AGR_XL_ODR_10Hz:
;;;419            *Odr = 10.0f;
;;;420            break;
;;;421    
;;;422          case LSM303AGR_XL_ODR_25Hz:
;;;423            *Odr = 25.0f;
;;;424            break;
;;;425    
;;;426          case LSM303AGR_XL_ODR_50Hz:
;;;427            *Odr = 50.0f;
;;;428            break;
;;;429    
;;;430          case LSM303AGR_XL_ODR_100Hz:
;;;431            *Odr = 100.0f;
;;;432            break;
;;;433    
;;;434          case LSM303AGR_XL_ODR_200Hz:
;;;435            *Odr = 200.0f;
;;;436            break;
;;;437    
;;;438          case LSM303AGR_XL_ODR_400Hz:
;;;439            *Odr = 400.0f;
;;;440            break;
;;;441    
;;;442          case LSM303AGR_XL_ODR_1kHz620_LP:
;;;443            *Odr = 1620.0f;
;;;444            break;
;;;445    
;;;446          case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
;;;447            *Odr = 5376.0f;
;;;448            break;
;;;449    
;;;450          default:
;;;451            ret = LSM303AGR_ERROR;
;;;452            break;
;;;453        }
;;;454      }
;;;455      else /* HR and NM modes */
;;;456      {
;;;457        switch (odr_low_level)
;;;458        {
;;;459          case LSM303AGR_XL_POWER_DOWN:
;;;460            *Odr = 0.0f;
;;;461            break;
;;;462    
;;;463          case LSM303AGR_XL_ODR_1Hz:
;;;464            *Odr = 1.0f;
;;;465            break;
;;;466    
;;;467          case LSM303AGR_XL_ODR_10Hz:
;;;468            *Odr = 10.0f;
;;;469            break;
;;;470    
;;;471          case LSM303AGR_XL_ODR_25Hz:
;;;472            *Odr = 25.0f;
;;;473            break;
;;;474    
;;;475          case LSM303AGR_XL_ODR_50Hz:
;;;476            *Odr = 50.0f;
;;;477            break;
;;;478    
;;;479          case LSM303AGR_XL_ODR_100Hz:
;;;480            *Odr = 100.0f;
;;;481            break;
;;;482    
;;;483          case LSM303AGR_XL_ODR_200Hz:
;;;484            *Odr = 200.0f;
;;;485            break;
;;;486    
;;;487          case LSM303AGR_XL_ODR_400Hz:
;;;488            *Odr = 400.0f;
;;;489            break;
;;;490    
;;;491          case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
;;;492            *Odr = 1344.0f;
;;;493            break;
;;;494    
;;;495          default:
;;;496            ret = LSM303AGR_ERROR;
;;;497            break;
;;;498        }
;;;499      }
;;;500    
;;;501      return ret;
;;;502    }
000016  bd7c              POP      {r2-r6,pc}
                  |L8.24|
000018  4669              MOV      r1,sp                 ;401
00001a  f105001c          ADD      r0,r5,#0x1c           ;401
00001e  f7fffffe          BL       lsm303agr_xl_data_rate_get
000022  b110              CBZ      r0,|L8.42|
000024  f04f30ff          MOV      r0,#0xffffffff        ;403
000028  e7f5              B        |L8.22|
                  |L8.42|
00002a  f89d0004          LDRB     r0,[sp,#4]            ;406
00002e  2802              CMP      r0,#2                 ;406
000030  d140              BNE      |L8.180|
000032  f89d0000          LDRB     r0,[sp,#0]            ;408
000036  280a              CMP      r0,#0xa               ;408
000038  d238              BCS      |L8.172|
00003a  e8dff000          TBB      [pc,r0]               ;408
00003e  050a              DCB      0x05,0x0a
000040  0f14191e          DCB      0x0f,0x14,0x19,0x1e
000044  23282d32          DCB      0x23,0x28,0x2d,0x32
000048  ed9f0a39          VLDR     s0,|L8.304|
00004c  ed840a00          VSTR     s0,[r4,#0]            ;411
000050  e02f              B        |L8.178|
000052  eeb70a00          VMOV.F32 s0,#1.00000000        ;415
000056  ed840a00          VSTR     s0,[r4,#0]            ;415
00005a  e02a              B        |L8.178|
00005c  eeb20a04          VMOV.F32 s0,#10.00000000       ;419
000060  ed840a00          VSTR     s0,[r4,#0]            ;419
000064  e025              B        |L8.178|
000066  eeb30a09          VMOV.F32 s0,#25.00000000       ;423
00006a  ed840a00          VSTR     s0,[r4,#0]            ;423
00006e  e020              B        |L8.178|
000070  ed9f0a30          VLDR     s0,|L8.308|
000074  ed840a00          VSTR     s0,[r4,#0]            ;427
000078  e01b              B        |L8.178|
00007a  ed9f0a2f          VLDR     s0,|L8.312|
00007e  ed840a00          VSTR     s0,[r4,#0]            ;431
000082  e016              B        |L8.178|
000084  ed9f0a2d          VLDR     s0,|L8.316|
000088  ed840a00          VSTR     s0,[r4,#0]            ;435
00008c  e011              B        |L8.178|
00008e  ed9f0a2c          VLDR     s0,|L8.320|
000092  ed840a00          VSTR     s0,[r4,#0]            ;439
000096  e00c              B        |L8.178|
000098  ed9f0a2a          VLDR     s0,|L8.324|
00009c  ed840a00          VSTR     s0,[r4,#0]            ;443
0000a0  e007              B        |L8.178|
0000a2  ed9f0a29          VLDR     s0,|L8.328|
0000a6  ed840a00          VSTR     s0,[r4,#0]            ;447
0000aa  e002              B        |L8.178|
                  |L8.172|
0000ac  f04f36ff          MOV      r6,#0xffffffff        ;451
0000b0  bf00              NOP                            ;452
                  |L8.178|
0000b2  e03b              B        |L8.300|
                  |L8.180|
0000b4  f89d0000          LDRB     r0,[sp,#0]            ;457
0000b8  280a              CMP      r0,#0xa               ;457
0000ba  d233              BCS      |L8.292|
0000bc  e8dff000          TBB      [pc,r0]               ;457
0000c0  050a0f14          DCB      0x05,0x0a,0x0f,0x14
0000c4  191e2328          DCB      0x19,0x1e,0x23,0x28
0000c8  322d              DCB      0x32,0x2d
0000ca  ed9f0a19          VLDR     s0,|L8.304|
0000ce  ed840a00          VSTR     s0,[r4,#0]            ;460
0000d2  e02a              B        |L8.298|
0000d4  eeb70a00          VMOV.F32 s0,#1.00000000        ;464
0000d8  ed840a00          VSTR     s0,[r4,#0]            ;464
0000dc  e025              B        |L8.298|
0000de  eeb20a04          VMOV.F32 s0,#10.00000000       ;468
0000e2  ed840a00          VSTR     s0,[r4,#0]            ;468
0000e6  e020              B        |L8.298|
0000e8  eeb30a09          VMOV.F32 s0,#25.00000000       ;472
0000ec  ed840a00          VSTR     s0,[r4,#0]            ;472
0000f0  e01b              B        |L8.298|
0000f2  ed9f0a10          VLDR     s0,|L8.308|
0000f6  ed840a00          VSTR     s0,[r4,#0]            ;476
0000fa  e016              B        |L8.298|
0000fc  ed9f0a0e          VLDR     s0,|L8.312|
000100  ed840a00          VSTR     s0,[r4,#0]            ;480
000104  e011              B        |L8.298|
000106  ed9f0a0d          VLDR     s0,|L8.316|
00010a  ed840a00          VSTR     s0,[r4,#0]            ;484
00010e  e00c              B        |L8.298|
000110  ed9f0a0b          VLDR     s0,|L8.320|
000114  ed840a00          VSTR     s0,[r4,#0]            ;488
000118  e007              B        |L8.298|
00011a  ed9f0a0c          VLDR     s0,|L8.332|
00011e  ed840a00          VSTR     s0,[r4,#0]            ;492
000122  e002              B        |L8.298|
                  |L8.292|
000124  f04f36ff          MOV      r6,#0xffffffff        ;496
000128  bf00              NOP                            ;497
                  |L8.298|
00012a  bf00              NOP                            ;461
                  |L8.300|
00012c  4630              MOV      r0,r6                 ;501
00012e  e772              B        |L8.22|
;;;503    
                          ENDP

                  |L8.304|
000130  00000000          DCFS     0x00000000 ; 0
                  |L8.308|
000134  42480000          DCFS     0x42480000 ; 50
                  |L8.312|
000138  42c80000          DCFS     0x42c80000 ; 100
                  |L8.316|
00013c  43480000          DCFS     0x43480000 ; 200
                  |L8.320|
000140  43c80000          DCFS     0x43c80000 ; 400
                  |L8.324|
000144  44ca8000          DCFS     0x44ca8000 ; 1620
                  |L8.328|
000148  45a80000          DCFS     0x45a80000 ; 5376
                  |L8.332|
00014c  44a80000          DCFS     0x44a80000 ; 1344

                          AREA ||i.LSM303AGR_ACC_GetSensitivity||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_GetSensitivity PROC
;;;338     */
;;;339    int32_t LSM303AGR_ACC_GetSensitivity(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
000000  b5f8              PUSH     {r3-r7,lr}
;;;340    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;341      int32_t ret = LSM303AGR_OK;
000006  2600              MOVS     r6,#0
;;;342      lsm303agr_op_md_a_t op_mode;
;;;343    
;;;344      /* Read operative mode from sensor. */
;;;345      if (lsm303agr_xl_operating_mode_get(&(pObj->Ctx), &op_mode) != LSM303AGR_OK)
000008  4669              MOV      r1,sp
00000a  f104001c          ADD      r0,r4,#0x1c
00000e  f7fffffe          BL       lsm303agr_xl_operating_mode_get
000012  b108              CBZ      r0,|L9.24|
;;;346      {
;;;347        return LSM303AGR_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L9.22|
;;;348      }
;;;349    
;;;350      /* Store the Sensitivity based on actual full scale. */
;;;351      switch (op_mode)
;;;352      {
;;;353        case LSM303AGR_HR_12bit:
;;;354          if (LSM303AGR_ACC_GetSensitivityHR(pObj, Sensitivity) != LSM303AGR_OK)
;;;355          {
;;;356            return LSM303AGR_ERROR;
;;;357          }
;;;358          break;
;;;359    
;;;360        case LSM303AGR_NM_10bit:
;;;361          if (LSM303AGR_ACC_GetSensitivityNM(pObj, Sensitivity) != LSM303AGR_OK)
;;;362          {
;;;363            return LSM303AGR_ERROR;
;;;364          }
;;;365          break;
;;;366    
;;;367        case LSM303AGR_LP_8bit:
;;;368          if (LSM303AGR_ACC_GetSensitivityLP(pObj, Sensitivity) != LSM303AGR_OK)
;;;369          {
;;;370            return LSM303AGR_ERROR;
;;;371          }
;;;372          break;
;;;373    
;;;374        default:
;;;375          ret = LSM303AGR_ERROR;
;;;376          break;
;;;377      }
;;;378    
;;;379      return ret;
;;;380    }
000016  bdf8              POP      {r3-r7,pc}
                  |L9.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;351
00001c  b120              CBZ      r0,|L9.40|
00001e  2801              CMP      r0,#1                 ;351
000020  d00b              BEQ      |L9.58|
000022  2802              CMP      r0,#2                 ;351
000024  d11b              BNE      |L9.94|
000026  e011              B        |L9.76|
                  |L9.40|
000028  4629              MOV      r1,r5                 ;354
00002a  4620              MOV      r0,r4                 ;354
00002c  f7fffffe          BL       LSM303AGR_ACC_GetSensitivityHR
000030  b110              CBZ      r0,|L9.56|
000032  f04f30ff          MOV      r0,#0xffffffff        ;356
000036  e7ee              B        |L9.22|
                  |L9.56|
000038  e014              B        |L9.100|
                  |L9.58|
00003a  4629              MOV      r1,r5                 ;361
00003c  4620              MOV      r0,r4                 ;361
00003e  f7fffffe          BL       LSM303AGR_ACC_GetSensitivityNM
000042  b110              CBZ      r0,|L9.74|
000044  f04f30ff          MOV      r0,#0xffffffff        ;363
000048  e7e5              B        |L9.22|
                  |L9.74|
00004a  e00b              B        |L9.100|
                  |L9.76|
00004c  4629              MOV      r1,r5                 ;368
00004e  4620              MOV      r0,r4                 ;368
000050  f7fffffe          BL       LSM303AGR_ACC_GetSensitivityLP
000054  b110              CBZ      r0,|L9.92|
000056  f04f30ff          MOV      r0,#0xffffffff        ;370
00005a  e7dc              B        |L9.22|
                  |L9.92|
00005c  e002              B        |L9.100|
                  |L9.94|
00005e  f04f36ff          MOV      r6,#0xffffffff        ;375
000062  bf00              NOP                            ;376
                  |L9.100|
000064  bf00              NOP                            ;358
000066  4630              MOV      r0,r6                 ;379
000068  e7d5              B        |L9.22|
;;;381    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_GetSensitivityHR||, CODE, READONLY, ALIGN=2

                  LSM303AGR_ACC_GetSensitivityHR PROC
;;;1180    */
;;;1181   static int32_t LSM303AGR_ACC_GetSensitivityHR(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1182   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1183     int32_t ret = LSM303AGR_OK;
000006  2600              MOVS     r6,#0
;;;1184     lsm303agr_fs_a_t fullscale;
;;;1185   
;;;1186     /* Read actual full scale selection from sensor. */
;;;1187     if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm303agr_xl_full_scale_get
000012  b108              CBZ      r0,|L10.24|
;;;1188     {
;;;1189       return LSM303AGR_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L10.22|
;;;1190     }
;;;1191   
;;;1192     /* Store the sensitivity based on actual full scale. */
;;;1193     switch (fullscale)
;;;1194     {
;;;1195       case LSM303AGR_2g:
;;;1196         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_HIGH_RESOLUTION_MODE;
;;;1197         break;
;;;1198   
;;;1199       case LSM303AGR_4g:
;;;1200         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_HIGH_RESOLUTION_MODE;
;;;1201         break;
;;;1202   
;;;1203       case LSM303AGR_8g:
;;;1204         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_HIGH_RESOLUTION_MODE;
;;;1205         break;
;;;1206   
;;;1207       case LSM303AGR_16g:
;;;1208         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_HIGH_RESOLUTION_MODE;
;;;1209         break;
;;;1210   
;;;1211       default:
;;;1212         ret = LSM303AGR_ERROR;
;;;1213         break;
;;;1214     }
;;;1215   
;;;1216     return ret;
;;;1217   }
000016  bdf8              POP      {r3-r7,pc}
                  |L10.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;1193
00001c  b130              CBZ      r0,|L10.44|
00001e  2801              CMP      r0,#1                 ;1193
000020  d009              BEQ      |L10.54|
000022  2802              CMP      r0,#2                 ;1193
000024  d00c              BEQ      |L10.64|
000026  2803              CMP      r0,#3                 ;1193
000028  d114              BNE      |L10.84|
00002a  e00e              B        |L10.74|
                  |L10.44|
00002c  ed9f0a0c          VLDR     s0,|L10.96|
000030  ed840a00          VSTR     s0,[r4,#0]            ;1196
000034  e011              B        |L10.90|
                  |L10.54|
000036  ed9f0a0b          VLDR     s0,|L10.100|
00003a  ed840a00          VSTR     s0,[r4,#0]            ;1200
00003e  e00c              B        |L10.90|
                  |L10.64|
000040  ed9f0a09          VLDR     s0,|L10.104|
000044  ed840a00          VSTR     s0,[r4,#0]            ;1204
000048  e007              B        |L10.90|
                  |L10.74|
00004a  ed9f0a08          VLDR     s0,|L10.108|
00004e  ed840a00          VSTR     s0,[r4,#0]            ;1208
000052  e002              B        |L10.90|
                  |L10.84|
000054  f04f36ff          MOV      r6,#0xffffffff        ;1212
000058  bf00              NOP                            ;1213
                  |L10.90|
00005a  bf00              NOP                            ;1197
00005c  4630              MOV      r0,r6                 ;1216
00005e  e7da              B        |L10.22|
;;;1218   
                          ENDP

                  |L10.96|
000060  3f7ae148          DCFS     0x3f7ae148 ; 0.98000001907348633
                  |L10.100|
000064  3ff9999a          DCFS     0x3ff9999a ; 1.9500000476837158
                  |L10.104|
000068  4079999a          DCFS     0x4079999a ; 3.9000000953674316
                  |L10.108|
00006c  413b851f          DCFS     0x413b851f ; 11.720000267028809

                          AREA ||i.LSM303AGR_ACC_GetSensitivityLP||, CODE, READONLY, ALIGN=2

                  LSM303AGR_ACC_GetSensitivityLP PROC
;;;1268    */
;;;1269   static int32_t LSM303AGR_ACC_GetSensitivityLP(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1270   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1271     int32_t ret = LSM303AGR_OK;
000006  2600              MOVS     r6,#0
;;;1272     lsm303agr_fs_a_t fullscale;
;;;1273   
;;;1274     /* Read actual full scale selection from sensor. */
;;;1275     if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm303agr_xl_full_scale_get
000012  b108              CBZ      r0,|L11.24|
;;;1276     {
;;;1277       return LSM303AGR_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L11.22|
;;;1278     }
;;;1279   
;;;1280     /* Store the sensitivity based on actual full scale. */
;;;1281     switch (fullscale)
;;;1282     {
;;;1283       case LSM303AGR_2g:
;;;1284         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_LOW_POWER_MODE;
;;;1285         break;
;;;1286   
;;;1287       case LSM303AGR_4g:
;;;1288         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_LOW_POWER_MODE;
;;;1289         break;
;;;1290   
;;;1291       case LSM303AGR_8g:
;;;1292         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_LOW_POWER_MODE;
;;;1293         break;
;;;1294   
;;;1295       case LSM303AGR_16g:
;;;1296         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_LOW_POWER_MODE;
;;;1297         break;
;;;1298   
;;;1299       default:
;;;1300         ret = LSM303AGR_ERROR;
;;;1301         break;
;;;1302     }
;;;1303   
;;;1304     return ret;
;;;1305   }
000016  bdf8              POP      {r3-r7,pc}
                  |L11.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;1281
00001c  b130              CBZ      r0,|L11.44|
00001e  2801              CMP      r0,#1                 ;1281
000020  d009              BEQ      |L11.54|
000022  2802              CMP      r0,#2                 ;1281
000024  d00c              BEQ      |L11.64|
000026  2803              CMP      r0,#3                 ;1281
000028  d114              BNE      |L11.84|
00002a  e00e              B        |L11.74|
                  |L11.44|
00002c  ed9f0a0c          VLDR     s0,|L11.96|
000030  ed840a00          VSTR     s0,[r4,#0]            ;1284
000034  e011              B        |L11.90|
                  |L11.54|
000036  ed9f0a0b          VLDR     s0,|L11.100|
00003a  ed840a00          VSTR     s0,[r4,#0]            ;1288
00003e  e00c              B        |L11.90|
                  |L11.64|
000040  ed9f0a09          VLDR     s0,|L11.104|
000044  ed840a00          VSTR     s0,[r4,#0]            ;1292
000048  e007              B        |L11.90|
                  |L11.74|
00004a  ed9f0a08          VLDR     s0,|L11.108|
00004e  ed840a00          VSTR     s0,[r4,#0]            ;1296
000052  e002              B        |L11.90|
                  |L11.84|
000054  f04f36ff          MOV      r6,#0xffffffff        ;1300
000058  bf00              NOP                            ;1301
                  |L11.90|
00005a  bf00              NOP                            ;1285
00005c  4630              MOV      r0,r6                 ;1304
00005e  e7da              B        |L11.22|
;;;1306   
                          ENDP

                  |L11.96|
000060  417a147b          DCFS     0x417a147b ; 15.630000114440918
                  |L11.100|
000064  41fa147b          DCFS     0x41fa147b ; 31.260000228881836
                  |L11.104|
000068  427a147b          DCFS     0x427a147b ; 62.520000457763672
                  |L11.108|
00006c  433b947b          DCFS     0x433b947b ; 187.58000183105469

                          AREA ||i.LSM303AGR_ACC_GetSensitivityNM||, CODE, READONLY, ALIGN=2

                  LSM303AGR_ACC_GetSensitivityNM PROC
;;;1224    */
;;;1225   static int32_t LSM303AGR_ACC_GetSensitivityNM(LSM303AGR_ACC_Object_t *pObj, float *Sensitivity)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1226   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1227     int32_t ret = LSM303AGR_OK;
000006  2600              MOVS     r6,#0
;;;1228     lsm303agr_fs_a_t fullscale;
;;;1229   
;;;1230     /* Read actual full scale selection from sensor. */
;;;1231     if (lsm303agr_xl_full_scale_get(&(pObj->Ctx), &fullscale) != LSM303AGR_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm303agr_xl_full_scale_get
000012  b108              CBZ      r0,|L12.24|
;;;1232     {
;;;1233       return LSM303AGR_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L12.22|
;;;1234     }
;;;1235   
;;;1236     /* Store the sensitivity based on actual full scale. */
;;;1237     switch (fullscale)
;;;1238     {
;;;1239       case LSM303AGR_2g:
;;;1240         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_2G_NORMAL_MODE;
;;;1241         break;
;;;1242   
;;;1243       case LSM303AGR_4g:
;;;1244         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_4G_NORMAL_MODE;
;;;1245         break;
;;;1246   
;;;1247       case LSM303AGR_8g:
;;;1248         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_8G_NORMAL_MODE;
;;;1249         break;
;;;1250   
;;;1251       case LSM303AGR_16g:
;;;1252         *Sensitivity = (float)LSM303AGR_ACC_SENSITIVITY_FS_16G_NORMAL_MODE;
;;;1253         break;
;;;1254   
;;;1255       default:
;;;1256         ret = LSM303AGR_ERROR;
;;;1257         break;
;;;1258     }
;;;1259   
;;;1260     return ret;
;;;1261   }
000016  bdf8              POP      {r3-r7,pc}
                  |L12.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;1237
00001c  b130              CBZ      r0,|L12.44|
00001e  2801              CMP      r0,#1                 ;1237
000020  d009              BEQ      |L12.54|
000022  2802              CMP      r0,#2                 ;1237
000024  d00c              BEQ      |L12.64|
000026  2803              CMP      r0,#3                 ;1237
000028  d114              BNE      |L12.84|
00002a  e00e              B        |L12.74|
                  |L12.44|
00002c  ed9f0a0c          VLDR     s0,|L12.96|
000030  ed840a00          VSTR     s0,[r4,#0]            ;1240
000034  e011              B        |L12.90|
                  |L12.54|
000036  ed9f0a0b          VLDR     s0,|L12.100|
00003a  ed840a00          VSTR     s0,[r4,#0]            ;1244
00003e  e00c              B        |L12.90|
                  |L12.64|
000040  ed9f0a09          VLDR     s0,|L12.104|
000044  ed840a00          VSTR     s0,[r4,#0]            ;1248
000048  e007              B        |L12.90|
                  |L12.74|
00004a  ed9f0a08          VLDR     s0,|L12.108|
00004e  ed840a00          VSTR     s0,[r4,#0]            ;1252
000052  e002              B        |L12.90|
                  |L12.84|
000054  f04f36ff          MOV      r6,#0xffffffff        ;1256
000058  bf00              NOP                            ;1257
                  |L12.90|
00005a  bf00              NOP                            ;1241
00005c  4630              MOV      r0,r6                 ;1260
00005e  e7da              B        |L12.22|
;;;1262   
                          ENDP

                  |L12.96|
000060  4079999a          DCFS     0x4079999a ; 3.9000000953674316
                  |L12.100|
000064  40fa3d71          DCFS     0x40fa3d71 ; 7.820000171661377
                  |L12.104|
000068  417a147b          DCFS     0x417a147b ; 15.630000114440918
                  |L12.108|
00006c  423b999a          DCFS     0x423b999a ; 46.900001525878906

                          AREA ||i.LSM303AGR_ACC_Get_DRDY_Status||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_Get_DRDY_Status PROC
;;;717     */
;;;718    int32_t LSM303AGR_ACC_Get_DRDY_Status(LSM303AGR_ACC_Object_t *pObj, uint8_t *Status)
000000  b570              PUSH     {r4-r6,lr}
;;;719    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;720      if (lsm303agr_xl_data_ready_get(&(pObj->Ctx), Status) != LSM303AGR_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm303agr_xl_data_ready_get
000010  b110              CBZ      r0,|L13.24|
;;;721      {
;;;722        return LSM303AGR_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L13.22|
;;;723      }
;;;724    
;;;725      return LSM303AGR_OK;
;;;726    }
000016  bd70              POP      {r4-r6,pc}
                  |L13.24|
000018  2000              MOVS     r0,#0                 ;725
00001a  e7fc              B        |L13.22|
;;;727    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_Get_Init_Status||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_Get_Init_Status PROC
;;;733     */
;;;734    int32_t LSM303AGR_ACC_Get_Init_Status(LSM303AGR_ACC_Object_t *pObj, uint8_t *Status)
000000  4602              MOV      r2,r0
;;;735    {
;;;736      if (pObj == NULL)
000002  b912              CBNZ     r2,|L14.10|
;;;737      {
;;;738        return LSM303AGR_ERROR;
000004  f04f30ff          MOV      r0,#0xffffffff
                  |L14.8|
;;;739      }
;;;740    
;;;741      *Status = pObj->is_initialized;
;;;742    
;;;743      return LSM303AGR_OK;
;;;744    }
000008  4770              BX       lr
                  |L14.10|
00000a  f8920028          LDRB     r0,[r2,#0x28]         ;741
00000e  7008              STRB     r0,[r1,#0]            ;741
000010  2000              MOVS     r0,#0                 ;743
000012  e7f9              B        |L14.8|
;;;745    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_Init||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_Init PROC
;;;184     */
;;;185    int32_t LSM303AGR_ACC_Init(LSM303AGR_ACC_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;186    {
000002  4604              MOV      r4,r0
;;;187      /* Enable BDU */
;;;188      if (lsm303agr_xl_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
000004  2101              MOVS     r1,#1
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm303agr_xl_block_data_update_set
00000e  b110              CBZ      r0,|L15.22|
;;;189      {
;;;190        return LSM303AGR_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L15.20|
;;;191      }
;;;192    
;;;193      /* FIFO mode selection */
;;;194      if (lsm303agr_xl_fifo_mode_set(&(pObj->Ctx), LSM303AGR_BYPASS_MODE) != LSM303AGR_OK)
;;;195      {
;;;196        return LSM303AGR_ERROR;
;;;197      }
;;;198    
;;;199      /* Select default output data rate. */
;;;200      pObj->acc_odr = LSM303AGR_XL_ODR_100Hz;
;;;201    
;;;202      /* Output data rate selection - power down. */
;;;203      if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), LSM303AGR_XL_POWER_DOWN) != LSM303AGR_OK)
;;;204      {
;;;205        return LSM303AGR_ERROR;
;;;206      }
;;;207    
;;;208      /* Full scale selection. */
;;;209      if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), LSM303AGR_2g) != LSM303AGR_OK)
;;;210      {
;;;211        return LSM303AGR_ERROR;
;;;212      }
;;;213    
;;;214      pObj->is_initialized = 1;
;;;215    
;;;216      return LSM303AGR_OK;
;;;217    }
000014  bd10              POP      {r4,pc}
                  |L15.22|
000016  2100              MOVS     r1,#0                 ;194
000018  f104001c          ADD      r0,r4,#0x1c           ;194
00001c  f7fffffe          BL       lsm303agr_xl_fifo_mode_set
000020  b110              CBZ      r0,|L15.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;196
000026  e7f5              B        |L15.20|
                  |L15.40|
000028  2005              MOVS     r0,#5                 ;200
00002a  f884002a          STRB     r0,[r4,#0x2a]         ;200
00002e  2100              MOVS     r1,#0                 ;203
000030  f104001c          ADD      r0,r4,#0x1c           ;203
000034  f7fffffe          BL       lsm303agr_xl_data_rate_set
000038  b110              CBZ      r0,|L15.64|
00003a  f04f30ff          MOV      r0,#0xffffffff        ;205
00003e  e7e9              B        |L15.20|
                  |L15.64|
000040  2100              MOVS     r1,#0                 ;209
000042  f104001c          ADD      r0,r4,#0x1c           ;209
000046  f7fffffe          BL       lsm303agr_xl_full_scale_set
00004a  b110              CBZ      r0,|L15.82|
00004c  f04f30ff          MOV      r0,#0xffffffff        ;211
000050  e7e0              B        |L15.20|
                  |L15.82|
000052  2001              MOVS     r0,#1                 ;214
000054  f8840028          STRB     r0,[r4,#0x28]         ;214
000058  2000              MOVS     r0,#0                 ;216
00005a  e7db              B        |L15.20|
;;;218    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_ReadID||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_ReadID PROC
;;;244     */
;;;245    int32_t LSM303AGR_ACC_ReadID(LSM303AGR_ACC_Object_t *pObj, uint8_t *Id)
000000  b570              PUSH     {r4-r6,lr}
;;;246    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;247      if (lsm303agr_xl_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm303agr_xl_device_id_get
000010  b110              CBZ      r0,|L16.24|
;;;248      {
;;;249        return LSM303AGR_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L16.22|
;;;250      }
;;;251    
;;;252      return LSM303AGR_OK;
;;;253    }
000016  bd70              POP      {r4-r6,pc}
                  |L16.24|
000018  2000              MOVS     r0,#0                 ;252
00001a  e7fc              B        |L16.22|
;;;254    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_Read_Reg||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_Read_Reg PROC
;;;684     */
;;;685    int32_t LSM303AGR_ACC_Read_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t *Data)
000000  b570              PUSH     {r4-r6,lr}
;;;686    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;687      if (lsm303agr_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM303AGR_OK)
000008  2301              MOVS     r3,#1
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  f104001c          ADD      r0,r4,#0x1c
000012  f7fffffe          BL       lsm303agr_read_reg
000016  b110              CBZ      r0,|L17.30|
;;;688      {
;;;689        return LSM303AGR_ERROR;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L17.28|
;;;690      }
;;;691    
;;;692      return LSM303AGR_OK;
;;;693    }
00001c  bd70              POP      {r4-r6,pc}
                  |L17.30|
00001e  2000              MOVS     r0,#0                 ;692
000020  e7fc              B        |L17.28|
;;;694    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_RegisterBusIO||, CODE, READONLY, ALIGN=2

                  LSM303AGR_ACC_RegisterBusIO PROC
;;;127     */
;;;128    int32_t LSM303AGR_ACC_RegisterBusIO(LSM303AGR_ACC_Object_t *pObj, LSM303AGR_IO_t *pIO)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;129    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;130      int32_t ret = LSM303AGR_OK;
000008  2600              MOVS     r6,#0
;;;131    
;;;132      if (pObj == NULL)
00000a  b90c              CBNZ     r4,|L18.16|
;;;133      {
;;;134        ret = LSM303AGR_ERROR;
00000c  1e76              SUBS     r6,r6,#1
00000e  e02e              B        |L18.110|
                  |L18.16|
;;;135      }
;;;136      else
;;;137      {
;;;138        pObj->IO.Init      = pIO->Init;
000010  6828              LDR      r0,[r5,#0]
000012  6020              STR      r0,[r4,#0]
;;;139        pObj->IO.DeInit    = pIO->DeInit;
000014  6868              LDR      r0,[r5,#4]
000016  6060              STR      r0,[r4,#4]
;;;140        pObj->IO.BusType   = pIO->BusType;
000018  68a8              LDR      r0,[r5,#8]
00001a  60a0              STR      r0,[r4,#8]
;;;141        pObj->IO.Address   = pIO->Address;
00001c  7b28              LDRB     r0,[r5,#0xc]
00001e  7320              STRB     r0,[r4,#0xc]
;;;142        pObj->IO.WriteReg  = pIO->WriteReg;
000020  6928              LDR      r0,[r5,#0x10]
000022  6120              STR      r0,[r4,#0x10]
;;;143        pObj->IO.ReadReg   = pIO->ReadReg;
000024  6968              LDR      r0,[r5,#0x14]
000026  6160              STR      r0,[r4,#0x14]
;;;144        pObj->IO.GetTick   = pIO->GetTick;
000028  69a8              LDR      r0,[r5,#0x18]
00002a  61a0              STR      r0,[r4,#0x18]
;;;145    
;;;146        pObj->Ctx.read_reg  = ReadAccRegWrap;
00002c  4911              LDR      r1,|L18.116|
00002e  6221              STR      r1,[r4,#0x20]
;;;147        pObj->Ctx.write_reg = WriteAccRegWrap;
000030  4811              LDR      r0,|L18.120|
000032  61e0              STR      r0,[r4,#0x1c]
;;;148        pObj->Ctx.handle    = pObj;
000034  6264              STR      r4,[r4,#0x24]
;;;149    
;;;150        if (pObj->IO.Init == NULL)
000036  6820              LDR      r0,[r4,#0]
000038  b910              CBNZ     r0,|L18.64|
;;;151        {
;;;152          ret = LSM303AGR_ERROR;
00003a  f04f36ff          MOV      r6,#0xffffffff
00003e  e016              B        |L18.110|
                  |L18.64|
;;;153        }
;;;154        else if (pObj->IO.Init() != LSM303AGR_OK)
000040  6820              LDR      r0,[r4,#0]
000042  4780              BLX      r0
000044  b110              CBZ      r0,|L18.76|
;;;155        {
;;;156          ret = LSM303AGR_ERROR;
000046  f04f36ff          MOV      r6,#0xffffffff
00004a  e010              B        |L18.110|
                  |L18.76|
;;;157        }
;;;158        else
;;;159        {
;;;160          if (pObj->IO.BusType == LSM303AGR_SPI_3WIRES_BUS) /* SPI 3-Wires */
00004c  68a0              LDR      r0,[r4,#8]
00004e  2801              CMP      r0,#1
000050  d10d              BNE      |L18.110|
;;;161          {
;;;162            /* Enable the SPI 3-Wires support only the first time */
;;;163            if (pObj->is_initialized == 0U)
000052  f8940028          LDRB     r0,[r4,#0x28]
000056  b950              CBNZ     r0,|L18.110|
;;;164            {
;;;165              /* Enable SPI 3-Wires on the component */
;;;166              uint8_t data = 0x01;
000058  2701              MOVS     r7,#1
;;;167    
;;;168              if (LSM303AGR_ACC_Write_Reg(pObj, LSM303AGR_CTRL_REG4_A, data) != LSM303AGR_OK)
00005a  463a              MOV      r2,r7
00005c  2123              MOVS     r1,#0x23
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       LSM303AGR_ACC_Write_Reg
000064  b110              CBZ      r0,|L18.108|
;;;169              {
;;;170                return LSM303AGR_ERROR;
000066  1eb8              SUBS     r0,r7,#2
                  |L18.104|
;;;171              }
;;;172            }
;;;173          }
;;;174        }
;;;175      }
;;;176    
;;;177      return ret;
;;;178    }
000068  e8bd81f0          POP      {r4-r8,pc}
                  |L18.108|
00006c  bf00              NOP                            ;172
                  |L18.110|
00006e  4630              MOV      r0,r6                 ;177
000070  e7fa              B        |L18.104|
;;;179    
                          ENDP

000072  0000              DCW      0x0000
                  |L18.116|
                          DCD      ReadAccRegWrap
                  |L18.120|
                          DCD      WriteAccRegWrap

                          AREA ||i.LSM303AGR_ACC_SetFullScale||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_SetFullScale PROC
;;;571     */
;;;572    int32_t LSM303AGR_ACC_SetFullScale(LSM303AGR_ACC_Object_t *pObj, int32_t FullScale)
000000  b570              PUSH     {r4-r6,lr}
;;;573    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;574      lsm303agr_fs_a_t new_fs;
;;;575    
;;;576      new_fs = (FullScale <= 2) ? LSM303AGR_2g
000006  2c02              CMP      r4,#2
000008  dc01              BGT      |L19.14|
00000a  2000              MOVS     r0,#0
00000c  e008              B        |L19.32|
                  |L19.14|
;;;577               : (FullScale <= 4) ? LSM303AGR_4g
00000e  2c04              CMP      r4,#4
000010  dc01              BGT      |L19.22|
000012  2001              MOVS     r0,#1
000014  e004              B        |L19.32|
                  |L19.22|
;;;578               : (FullScale <= 8) ? LSM303AGR_8g
000016  2c08              CMP      r4,#8
000018  dc01              BGT      |L19.30|
00001a  2002              MOVS     r0,#2
00001c  e000              B        |L19.32|
                  |L19.30|
;;;579               :                    LSM303AGR_16g;
00001e  2003              MOVS     r0,#3
                  |L19.32|
000020  4606              MOV      r6,r0
;;;580    
;;;581      if (lsm303agr_xl_full_scale_set(&(pObj->Ctx), new_fs) != LSM303AGR_OK)
000022  4631              MOV      r1,r6
000024  f105001c          ADD      r0,r5,#0x1c
000028  f7fffffe          BL       lsm303agr_xl_full_scale_set
00002c  b110              CBZ      r0,|L19.52|
;;;582      {
;;;583        return LSM303AGR_ERROR;
00002e  f04f30ff          MOV      r0,#0xffffffff
                  |L19.50|
;;;584      }
;;;585    
;;;586      return LSM303AGR_OK;
;;;587    }
000032  bd70              POP      {r4-r6,pc}
                  |L19.52|
000034  2000              MOVS     r0,#0                 ;586
000036  e7fc              B        |L19.50|
;;;588    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_SetOutputDataRate||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_SetOutputDataRate PROC
;;;509     */
;;;510    int32_t LSM303AGR_ACC_SetOutputDataRate(LSM303AGR_ACC_Object_t *pObj, float Odr)
000000  b510              PUSH     {r4,lr}
;;;511    {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;512      /* Check if the component is enabled */
;;;513      if (pObj->acc_is_enabled == 1U)
00000c  f8940029          LDRB     r0,[r4,#0x29]
000010  2801              CMP      r0,#1
000012  d107              BNE      |L20.36|
;;;514      {
;;;515        return LSM303AGR_ACC_SetOutputDataRate_When_Enabled(pObj, Odr);
000014  eeb00a48          VMOV.F32 s0,s16
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       LSM303AGR_ACC_SetOutputDataRate_When_Enabled
                  |L20.30|
;;;516      }
;;;517      else
;;;518      {
;;;519        return LSM303AGR_ACC_SetOutputDataRate_When_Disabled(pObj, Odr);
;;;520      }
;;;521    }
00001e  ecbd8b02          VPOP     {d8}
000022  bd10              POP      {r4,pc}
                  |L20.36|
000024  eeb00a48          VMOV.F32 s0,s16                ;519
000028  4620              MOV      r0,r4                 ;519
00002a  f7fffffe          BL       LSM303AGR_ACC_SetOutputDataRate_When_Disabled
00002e  e7f6              B        |L20.30|
;;;522    
                          ENDP


                          AREA ||i.LSM303AGR_ACC_SetOutputDataRate_When_Disabled||, CODE, READONLY, ALIGN=2

                  LSM303AGR_ACC_SetOutputDataRate_When_Disabled PROC
;;;1339    */
;;;1340   static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Disabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
000000  4601              MOV      r1,r0
;;;1341   {
;;;1342     pObj->acc_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
000002  eef70a00          VMOV.F32 s1,#1.00000000
000006  eeb40ae0          VCMPE.F32 s0,s1
00000a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000e  d801              BHI      |L21.20|
000010  2001              MOVS     r0,#1
000012  e02d              B        |L21.112|
                  |L21.20|
;;;1343                     : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
000014  eef20a04          VMOV.F32 s1,#10.00000000
000018  eeb40ae0          VCMPE.F32 s0,s1
00001c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000020  d801              BHI      |L21.38|
000022  2002              MOVS     r0,#2
000024  e024              B        |L21.112|
                  |L21.38|
;;;1344                     : (Odr <=   25.0f) ? LSM303AGR_XL_ODR_25Hz
000026  eef30a09          VMOV.F32 s1,#25.00000000
00002a  eeb40ae0          VCMPE.F32 s0,s1
00002e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000032  d801              BHI      |L21.56|
000034  2003              MOVS     r0,#3
000036  e01b              B        |L21.112|
                  |L21.56|
;;;1345                     : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
000038  eddf0a0f          VLDR     s1,|L21.120|
00003c  eeb40ae0          VCMPE.F32 s0,s1
000040  eef1fa10          VMRS     APSR_nzcv,FPSCR
000044  d801              BHI      |L21.74|
000046  2004              MOVS     r0,#4
000048  e012              B        |L21.112|
                  |L21.74|
;;;1346                     : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
00004a  eddf0a0c          VLDR     s1,|L21.124|
00004e  eeb40ae0          VCMPE.F32 s0,s1
000052  eef1fa10          VMRS     APSR_nzcv,FPSCR
000056  d801              BHI      |L21.92|
000058  2005              MOVS     r0,#5
00005a  e009              B        |L21.112|
                  |L21.92|
;;;1347                     : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
00005c  eddf0a08          VLDR     s1,|L21.128|
000060  eeb40ae0          VCMPE.F32 s0,s1
000064  eef1fa10          VMRS     APSR_nzcv,FPSCR
000068  d801              BHI      |L21.110|
00006a  2006              MOVS     r0,#6
00006c  e000              B        |L21.112|
                  |L21.110|
;;;1348                     :                    LSM303AGR_XL_ODR_400Hz;
00006e  2007              MOVS     r0,#7
                  |L21.112|
000070  f881002a          STRB     r0,[r1,#0x2a]
;;;1349   
;;;1350     return LSM303AGR_OK;
000074  2000              MOVS     r0,#0
;;;1351   }
000076  4770              BX       lr
;;;1352   
                          ENDP

                  |L21.120|
000078  42480000          DCFS     0x42480000 ; 50
                  |L21.124|
00007c  42c80000          DCFS     0x42c80000 ; 100
                  |L21.128|
000080  43480000          DCFS     0x43480000 ; 200

                          AREA ||i.LSM303AGR_ACC_SetOutputDataRate_When_Enabled||, CODE, READONLY, ALIGN=2

                  LSM303AGR_ACC_SetOutputDataRate_When_Enabled PROC
;;;1312    */
;;;1313   static int32_t LSM303AGR_ACC_SetOutputDataRate_When_Enabled(LSM303AGR_ACC_Object_t *pObj, float Odr)
000000  b570              PUSH     {r4-r6,lr}
;;;1314   {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;1315     lsm303agr_odr_a_t new_odr;
;;;1316   
;;;1317     new_odr = (Odr <=    1.0f) ? LSM303AGR_XL_ODR_1Hz
00000c  eeb70a00          VMOV.F32 s0,#1.00000000
000010  eeb48ac0          VCMPE.F32 s16,s0
000014  eef1fa10          VMRS     APSR_nzcv,FPSCR
000018  d801              BHI      |L22.30|
00001a  2001              MOVS     r0,#1
00001c  e02d              B        |L22.122|
                  |L22.30|
;;;1318               : (Odr <=   10.0f) ? LSM303AGR_XL_ODR_10Hz
00001e  eeb20a04          VMOV.F32 s0,#10.00000000
000022  eeb48ac0          VCMPE.F32 s16,s0
000026  eef1fa10          VMRS     APSR_nzcv,FPSCR
00002a  d801              BHI      |L22.48|
00002c  2002              MOVS     r0,#2
00002e  e024              B        |L22.122|
                  |L22.48|
;;;1319               : (Odr <=   25.0f) ? LSM303AGR_XL_ODR_25Hz
000030  eeb30a09          VMOV.F32 s0,#25.00000000
000034  eeb48ac0          VCMPE.F32 s16,s0
000038  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003c  d801              BHI      |L22.66|
00003e  2003              MOVS     r0,#3
000040  e01b              B        |L22.122|
                  |L22.66|
;;;1320               : (Odr <=   50.0f) ? LSM303AGR_XL_ODR_50Hz
000042  ed9f0a15          VLDR     s0,|L22.152|
000046  eeb48ac0          VCMPE.F32 s16,s0
00004a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00004e  d801              BHI      |L22.84|
000050  2004              MOVS     r0,#4
000052  e012              B        |L22.122|
                  |L22.84|
;;;1321               : (Odr <=  100.0f) ? LSM303AGR_XL_ODR_100Hz
000054  ed9f0a11          VLDR     s0,|L22.156|
000058  eeb48ac0          VCMPE.F32 s16,s0
00005c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000060  d801              BHI      |L22.102|
000062  2005              MOVS     r0,#5
000064  e009              B        |L22.122|
                  |L22.102|
;;;1322               : (Odr <=  200.0f) ? LSM303AGR_XL_ODR_200Hz
000066  ed9f0a0e          VLDR     s0,|L22.160|
00006a  eeb48ac0          VCMPE.F32 s16,s0
00006e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000072  d801              BHI      |L22.120|
000074  2006              MOVS     r0,#6
000076  e000              B        |L22.122|
                  |L22.120|
;;;1323               :                    LSM303AGR_XL_ODR_400Hz;
000078  2007              MOVS     r0,#7
                  |L22.122|
00007a  4605              MOV      r5,r0
;;;1324   
;;;1325     /* Output data rate selection. */
;;;1326     if (lsm303agr_xl_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
00007c  4629              MOV      r1,r5
00007e  f104001c          ADD      r0,r4,#0x1c
000082  f7fffffe          BL       lsm303agr_xl_data_rate_set
000086  b120              CBZ      r0,|L22.146|
;;;1327     {
;;;1328       return LSM303AGR_ERROR;
000088  f04f30ff          MOV      r0,#0xffffffff
                  |L22.140|
;;;1329     }
;;;1330   
;;;1331     return LSM303AGR_OK;
;;;1332   }
00008c  ecbd8b02          VPOP     {d8}
000090  bd70              POP      {r4-r6,pc}
                  |L22.146|
000092  2000              MOVS     r0,#0                 ;1331
000094  e7fa              B        |L22.140|
;;;1333   
                          ENDP

000096  0000              DCW      0x0000
                  |L22.152|
000098  42480000          DCFS     0x42480000 ; 50
                  |L22.156|
00009c  42c80000          DCFS     0x42c80000 ; 100
                  |L22.160|
0000a0  43480000          DCFS     0x43480000 ; 200

                          AREA ||i.LSM303AGR_ACC_Write_Reg||, CODE, READONLY, ALIGN=1

                  LSM303AGR_ACC_Write_Reg PROC
;;;701     */
;;;702    int32_t LSM303AGR_ACC_Write_Reg(LSM303AGR_ACC_Object_t *pObj, uint8_t Reg, uint8_t Data)
000000  b537              PUSH     {r0-r2,r4,r5,lr}
;;;703    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;704      if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
000006  2301              MOVS     r3,#1
000008  aa02              ADD      r2,sp,#8
00000a  4629              MOV      r1,r5
00000c  f104001c          ADD      r0,r4,#0x1c
000010  f7fffffe          BL       lsm303agr_write_reg
000014  b110              CBZ      r0,|L23.28|
;;;705      {
;;;706        return LSM303AGR_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L23.26|
;;;707      }
;;;708    
;;;709      return LSM303AGR_OK;
;;;710    }
00001a  bd3e              POP      {r1-r5,pc}
                  |L23.28|
00001c  2000              MOVS     r0,#0                 ;709
00001e  e7fc              B        |L23.26|
;;;711    
                          ENDP


                          AREA ||i.LSM303AGR_MAG_DeInit||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_DeInit PROC
;;;841     */
;;;842    int32_t LSM303AGR_MAG_DeInit(LSM303AGR_MAG_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;843    {
000002  4604              MOV      r4,r0
;;;844      /* Disable the component */
;;;845      if (LSM303AGR_MAG_Disable(pObj) != LSM303AGR_OK)
000004  4620              MOV      r0,r4
000006  f7fffffe          BL       LSM303AGR_MAG_Disable
00000a  b110              CBZ      r0,|L24.18|
;;;846      {
;;;847        return LSM303AGR_ERROR;
00000c  f04f30ff          MOV      r0,#0xffffffff
                  |L24.16|
;;;848      }
;;;849    
;;;850      pObj->is_initialized = 0;
;;;851    
;;;852      return LSM303AGR_OK;
;;;853    }
000010  bd10              POP      {r4,pc}
                  |L24.18|
000012  2000              MOVS     r0,#0                 ;850
000014  f8840028          STRB     r0,[r4,#0x28]         ;850
000018  bf00              NOP                            ;852
00001a  e7f9              B        |L24.16|
;;;854    
                          ENDP


                          AREA ||i.LSM303AGR_MAG_Disable||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_Disable PROC
;;;923     */
;;;924    int32_t LSM303AGR_MAG_Disable(LSM303AGR_MAG_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;925    {
000002  4604              MOV      r4,r0
;;;926      /* Check if the component is already disabled */
;;;927      if (pObj->mag_is_enabled == 0U)
000004  f8940029          LDRB     r0,[r4,#0x29]
000008  b908              CBNZ     r0,|L25.14|
;;;928      {
;;;929        return LSM303AGR_OK;
00000a  2000              MOVS     r0,#0
                  |L25.12|
;;;930      }
;;;931    
;;;932      /* Output data rate selection - power down. */
;;;933      if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
;;;934      {
;;;935        return LSM303AGR_ERROR;
;;;936      }
;;;937    
;;;938      pObj->mag_is_enabled = 0;
;;;939    
;;;940      return LSM303AGR_OK;
;;;941    }
00000c  bd10              POP      {r4,pc}
                  |L25.14|
00000e  2102              MOVS     r1,#2                 ;933
000010  f104001c          ADD      r0,r4,#0x1c           ;933
000014  f7fffffe          BL       lsm303agr_mag_operating_mode_set
000018  b110              CBZ      r0,|L25.32|
00001a  f04f30ff          MOV      r0,#0xffffffff        ;935
00001e  e7f5              B        |L25.12|
                  |L25.32|
000020  2000              MOVS     r0,#0                 ;938
000022  f8840029          STRB     r0,[r4,#0x29]         ;938
000026  bf00              NOP                            ;940
000028  e7f0              B        |L25.12|
;;;942    
                          ENDP


                          AREA ||i.LSM303AGR_MAG_Enable||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_Enable PROC
;;;899     */
;;;900    int32_t LSM303AGR_MAG_Enable(LSM303AGR_MAG_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;901    {
000002  4604              MOV      r4,r0
;;;902      /* Check if the component is already enabled */
;;;903      if (pObj->mag_is_enabled == 1U)
000004  f8940029          LDRB     r0,[r4,#0x29]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L26.16|
;;;904      {
;;;905        return LSM303AGR_OK;
00000c  2000              MOVS     r0,#0
                  |L26.14|
;;;906      }
;;;907    
;;;908      /* Output data rate selection. */
;;;909      if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_CONTINUOUS_MODE) != LSM303AGR_OK)
;;;910      {
;;;911        return LSM303AGR_ERROR;
;;;912      }
;;;913    
;;;914      pObj->mag_is_enabled = 1;
;;;915    
;;;916      return LSM303AGR_OK;
;;;917    }
00000e  bd10              POP      {r4,pc}
                  |L26.16|
000010  2100              MOVS     r1,#0                 ;909
000012  f104001c          ADD      r0,r4,#0x1c           ;909
000016  f7fffffe          BL       lsm303agr_mag_operating_mode_set
00001a  b110              CBZ      r0,|L26.34|
00001c  f04f30ff          MOV      r0,#0xffffffff        ;911
000020  e7f5              B        |L26.14|
                  |L26.34|
000022  2001              MOVS     r0,#1                 ;914
000024  f8840029          STRB     r0,[r4,#0x29]         ;914
000028  2000              MOVS     r0,#0                 ;916
00002a  e7f0              B        |L26.14|
;;;918    
                          ENDP


                          AREA ||i.LSM303AGR_MAG_GetAxes||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_GetAxes PROC
;;;1076    */
;;;1077   int32_t LSM303AGR_MAG_GetAxes(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Axes_t *MagneticField)
000000  b53e              PUSH     {r1-r5,lr}
;;;1078   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1079     axis3bit16_t data_raw;
;;;1080     float sensitivity;
;;;1081   
;;;1082     /* Read raw data values. */
;;;1083     if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
000006  a901              ADD      r1,sp,#4
000008  f105001c          ADD      r0,r5,#0x1c
00000c  f7fffffe          BL       lsm303agr_magnetic_raw_get
000010  b110              CBZ      r0,|L27.24|
;;;1084     {
;;;1085       return LSM303AGR_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L27.22|
;;;1086     }
;;;1087   
;;;1088     /* Get LSM303AGR actual sensitivity. */
;;;1089     (void)LSM303AGR_MAG_GetSensitivity(pObj, &sensitivity);
;;;1090   
;;;1091     /* Calculate the data. */
;;;1092     MagneticField->x = (int32_t)((float)((float)data_raw.i16bit[0] * sensitivity));
;;;1093     MagneticField->y = (int32_t)((float)((float)data_raw.i16bit[1] * sensitivity));
;;;1094     MagneticField->z = (int32_t)((float)((float)data_raw.i16bit[2] * sensitivity));
;;;1095   
;;;1096     return LSM303AGR_OK;
;;;1097   }
000016  bd3e              POP      {r1-r5,pc}
                  |L27.24|
000018  4669              MOV      r1,sp                 ;1089
00001a  4628              MOV      r0,r5                 ;1089
00001c  f7fffffe          BL       LSM303AGR_MAG_GetSensitivity
000020  f9bd0004          LDRSH    r0,[sp,#4]            ;1092
000024  ee000a10          VMOV     s0,r0                 ;1092
000028  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1092
00002c  eddd0a00          VLDR     s1,[sp,#0]            ;1092
000030  ee200a20          VMUL.F32 s0,s0,s1              ;1092
000034  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1092
000038  ed840a00          VSTR     s0,[r4,#0]            ;1092
00003c  f9bd0006          LDRSH    r0,[sp,#6]            ;1093
000040  ee000a10          VMOV     s0,r0                 ;1093
000044  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1093
000048  eddd0a00          VLDR     s1,[sp,#0]            ;1093
00004c  ee200a20          VMUL.F32 s0,s0,s1              ;1093
000050  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1093
000054  ed840a01          VSTR     s0,[r4,#4]            ;1093
000058  f9bd0008          LDRSH    r0,[sp,#8]            ;1094
00005c  ee000a10          VMOV     s0,r0                 ;1094
000060  eeb80ac0          VCVT.F32.S32 s0,s0                 ;1094
000064  eddd0a00          VLDR     s1,[sp,#0]            ;1094
000068  ee200a20          VMUL.F32 s0,s0,s1              ;1094
00006c  eebd0ac0          VCVT.S32.F32 s0,s0                 ;1094
000070  ed840a02          VSTR     s0,[r4,#8]            ;1094
000074  2000              MOVS     r0,#0                 ;1096
000076  e7ce              B        |L27.22|
;;;1098   
                          ENDP


                          AREA ||i.LSM303AGR_MAG_GetAxesRaw||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_GetAxesRaw PROC
;;;1052    */
;;;1053   int32_t LSM303AGR_MAG_GetAxesRaw(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_AxesRaw_t *Value)
000000  b57c              PUSH     {r2-r6,lr}
;;;1054   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1055     axis3bit16_t data_raw;
;;;1056   
;;;1057     /* Read raw data values. */
;;;1058     if (lsm303agr_magnetic_raw_get(&(pObj->Ctx), data_raw.u8bit) != LSM303AGR_OK)
000006  4669              MOV      r1,sp
000008  f105001c          ADD      r0,r5,#0x1c
00000c  f7fffffe          BL       lsm303agr_magnetic_raw_get
000010  b110              CBZ      r0,|L28.24|
;;;1059     {
;;;1060       return LSM303AGR_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L28.22|
;;;1061     }
;;;1062   
;;;1063     /* Format the data. */
;;;1064     Value->x = data_raw.i16bit[0];
;;;1065     Value->y = data_raw.i16bit[1];
;;;1066     Value->z = data_raw.i16bit[2];
;;;1067   
;;;1068     return LSM303AGR_OK;
;;;1069   }
000016  bd7c              POP      {r2-r6,pc}
                  |L28.24|
000018  f8bd0000          LDRH     r0,[sp,#0]            ;1064
00001c  8020              STRH     r0,[r4,#0]            ;1064
00001e  f8bd0002          LDRH     r0,[sp,#2]            ;1065
000022  8060              STRH     r0,[r4,#2]            ;1065
000024  f8bd0004          LDRH     r0,[sp,#4]            ;1066
000028  80a0              STRH     r0,[r4,#4]            ;1066
00002a  2000              MOVS     r0,#0                 ;1068
00002c  e7f3              B        |L28.22|
;;;1070   
                          ENDP


                          AREA ||i.LSM303AGR_MAG_GetCapabilities||, CODE, READONLY, ALIGN=2

                  LSM303AGR_MAG_GetCapabilities PROC
;;;876     */
;;;877    int32_t LSM303AGR_MAG_GetCapabilities(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_Capabilities_t *Capabilities)
000000  4602              MOV      r2,r0
;;;878    {
;;;879      /* Prevent unused argument(s) compilation warning */
;;;880      (void)(pObj);
;;;881    
;;;882      Capabilities->Acc          = 0;
000002  2000              MOVS     r0,#0
000004  7008              STRB     r0,[r1,#0]
;;;883      Capabilities->Gyro         = 0;
000006  7048              STRB     r0,[r1,#1]
;;;884      Capabilities->Magneto      = 1;
000008  2001              MOVS     r0,#1
00000a  7088              STRB     r0,[r1,#2]
;;;885      Capabilities->LowPower     = 0;
00000c  2000              MOVS     r0,#0
00000e  70c8              STRB     r0,[r1,#3]
;;;886      Capabilities->GyroMaxFS    = 0;
000010  6048              STR      r0,[r1,#4]
;;;887      Capabilities->AccMaxFS     = 0;
000012  6088              STR      r0,[r1,#8]
;;;888      Capabilities->MagMaxFS     = 50;
000014  2032              MOVS     r0,#0x32
000016  60c8              STR      r0,[r1,#0xc]
;;;889      Capabilities->GyroMaxOdr   = 0.0f;
000018  ed9f0a06          VLDR     s0,|L29.52|
00001c  ed810a04          VSTR     s0,[r1,#0x10]
;;;890      Capabilities->AccMaxOdr    = 0.0f;
000020  ed9f0a04          VLDR     s0,|L29.52|
000024  ed810a05          VSTR     s0,[r1,#0x14]
;;;891      Capabilities->MagMaxOdr    = 100.0f;
000028  ed9f0a03          VLDR     s0,|L29.56|
00002c  ed810a06          VSTR     s0,[r1,#0x18]
;;;892      return LSM303AGR_OK;
000030  2000              MOVS     r0,#0
;;;893    }
000032  4770              BX       lr
;;;894    
                          ENDP

                  |L29.52|
000034  00000000          DCFS     0x00000000 ; 0
                  |L29.56|
000038  42c80000          DCFS     0x42c80000 ; 100

                          AREA ||i.LSM303AGR_MAG_GetFullScale||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_GetFullScale PROC
;;;1028    */
;;;1029   int32_t LSM303AGR_MAG_GetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t *FullScale)
000000  4602              MOV      r2,r0
;;;1030   {
;;;1031     *FullScale = 50;
000002  2032              MOVS     r0,#0x32
000004  6008              STR      r0,[r1,#0]
;;;1032   
;;;1033     return LSM303AGR_OK;
000006  2000              MOVS     r0,#0
;;;1034   }
000008  4770              BX       lr
;;;1035   
                          ENDP


                          AREA ||i.LSM303AGR_MAG_GetOutputDataRate||, CODE, READONLY, ALIGN=2

                  LSM303AGR_MAG_GetOutputDataRate PROC
;;;961     */
;;;962    int32_t LSM303AGR_MAG_GetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float *Odr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;963    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;964      int32_t ret = LSM303AGR_OK;
000006  2600              MOVS     r6,#0
;;;965      lsm303agr_mg_odr_m_t odr_low_level;
;;;966    
;;;967      /* Get current output data rate. */
;;;968      if (lsm303agr_mag_data_rate_get(&(pObj->Ctx), &odr_low_level) != LSM303AGR_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lsm303agr_mag_data_rate_get
000012  b108              CBZ      r0,|L31.24|
;;;969      {
;;;970        return LSM303AGR_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L31.22|
;;;971      }
;;;972    
;;;973      switch (odr_low_level)
;;;974      {
;;;975        case LSM303AGR_MG_ODR_10Hz:
;;;976          *Odr = 10.0f;
;;;977          break;
;;;978    
;;;979        case LSM303AGR_MG_ODR_20Hz:
;;;980          *Odr = 20.0f;
;;;981          break;
;;;982    
;;;983        case LSM303AGR_MG_ODR_50Hz:
;;;984          *Odr = 50.0f;
;;;985          break;
;;;986    
;;;987        case LSM303AGR_MG_ODR_100Hz:
;;;988          *Odr = 100.0f;
;;;989          break;
;;;990    
;;;991        default:
;;;992          ret = LSM303AGR_ERROR;
;;;993          break;
;;;994      }
;;;995    
;;;996      return ret;
;;;997    }
000016  bdf8              POP      {r3-r7,pc}
                  |L31.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;973
00001c  b130              CBZ      r0,|L31.44|
00001e  2801              CMP      r0,#1                 ;973
000020  d009              BEQ      |L31.54|
000022  2802              CMP      r0,#2                 ;973
000024  d00c              BEQ      |L31.64|
000026  2803              CMP      r0,#3                 ;973
000028  d114              BNE      |L31.84|
00002a  e00e              B        |L31.74|
                  |L31.44|
00002c  eeb20a04          VMOV.F32 s0,#10.00000000       ;976
000030  ed840a00          VSTR     s0,[r4,#0]            ;976
000034  e011              B        |L31.90|
                  |L31.54|
000036  eeb30a04          VMOV.F32 s0,#20.00000000       ;980
00003a  ed840a00          VSTR     s0,[r4,#0]            ;980
00003e  e00c              B        |L31.90|
                  |L31.64|
000040  ed9f0a07          VLDR     s0,|L31.96|
000044  ed840a00          VSTR     s0,[r4,#0]            ;984
000048  e007              B        |L31.90|
                  |L31.74|
00004a  ed9f0a06          VLDR     s0,|L31.100|
00004e  ed840a00          VSTR     s0,[r4,#0]            ;988
000052  e002              B        |L31.90|
                  |L31.84|
000054  f04f36ff          MOV      r6,#0xffffffff        ;992
000058  bf00              NOP                            ;993
                  |L31.90|
00005a  bf00              NOP                            ;977
00005c  4630              MOV      r0,r6                 ;996
00005e  e7da              B        |L31.22|
;;;998    
                          ENDP

                  |L31.96|
000060  42480000          DCFS     0x42480000 ; 50
                  |L31.100|
000064  42c80000          DCFS     0x42c80000 ; 100

                          AREA ||i.LSM303AGR_MAG_GetSensitivity||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_GetSensitivity PROC
;;;948     */
;;;949    int32_t LSM303AGR_MAG_GetSensitivity(LSM303AGR_MAG_Object_t *pObj, float *Sensitivity)
000000  4602              MOV      r2,r0
;;;950    {
;;;951      *Sensitivity = LSM303AGR_MAG_SENSITIVITY_FS_50GAUSS;
000002  eeb70a08          VMOV.F32 s0,#1.50000000
000006  ed810a00          VSTR     s0,[r1,#0]
;;;952    
;;;953      return LSM303AGR_OK;
00000a  2000              MOVS     r0,#0
;;;954    }
00000c  4770              BX       lr
;;;955    
                          ENDP


                          AREA ||i.LSM303AGR_MAG_Get_DRDY_Status||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_Get_DRDY_Status PROC
;;;1138    */
;;;1139   int32_t LSM303AGR_MAG_Get_DRDY_Status(LSM303AGR_MAG_Object_t *pObj, uint8_t *Status)
000000  b570              PUSH     {r4-r6,lr}
;;;1140   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1141     if (lsm303agr_mag_data_ready_get(&(pObj->Ctx), Status) != LSM303AGR_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm303agr_mag_data_ready_get
000010  b110              CBZ      r0,|L33.24|
;;;1142     {
;;;1143       return LSM303AGR_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L33.22|
;;;1144     }
;;;1145   
;;;1146     return LSM303AGR_OK;
;;;1147   }
000016  bd70              POP      {r4-r6,pc}
                  |L33.24|
000018  2000              MOVS     r0,#0                 ;1146
00001a  e7fc              B        |L33.22|
;;;1148   
                          ENDP


                          AREA ||i.LSM303AGR_MAG_Get_Init_Status||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_Get_Init_Status PROC
;;;1154    */
;;;1155   int32_t LSM303AGR_MAG_Get_Init_Status(LSM303AGR_MAG_Object_t *pObj, uint8_t *Status)
000000  4602              MOV      r2,r0
;;;1156   {
;;;1157     if (pObj == NULL)
000002  b912              CBNZ     r2,|L34.10|
;;;1158     {
;;;1159       return LSM303AGR_ERROR;
000004  f04f30ff          MOV      r0,#0xffffffff
                  |L34.8|
;;;1160     }
;;;1161   
;;;1162     *Status = pObj->is_initialized;
;;;1163   
;;;1164     return LSM303AGR_OK;
;;;1165   }
000008  4770              BX       lr
                  |L34.10|
00000a  f8920028          LDRB     r0,[r2,#0x28]         ;1162
00000e  7008              STRB     r0,[r1,#0]            ;1162
000010  2000              MOVS     r0,#0                 ;1164
000012  e7f9              B        |L34.8|
;;;1166   
                          ENDP


                          AREA ||i.LSM303AGR_MAG_Init||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_Init PROC
;;;805     */
;;;806    int32_t LSM303AGR_MAG_Init(LSM303AGR_MAG_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;807    {
000002  4604              MOV      r4,r0
;;;808      /* Enable BDU */
;;;809      if (lsm303agr_mag_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LSM303AGR_OK)
000004  2101              MOVS     r1,#1
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lsm303agr_mag_block_data_update_set
00000e  b110              CBZ      r0,|L35.22|
;;;810      {
;;;811        return LSM303AGR_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L35.20|
;;;812      }
;;;813    
;;;814      /* Operating mode selection - power down */
;;;815      if (lsm303agr_mag_operating_mode_set(&(pObj->Ctx), LSM303AGR_POWER_DOWN) != LSM303AGR_OK)
;;;816      {
;;;817        return LSM303AGR_ERROR;
;;;818      }
;;;819    
;;;820      /* Output data rate selection */
;;;821      if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), LSM303AGR_MG_ODR_100Hz) != LSM303AGR_OK)
;;;822      {
;;;823        return LSM303AGR_ERROR;
;;;824      }
;;;825    
;;;826      /* Self Test disabled. */
;;;827      if (lsm303agr_mag_self_test_set(&(pObj->Ctx), PROPERTY_DISABLE) != LSM303AGR_OK)
;;;828      {
;;;829        return LSM303AGR_ERROR;
;;;830      }
;;;831    
;;;832      pObj->is_initialized = 1;
;;;833    
;;;834      return LSM303AGR_OK;
;;;835    }
000014  bd10              POP      {r4,pc}
                  |L35.22|
000016  2102              MOVS     r1,#2                 ;815
000018  f104001c          ADD      r0,r4,#0x1c           ;815
00001c  f7fffffe          BL       lsm303agr_mag_operating_mode_set
000020  b110              CBZ      r0,|L35.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;817
000026  e7f5              B        |L35.20|
                  |L35.40|
000028  2103              MOVS     r1,#3                 ;821
00002a  f104001c          ADD      r0,r4,#0x1c           ;821
00002e  f7fffffe          BL       lsm303agr_mag_data_rate_set
000032  b110              CBZ      r0,|L35.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;823
000038  e7ec              B        |L35.20|
                  |L35.58|
00003a  2100              MOVS     r1,#0                 ;827
00003c  f104001c          ADD      r0,r4,#0x1c           ;827
000040  f7fffffe          BL       lsm303agr_mag_self_test_set
000044  b110              CBZ      r0,|L35.76|
000046  f04f30ff          MOV      r0,#0xffffffff        ;829
00004a  e7e3              B        |L35.20|
                  |L35.76|
00004c  2001              MOVS     r0,#1                 ;832
00004e  f8840028          STRB     r0,[r4,#0x28]         ;832
000052  2000              MOVS     r0,#0                 ;834
000054  e7de              B        |L35.20|
;;;836    
                          ENDP


                          AREA ||i.LSM303AGR_MAG_ReadID||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_ReadID PROC
;;;860     */
;;;861    int32_t LSM303AGR_MAG_ReadID(LSM303AGR_MAG_Object_t *pObj, uint8_t *Id)
000000  b570              PUSH     {r4-r6,lr}
;;;862    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;863      if (lsm303agr_mag_device_id_get(&(pObj->Ctx), Id) != LSM303AGR_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lsm303agr_mag_device_id_get
000010  b110              CBZ      r0,|L36.24|
;;;864      {
;;;865        return LSM303AGR_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L36.22|
;;;866      }
;;;867    
;;;868      return LSM303AGR_OK;
;;;869    }
000016  bd70              POP      {r4-r6,pc}
                  |L36.24|
000018  2000              MOVS     r0,#0                 ;868
00001a  e7fc              B        |L36.22|
;;;870    
                          ENDP


                          AREA ||i.LSM303AGR_MAG_Read_Reg||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_Read_Reg PROC
;;;1105    */
;;;1106   int32_t LSM303AGR_MAG_Read_Reg(LSM303AGR_MAG_Object_t *pObj, uint8_t Reg, uint8_t *Data)
000000  b570              PUSH     {r4-r6,lr}
;;;1107   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;1108     if (lsm303agr_read_reg(&(pObj->Ctx), Reg, Data, 1) != LSM303AGR_OK)
000008  2301              MOVS     r3,#1
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  f104001c          ADD      r0,r4,#0x1c
000012  f7fffffe          BL       lsm303agr_read_reg
000016  b110              CBZ      r0,|L37.30|
;;;1109     {
;;;1110       return LSM303AGR_ERROR;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L37.28|
;;;1111     }
;;;1112   
;;;1113     return LSM303AGR_OK;
;;;1114   }
00001c  bd70              POP      {r4-r6,pc}
                  |L37.30|
00001e  2000              MOVS     r0,#0                 ;1113
000020  e7fc              B        |L37.28|
;;;1115   
                          ENDP


                          AREA ||i.LSM303AGR_MAG_RegisterBusIO||, CODE, READONLY, ALIGN=2

                  LSM303AGR_MAG_RegisterBusIO PROC
;;;750     */
;;;751    int32_t LSM303AGR_MAG_RegisterBusIO(LSM303AGR_MAG_Object_t *pObj, LSM303AGR_IO_t *pIO)
000000  b570              PUSH     {r4-r6,lr}
;;;752    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;753      int32_t ret = LSM303AGR_OK;
000006  2600              MOVS     r6,#0
;;;754    
;;;755      if (pObj == NULL)
000008  b90c              CBNZ     r4,|L38.14|
;;;756      {
;;;757        ret = LSM303AGR_ERROR;
00000a  1e76              SUBS     r6,r6,#1
00000c  e02b              B        |L38.102|
                  |L38.14|
;;;758      }
;;;759      else
;;;760      {
;;;761        pObj->IO.Init      = pIO->Init;
00000e  6828              LDR      r0,[r5,#0]
000010  6020              STR      r0,[r4,#0]
;;;762        pObj->IO.DeInit    = pIO->DeInit;
000012  6868              LDR      r0,[r5,#4]
000014  6060              STR      r0,[r4,#4]
;;;763        pObj->IO.BusType   = pIO->BusType;
000016  68a8              LDR      r0,[r5,#8]
000018  60a0              STR      r0,[r4,#8]
;;;764        pObj->IO.Address   = pIO->Address;
00001a  7b28              LDRB     r0,[r5,#0xc]
00001c  7320              STRB     r0,[r4,#0xc]
;;;765        pObj->IO.WriteReg  = pIO->WriteReg;
00001e  6928              LDR      r0,[r5,#0x10]
000020  6120              STR      r0,[r4,#0x10]
;;;766        pObj->IO.ReadReg   = pIO->ReadReg;
000022  6968              LDR      r0,[r5,#0x14]
000024  6160              STR      r0,[r4,#0x14]
;;;767        pObj->IO.GetTick   = pIO->GetTick;
000026  69a8              LDR      r0,[r5,#0x18]
000028  61a0              STR      r0,[r4,#0x18]
;;;768    
;;;769        pObj->Ctx.read_reg  = ReadMagRegWrap;
00002a  4910              LDR      r1,|L38.108|
00002c  6221              STR      r1,[r4,#0x20]
;;;770        pObj->Ctx.write_reg = WriteMagRegWrap;
00002e  4810              LDR      r0,|L38.112|
000030  61e0              STR      r0,[r4,#0x1c]
;;;771        pObj->Ctx.handle    = pObj;
000032  6264              STR      r4,[r4,#0x24]
;;;772    
;;;773        if (pObj->IO.Init == NULL)
000034  6820              LDR      r0,[r4,#0]
000036  b910              CBNZ     r0,|L38.62|
;;;774        {
;;;775          ret = LSM303AGR_ERROR;
000038  f04f36ff          MOV      r6,#0xffffffff
00003c  e013              B        |L38.102|
                  |L38.62|
;;;776        }
;;;777        else if (pObj->IO.Init() != LSM303AGR_OK)
00003e  6820              LDR      r0,[r4,#0]
000040  4780              BLX      r0
000042  b110              CBZ      r0,|L38.74|
;;;778        {
;;;779          ret = LSM303AGR_ERROR;
000044  f04f36ff          MOV      r6,#0xffffffff
000048  e00d              B        |L38.102|
                  |L38.74|
;;;780        }
;;;781        else
;;;782        {
;;;783          if (pObj->IO.BusType != LSM303AGR_I2C_BUS) /* If the bus type is not I2C */
00004a  68a0              LDR      r0,[r4,#8]
00004c  b158              CBZ      r0,|L38.102|
;;;784          {
;;;785            /* Disable I2C interface support only the first time */
;;;786            if (pObj->is_initialized == 0U)
00004e  f8940028          LDRB     r0,[r4,#0x28]
000052  b940              CBNZ     r0,|L38.102|
;;;787            {
;;;788              /* Disable I2C interface on the component */
;;;789              if (lsm303agr_mag_i2c_interface_set(&(pObj->Ctx), LSM303AGR_I2C_DISABLE) != LSM303AGR_OK)
000054  2101              MOVS     r1,#1
000056  f104001c          ADD      r0,r4,#0x1c
00005a  f7fffffe          BL       lsm303agr_mag_i2c_interface_set
00005e  b110              CBZ      r0,|L38.102|
;;;790              {
;;;791                return LSM303AGR_ERROR;
000060  f04f30ff          MOV      r0,#0xffffffff
                  |L38.100|
;;;792              }
;;;793            }
;;;794          }
;;;795        }
;;;796      }
;;;797    
;;;798      return ret;
;;;799    }
000064  bd70              POP      {r4-r6,pc}
                  |L38.102|
000066  4630              MOV      r0,r6                 ;798
000068  e7fc              B        |L38.100|
;;;800    
                          ENDP

00006a  0000              DCW      0x0000
                  |L38.108|
                          DCD      ReadMagRegWrap
                  |L38.112|
                          DCD      WriteMagRegWrap

                          AREA ||i.LSM303AGR_MAG_SetFullScale||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_SetFullScale PROC
;;;1041    */
;;;1042   int32_t LSM303AGR_MAG_SetFullScale(LSM303AGR_MAG_Object_t *pObj, int32_t FullScale)
000000  4602              MOV      r2,r0
;;;1043   {
;;;1044     return LSM303AGR_OK;
000002  2000              MOVS     r0,#0
;;;1045   }
000004  4770              BX       lr
;;;1046   
                          ENDP


                          AREA ||i.LSM303AGR_MAG_SetOutputDataRate||, CODE, READONLY, ALIGN=2

                  LSM303AGR_MAG_SetOutputDataRate PROC
;;;1004    */
;;;1005   int32_t LSM303AGR_MAG_SetOutputDataRate(LSM303AGR_MAG_Object_t *pObj, float Odr)
000000  b570              PUSH     {r4-r6,lr}
;;;1006   {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;1007     lsm303agr_mg_odr_m_t new_odr;
;;;1008   
;;;1009     new_odr = (Odr <= 10.000f) ? LSM303AGR_MG_ODR_10Hz
00000c  eeb20a04          VMOV.F32 s0,#10.00000000
000010  eeb48ac0          VCMPE.F32 s16,s0
000014  eef1fa10          VMRS     APSR_nzcv,FPSCR
000018  d801              BHI      |L40.30|
00001a  2000              MOVS     r0,#0
00001c  e012              B        |L40.68|
                  |L40.30|
;;;1010               : (Odr <= 20.000f) ? LSM303AGR_MG_ODR_20Hz
00001e  eeb30a04          VMOV.F32 s0,#20.00000000
000022  eeb48ac0          VCMPE.F32 s16,s0
000026  eef1fa10          VMRS     APSR_nzcv,FPSCR
00002a  d801              BHI      |L40.48|
00002c  2001              MOVS     r0,#1
00002e  e009              B        |L40.68|
                  |L40.48|
;;;1011               : (Odr <= 50.000f) ? LSM303AGR_MG_ODR_50Hz
000030  ed9f0a0b          VLDR     s0,|L40.96|
000034  eeb48ac0          VCMPE.F32 s16,s0
000038  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003c  d801              BHI      |L40.66|
00003e  2002              MOVS     r0,#2
000040  e000              B        |L40.68|
                  |L40.66|
;;;1012               :                    LSM303AGR_MG_ODR_100Hz;
000042  2003              MOVS     r0,#3
                  |L40.68|
000044  4605              MOV      r5,r0
;;;1013   
;;;1014     if (lsm303agr_mag_data_rate_set(&(pObj->Ctx), new_odr) != LSM303AGR_OK)
000046  4629              MOV      r1,r5
000048  f104001c          ADD      r0,r4,#0x1c
00004c  f7fffffe          BL       lsm303agr_mag_data_rate_set
000050  b120              CBZ      r0,|L40.92|
;;;1015     {
;;;1016       return LSM303AGR_ERROR;
000052  f04f30ff          MOV      r0,#0xffffffff
                  |L40.86|
;;;1017     }
;;;1018   
;;;1019     return LSM303AGR_OK;
;;;1020   }
000056  ecbd8b02          VPOP     {d8}
00005a  bd70              POP      {r4-r6,pc}
                  |L40.92|
00005c  2000              MOVS     r0,#0                 ;1019
00005e  e7fa              B        |L40.86|
;;;1021   
                          ENDP

                  |L40.96|
000060  42480000          DCFS     0x42480000 ; 50

                          AREA ||i.LSM303AGR_MAG_Write_Reg||, CODE, READONLY, ALIGN=1

                  LSM303AGR_MAG_Write_Reg PROC
;;;1122    */
;;;1123   int32_t LSM303AGR_MAG_Write_Reg(LSM303AGR_MAG_Object_t *pObj, uint8_t Reg, uint8_t Data)
000000  b537              PUSH     {r0-r2,r4,r5,lr}
;;;1124   {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;1125     if (lsm303agr_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LSM303AGR_OK)
000006  2301              MOVS     r3,#1
000008  aa02              ADD      r2,sp,#8
00000a  4629              MOV      r1,r5
00000c  f104001c          ADD      r0,r4,#0x1c
000010  f7fffffe          BL       lsm303agr_write_reg
000014  b110              CBZ      r0,|L41.28|
;;;1126     {
;;;1127       return LSM303AGR_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L41.26|
;;;1128     }
;;;1129   
;;;1130     return LSM303AGR_OK;
;;;1131   }
00001a  bd3e              POP      {r1-r5,pc}
                  |L41.28|
00001c  2000              MOVS     r0,#0                 ;1130
00001e  e7fc              B        |L41.26|
;;;1132   
                          ENDP


                          AREA ||i.ReadAccRegWrap||, CODE, READONLY, ALIGN=1

                  ReadAccRegWrap PROC
;;;1360    */
;;;1361   static int32_t ReadAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1362   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1363     LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
00000c  462c              MOV      r4,r5
;;;1364   
;;;1365     if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
00000e  68a0              LDR      r0,[r4,#8]
000010  b948              CBNZ     r0,|L42.38|
;;;1366     {
;;;1367       /* Enable Multi-byte read */
;;;1368       return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
000012  f0460180          ORR      r1,r6,#0x80
000016  7b20              LDRB     r0,[r4,#0xc]
000018  4643              MOV      r3,r8
00001a  463a              MOV      r2,r7
00001c  f8d4c014          LDR      r12,[r4,#0x14]
000020  47e0              BLX      r12
                  |L42.34|
;;;1369     }
;;;1370     else   /* SPI 3-Wires */
;;;1371     {
;;;1372       /* Enable Multi-byte read */
;;;1373       return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
;;;1374     }
;;;1375   }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L42.38|
000026  f0460140          ORR      r1,r6,#0x40           ;1373
00002a  7b20              LDRB     r0,[r4,#0xc]          ;1373
00002c  4643              MOV      r3,r8                 ;1373
00002e  463a              MOV      r2,r7                 ;1373
000030  f8d4c014          LDR      r12,[r4,#0x14]        ;1373
000034  47e0              BLX      r12                   ;1373
000036  e7f4              B        |L42.34|
;;;1376   
                          ENDP


                          AREA ||i.ReadMagRegWrap||, CODE, READONLY, ALIGN=1

                  ReadMagRegWrap PROC
;;;1408    */
;;;1409   static int32_t ReadMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1410   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1411     LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
00000c  462c              MOV      r4,r5
;;;1412   
;;;1413     if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
00000e  68a0              LDR      r0,[r4,#8]
000010  b948              CBNZ     r0,|L43.38|
;;;1414     {
;;;1415       /* Enable Multi-byte read */
;;;1416       return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
000012  f0460180          ORR      r1,r6,#0x80
000016  7b20              LDRB     r0,[r4,#0xc]
000018  4643              MOV      r3,r8
00001a  463a              MOV      r2,r7
00001c  f8d4c014          LDR      r12,[r4,#0x14]
000020  47e0              BLX      r12
                  |L43.34|
;;;1417     }
;;;1418     else   /* SPI 3-Wires */
;;;1419     {
;;;1420       /* Enable Multi-byte read */
;;;1421       return pObj->IO.ReadReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
;;;1422     }
;;;1423   }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L43.38|
000026  f0460140          ORR      r1,r6,#0x40           ;1421
00002a  7b20              LDRB     r0,[r4,#0xc]          ;1421
00002c  4643              MOV      r3,r8                 ;1421
00002e  463a              MOV      r2,r7                 ;1421
000030  f8d4c014          LDR      r12,[r4,#0x14]        ;1421
000034  47e0              BLX      r12                   ;1421
000036  e7f4              B        |L43.34|
;;;1424   
                          ENDP


                          AREA ||i.WriteAccRegWrap||, CODE, READONLY, ALIGN=1

                  WriteAccRegWrap PROC
;;;1384    */
;;;1385   static int32_t WriteAccRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1386   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1387     LSM303AGR_ACC_Object_t *pObj = (LSM303AGR_ACC_Object_t *)Handle;
00000c  462c              MOV      r4,r5
;;;1388   
;;;1389     if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
00000e  68a0              LDR      r0,[r4,#8]
000010  b948              CBNZ     r0,|L44.38|
;;;1390     {
;;;1391       /* Enable Multi-byte write */
;;;1392       return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
000012  f0460180          ORR      r1,r6,#0x80
000016  7b20              LDRB     r0,[r4,#0xc]
000018  4643              MOV      r3,r8
00001a  463a              MOV      r2,r7
00001c  f8d4c010          LDR      r12,[r4,#0x10]
000020  47e0              BLX      r12
                  |L44.34|
;;;1393     }
;;;1394     else   /* SPI 3-Wires */
;;;1395     {
;;;1396       /* Enable Multi-byte write */
;;;1397       return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
;;;1398     }
;;;1399   }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L44.38|
000026  f0460140          ORR      r1,r6,#0x40           ;1397
00002a  7b20              LDRB     r0,[r4,#0xc]          ;1397
00002c  4643              MOV      r3,r8                 ;1397
00002e  463a              MOV      r2,r7                 ;1397
000030  f8d4c010          LDR      r12,[r4,#0x10]        ;1397
000034  47e0              BLX      r12                   ;1397
000036  e7f4              B        |L44.34|
;;;1400   
                          ENDP


                          AREA ||i.WriteMagRegWrap||, CODE, READONLY, ALIGN=1

                  WriteMagRegWrap PROC
;;;1432    */
;;;1433   static int32_t WriteMagRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1434   {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
00000a  4698              MOV      r8,r3
;;;1435     LSM303AGR_MAG_Object_t *pObj = (LSM303AGR_MAG_Object_t *)Handle;
00000c  462c              MOV      r4,r5
;;;1436   
;;;1437     if (pObj->IO.BusType == LSM303AGR_I2C_BUS) /* I2C */
00000e  68a0              LDR      r0,[r4,#8]
000010  b948              CBNZ     r0,|L45.38|
;;;1438     {
;;;1439       /* Enable Multi-byte write */
;;;1440       return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x80U), pData, Length);
000012  f0460180          ORR      r1,r6,#0x80
000016  7b20              LDRB     r0,[r4,#0xc]
000018  4643              MOV      r3,r8
00001a  463a              MOV      r2,r7
00001c  f8d4c010          LDR      r12,[r4,#0x10]
000020  47e0              BLX      r12
                  |L45.34|
;;;1441     }
;;;1442     else   /* SPI 3-Wires */
;;;1443     {
;;;1444       /* Enable Multi-byte write */
;;;1445       return pObj->IO.WriteReg(pObj->IO.Address, (Reg | 0x40U), pData, Length);
;;;1446     }
;;;1447   }
000022  e8bd81f0          POP      {r4-r8,pc}
                  |L45.38|
000026  f0460140          ORR      r1,r6,#0x40           ;1445
00002a  7b20              LDRB     r0,[r4,#0xc]          ;1445
00002c  4643              MOV      r3,r8                 ;1445
00002e  463a              MOV      r2,r7                 ;1445
000030  f8d4c010          LDR      r12,[r4,#0x10]        ;1445
000034  47e0              BLX      r12                   ;1445
000036  e7f4              B        |L45.34|
;;;1448   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  LSM303AGR_ACC_COMMON_Driver
                          DCD      LSM303AGR_ACC_Init
                          DCD      LSM303AGR_ACC_DeInit
                          DCD      LSM303AGR_ACC_ReadID
                          DCD      LSM303AGR_ACC_GetCapabilities
                  LSM303AGR_ACC_Driver
                          DCD      LSM303AGR_ACC_Enable
                          DCD      LSM303AGR_ACC_Disable
                          DCD      LSM303AGR_ACC_GetSensitivity
                          DCD      LSM303AGR_ACC_GetOutputDataRate
                          DCD      LSM303AGR_ACC_SetOutputDataRate
                          DCD      LSM303AGR_ACC_GetFullScale
                          DCD      LSM303AGR_ACC_SetFullScale
                          DCD      LSM303AGR_ACC_GetAxes
                          DCD      LSM303AGR_ACC_GetAxesRaw
                  LSM303AGR_MAG_COMMON_Driver
                          DCD      LSM303AGR_MAG_Init
                          DCD      LSM303AGR_MAG_DeInit
                          DCD      LSM303AGR_MAG_ReadID
                          DCD      LSM303AGR_MAG_GetCapabilities
                  LSM303AGR_MAG_Driver
                          DCD      LSM303AGR_MAG_Enable
                          DCD      LSM303AGR_MAG_Disable
                          DCD      LSM303AGR_MAG_GetSensitivity
                          DCD      LSM303AGR_MAG_GetOutputDataRate
                          DCD      LSM303AGR_MAG_SetOutputDataRate
                          DCD      LSM303AGR_MAG_GetFullScale
                          DCD      LSM303AGR_MAG_SetFullScale
                          DCD      LSM303AGR_MAG_GetAxes
                          DCD      LSM303AGR_MAG_GetAxesRaw
