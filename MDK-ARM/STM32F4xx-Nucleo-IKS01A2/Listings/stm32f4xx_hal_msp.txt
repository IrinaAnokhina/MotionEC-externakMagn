; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\stm32f4xx_hal_msp.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\stm32f4xx_hal_msp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\Src\stm32f4xx_hal_msp.c]
                          THUMB

                          AREA ||i.HAL_CRC_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_CRC_MspDeInit PROC
;;;205     */
;;;206    void HAL_CRC_MspDeInit(CRC_HandleTypeDef *hcrc)
000000  4a05              LDR      r2,|L1.24|
;;;207    {
;;;208      if (hcrc->Instance == CRC)
000002  6801              LDR      r1,[r0,#0]
000004  4291              CMP      r1,r2
000006  d105              BNE      |L1.20|
;;;209      {
;;;210        /* Peripheral clock disable */
;;;211        __HAL_RCC_CRC_CLK_DISABLE();
000008  4904              LDR      r1,|L1.28|
00000a  6809              LDR      r1,[r1,#0]
00000c  f4215180          BIC      r1,r1,#0x1000
000010  4a02              LDR      r2,|L1.28|
000012  6011              STR      r1,[r2,#0]
                  |L1.20|
;;;212      }
;;;213    }
000014  4770              BX       lr
;;;214    
                          ENDP

000016  0000              DCW      0x0000
                  |L1.24|
                          DCD      0x40023000
                  |L1.28|
                          DCD      0x40023830

                          AREA ||i.HAL_CRC_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_CRC_MspInit PROC
;;;189     */
;;;190    void HAL_CRC_MspInit(CRC_HandleTypeDef *hcrc)
000000  b508              PUSH     {r3,lr}
;;;191    {
;;;192      if (hcrc->Instance == CRC)
000002  4a0a              LDR      r2,|L2.44|
000004  6801              LDR      r1,[r0,#0]
000006  4291              CMP      r1,r2
000008  d10f              BNE      |L2.42|
;;;193      {
;;;194        /* Peripheral clock enable */
;;;195        __HAL_RCC_CRC_CLK_ENABLE();
00000a  bf00              NOP      
00000c  2100              MOVS     r1,#0
00000e  9100              STR      r1,[sp,#0]
000010  4907              LDR      r1,|L2.48|
000012  6809              LDR      r1,[r1,#0]
000014  f4415180          ORR      r1,r1,#0x1000
000018  4a05              LDR      r2,|L2.48|
00001a  6011              STR      r1,[r2,#0]
00001c  4611              MOV      r1,r2
00001e  6809              LDR      r1,[r1,#0]
000020  f4015180          AND      r1,r1,#0x1000
000024  9100              STR      r1,[sp,#0]
000026  bf00              NOP      
000028  bf00              NOP      
                  |L2.42|
;;;196      }
;;;197    }
00002a  bd08              POP      {r3,pc}
;;;198    
                          ENDP

                  |L2.44|
                          DCD      0x40023000
                  |L2.48|
                          DCD      0x40023830

                          AREA ||i.HAL_I2C_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_I2C_MspDeInit PROC
;;;288     */
;;;289    void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
000000  b510              PUSH     {r4,lr}
;;;290    {
000002  4604              MOV      r4,r0
;;;291      /* Disable I2C clock */
;;;292      __HAL_RCC_I2C1_CLK_DISABLE();
000004  480c              LDR      r0,|L3.56|
000006  6800              LDR      r0,[r0,#0]
000008  f4201000          BIC      r0,r0,#0x200000
00000c  490a              LDR      r1,|L3.56|
00000e  6008              STR      r0,[r1,#0]
;;;293    
;;;294      /* DeInitialize peripheral GPIOs */
;;;295      HAL_GPIO_DeInit(GPIOB, GPIO_PIN_8 | GPIO_PIN_9);
000010  f44f7140          MOV      r1,#0x300
000014  4809              LDR      r0,|L3.60|
000016  f7fffffe          BL       HAL_GPIO_DeInit
;;;296    	 if(hi2c->Instance==I2C3)
00001a  4909              LDR      r1,|L3.64|
00001c  6820              LDR      r0,[r4,#0]
00001e  4288              CMP      r0,r1
000020  d108              BNE      |L3.52|
;;;297      {
;;;298      /* USER CODE BEGIN I2C2_MspDeInit 0 */
;;;299    
;;;300      /* USER CODE END I2C2_MspDeInit 0 */
;;;301        /* Peripheral clock disable */
;;;302          /**I2C3 GPIO Configuration    
;;;303        PC9     ------> I2C3_SDA
;;;304        PA8     ------> I2C3_SCL 
;;;305        */
;;;306        HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
000022  1541              ASRS     r1,r0,#21
000024  4807              LDR      r0,|L3.68|
000026  f7fffffe          BL       HAL_GPIO_DeInit
;;;307    
;;;308        HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
00002a  f44f7180          MOV      r1,#0x100
00002e  4806              LDR      r0,|L3.72|
000030  f7fffffe          BL       HAL_GPIO_DeInit
                  |L3.52|
;;;309    
;;;310      /* USER CODE BEGIN I2C2_MspDeInit 1 */
;;;311    
;;;312      /* USER CODE END I2C2_MspDeInit 1 */
;;;313      }
;;;314    }
000034  bd10              POP      {r4,pc}
;;;315    
                          ENDP

000036  0000              DCW      0x0000
                  |L3.56|
                          DCD      0x40023840
                  |L3.60|
                          DCD      0x40020400
                  |L3.64|
                          DCD      0x40005c00
                  |L3.68|
                          DCD      0x40020800
                  |L3.72|
                          DCD      0x40020000

                          AREA ||i.HAL_I2C_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_I2C_MspInit PROC
;;;219     */
;;;220    void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
000000  b510              PUSH     {r4,lr}
;;;221    {
000002  b08c              SUB      sp,sp,#0x30
000004  4604              MOV      r4,r0
;;;222      GPIO_InitTypeDef  gpio_init;
;;;223    	 GPIO_InitTypeDef GPIO_InitStruct = {0};
000006  2114              MOVS     r1,#0x14
000008  a802              ADD      r0,sp,#8
00000a  f7fffffe          BL       __aeabi_memclr4
;;;224     if(hi2c->Instance==I2C3)
00000e  4942              LDR      r1,|L4.280|
000010  6820              LDR      r0,[r4,#0]
000012  4288              CMP      r0,r1
000014  d14d              BNE      |L4.178|
;;;225      {
;;;226      /* USER CODE BEGIN I2C2_MspInit 0 */
;;;227    
;;;228      /* USER CODE END I2C2_MspInit 0 */
;;;229      
;;;230    		
;;;231    		  __HAL_RCC_GPIOC_CLK_ENABLE();
000016  bf00              NOP      
000018  2000              MOVS     r0,#0
00001a  9001              STR      r0,[sp,#4]
00001c  483f              LDR      r0,|L4.284|
00001e  6800              LDR      r0,[r0,#0]
000020  f0400004          ORR      r0,r0,#4
000024  493d              LDR      r1,|L4.284|
000026  6008              STR      r0,[r1,#0]
000028  4608              MOV      r0,r1
00002a  6800              LDR      r0,[r0,#0]
00002c  f0000004          AND      r0,r0,#4
000030  9001              STR      r0,[sp,#4]
000032  bf00              NOP      
000034  bf00              NOP      
;;;232        __HAL_RCC_GPIOA_CLK_ENABLE();
000036  bf00              NOP      
000038  2000              MOVS     r0,#0
00003a  9001              STR      r0,[sp,#4]
00003c  4608              MOV      r0,r1
00003e  6800              LDR      r0,[r0,#0]
000040  f0400001          ORR      r0,r0,#1
000044  6008              STR      r0,[r1,#0]
000046  4608              MOV      r0,r1
000048  6800              LDR      r0,[r0,#0]
00004a  f0000001          AND      r0,r0,#1
00004e  9001              STR      r0,[sp,#4]
000050  bf00              NOP      
000052  bf00              NOP      
;;;233        /**I2C3 GPIO Configuration    
;;;234        PC9     ------> I2C3_SDA
;;;235        PA8     ------> I2C3_SCL 
;;;236        */
;;;237        GPIO_InitStruct.Pin = GPIO_PIN_9;
000054  1548              ASRS     r0,r1,#21
000056  9002              STR      r0,[sp,#8]
;;;238        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
000058  2012              MOVS     r0,#0x12
00005a  9003              STR      r0,[sp,#0xc]
;;;239        GPIO_InitStruct.Pull = GPIO_NOPULL ;
00005c  2000              MOVS     r0,#0
00005e  9004              STR      r0,[sp,#0x10]
;;;240        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
000060  2003              MOVS     r0,#3
000062  9005              STR      r0,[sp,#0x14]
;;;241        GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
000064  2004              MOVS     r0,#4
000066  9006              STR      r0,[sp,#0x18]
;;;242        HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
000068  a902              ADD      r1,sp,#8
00006a  482d              LDR      r0,|L4.288|
00006c  f7fffffe          BL       HAL_GPIO_Init
;;;243    
;;;244        GPIO_InitStruct.Pin = GPIO_PIN_8;
000070  f44f7080          MOV      r0,#0x100
000074  9002              STR      r0,[sp,#8]
;;;245        GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
000076  2012              MOVS     r0,#0x12
000078  9003              STR      r0,[sp,#0xc]
;;;246        GPIO_InitStruct.Pull =GPIO_NOPULL ;
00007a  2000              MOVS     r0,#0
00007c  9004              STR      r0,[sp,#0x10]
;;;247        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
00007e  2003              MOVS     r0,#3
000080  9005              STR      r0,[sp,#0x14]
;;;248        GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
000082  2004              MOVS     r0,#4
000084  9006              STR      r0,[sp,#0x18]
;;;249        HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
000086  a902              ADD      r1,sp,#8
000088  4826              LDR      r0,|L4.292|
00008a  f7fffffe          BL       HAL_GPIO_Init
;;;250    		
;;;251    		 /* I2C2 clock enable */
;;;252        __HAL_RCC_I2C3_CLK_ENABLE();
00008e  bf00              NOP      
000090  2000              MOVS     r0,#0
000092  9001              STR      r0,[sp,#4]
000094  4821              LDR      r0,|L4.284|
000096  3010              ADDS     r0,r0,#0x10
000098  6800              LDR      r0,[r0,#0]
00009a  f4400000          ORR      r0,r0,#0x800000
00009e  491f              LDR      r1,|L4.284|
0000a0  3110              ADDS     r1,r1,#0x10
0000a2  6008              STR      r0,[r1,#0]
0000a4  4608              MOV      r0,r1
0000a6  6800              LDR      r0,[r0,#0]
0000a8  f4000000          AND      r0,r0,#0x800000
0000ac  9001              STR      r0,[sp,#4]
0000ae  bf00              NOP      
0000b0  e030              B        |L4.276|
                  |L4.178|
;;;253    /*
;;;254     gpio_init.Pin = GPIO_PIN_3 | GPIO_PIN_10;
;;;255      gpio_init.Mode = GPIO_MODE_AF_OD;
;;;256      gpio_init.Pull = GPIO_PULLUP;
;;;257      gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
;;;258      gpio_init.Alternate = GPIO_AF9_I2C2;
;;;259    
;;;260      HAL_GPIO_Init(GPIOB, &gpio_init);*/
;;;261      
;;;262      /* USER CODE BEGIN I2C2_MspInit 1 */
;;;263    
;;;264      /* USER CODE END I2C2_MspInit 1 */
;;;265      }
;;;266    	else{
;;;267      /* Enable I2C clock */
;;;268      __HAL_RCC_I2C1_CLK_ENABLE();
0000b2  bf00              NOP      
0000b4  2000              MOVS     r0,#0
0000b6  9001              STR      r0,[sp,#4]
0000b8  4818              LDR      r0,|L4.284|
0000ba  3010              ADDS     r0,r0,#0x10
0000bc  6800              LDR      r0,[r0,#0]
0000be  f4401000          ORR      r0,r0,#0x200000
0000c2  4916              LDR      r1,|L4.284|
0000c4  3110              ADDS     r1,r1,#0x10
0000c6  6008              STR      r0,[r1,#0]
0000c8  4608              MOV      r0,r1
0000ca  6800              LDR      r0,[r0,#0]
0000cc  f4001000          AND      r0,r0,#0x200000
0000d0  9001              STR      r0,[sp,#4]
0000d2  bf00              NOP      
0000d4  bf00              NOP      
;;;269    
;;;270      /* Enable GPIO clock */
;;;271      __HAL_RCC_GPIOB_CLK_ENABLE();
0000d6  bf00              NOP      
0000d8  2000              MOVS     r0,#0
0000da  9001              STR      r0,[sp,#4]
0000dc  480f              LDR      r0,|L4.284|
0000de  6800              LDR      r0,[r0,#0]
0000e0  f0400002          ORR      r0,r0,#2
0000e4  490d              LDR      r1,|L4.284|
0000e6  6008              STR      r0,[r1,#0]
0000e8  4608              MOV      r0,r1
0000ea  6800              LDR      r0,[r0,#0]
0000ec  f0000002          AND      r0,r0,#2
0000f0  9001              STR      r0,[sp,#4]
0000f2  bf00              NOP      
0000f4  bf00              NOP      
;;;272    
;;;273      /* Configure I2C Tx, Rx as alternate function */
;;;274      gpio_init.Pin = GPIO_PIN_8 | GPIO_PIN_9;
0000f6  f44f7040          MOV      r0,#0x300
0000fa  9007              STR      r0,[sp,#0x1c]
;;;275      gpio_init.Mode = GPIO_MODE_AF_OD;
0000fc  2012              MOVS     r0,#0x12
0000fe  9008              STR      r0,[sp,#0x20]
;;;276      gpio_init.Pull = GPIO_PULLUP;
000100  2001              MOVS     r0,#1
000102  9009              STR      r0,[sp,#0x24]
;;;277      gpio_init.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
000104  2003              MOVS     r0,#3
000106  900a              STR      r0,[sp,#0x28]
;;;278      gpio_init.Alternate = GPIO_AF4_I2C1;
000108  2004              MOVS     r0,#4
00010a  900b              STR      r0,[sp,#0x2c]
;;;279    
;;;280      HAL_GPIO_Init(GPIOB, &gpio_init);
00010c  a907              ADD      r1,sp,#0x1c
00010e  4806              LDR      r0,|L4.296|
000110  f7fffffe          BL       HAL_GPIO_Init
                  |L4.276|
;;;281    	}
;;;282    }
000114  b00c              ADD      sp,sp,#0x30
000116  bd10              POP      {r4,pc}
;;;283    
                          ENDP

                  |L4.280|
                          DCD      0x40005c00
                  |L4.284|
                          DCD      0x40023830
                  |L4.288|
                          DCD      0x40020800
                  |L4.292|
                          DCD      0x40020000
                  |L4.296|
                          DCD      0x40020400

                          AREA ||i.HAL_RTC_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_RTC_MspDeInit PROC
;;;135     */
;;;136    void HAL_RTC_MspDeInit(RTC_HandleTypeDef *hrtc)
000000  2100              MOVS     r1,#0
;;;137    {
;;;138      /*##-1- Reset peripherals ##################################################*/
;;;139      __HAL_RCC_RTC_DISABLE();
000002  4a01              LDR      r2,|L5.8|
000004  6011              STR      r1,[r2,#0]
;;;140    }
000006  4770              BX       lr
;;;141    
                          ENDP

                  |L5.8|
                          DCD      0x42470e3c

                          AREA ||i.HAL_RTC_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_RTC_MspInit PROC
;;;65      */
;;;66     void HAL_RTC_MspInit(RTC_HandleTypeDef *hrtc)
000000  b510              PUSH     {r4,lr}
;;;67     {
000002  b092              SUB      sp,sp,#0x48
000004  4604              MOV      r4,r0
;;;68       RCC_OscInitTypeDef        RCC_OscInitStruct;
;;;69       RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;
;;;70     
;;;71       /*##-1- Enables the PWR Clock and Enables access to the backup domain ###################################*/
;;;72       /* To change the source clock of the RTC feature (LSE, LSI), You have to:
;;;73          - Enable the power clock using __HAL_RCC_PWR_CLK_ENABLE()
;;;74          - Enable write access using HAL_PWR_EnableBkUpAccess() function before to
;;;75            configure the RTC clock source (to be done once after reset).
;;;76          - Reset the Back up Domain using __HAL_RCC_BACKUPRESET_FORCE() and
;;;77            __HAL_RCC_BACKUPRESET_RELEASE().
;;;78          - Configure the needed RTC clock source */
;;;79       __HAL_RCC_PWR_CLK_ENABLE();
000006  bf00              NOP      
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
00000c  4827              LDR      r0,|L6.172|
00000e  6800              LDR      r0,[r0,#0]
000010  f0405080          ORR      r0,r0,#0x10000000
000014  4925              LDR      r1,|L6.172|
000016  6008              STR      r0,[r1,#0]
000018  4608              MOV      r0,r1
00001a  6800              LDR      r0,[r0,#0]
00001c  f0005080          AND      r0,r0,#0x10000000
000020  9000              STR      r0,[sp,#0]
000022  bf00              NOP      
000024  bf00              NOP      
;;;80       HAL_PWR_EnableBkUpAccess();
000026  f7fffffe          BL       HAL_PWR_EnableBkUpAccess
;;;81     
;;;82       /*##-2- Configue LSE/LSI as RTC clock soucre ###############################*/
;;;83       if (UseLSI == 0)
00002a  4821              LDR      r0,|L6.176|
00002c  6800              LDR      r0,[r0,#0]  ; UseLSI
00002e  b9c0              CBNZ     r0,|L6.98|
;;;84       {
;;;85         RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
000030  200c              MOVS     r0,#0xc
000032  9006              STR      r0,[sp,#0x18]
;;;86         RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
000034  2000              MOVS     r0,#0
000036  900c              STR      r0,[sp,#0x30]
;;;87         RCC_OscInitStruct.LSEState = RCC_LSE_ON;
000038  2001              MOVS     r0,#1
00003a  9008              STR      r0,[sp,#0x20]
;;;88         RCC_OscInitStruct.LSIState = RCC_LSI_OFF;
00003c  2000              MOVS     r0,#0
00003e  900b              STR      r0,[sp,#0x2c]
;;;89         if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
000040  a806              ADD      r0,sp,#0x18
000042  f7fffffe          BL       HAL_RCC_OscConfig
000046  b108              CBZ      r0,|L6.76|
;;;90         {
;;;91           Error_Handler();
000048  f7fffffe          BL       Error_Handler
                  |L6.76|
;;;92         }
;;;93     
;;;94         PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
00004c  2002              MOVS     r0,#2
00004e  9001              STR      r0,[sp,#4]
;;;95         PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
000050  01c0              LSLS     r0,r0,#7
000052  9004              STR      r0,[sp,#0x10]
;;;96         if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
000054  a801              ADD      r0,sp,#4
000056  f7fffffe          BL       HAL_RCCEx_PeriphCLKConfig
00005a  b1d0              CBZ      r0,|L6.146|
;;;97         {
;;;98           Error_Handler();
00005c  f7fffffe          BL       Error_Handler
000060  e017              B        |L6.146|
                  |L6.98|
;;;99         }
;;;100      }
;;;101      else
;;;102      {
;;;103        RCC_OscInitStruct.OscillatorType =  RCC_OSCILLATORTYPE_LSI | RCC_OSCILLATORTYPE_LSE;
000062  200c              MOVS     r0,#0xc
000064  9006              STR      r0,[sp,#0x18]
;;;104        RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
000066  2000              MOVS     r0,#0
000068  900c              STR      r0,[sp,#0x30]
;;;105        RCC_OscInitStruct.LSIState = RCC_LSI_ON;
00006a  2001              MOVS     r0,#1
00006c  900b              STR      r0,[sp,#0x2c]
;;;106        RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
00006e  2000              MOVS     r0,#0
000070  9008              STR      r0,[sp,#0x20]
;;;107        if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
000072  a806              ADD      r0,sp,#0x18
000074  f7fffffe          BL       HAL_RCC_OscConfig
000078  b108              CBZ      r0,|L6.126|
;;;108        {
;;;109          Error_Handler();
00007a  f7fffffe          BL       Error_Handler
                  |L6.126|
;;;110        }
;;;111    
;;;112        PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
00007e  2002              MOVS     r0,#2
000080  9001              STR      r0,[sp,#4]
;;;113        PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
000082  0200              LSLS     r0,r0,#8
000084  9004              STR      r0,[sp,#0x10]
;;;114        if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
000086  a801              ADD      r0,sp,#4
000088  f7fffffe          BL       HAL_RCCEx_PeriphCLKConfig
00008c  b108              CBZ      r0,|L6.146|
;;;115        {
;;;116          Error_Handler();
00008e  f7fffffe          BL       Error_Handler
                  |L6.146|
;;;117        }
;;;118      }
;;;119    
;;;120      /*##-2- Enable RTC peripheral Clocks #######################################*/
;;;121      /* Enable RTC Clock */
;;;122      __HAL_RCC_RTC_ENABLE();
000092  2001              MOVS     r0,#1
000094  4907              LDR      r1,|L6.180|
000096  6008              STR      r0,[r1,#0]
;;;123    
;;;124      /*##-3- Configure the NVIC for RTC Alarm ###################################*/
;;;125      HAL_NVIC_SetPriority(RTC_Alarm_IRQn, 0x0F, 0);
000098  2200              MOVS     r2,#0
00009a  210f              MOVS     r1,#0xf
00009c  2029              MOVS     r0,#0x29
00009e  f7fffffe          BL       HAL_NVIC_SetPriority
;;;126      HAL_NVIC_EnableIRQ(RTC_Alarm_IRQn);
0000a2  2029              MOVS     r0,#0x29
0000a4  f7fffffe          BL       HAL_NVIC_EnableIRQ
;;;127    }
0000a8  b012              ADD      sp,sp,#0x48
0000aa  bd10              POP      {r4,pc}
;;;128    
                          ENDP

                  |L6.172|
                          DCD      0x40023840
                  |L6.176|
                          DCD      UseLSI
                  |L6.180|
                          DCD      0x42470e3c

                          AREA ||i.HAL_TIM_Base_MspDeInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_MspDeInit PROC
;;;170     */
;;;171    void HAL_TIM_Base_MspDeInit(TIM_HandleTypeDef *htim_base)
000000  b510              PUSH     {r4,lr}
;;;172    {
000002  4604              MOV      r4,r0
;;;173      if (htim_base->Instance == TIM_ALGO)
000004  4906              LDR      r1,|L7.32|
000006  6820              LDR      r0,[r4,#0]
000008  4288              CMP      r0,r1
00000a  d108              BNE      |L7.30|
;;;174      {
;;;175        /* Peripheral clock disable */
;;;176        TIM_ALGO_CLK_DISABLE();
00000c  4805              LDR      r0,|L7.36|
00000e  6800              LDR      r0,[r0,#0]
000010  f0200002          BIC      r0,r0,#2
000014  4903              LDR      r1,|L7.36|
000016  6008              STR      r0,[r1,#0]
;;;177    
;;;178        /* Peripheral interrupt DeInit*/
;;;179        HAL_NVIC_DisableIRQ(TIM_ALGO_IRQn);
000018  201d              MOVS     r0,#0x1d
00001a  f7fffffe          BL       HAL_NVIC_DisableIRQ
                  |L7.30|
;;;180      }
;;;181    }
00001e  bd10              POP      {r4,pc}
;;;182    
                          ENDP

                  |L7.32|
                          DCD      0x40000400
                  |L7.36|
                          DCD      0x40023840

                          AREA ||i.HAL_TIM_Base_MspInit||, CODE, READONLY, ALIGN=2

                  HAL_TIM_Base_MspInit PROC
;;;149     */
;;;150    void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim_base)
000000  b538              PUSH     {r3-r5,lr}
;;;151    {
000002  4604              MOV      r4,r0
;;;152      if (htim_base->Instance == TIM_ALGO)
000004  490e              LDR      r1,|L8.64|
000006  6820              LDR      r0,[r4,#0]
000008  4288              CMP      r0,r1
00000a  d117              BNE      |L8.60|
;;;153      {
;;;154        /* Peripheral clock enable */
;;;155        TIM_ALGO_CLK_ENABLE();
00000c  bf00              NOP      
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  480c              LDR      r0,|L8.68|
000014  6800              LDR      r0,[r0,#0]
000016  f0400002          ORR      r0,r0,#2
00001a  490a              LDR      r1,|L8.68|
00001c  6008              STR      r0,[r1,#0]
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f0000002          AND      r0,r0,#2
000026  9000              STR      r0,[sp,#0]
000028  bf00              NOP      
00002a  bf00              NOP      
;;;156    
;;;157        /* System interrupt init*/
;;;158        HAL_NVIC_SetPriority(TIM_ALGO_IRQn, 0x0F, 0);
00002c  2200              MOVS     r2,#0
00002e  210f              MOVS     r1,#0xf
000030  201d              MOVS     r0,#0x1d
000032  f7fffffe          BL       HAL_NVIC_SetPriority
;;;159        HAL_NVIC_EnableIRQ(TIM_ALGO_IRQn);
000036  201d              MOVS     r0,#0x1d
000038  f7fffffe          BL       HAL_NVIC_EnableIRQ
                  |L8.60|
;;;160      }
;;;161    }
00003c  bd38              POP      {r3-r5,pc}
;;;162    
                          ENDP

00003e  0000              DCW      0x0000
                  |L8.64|
                          DCD      0x40000400
                  |L8.68|
                          DCD      0x40023840

;*** Start embedded assembler ***

#line 1 "..\\Src\\stm32f4xx_hal_msp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_msp_c_8a41cc87____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_msp_c_8a41cc87____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_msp_c_8a41cc87____REVSH|
#line 402
|__asm___19_stm32f4xx_hal_msp_c_8a41cc87____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_msp_c_8a41cc87____RRX|
#line 587
|__asm___19_stm32f4xx_hal_msp_c_8a41cc87____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
