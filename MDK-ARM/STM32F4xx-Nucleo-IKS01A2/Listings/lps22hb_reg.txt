; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\lps22hb_reg.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\lps22hb_reg.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\..\..\..\..\..\Drivers\BSP\Components\lps22hb\lps22hb_reg.c]
                          THUMB

                          AREA ||i.lps22hb_auto_add_inc_get||, CODE, READONLY, ALIGN=1

                  lps22hb_auto_add_inc_get PROC
;;;1848     */
;;;1849   int32_t lps22hb_auto_add_inc_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1850   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1851     lps22hb_ctrl_reg2_t ctrl_reg2;
;;;1852     int32_t ret;
;;;1853   
;;;1854     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1855     *val = ctrl_reg2.if_add_inc;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1856   
;;;1857     return ret;
00001e  4630              MOV      r0,r6
;;;1858   }
000020  bdf8              POP      {r3-r7,pc}
;;;1859   
                          ENDP


                          AREA ||i.lps22hb_auto_add_inc_set||, CODE, READONLY, ALIGN=1

                  lps22hb_auto_add_inc_set PROC
;;;1826     */
;;;1827   int32_t lps22hb_auto_add_inc_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1828   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1829     lps22hb_ctrl_reg2_t ctrl_reg2;
;;;1830     int32_t ret;
;;;1831   
;;;1832     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1833     if(ret == 0){
000014  b95d              CBNZ     r5,|L2.46|
;;;1834       ctrl_reg2.if_add_inc = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;1835       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2111              MOVS     r1,#0x11
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L2.46|
;;;1836     }
;;;1837     return ret;
00002e  4628              MOV      r0,r5
;;;1838   }
000030  bdf8              POP      {r3-r7,pc}
;;;1839   
                          ENDP


                          AREA ||i.lps22hb_autozero_get||, CODE, READONLY, ALIGN=1

                  lps22hb_autozero_get PROC
;;;201      */
;;;202    int32_t lps22hb_autozero_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;203    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;204      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;205      int32_t ret;
;;;206    
;;;207      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;208                             (uint8_t*)&interrupt_cfg, 1);
;;;209      *val = interrupt_cfg.autozero;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  7020              STRB     r0,[r4,#0]
;;;210    
;;;211      return ret;
00001e  4630              MOV      r0,r6
;;;212    }
000020  bdf8              POP      {r3-r7,pc}
;;;213    
                          ENDP


                          AREA ||i.lps22hb_autozero_rst_get||, CODE, READONLY, ALIGN=1

                  lps22hb_autozero_rst_get PROC
;;;158      */
;;;159    int32_t lps22hb_autozero_rst_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;160    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;161      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;162      int32_t ret;
;;;163    
;;;164      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;165                             (uint8_t*)&interrupt_cfg, 1);
;;;166      *val = interrupt_cfg.reset_az;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  7020              STRB     r0,[r4,#0]
;;;167    
;;;168      return ret;
00001e  4630              MOV      r0,r6
;;;169    }
000020  bdf8              POP      {r3-r7,pc}
;;;170    
                          ENDP


                          AREA ||i.lps22hb_autozero_rst_set||, CODE, READONLY, ALIGN=1

                  lps22hb_autozero_rst_set PROC
;;;135    
;;;136    int32_t lps22hb_autozero_rst_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;137    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;138      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;139      int32_t ret;
;;;140    
;;;141      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;142                             (uint8_t*)&interrupt_cfg, 1);
;;;143      if(ret == 0){
000014  b95d              CBNZ     r5,|L5.46|
;;;144        interrupt_cfg.reset_az = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;145        ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  210b              MOVS     r1,#0xb
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L5.46|
;;;146                                (uint8_t*)&interrupt_cfg, 1);
;;;147      }
;;;148      return ret;
00002e  4628              MOV      r0,r5
;;;149    }
000030  bdf8              POP      {r3-r7,pc}
;;;150    
                          ENDP


                          AREA ||i.lps22hb_autozero_set||, CODE, READONLY, ALIGN=1

                  lps22hb_autozero_set PROC
;;;178      */
;;;179    int32_t lps22hb_autozero_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;180    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;181      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;182      int32_t ret;
;;;183    
;;;184      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;185                             (uint8_t*)&interrupt_cfg, 1);
;;;186      if(ret == 0){
000014  b95d              CBNZ     r5,|L6.46|
;;;187        interrupt_cfg.autozero = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641045          BFI      r0,r4,#5,#1
00001e  9000              STR      r0,[sp,#0]
;;;188        ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  210b              MOVS     r1,#0xb
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L6.46|
;;;189                                (uint8_t*)&interrupt_cfg, 1);
;;;190      }
;;;191      return ret;
00002e  4628              MOV      r0,r5
;;;192    }
000030  bdf8              POP      {r3-r7,pc}
;;;193    
                          ENDP


                          AREA ||i.lps22hb_block_data_update_get||, CODE, READONLY, ALIGN=1

                  lps22hb_block_data_update_get PROC
;;;328      */
;;;329    int32_t lps22hb_block_data_update_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;330    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;331      lps22hb_ctrl_reg1_t ctrl_reg1;
;;;332      int32_t ret;
;;;333    
;;;334      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;335      *val = ctrl_reg1.bdu;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00040          UBFX     r0,r0,#1,#1
00001c  7020              STRB     r0,[r4,#0]
;;;336    
;;;337      return ret;
00001e  4630              MOV      r0,r6
;;;338    }
000020  bdf8              POP      {r3-r7,pc}
;;;339    
                          ENDP


                          AREA ||i.lps22hb_block_data_update_set||, CODE, READONLY, ALIGN=1

                  lps22hb_block_data_update_set PROC
;;;307      */
;;;308    int32_t lps22hb_block_data_update_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;309    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;310      lps22hb_ctrl_reg1_t ctrl_reg1;
;;;311      int32_t ret;
;;;312    
;;;313      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;314      if(ret == 0){
000014  b95d              CBNZ     r5,|L8.46|
;;;315        ctrl_reg1.bdu = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640041          BFI      r0,r4,#1,#1
00001e  9000              STR      r0,[sp,#0]
;;;316        ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2110              MOVS     r1,#0x10
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L8.46|
;;;317      }
;;;318      return ret;
00002e  4628              MOV      r0,r5
;;;319    }
000030  bdf8              POP      {r3-r7,pc}
;;;320    
                          ENDP


                          AREA ||i.lps22hb_boot_get||, CODE, READONLY, ALIGN=1

                  lps22hb_boot_get PROC
;;;781      */
;;;782    int32_t lps22hb_boot_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;783    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;784      lps22hb_ctrl_reg2_t ctrl_reg2;
;;;785      int32_t ret;
;;;786    
;;;787      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;788      *val = ctrl_reg2.boot;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;789    
;;;790      return ret;
00001c  4630              MOV      r0,r6
;;;791    }
00001e  bdf8              POP      {r3-r7,pc}
;;;792    
                          ENDP


                          AREA ||i.lps22hb_boot_set||, CODE, READONLY, ALIGN=1

                  lps22hb_boot_set PROC
;;;760      */
;;;761    int32_t lps22hb_boot_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;762    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;763      lps22hb_ctrl_reg2_t ctrl_reg2;
;;;764      int32_t ret;
;;;765    
;;;766      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;767      if(ret == 0){
000014  b95d              CBNZ     r5,|L10.46|
;;;768        ctrl_reg2.boot = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;769        ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2111              MOVS     r1,#0x11
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L10.46|
;;;770      }
;;;771      return ret;
00002e  4628              MOV      r0,r5
;;;772    }
000030  bdf8              POP      {r3-r7,pc}
;;;773    
                          ENDP


                          AREA ||i.lps22hb_boot_status_get||, CODE, READONLY, ALIGN=1

                  lps22hb_boot_status_get PROC
;;;840      */
;;;841    int32_t lps22hb_boot_status_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;842    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;843      lps22hb_int_source_t int_source;
;;;844      int32_t ret;
;;;845    
;;;846      ret = lps22hb_read_reg(ctx, LPS22HB_INT_SOURCE, (uint8_t*)&int_source, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2125              MOVS     r1,#0x25
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;847      *val = int_source.boot_status;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;848    
;;;849      return ret;
00001c  4630              MOV      r0,r6
;;;850    }
00001e  bdf8              POP      {r3-r7,pc}
;;;851    
                          ENDP


                          AREA ||i.lps22hb_data_rate_get||, CODE, READONLY, ALIGN=1

                  lps22hb_data_rate_get PROC
;;;422      */
;;;423    int32_t lps22hb_data_rate_get(lps22hb_ctx_t *ctx, lps22hb_odr_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;424    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;425      lps22hb_ctrl_reg1_t ctrl_reg1;
;;;426      int32_t ret;
;;;427    
;;;428      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;429      switch (ctrl_reg1.odr){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01002          UBFX     r0,r0,#4,#3
00001c  2806              CMP      r0,#6
00001e  d216              BCS      |L12.78|
000020  e8dff000          TBB      [pc,r0]
000024  0306090c          DCB      0x03,0x06,0x09,0x0c
000028  0f12              DCB      0x0f,0x12
;;;430        case LPS22HB_POWER_DOWN:
;;;431          *val = LPS22HB_POWER_DOWN;
00002a  2000              MOVS     r0,#0
00002c  7020              STRB     r0,[r4,#0]
;;;432          break;
00002e  e011              B        |L12.84|
;;;433        case LPS22HB_ODR_1_Hz:
;;;434          *val = LPS22HB_ODR_1_Hz;
000030  2001              MOVS     r0,#1
000032  7020              STRB     r0,[r4,#0]
;;;435          break;
000034  e00e              B        |L12.84|
;;;436        case LPS22HB_ODR_10_Hz:
;;;437          *val = LPS22HB_ODR_10_Hz;
000036  2002              MOVS     r0,#2
000038  7020              STRB     r0,[r4,#0]
;;;438          break;
00003a  e00b              B        |L12.84|
;;;439        case LPS22HB_ODR_25_Hz:
;;;440          *val = LPS22HB_ODR_25_Hz;
00003c  2003              MOVS     r0,#3
00003e  7020              STRB     r0,[r4,#0]
;;;441          break;
000040  e008              B        |L12.84|
;;;442        case LPS22HB_ODR_50_Hz:
;;;443          *val = LPS22HB_ODR_50_Hz;
000042  2004              MOVS     r0,#4
000044  7020              STRB     r0,[r4,#0]
;;;444          break;
000046  e005              B        |L12.84|
;;;445        case LPS22HB_ODR_75_Hz:
;;;446          *val = LPS22HB_ODR_75_Hz;
000048  2005              MOVS     r0,#5
00004a  7020              STRB     r0,[r4,#0]
;;;447          break;
00004c  e002              B        |L12.84|
                  |L12.78|
;;;448        default:
;;;449          *val = LPS22HB_ODR_1_Hz;
00004e  2001              MOVS     r0,#1
000050  7020              STRB     r0,[r4,#0]
;;;450          break;
000052  bf00              NOP      
                  |L12.84|
000054  bf00              NOP                            ;432
;;;451      }
;;;452    
;;;453      return ret;
000056  4630              MOV      r0,r6
;;;454    }
000058  bdf8              POP      {r3-r7,pc}
;;;455    
                          ENDP


                          AREA ||i.lps22hb_data_rate_set||, CODE, READONLY, ALIGN=1

                  lps22hb_data_rate_set PROC
;;;401      */
;;;402    int32_t lps22hb_data_rate_set(lps22hb_ctx_t *ctx, lps22hb_odr_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;403    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;404      lps22hb_ctrl_reg1_t ctrl_reg1;
;;;405      int32_t ret;
;;;406    
;;;407      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;408      if(ret == 0){
000014  b95d              CBNZ     r5,|L13.46|
;;;409        ctrl_reg1.odr = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641006          BFI      r0,r4,#4,#3
00001e  9000              STR      r0,[sp,#0]
;;;410        ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2110              MOVS     r1,#0x10
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L13.46|
;;;411      }
;;;412      return ret;
00002e  4628              MOV      r0,r5
;;;413    }
000030  bdf8              POP      {r3-r7,pc}
;;;414    
                          ENDP


                          AREA ||i.lps22hb_dev_status_get||, CODE, READONLY, ALIGN=1

                  lps22hb_dev_status_get PROC
;;;859      */
;;;860    int32_t lps22hb_dev_status_get(lps22hb_ctx_t *ctx, lps22hb_dev_stat_t *val)
000000  b570              PUSH     {r4-r6,lr}
;;;861    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;862      int32_t ret;
;;;863      ret =  lps22hb_read_reg(ctx, LPS22HB_FIFO_STATUS, (uint8_t*) val, 2);
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  2126              MOVS     r1,#0x26
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;864      return ret;
000014  4630              MOV      r0,r6
;;;865    }
000016  bd70              POP      {r4-r6,pc}
;;;866    
                          ENDP


                          AREA ||i.lps22hb_device_id_get||, CODE, READONLY, ALIGN=1

                  lps22hb_device_id_get PROC
;;;705      */
;;;706    int32_t lps22hb_device_id_get(lps22hb_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;707    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;708      int32_t ret;
;;;709      ret =  lps22hb_read_reg(ctx, LPS22HB_WHO_AM_I, (uint8_t*) buff, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  210f              MOVS     r1,#0xf
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;710      return ret;
000014  4630              MOV      r0,r6
;;;711    }
000016  bd70              POP      {r4-r6,pc}
;;;712    
                          ENDP


                          AREA ||i.lps22hb_drdy_on_int_get||, CODE, READONLY, ALIGN=1

                  lps22hb_drdy_on_int_get PROC
;;;1151     */
;;;1152   int32_t lps22hb_drdy_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1153   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1154     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1155     int32_t ret;
;;;1156   
;;;1157     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1158     *val = ctrl_reg3.drdy;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1159   
;;;1160     return ret;
00001e  4630              MOV      r0,r6
;;;1161   }
000020  bdf8              POP      {r3-r7,pc}
;;;1162   
                          ENDP


                          AREA ||i.lps22hb_drdy_on_int_set||, CODE, READONLY, ALIGN=1

                  lps22hb_drdy_on_int_set PROC
;;;1130     */
;;;1131   int32_t lps22hb_drdy_on_int_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1132   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1133     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1134     int32_t ret;
;;;1135   
;;;1136     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1137     if(ret == 0){
000014  b95d              CBNZ     r5,|L17.46|
;;;1138       ctrl_reg3.drdy = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640082          BFI      r0,r4,#2,#1
00001e  9000              STR      r0,[sp,#0]
;;;1139       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L17.46|
;;;1140     }
;;;1141     return ret;
00002e  4628              MOV      r0,r5
;;;1142   }
000030  bdf8              POP      {r3-r7,pc}
;;;1143   
                          ENDP


                          AREA ||i.lps22hb_fifo_data_level_get||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_data_level_get PROC
;;;1657     */
;;;1658   int32_t lps22hb_fifo_data_level_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1659   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1660     lps22hb_fifo_status_t fifo_status;
;;;1661     int32_t ret;
;;;1662   
;;;1663     ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_STATUS, (uint8_t*)&fifo_status, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2126              MOVS     r1,#0x26
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1664     *val = fifo_status.fss;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000003f          AND      r0,r0,#0x3f
00001c  7020              STRB     r0,[r4,#0]
;;;1665   
;;;1666     return ret;
00001e  4630              MOV      r0,r6
;;;1667   }
000020  bdf8              POP      {r3-r7,pc}
;;;1668   
                          ENDP


                          AREA ||i.lps22hb_fifo_fth_flag_get||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_fth_flag_get PROC
;;;1695     */
;;;1696   int32_t lps22hb_fifo_fth_flag_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1697   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1698     lps22hb_fifo_status_t fifo_status;
;;;1699     int32_t ret;
;;;1700   
;;;1701     ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_STATUS, (uint8_t*)&fifo_status, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2126              MOVS     r1,#0x26
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1702     *val = fifo_status.fth_fifo;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;1703   
;;;1704     return ret;
00001c  4630              MOV      r0,r6
;;;1705   }
00001e  bdf8              POP      {r3-r7,pc}
;;;1706   
                          ENDP


                          AREA ||i.lps22hb_fifo_full_on_int_get||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_full_on_int_get PROC
;;;1271     */
;;;1272   int32_t lps22hb_fifo_full_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1273   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1274     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1275     int32_t ret;
;;;1276   
;;;1277     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1278     *val = ctrl_reg3.f_fss5;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1279   
;;;1280     return ret;
00001e  4630              MOV      r0,r6
;;;1281   }
000020  bdf8              POP      {r3-r7,pc}
;;;1282   
                          ENDP


                          AREA ||i.lps22hb_fifo_full_on_int_set||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_full_on_int_set PROC
;;;1250     */
;;;1251   int32_t lps22hb_fifo_full_on_int_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1252   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1253     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1254     int32_t ret;
;;;1255   
;;;1256     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1257     if(ret == 0){
000014  b95d              CBNZ     r5,|L21.46|
;;;1258       ctrl_reg3.f_fss5 = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641045          BFI      r0,r4,#5,#1
00001e  9000              STR      r0,[sp,#0]
;;;1259       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L21.46|
;;;1260     }
;;;1261     return ret;
00002e  4628              MOV      r0,r5
;;;1262   }
000030  bdf8              POP      {r3-r7,pc}
;;;1263   
                          ENDP


                          AREA ||i.lps22hb_fifo_get||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_get PROC
;;;1534     */
;;;1535   int32_t lps22hb_fifo_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1536   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1537     lps22hb_ctrl_reg2_t ctrl_reg2;
;;;1538     int32_t ret;
;;;1539   
;;;1540     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1541     *val = ctrl_reg2.fifo_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1542   
;;;1543     return ret;
00001e  4630              MOV      r0,r6
;;;1544   }
000020  bdf8              POP      {r3-r7,pc}
;;;1545   
                          ENDP


                          AREA ||i.lps22hb_fifo_mode_get||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_mode_get PROC
;;;1614     */
;;;1615   int32_t lps22hb_fifo_mode_get(lps22hb_ctx_t *ctx, lps22hb_f_mode_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1616   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1617     lps22hb_fifo_ctrl_t fifo_ctrl;
;;;1618     int32_t ret;
;;;1619   
;;;1620     ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1621     switch (fifo_ctrl.f_mode){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  0940              LSRS     r0,r0,#5
00001a  2808              CMP      r0,#8
00001c  d21a              BCS      |L23.84|
00001e  e8dff000          TBB      [pc,r0]
000022  0407              DCB      0x04,0x07
000024  0a0d1019          DCB      0x0a,0x0d,0x10,0x19
000028  1316              DCB      0x13,0x16
;;;1622       case LPS22HB_BYPASS_MODE:
;;;1623         *val = LPS22HB_BYPASS_MODE;
00002a  2000              MOVS     r0,#0
00002c  7020              STRB     r0,[r4,#0]
;;;1624         break;
00002e  e014              B        |L23.90|
;;;1625       case LPS22HB_FIFO_MODE:
;;;1626         *val = LPS22HB_FIFO_MODE;
000030  2001              MOVS     r0,#1
000032  7020              STRB     r0,[r4,#0]
;;;1627         break;
000034  e011              B        |L23.90|
;;;1628       case LPS22HB_STREAM_MODE:
;;;1629         *val = LPS22HB_STREAM_MODE;
000036  2002              MOVS     r0,#2
000038  7020              STRB     r0,[r4,#0]
;;;1630         break;
00003a  e00e              B        |L23.90|
;;;1631       case LPS22HB_STREAM_TO_FIFO_MODE:
;;;1632         *val = LPS22HB_STREAM_TO_FIFO_MODE;
00003c  2003              MOVS     r0,#3
00003e  7020              STRB     r0,[r4,#0]
;;;1633         break;
000040  e00b              B        |L23.90|
;;;1634       case LPS22HB_BYPASS_TO_STREAM_MODE:
;;;1635         *val = LPS22HB_BYPASS_TO_STREAM_MODE;
000042  2004              MOVS     r0,#4
000044  7020              STRB     r0,[r4,#0]
;;;1636         break;
000046  e008              B        |L23.90|
;;;1637       case LPS22HB_DYNAMIC_STREAM_MODE:
;;;1638         *val = LPS22HB_DYNAMIC_STREAM_MODE;
000048  2006              MOVS     r0,#6
00004a  7020              STRB     r0,[r4,#0]
;;;1639         break;
00004c  e005              B        |L23.90|
;;;1640       case LPS22HB_BYPASS_TO_FIFO_MODE:
;;;1641         *val = LPS22HB_BYPASS_TO_FIFO_MODE;
00004e  2007              MOVS     r0,#7
000050  7020              STRB     r0,[r4,#0]
;;;1642         break;
000052  e002              B        |L23.90|
                  |L23.84|
;;;1643       default:
;;;1644         *val = LPS22HB_BYPASS_MODE;
000054  2000              MOVS     r0,#0
000056  7020              STRB     r0,[r4,#0]
;;;1645         break;
000058  bf00              NOP      
                  |L23.90|
00005a  bf00              NOP                            ;1624
;;;1646     }
;;;1647     return ret;
00005c  4630              MOV      r0,r6
;;;1648   }
00005e  bdf8              POP      {r3-r7,pc}
;;;1649   
                          ENDP


                          AREA ||i.lps22hb_fifo_mode_set||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_mode_set PROC
;;;1593     */
;;;1594   int32_t lps22hb_fifo_mode_set(lps22hb_ctx_t *ctx, lps22hb_f_mode_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1595   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1596     lps22hb_fifo_ctrl_t fifo_ctrl;
;;;1597     int32_t ret;
;;;1598   
;;;1599     ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1600     if(ret == 0){
000014  b95d              CBNZ     r5,|L24.46|
;;;1601       fifo_ctrl.f_mode = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641047          BFI      r0,r4,#5,#3
00001e  9000              STR      r0,[sp,#0]
;;;1602       ret = lps22hb_write_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2114              MOVS     r1,#0x14
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L24.46|
;;;1603     }
;;;1604     return ret;
00002e  4628              MOV      r0,r5
;;;1605   }
000030  bdf8              POP      {r3-r7,pc}
;;;1606   
                          ENDP


                          AREA ||i.lps22hb_fifo_ovr_flag_get||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_ovr_flag_get PROC
;;;1676     */
;;;1677   int32_t lps22hb_fifo_ovr_flag_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1678   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1679     lps22hb_fifo_status_t fifo_status;
;;;1680     int32_t ret;
;;;1681   
;;;1682     ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_STATUS, (uint8_t*)&fifo_status, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2126              MOVS     r1,#0x26
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1683     *val = fifo_status.ovr;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1684   
;;;1685     return ret;
00001e  4630              MOV      r0,r6
;;;1686   }
000020  bdf8              POP      {r3-r7,pc}
;;;1687   
                          ENDP


                          AREA ||i.lps22hb_fifo_ovr_on_int_get||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_ovr_on_int_get PROC
;;;1191     */
;;;1192   int32_t lps22hb_fifo_ovr_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1193   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1194     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1195     int32_t ret;
;;;1196   
;;;1197     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1198     *val = ctrl_reg3.f_ovr;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1199   
;;;1200     return ret;
00001e  4630              MOV      r0,r6
;;;1201   }
000020  bdf8              POP      {r3-r7,pc}
;;;1202   
                          ENDP


                          AREA ||i.lps22hb_fifo_ovr_on_int_set||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_ovr_on_int_set PROC
;;;1170     */
;;;1171   int32_t lps22hb_fifo_ovr_on_int_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1172   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1173     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1174     int32_t ret;
;;;1175   
;;;1176     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1177     if(ret == 0){
000014  b95d              CBNZ     r5,|L27.46|
;;;1178       ctrl_reg3.f_ovr = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;1179       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L27.46|
;;;1180     }
;;;1181     return ret;
00002e  4628              MOV      r0,r5
;;;1182   }
000030  bdf8              POP      {r3-r7,pc}
;;;1183   
                          ENDP


                          AREA ||i.lps22hb_fifo_set||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_set PROC
;;;1513     */
;;;1514   int32_t lps22hb_fifo_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1515   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1516     lps22hb_ctrl_reg2_t ctrl_reg2;
;;;1517     int32_t ret;
;;;1518   
;;;1519     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1520     if(ret == 0){
000014  b95d              CBNZ     r5,|L28.46|
;;;1521       ctrl_reg2.fifo_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9000              STR      r0,[sp,#0]
;;;1522       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2111              MOVS     r1,#0x11
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L28.46|
;;;1523     }
;;;1524     return ret;
00002e  4628              MOV      r0,r5
;;;1525   }
000030  bdf8              POP      {r3-r7,pc}
;;;1526   
                          ENDP


                          AREA ||i.lps22hb_fifo_threshold_on_int_get||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_threshold_on_int_get PROC
;;;1231     */
;;;1232   int32_t lps22hb_fifo_threshold_on_int_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1233   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1234     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1235     int32_t ret;
;;;1236   
;;;1237     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1238     *val = ctrl_reg3.f_fth;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1239   
;;;1240     return ret;
00001e  4630              MOV      r0,r6
;;;1241   }
000020  bdf8              POP      {r3-r7,pc}
;;;1242   
                          ENDP


                          AREA ||i.lps22hb_fifo_threshold_on_int_set||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_threshold_on_int_set PROC
;;;1210     */
;;;1211   int32_t lps22hb_fifo_threshold_on_int_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1212   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1213     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1214     int32_t ret;
;;;1215   
;;;1216     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1217     if(ret == 0){
000014  b95d              CBNZ     r5,|L30.46|
;;;1218       ctrl_reg3.f_fth = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;1219       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L30.46|
;;;1220     }
;;;1221     return ret;
00002e  4628              MOV      r0,r5
;;;1222   }
000030  bdf8              POP      {r3-r7,pc}
;;;1223   
                          ENDP


                          AREA ||i.lps22hb_fifo_watermark_get||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_watermark_get PROC
;;;1574     */
;;;1575   int32_t lps22hb_fifo_watermark_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1576   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1577     lps22hb_fifo_ctrl_t fifo_ctrl;
;;;1578     int32_t ret;
;;;1579   
;;;1580     ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1581     *val = fifo_ctrl.wtm;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000001f          AND      r0,r0,#0x1f
00001c  7020              STRB     r0,[r4,#0]
;;;1582   
;;;1583     return ret;
00001e  4630              MOV      r0,r6
;;;1584   }
000020  bdf8              POP      {r3-r7,pc}
;;;1585   
                          ENDP


                          AREA ||i.lps22hb_fifo_watermark_set||, CODE, READONLY, ALIGN=1

                  lps22hb_fifo_watermark_set PROC
;;;1553     */
;;;1554   int32_t lps22hb_fifo_watermark_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1555   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1556     lps22hb_fifo_ctrl_t fifo_ctrl;
;;;1557     int32_t ret;
;;;1558   
;;;1559     ret = lps22hb_read_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1560     if(ret == 0){
000014  b95d              CBNZ     r5,|L32.46|
;;;1561       fifo_ctrl.wtm = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640004          BFI      r0,r4,#0,#5
00001e  9000              STR      r0,[sp,#0]
;;;1562       ret = lps22hb_write_reg(ctx, LPS22HB_FIFO_CTRL, (uint8_t*)&fifo_ctrl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2114              MOVS     r1,#0x14
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L32.46|
;;;1563     }
;;;1564     return ret;
00002e  4628              MOV      r0,r5
;;;1565   }
000030  bdf8              POP      {r3-r7,pc}
;;;1566   
                          ENDP


                          AREA ||i.lps22hb_from_lsb_to_degc||, CODE, READONLY, ALIGN=2

                  lps22hb_from_lsb_to_degc PROC
;;;107    
;;;108    float_t lps22hb_from_lsb_to_degc(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;109    {
;;;110      return ( (float_t)lsb / 100.0f );
000004  eef80ac0          VCVT.F32.S32 s1,s0
000008  ed9f1a02          VLDR     s2,|L33.20|
00000c  ee800a81          VDIV.F32 s0,s1,s2
;;;111    }
000010  4770              BX       lr
;;;112    
                          ENDP

000012  0000              DCW      0x0000
                  |L33.20|
000014  42c80000          DCFS     0x42c80000 ; 100

                          AREA ||i.lps22hb_from_lsb_to_hpa||, CODE, READONLY, ALIGN=2

                  lps22hb_from_lsb_to_hpa PROC
;;;102    
;;;103    float_t lps22hb_from_lsb_to_hpa(int32_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;104    {
;;;105      return ( (float_t)lsb / 4096.0f );
000004  eef80ac0          VCVT.F32.S32 s1,s0
000008  ed9f1a02          VLDR     s2,|L34.20|
00000c  ee800a81          VDIV.F32 s0,s1,s2
;;;106    }
000010  4770              BX       lr
;;;107    
                          ENDP

000012  0000              DCW      0x0000
                  |L34.20|
000014  45800000          DCFS     0x45800000 ; 4096

                          AREA ||i.lps22hb_i2c_interface_get||, CODE, READONLY, ALIGN=1

                  lps22hb_i2c_interface_get PROC
;;;1797     */
;;;1798   int32_t lps22hb_i2c_interface_get(lps22hb_ctx_t *ctx, lps22hb_i2c_dis_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1799   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1800     lps22hb_ctrl_reg2_t ctrl_reg2;
;;;1801     int32_t ret;
;;;1802   
;;;1803     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1804     switch (ctrl_reg2.i2c_dis){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  b110              CBZ      r0,|L35.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L35.48|
000022  e002              B        |L35.42|
                  |L35.36|
;;;1805       case LPS22HB_I2C_ENABLE:
;;;1806         *val = LPS22HB_I2C_ENABLE;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;1807         break;
000028  e005              B        |L35.54|
                  |L35.42|
;;;1808       case LPS22HB_I2C_DISABLE:
;;;1809         *val = LPS22HB_I2C_DISABLE;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;1810         break;
00002e  e002              B        |L35.54|
                  |L35.48|
;;;1811       default:
;;;1812         *val = LPS22HB_I2C_ENABLE;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;1813         break;
000034  bf00              NOP      
                  |L35.54|
000036  bf00              NOP                            ;1807
;;;1814     }
;;;1815     return ret;
000038  4630              MOV      r0,r6
;;;1816   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1817   
                          ENDP


                          AREA ||i.lps22hb_i2c_interface_set||, CODE, READONLY, ALIGN=1

                  lps22hb_i2c_interface_set PROC
;;;1776     */
;;;1777   int32_t lps22hb_i2c_interface_set(lps22hb_ctx_t *ctx, lps22hb_i2c_dis_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1778   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1779     lps22hb_ctrl_reg2_t ctrl_reg2;
;;;1780     int32_t ret;
;;;1781   
;;;1782     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1783     if(ret == 0){
000014  b95d              CBNZ     r5,|L36.46|
;;;1784       ctrl_reg2.i2c_dis = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;1785       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2111              MOVS     r1,#0x11
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L36.46|
;;;1786     }
;;;1787     return ret;
00002e  4628              MOV      r0,r5
;;;1788   }
000030  bdf8              POP      {r3-r7,pc}
;;;1789   
                          ENDP


                          AREA ||i.lps22hb_int_generation_get||, CODE, READONLY, ALIGN=1

                  lps22hb_int_generation_get PROC
;;;1025     */
;;;1026   int32_t lps22hb_int_generation_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1027   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1028     lps22hb_interrupt_cfg_t interrupt_cfg;
;;;1029     int32_t ret;
;;;1030   
;;;1031     ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1032                            (uint8_t*)&interrupt_cfg, 1);
;;;1033     *val = interrupt_cfg.diff_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1034   
;;;1035     return ret;
00001e  4630              MOV      r0,r6
;;;1036   }
000020  bdf8              POP      {r3-r7,pc}
;;;1037   
                          ENDP


                          AREA ||i.lps22hb_int_generation_set||, CODE, READONLY, ALIGN=1

                  lps22hb_int_generation_set PROC
;;;1002     */
;;;1003   int32_t lps22hb_int_generation_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1004   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1005     lps22hb_interrupt_cfg_t interrupt_cfg;
;;;1006     int32_t ret;
;;;1007   
;;;1008     ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1009                            (uint8_t*)&interrupt_cfg, 1);
;;;1010     if(ret == 0){
000014  b95d              CBNZ     r5,|L38.46|
;;;1011       interrupt_cfg.diff_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;1012       ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  210b              MOVS     r1,#0xb
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L38.46|
;;;1013                               (uint8_t*)&interrupt_cfg, 1);
;;;1014     }
;;;1015     return ret;
00002e  4628              MOV      r0,r5
;;;1016   }
000030  bdf8              POP      {r3-r7,pc}
;;;1017   
                          ENDP


                          AREA ||i.lps22hb_int_notification_mode_get||, CODE, READONLY, ALIGN=1

                  lps22hb_int_notification_mode_get PROC
;;;972      */
;;;973    int32_t lps22hb_int_notification_mode_get(lps22hb_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;974                                              lps22hb_lir_t *val)
;;;975    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;976      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;977      int32_t ret;
;;;978    
;;;979      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;980                             (uint8_t*)&interrupt_cfg, 1);
;;;981      switch (interrupt_cfg.lir){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  b110              CBZ      r0,|L39.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L39.48|
000022  e002              B        |L39.42|
                  |L39.36|
;;;982        case LPS22HB_INT_PULSED:
;;;983          *val = LPS22HB_INT_PULSED;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;984          break;
000028  e005              B        |L39.54|
                  |L39.42|
;;;985        case LPS22HB_INT_LATCHED:
;;;986          *val = LPS22HB_INT_LATCHED;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;987          break;
00002e  e002              B        |L39.54|
                  |L39.48|
;;;988        default:
;;;989          *val = LPS22HB_INT_PULSED;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;990          break;
000034  bf00              NOP      
                  |L39.54|
000036  bf00              NOP                            ;984
;;;991      }
;;;992      return ret;
000038  4630              MOV      r0,r6
;;;993    }
00003a  bdf8              POP      {r3-r7,pc}
;;;994    
                          ENDP


                          AREA ||i.lps22hb_int_notification_mode_set||, CODE, READONLY, ALIGN=1

                  lps22hb_int_notification_mode_set PROC
;;;947      */
;;;948    int32_t lps22hb_int_notification_mode_set(lps22hb_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;949                                               lps22hb_lir_t val)
;;;950    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;951      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;952      int32_t ret;
;;;953    
;;;954      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;955                             (uint8_t*)&interrupt_cfg, 1);
;;;956      if(ret == 0){
000014  b95d              CBNZ     r5,|L40.46|
;;;957        interrupt_cfg.lir = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640082          BFI      r0,r4,#2,#1
00001e  9000              STR      r0,[sp,#0]
;;;958        ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  210b              MOVS     r1,#0xb
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L40.46|
;;;959                                (uint8_t*)&interrupt_cfg, 1);
;;;960      }
;;;961      return ret;
00002e  4628              MOV      r0,r5
;;;962    }
000030  bdf8              POP      {r3-r7,pc}
;;;963    
                          ENDP


                          AREA ||i.lps22hb_int_on_press_high_get||, CODE, READONLY, ALIGN=1

                  lps22hb_int_on_press_high_get PROC
;;;1403     */
;;;1404   int32_t lps22hb_int_on_press_high_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1405   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1406     lps22hb_int_source_t int_source;
;;;1407     int32_t ret;
;;;1408   
;;;1409     ret = lps22hb_read_reg(ctx, LPS22HB_INT_SOURCE, (uint8_t*)&int_source, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2125              MOVS     r1,#0x25
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1410     *val = int_source.ph;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1411   
;;;1412     return ret;
00001e  4630              MOV      r0,r6
;;;1413   }
000020  bdf8              POP      {r3-r7,pc}
;;;1414   
                          ENDP


                          AREA ||i.lps22hb_int_on_press_low_get||, CODE, READONLY, ALIGN=1

                  lps22hb_int_on_press_low_get PROC
;;;1422     */
;;;1423   int32_t lps22hb_int_on_press_low_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1424   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1425     lps22hb_int_source_t int_source;
;;;1426     int32_t ret;
;;;1427   
;;;1428     ret = lps22hb_read_reg(ctx, LPS22HB_INT_SOURCE, (uint8_t*)&int_source, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2125              MOVS     r1,#0x25
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1429     *val = int_source.pl;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00040          UBFX     r0,r0,#1,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1430   
;;;1431     return ret;
00001e  4630              MOV      r0,r6
;;;1432   }
000020  bdf8              POP      {r3-r7,pc}
;;;1433   
                          ENDP


                          AREA ||i.lps22hb_int_pin_mode_get||, CODE, READONLY, ALIGN=1

                  lps22hb_int_pin_mode_get PROC
;;;1096     */
;;;1097   int32_t lps22hb_int_pin_mode_get(lps22hb_ctx_t *ctx, lps22hb_int_s_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1098   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1099     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1100     int32_t ret;
;;;1101   
;;;1102     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1103     switch (ctrl_reg3.int_s){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000003          AND      r0,r0,#3
00001c  b130              CBZ      r0,|L43.44|
00001e  2801              CMP      r0,#1
000020  d007              BEQ      |L43.50|
000022  2802              CMP      r0,#2
000024  d008              BEQ      |L43.56|
000026  2803              CMP      r0,#3
000028  d10c              BNE      |L43.68|
00002a  e008              B        |L43.62|
                  |L43.44|
;;;1104       case LPS22HB_DRDY_OR_FIFO_FLAGS:
;;;1105         *val = LPS22HB_DRDY_OR_FIFO_FLAGS;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;1106         break;
000030  e00b              B        |L43.74|
                  |L43.50|
;;;1107       case LPS22HB_HIGH_PRES_INT:
;;;1108         *val = LPS22HB_HIGH_PRES_INT;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;1109         break;
000036  e008              B        |L43.74|
                  |L43.56|
;;;1110       case LPS22HB_LOW_PRES_INT:
;;;1111         *val = LPS22HB_LOW_PRES_INT;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;1112         break;
00003c  e005              B        |L43.74|
                  |L43.62|
;;;1113       case LPS22HB_EVERY_PRES_INT:
;;;1114         *val = LPS22HB_EVERY_PRES_INT;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;1115         break;
000042  e002              B        |L43.74|
                  |L43.68|
;;;1116       default:
;;;1117         *val = LPS22HB_DRDY_OR_FIFO_FLAGS;
000044  2000              MOVS     r0,#0
000046  7020              STRB     r0,[r4,#0]
;;;1118         break;
000048  bf00              NOP      
                  |L43.74|
00004a  bf00              NOP                            ;1106
;;;1119     }
;;;1120     return ret;
00004c  4630              MOV      r0,r6
;;;1121   }
00004e  bdf8              POP      {r3-r7,pc}
;;;1122   
                          ENDP


                          AREA ||i.lps22hb_int_pin_mode_set||, CODE, READONLY, ALIGN=1

                  lps22hb_int_pin_mode_set PROC
;;;1075     */
;;;1076   int32_t lps22hb_int_pin_mode_set(lps22hb_ctx_t *ctx, lps22hb_int_s_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1077   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1078     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1079     int32_t ret;
;;;1080   
;;;1081     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1082     if(ret == 0){
000014  b95d              CBNZ     r5,|L44.46|
;;;1083       ctrl_reg3.int_s = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640001          BFI      r0,r4,#0,#2
00001e  9000              STR      r0,[sp,#0]
;;;1084       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L44.46|
;;;1085     }
;;;1086     return ret;
00002e  4628              MOV      r0,r5
;;;1087   }
000030  bdf8              POP      {r3-r7,pc}
;;;1088   
                          ENDP


                          AREA ||i.lps22hb_int_polarity_get||, CODE, READONLY, ALIGN=1

                  lps22hb_int_polarity_get PROC
;;;1360     */
;;;1361   int32_t lps22hb_int_polarity_get(lps22hb_ctx_t *ctx, lps22hb_int_h_l_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1362   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1363     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1364     int32_t ret;
;;;1365   
;;;1366     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1367     switch (ctrl_reg3.int_h_l){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  b110              CBZ      r0,|L45.34|
00001c  2801              CMP      r0,#1
00001e  d106              BNE      |L45.46|
000020  e002              B        |L45.40|
                  |L45.34|
;;;1368       case LPS22HB_ACTIVE_HIGH:
;;;1369         *val = LPS22HB_ACTIVE_HIGH;
000022  2000              MOVS     r0,#0
000024  7020              STRB     r0,[r4,#0]
;;;1370         break;
000026  e005              B        |L45.52|
                  |L45.40|
;;;1371       case LPS22HB_ACTIVE_LOW:
;;;1372         *val = LPS22HB_ACTIVE_LOW;
000028  2001              MOVS     r0,#1
00002a  7020              STRB     r0,[r4,#0]
;;;1373         break;
00002c  e002              B        |L45.52|
                  |L45.46|
;;;1374       default:
;;;1375         *val = LPS22HB_ACTIVE_HIGH;
00002e  2000              MOVS     r0,#0
000030  7020              STRB     r0,[r4,#0]
;;;1376         break;
000032  bf00              NOP      
                  |L45.52|
000034  bf00              NOP                            ;1370
;;;1377     }
;;;1378     return ret;
000036  4630              MOV      r0,r6
;;;1379   }
000038  bdf8              POP      {r3-r7,pc}
;;;1380   
                          ENDP


                          AREA ||i.lps22hb_int_polarity_set||, CODE, READONLY, ALIGN=1

                  lps22hb_int_polarity_set PROC
;;;1339     */
;;;1340   int32_t lps22hb_int_polarity_set(lps22hb_ctx_t *ctx, lps22hb_int_h_l_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1341   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1342     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1343     int32_t ret;
;;;1344   
;;;1345     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1346     if(ret == 0){
000014  b95d              CBNZ     r5,|L46.46|
;;;1347       ctrl_reg3.int_h_l = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;1348       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L46.46|
;;;1349     }
;;;1350     return ret;
00002e  4628              MOV      r0,r5
;;;1351   }
000030  bdf8              POP      {r3-r7,pc}
;;;1352   
                          ENDP


                          AREA ||i.lps22hb_int_source_get||, CODE, READONLY, ALIGN=1

                  lps22hb_int_source_get PROC
;;;1388     */
;;;1389   int32_t lps22hb_int_source_get(lps22hb_ctx_t *ctx, lps22hb_int_source_t *val)
000000  b570              PUSH     {r4-r6,lr}
;;;1390   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1391     int32_t ret;
;;;1392     ret =  lps22hb_read_reg(ctx, LPS22HB_INT_SOURCE, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2125              MOVS     r1,#0x25
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1393     return ret;
000014  4630              MOV      r0,r6
;;;1394   }
000016  bd70              POP      {r4-r6,pc}
;;;1395   
                          ENDP


                          AREA ||i.lps22hb_int_threshold_get||, CODE, READONLY, ALIGN=1

                  lps22hb_int_threshold_get PROC
;;;1060     */
;;;1061   int32_t lps22hb_int_threshold_get(lps22hb_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;1062   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1063     int32_t ret;
;;;1064     ret =  lps22hb_read_reg(ctx, LPS22HB_THS_P_L, (uint8_t*) buff, 2);
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  210c              MOVS     r1,#0xc
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1065     return ret;
000014  4630              MOV      r0,r6
;;;1066   }
000016  bd70              POP      {r4-r6,pc}
;;;1067   
                          ENDP


                          AREA ||i.lps22hb_int_threshold_set||, CODE, READONLY, ALIGN=1

                  lps22hb_int_threshold_set PROC
;;;1045     */
;;;1046   int32_t lps22hb_int_threshold_set(lps22hb_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;1047   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1048     int32_t ret;
;;;1049     ret =  lps22hb_write_reg(ctx, LPS22HB_THS_P_L, (uint8_t*) buff, 2);
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  210c              MOVS     r1,#0xc
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_write_reg
000012  4606              MOV      r6,r0
;;;1050     return ret;
000014  4630              MOV      r0,r6
;;;1051   }
000016  bd70              POP      {r4-r6,pc}
;;;1052   
                          ENDP


                          AREA ||i.lps22hb_interrupt_event_get||, CODE, READONLY, ALIGN=1

                  lps22hb_interrupt_event_get PROC
;;;1441     */
;;;1442   int32_t lps22hb_interrupt_event_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1443   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1444     lps22hb_int_source_t int_source;
;;;1445     int32_t ret;
;;;1446   
;;;1447     ret = lps22hb_read_reg(ctx, LPS22HB_INT_SOURCE, (uint8_t*)&int_source, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2125              MOVS     r1,#0x25
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1448     *val = int_source.ia;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1449   
;;;1450     return ret;
00001e  4630              MOV      r0,r6
;;;1451   }
000020  bdf8              POP      {r3-r7,pc}
;;;1452   
                          ENDP


                          AREA ||i.lps22hb_low_pass_filter_mode_get||, CODE, READONLY, ALIGN=1

                  lps22hb_low_pass_filter_mode_get PROC
;;;369      */
;;;370    int32_t lps22hb_low_pass_filter_mode_get(lps22hb_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;371                                             lps22hb_lpfp_t *val)
;;;372    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;373      lps22hb_ctrl_reg1_t ctrl_reg1;
;;;374      int32_t ret;
;;;375    
;;;376      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;377      switch (ctrl_reg1.lpfp){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00081          UBFX     r0,r0,#2,#2
00001c  b120              CBZ      r0,|L51.40|
00001e  2802              CMP      r0,#2
000020  d005              BEQ      |L51.46|
000022  2803              CMP      r0,#3
000024  d109              BNE      |L51.58|
000026  e005              B        |L51.52|
                  |L51.40|
;;;378        case LPS22HB_LPF_ODR_DIV_2:
;;;379          *val = LPS22HB_LPF_ODR_DIV_2;
000028  2000              MOVS     r0,#0
00002a  7020              STRB     r0,[r4,#0]
;;;380          break;
00002c  e008              B        |L51.64|
                  |L51.46|
;;;381        case LPS22HB_LPF_ODR_DIV_9:
;;;382          *val = LPS22HB_LPF_ODR_DIV_9;
00002e  2002              MOVS     r0,#2
000030  7020              STRB     r0,[r4,#0]
;;;383          break;
000032  e005              B        |L51.64|
                  |L51.52|
;;;384        case LPS22HB_LPF_ODR_DIV_20:
;;;385          *val = LPS22HB_LPF_ODR_DIV_20;
000034  2003              MOVS     r0,#3
000036  7020              STRB     r0,[r4,#0]
;;;386          break;
000038  e002              B        |L51.64|
                  |L51.58|
;;;387        default:
;;;388          *val = LPS22HB_LPF_ODR_DIV_2;
00003a  2000              MOVS     r0,#0
00003c  7020              STRB     r0,[r4,#0]
;;;389          break;
00003e  bf00              NOP      
                  |L51.64|
000040  bf00              NOP                            ;380
;;;390      }
;;;391      return ret;
000042  4630              MOV      r0,r6
;;;392    }
000044  bdf8              POP      {r3-r7,pc}
;;;393    
                          ENDP


                          AREA ||i.lps22hb_low_pass_filter_mode_set||, CODE, READONLY, ALIGN=1

                  lps22hb_low_pass_filter_mode_set PROC
;;;347      */
;;;348    int32_t lps22hb_low_pass_filter_mode_set(lps22hb_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;349                                              lps22hb_lpfp_t val)
;;;350    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;351      lps22hb_ctrl_reg1_t ctrl_reg1;
;;;352      int32_t ret;
;;;353    
;;;354      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;355      if(ret == 0){
000014  b95d              CBNZ     r5,|L52.46|
;;;356        ctrl_reg1.lpfp = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640083          BFI      r0,r4,#2,#2
00001e  9000              STR      r0,[sp,#0]
;;;357        ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2110              MOVS     r1,#0x10
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L52.46|
;;;358      }
;;;359      return ret;
00002e  4628              MOV      r0,r5
;;;360    }
000030  bdf8              POP      {r3-r7,pc}
;;;361    
                          ENDP


                          AREA ||i.lps22hb_low_pass_rst_get||, CODE, READONLY, ALIGN=1

                  lps22hb_low_pass_rst_get PROC
;;;678      */
;;;679    int32_t lps22hb_low_pass_rst_get(lps22hb_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;680    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;681      int32_t ret;
;;;682      ret =  lps22hb_read_reg(ctx, LPS22HB_LPFP_RES, (uint8_t*) buff, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2133              MOVS     r1,#0x33
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;683      return ret;
000014  4630              MOV      r0,r6
;;;684    }
000016  bd70              POP      {r4-r6,pc}
;;;685    
                          ENDP


                          AREA ||i.lps22hb_low_power_get||, CODE, READONLY, ALIGN=1

                  lps22hb_low_power_get PROC
;;;821      */
;;;822    int32_t lps22hb_low_power_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;823    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;824      lps22hb_res_conf_t res_conf;
;;;825      int32_t ret;
;;;826    
;;;827      ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;828      *val = res_conf.lc_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  7020              STRB     r0,[r4,#0]
;;;829    
;;;830      return ret;
00001e  4630              MOV      r0,r6
;;;831    }
000020  bdf8              POP      {r3-r7,pc}
;;;832    
                          ENDP


                          AREA ||i.lps22hb_low_power_set||, CODE, READONLY, ALIGN=1

                  lps22hb_low_power_set PROC
;;;800      */
;;;801    int32_t lps22hb_low_power_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;802    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;803      lps22hb_res_conf_t res_conf;
;;;804      int32_t ret;
;;;805    
;;;806      ret = lps22hb_read_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;807      if(ret == 0){
000014  b95d              CBNZ     r5,|L55.46|
;;;808        res_conf.lc_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;809        ret = lps22hb_write_reg(ctx, LPS22HB_RES_CONF, (uint8_t*)&res_conf, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  211a              MOVS     r1,#0x1a
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L55.46|
;;;810      }
;;;811      return ret;
00002e  4628              MOV      r0,r5
;;;812    }
000030  bdf8              POP      {r3-r7,pc}
;;;813    
                          ENDP


                          AREA ||i.lps22hb_one_shoot_trigger_get||, CODE, READONLY, ALIGN=1

                  lps22hb_one_shoot_trigger_get PROC
;;;484      */
;;;485    int32_t lps22hb_one_shoot_trigger_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;486    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;487      lps22hb_ctrl_reg2_t ctrl_reg2;
;;;488      int32_t ret;
;;;489    
;;;490      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;491      *val = ctrl_reg2.one_shot;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  7020              STRB     r0,[r4,#0]
;;;492    
;;;493      return ret;
00001e  4630              MOV      r0,r6
;;;494    }
000020  bdf8              POP      {r3-r7,pc}
;;;495    
                          ENDP


                          AREA ||i.lps22hb_one_shoot_trigger_set||, CODE, READONLY, ALIGN=1

                  lps22hb_one_shoot_trigger_set PROC
;;;463      */
;;;464    int32_t lps22hb_one_shoot_trigger_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;465    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;466      lps22hb_ctrl_reg2_t ctrl_reg2;
;;;467      int32_t ret;
;;;468    
;;;469      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;470      if(ret == 0){
000014  b95d              CBNZ     r5,|L57.46|
;;;471        ctrl_reg2.one_shot = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;472        ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2111              MOVS     r1,#0x11
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L57.46|
;;;473      }
;;;474      return ret;
00002e  4628              MOV      r0,r5
;;;475    }
000030  bdf8              POP      {r3-r7,pc}
;;;476    
                          ENDP


                          AREA ||i.lps22hb_pin_mode_get||, CODE, READONLY, ALIGN=1

                  lps22hb_pin_mode_get PROC
;;;1311     */
;;;1312   int32_t lps22hb_pin_mode_get(lps22hb_ctx_t *ctx, lps22hb_pp_od_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1313   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1314     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1315     int32_t ret;
;;;1316   
;;;1317     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1318     switch (ctrl_reg3.pp_od){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  b110              CBZ      r0,|L58.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L58.48|
000022  e002              B        |L58.42|
                  |L58.36|
;;;1319       case LPS22HB_PUSH_PULL:
;;;1320         *val = LPS22HB_PUSH_PULL;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;1321         break;
000028  e005              B        |L58.54|
                  |L58.42|
;;;1322       case LPS22HB_OPEN_DRAIN:
;;;1323         *val = LPS22HB_OPEN_DRAIN;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;1324         break;
00002e  e002              B        |L58.54|
                  |L58.48|
;;;1325       default:
;;;1326         *val = LPS22HB_PUSH_PULL;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;1327         break;
000034  bf00              NOP      
                  |L58.54|
000036  bf00              NOP                            ;1321
;;;1328     }
;;;1329     return ret;
000038  4630              MOV      r0,r6
;;;1330   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1331   
                          ENDP


                          AREA ||i.lps22hb_pin_mode_set||, CODE, READONLY, ALIGN=1

                  lps22hb_pin_mode_set PROC
;;;1290     */
;;;1291   int32_t lps22hb_pin_mode_set(lps22hb_ctx_t *ctx, lps22hb_pp_od_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1292   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1293     lps22hb_ctrl_reg3_t ctrl_reg3;
;;;1294     int32_t ret;
;;;1295   
;;;1296     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1297     if(ret == 0){
000014  b95d              CBNZ     r5,|L59.46|
;;;1298       ctrl_reg3.pp_od = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9000              STR      r0,[sp,#0]
;;;1299       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG3, (uint8_t*)&ctrl_reg3, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L59.46|
;;;1300     }
;;;1301     return ret;
00002e  4628              MOV      r0,r5
;;;1302   }
000030  bdf8              POP      {r3-r7,pc}
;;;1303   
                          ENDP


                          AREA ||i.lps22hb_press_data_ovr_get||, CODE, READONLY, ALIGN=1

                  lps22hb_press_data_ovr_get PROC
;;;607      */
;;;608    int32_t lps22hb_press_data_ovr_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;609    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;610      lps22hb_status_t status;
;;;611      int32_t ret;
;;;612    
;;;613      ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t*)&status, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2127              MOVS     r1,#0x27
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;614      *val = status.p_or;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  7020              STRB     r0,[r4,#0]
;;;615    
;;;616      return ret;
00001e  4630              MOV      r0,r6
;;;617    }
000020  bdf8              POP      {r3-r7,pc}
;;;618    
                          ENDP


                          AREA ||i.lps22hb_press_data_ready_get||, CODE, READONLY, ALIGN=1

                  lps22hb_press_data_ready_get PROC
;;;569      */
;;;570    int32_t lps22hb_press_data_ready_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;571    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;572      lps22hb_status_t status;
;;;573      int32_t ret;
;;;574    
;;;575      ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t*)&status, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2127              MOVS     r1,#0x27
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;576      *val = status.p_da;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  7020              STRB     r0,[r4,#0]
;;;577    
;;;578      return ret;
00001e  4630              MOV      r0,r6
;;;579    }
000020  bdf8              POP      {r3-r7,pc}
;;;580    
                          ENDP


                          AREA ||i.lps22hb_pressure_offset_get||, CODE, READONLY, ALIGN=1

                  lps22hb_pressure_offset_get PROC
;;;554      */
;;;555    int32_t lps22hb_pressure_offset_get(lps22hb_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;556    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;557      int32_t ret;
;;;558      ret =  lps22hb_read_reg(ctx, LPS22HB_RPDS_L, buff, 2);
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  2118              MOVS     r1,#0x18
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;559      return ret;
000014  4630              MOV      r0,r6
;;;560    }
000016  bd70              POP      {r4-r6,pc}
;;;561    
                          ENDP


                          AREA ||i.lps22hb_pressure_offset_set||, CODE, READONLY, ALIGN=1

                  lps22hb_pressure_offset_set PROC
;;;538      */
;;;539    int32_t lps22hb_pressure_offset_set(lps22hb_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;540    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;541      int32_t ret;
;;;542      ret =  lps22hb_write_reg(ctx, LPS22HB_RPDS_L, buff, 2);
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  2118              MOVS     r1,#0x18
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_write_reg
000012  4606              MOV      r6,r0
;;;543      return ret;
000014  4630              MOV      r0,r6
;;;544    }
000016  bd70              POP      {r4-r6,pc}
;;;545    
                          ENDP


                          AREA ||i.lps22hb_pressure_raw_get||, CODE, READONLY, ALIGN=1

                  lps22hb_pressure_raw_get PROC
;;;645      */
;;;646    int32_t lps22hb_pressure_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;647    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;648      int32_t ret;
;;;649      ret =  lps22hb_read_reg(ctx, LPS22HB_PRESS_OUT_XL, buff, 3);
000006  2303              MOVS     r3,#3
000008  4622              MOV      r2,r4
00000a  2128              MOVS     r1,#0x28
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;650      return ret;
000014  4630              MOV      r0,r6
;;;651    }
000016  bd70              POP      {r4-r6,pc}
;;;652    
                          ENDP


                          AREA ||i.lps22hb_pressure_ref_get||, CODE, READONLY, ALIGN=1

                  lps22hb_pressure_ref_get PROC
;;;522      */
;;;523    int32_t lps22hb_pressure_ref_get(lps22hb_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;524    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;525      int32_t ret;
;;;526      ret =  lps22hb_read_reg(ctx, LPS22HB_REF_P_XL, buff, 3);
000006  2303              MOVS     r3,#3
000008  4622              MOV      r2,r4
00000a  2115              MOVS     r1,#0x15
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;527      return ret;
000014  4630              MOV      r0,r6
;;;528    }
000016  bd70              POP      {r4-r6,pc}
;;;529    
                          ENDP


                          AREA ||i.lps22hb_pressure_ref_set||, CODE, READONLY, ALIGN=1

                  lps22hb_pressure_ref_set PROC
;;;505      */
;;;506    int32_t lps22hb_pressure_ref_set(lps22hb_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;507    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;508      int32_t ret;
;;;509      ret =  lps22hb_write_reg(ctx, LPS22HB_REF_P_XL, buff, 3);
000006  2303              MOVS     r3,#3
000008  4622              MOV      r2,r4
00000a  2115              MOVS     r1,#0x15
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_write_reg
000012  4606              MOV      r6,r0
;;;510      return ret;
000014  4630              MOV      r0,r6
;;;511    }
000016  bd70              POP      {r4-r6,pc}
;;;512    
                          ENDP


                          AREA ||i.lps22hb_pressure_snap_get||, CODE, READONLY, ALIGN=1

                  lps22hb_pressure_snap_get PROC
;;;287      */
;;;288    int32_t lps22hb_pressure_snap_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;289    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;290      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;291      int32_t ret;
;;;292    
;;;293      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;294                             (uint8_t*)&interrupt_cfg, 1);
;;;295      *val = interrupt_cfg.autorifp;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;296    
;;;297      return ret;
00001c  4630              MOV      r0,r6
;;;298    }
00001e  bdf8              POP      {r3-r7,pc}
;;;299    
                          ENDP


                          AREA ||i.lps22hb_pressure_snap_rst_get||, CODE, READONLY, ALIGN=1

                  lps22hb_pressure_snap_rst_get PROC
;;;244      */
;;;245    int32_t lps22hb_pressure_snap_rst_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;246    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;247      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;248      int32_t ret;
;;;249    
;;;250      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;251                             (uint8_t*)&interrupt_cfg, 1);
;;;252      *val = interrupt_cfg.reset_arp;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;253    
;;;254      return ret;
00001e  4630              MOV      r0,r6
;;;255    }
000020  bdf8              POP      {r3-r7,pc}
;;;256    
                          ENDP


                          AREA ||i.lps22hb_pressure_snap_rst_set||, CODE, READONLY, ALIGN=1

                  lps22hb_pressure_snap_rst_set PROC
;;;221      */
;;;222    int32_t lps22hb_pressure_snap_rst_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;223    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;224      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;225      int32_t ret;
;;;226    
;;;227      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;228                             (uint8_t*)&interrupt_cfg, 1);
;;;229      if(ret == 0){
000014  b95d              CBNZ     r5,|L69.46|
;;;230        interrupt_cfg.reset_arp = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9000              STR      r0,[sp,#0]
;;;231        ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  210b              MOVS     r1,#0xb
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L69.46|
;;;232                                (uint8_t*)&interrupt_cfg, 1);
;;;233      }
;;;234      return ret;
00002e  4628              MOV      r0,r5
;;;235    }
000030  bdf8              POP      {r3-r7,pc}
;;;236    
                          ENDP


                          AREA ||i.lps22hb_pressure_snap_set||, CODE, READONLY, ALIGN=1

                  lps22hb_pressure_snap_set PROC
;;;264      */
;;;265    int32_t lps22hb_pressure_snap_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;266    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;267      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;268      int32_t ret;
;;;269    
;;;270      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;271                             (uint8_t*)&interrupt_cfg, 1);
;;;272      if(ret == 0){
000014  b95d              CBNZ     r5,|L70.46|
;;;273        interrupt_cfg.autorifp = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;274        ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  210b              MOVS     r1,#0xb
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L70.46|
;;;275                                (uint8_t*)&interrupt_cfg, 1);
;;;276      }
;;;277      return ret;
00002e  4628              MOV      r0,r5
;;;278    }
000030  bdf8              POP      {r3-r7,pc}
;;;279    
                          ENDP


                          AREA ||i.lps22hb_read_reg||, CODE, READONLY, ALIGN=1

                  lps22hb_read_reg PROC
;;;64       */
;;;65     int32_t lps22hb_read_reg(lps22hb_ctx_t* ctx, uint8_t reg, uint8_t* data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;66                              uint16_t len)
;;;67     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;68       int32_t ret;
;;;69       ret = ctx->read_reg(ctx->handle, reg, data, len);
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  e9d4c001          LDRD     r12,r0,[r4,#4]
000016  47e0              BLX      r12
000018  4680              MOV      r8,r0
;;;70       return ret;
00001a  4640              MOV      r0,r8
;;;71     }
00001c  e8bd81f0          POP      {r4-r8,pc}
;;;72     
                          ENDP


                          AREA ||i.lps22hb_reset_get||, CODE, READONLY, ALIGN=1

                  lps22hb_reset_get PROC
;;;741      */
;;;742    int32_t lps22hb_reset_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;743    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;744      lps22hb_ctrl_reg2_t ctrl_reg2;
;;;745      int32_t ret;
;;;746    
;;;747      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;748      *val = ctrl_reg2.swreset;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  7020              STRB     r0,[r4,#0]
;;;749    
;;;750      return ret;
00001e  4630              MOV      r0,r6
;;;751    }
000020  bdf8              POP      {r3-r7,pc}
;;;752    
                          ENDP


                          AREA ||i.lps22hb_reset_set||, CODE, READONLY, ALIGN=1

                  lps22hb_reset_set PROC
;;;720      */
;;;721    int32_t lps22hb_reset_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;722    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;723      lps22hb_ctrl_reg2_t ctrl_reg2;
;;;724      int32_t ret;
;;;725    
;;;726      ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;727      if(ret == 0){
000014  b95d              CBNZ     r5,|L73.46|
;;;728        ctrl_reg2.swreset = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640082          BFI      r0,r4,#2,#1
00001e  9000              STR      r0,[sp,#0]
;;;729        ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2111              MOVS     r1,#0x11
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L73.46|
;;;730      }
;;;731      return ret;
00002e  4628              MOV      r0,r5
;;;732    }
000030  bdf8              POP      {r3-r7,pc}
;;;733    
                          ENDP


                          AREA ||i.lps22hb_sign_of_int_threshold_get||, CODE, READONLY, ALIGN=1

                  lps22hb_sign_of_int_threshold_get PROC
;;;910      */
;;;911    int32_t lps22hb_sign_of_int_threshold_get(lps22hb_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;912                                               lps22hb_pe_t *val)
;;;913    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;914      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;915      int32_t ret;
;;;916    
;;;917      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;918                             (uint8_t*)&interrupt_cfg, 1);
;;;919      switch (interrupt_cfg.pe){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000003          AND      r0,r0,#3
00001c  b130              CBZ      r0,|L74.44|
00001e  2801              CMP      r0,#1
000020  d007              BEQ      |L74.50|
000022  2802              CMP      r0,#2
000024  d008              BEQ      |L74.56|
000026  2803              CMP      r0,#3
000028  d10c              BNE      |L74.68|
00002a  e008              B        |L74.62|
                  |L74.44|
;;;920        case LPS22HB_NO_THRESHOLD:
;;;921          *val = LPS22HB_NO_THRESHOLD;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;922          break;
000030  e00b              B        |L74.74|
                  |L74.50|
;;;923        case LPS22HB_POSITIVE:
;;;924          *val = LPS22HB_POSITIVE;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;925          break;
000036  e008              B        |L74.74|
                  |L74.56|
;;;926        case LPS22HB_NEGATIVE:
;;;927          *val = LPS22HB_NEGATIVE;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;928          break;
00003c  e005              B        |L74.74|
                  |L74.62|
;;;929        case LPS22HB_BOTH:
;;;930          *val = LPS22HB_BOTH;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;931          break;
000042  e002              B        |L74.74|
                  |L74.68|
;;;932        default:
;;;933          *val = LPS22HB_NO_THRESHOLD;
000044  2000              MOVS     r0,#0
000046  7020              STRB     r0,[r4,#0]
;;;934          break;
000048  bf00              NOP      
                  |L74.74|
00004a  bf00              NOP                            ;922
;;;935      }
;;;936      return ret;
00004c  4630              MOV      r0,r6
;;;937    }
00004e  bdf8              POP      {r3-r7,pc}
;;;938    
                          ENDP


                          AREA ||i.lps22hb_sign_of_int_threshold_set||, CODE, READONLY, ALIGN=1

                  lps22hb_sign_of_int_threshold_set PROC
;;;886      */
;;;887    int32_t lps22hb_sign_of_int_threshold_set(lps22hb_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;888                                               lps22hb_pe_t val)
;;;889    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;890      lps22hb_interrupt_cfg_t interrupt_cfg;
;;;891      int32_t ret;
;;;892    
;;;893      ret = lps22hb_read_reg(ctx, LPS22HB_INTERRUPT_CFG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;894                             (uint8_t*)&interrupt_cfg, 1);
;;;895      if(ret == 0){
000014  b95d              CBNZ     r5,|L75.46|
;;;896        interrupt_cfg.pe = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640001          BFI      r0,r4,#0,#2
00001e  9000              STR      r0,[sp,#0]
;;;897        ret = lps22hb_write_reg(ctx, LPS22HB_INTERRUPT_CFG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  210b              MOVS     r1,#0xb
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L75.46|
;;;898                                (uint8_t*)&interrupt_cfg, 1);
;;;899      }
;;;900      return ret;
00002e  4628              MOV      r0,r5
;;;901    }
000030  bdf8              POP      {r3-r7,pc}
;;;902    
                          ENDP


                          AREA ||i.lps22hb_spi_mode_get||, CODE, READONLY, ALIGN=1

                  lps22hb_spi_mode_get PROC
;;;1748     */
;;;1749   int32_t lps22hb_spi_mode_get(lps22hb_ctx_t *ctx, lps22hb_sim_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1750   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1751     lps22hb_ctrl_reg1_t ctrl_reg1;
;;;1752     int32_t ret;
;;;1753   
;;;1754     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1755     switch (ctrl_reg1.sim){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  b110              CBZ      r0,|L76.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L76.48|
000022  e002              B        |L76.42|
                  |L76.36|
;;;1756       case LPS22HB_SPI_4_WIRE:
;;;1757         *val = LPS22HB_SPI_4_WIRE;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;1758         break;
000028  e005              B        |L76.54|
                  |L76.42|
;;;1759       case LPS22HB_SPI_3_WIRE:
;;;1760         *val = LPS22HB_SPI_3_WIRE;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;1761         break;
00002e  e002              B        |L76.54|
                  |L76.48|
;;;1762       default:
;;;1763         *val = LPS22HB_SPI_4_WIRE;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;1764         break;
000034  bf00              NOP      
                  |L76.54|
000036  bf00              NOP                            ;1758
;;;1765     }
;;;1766     return ret;
000038  4630              MOV      r0,r6
;;;1767   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1768   
                          ENDP


                          AREA ||i.lps22hb_spi_mode_set||, CODE, READONLY, ALIGN=1

                  lps22hb_spi_mode_set PROC
;;;1727     */
;;;1728   int32_t lps22hb_spi_mode_set(lps22hb_ctx_t *ctx, lps22hb_sim_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1729   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1730     lps22hb_ctrl_reg1_t ctrl_reg1;
;;;1731     int32_t ret;
;;;1732   
;;;1733     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1734     if(ret == 0){
000014  b95d              CBNZ     r5,|L77.46|
;;;1735       ctrl_reg1.sim = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;1736       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG1, (uint8_t*)&ctrl_reg1, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2110              MOVS     r1,#0x10
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L77.46|
;;;1737     }
;;;1738     return ret;
00002e  4628              MOV      r0,r5
;;;1739   }
000030  bdf8              POP      {r3-r7,pc}
;;;1740   
                          ENDP


                          AREA ||i.lps22hb_stop_on_fifo_threshold_get||, CODE, READONLY, ALIGN=1

                  lps22hb_stop_on_fifo_threshold_get PROC
;;;1494     */
;;;1495   int32_t lps22hb_stop_on_fifo_threshold_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1496   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1497     lps22hb_ctrl_reg2_t ctrl_reg2;
;;;1498     int32_t ret;
;;;1499   
;;;1500     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;1501     *val = ctrl_reg2.stop_on_fth;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1502   
;;;1503     return ret;
00001e  4630              MOV      r0,r6
;;;1504   }
000020  bdf8              POP      {r3-r7,pc}
;;;1505   
                          ENDP


                          AREA ||i.lps22hb_stop_on_fifo_threshold_set||, CODE, READONLY, ALIGN=1

                  lps22hb_stop_on_fifo_threshold_set PROC
;;;1473     */
;;;1474   int32_t lps22hb_stop_on_fifo_threshold_set(lps22hb_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1475   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1476     lps22hb_ctrl_reg2_t ctrl_reg2;
;;;1477     int32_t ret;
;;;1478   
;;;1479     ret = lps22hb_read_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4605              MOV      r5,r0
;;;1480     if(ret == 0){
000014  b95d              CBNZ     r5,|L79.46|
;;;1481       ctrl_reg2.stop_on_fth = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641045          BFI      r0,r4,#5,#1
00001e  9000              STR      r0,[sp,#0]
;;;1482       ret = lps22hb_write_reg(ctx, LPS22HB_CTRL_REG2, (uint8_t*)&ctrl_reg2, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2111              MOVS     r1,#0x11
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lps22hb_write_reg
00002c  4605              MOV      r5,r0
                  |L79.46|
;;;1483     }
;;;1484     return ret;
00002e  4628              MOV      r0,r5
;;;1485   }
000030  bdf8              POP      {r3-r7,pc}
;;;1486   
                          ENDP


                          AREA ||i.lps22hb_temp_data_ovr_get||, CODE, READONLY, ALIGN=1

                  lps22hb_temp_data_ovr_get PROC
;;;626      */
;;;627    int32_t lps22hb_temp_data_ovr_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;628    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;629      lps22hb_status_t status;
;;;630      int32_t ret;
;;;631    
;;;632      ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t*)&status, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2127              MOVS     r1,#0x27
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;633      *val = status.t_or;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  7020              STRB     r0,[r4,#0]
;;;634    
;;;635      return ret;
00001e  4630              MOV      r0,r6
;;;636    }
000020  bdf8              POP      {r3-r7,pc}
;;;637    
                          ENDP


                          AREA ||i.lps22hb_temp_data_ready_get||, CODE, READONLY, ALIGN=1

                  lps22hb_temp_data_ready_get PROC
;;;588      */
;;;589    int32_t lps22hb_temp_data_ready_get(lps22hb_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;590    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;591      lps22hb_status_t status;
;;;592      int32_t ret;
;;;593    
;;;594      ret = lps22hb_read_reg(ctx, LPS22HB_STATUS, (uint8_t*)&status, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2127              MOVS     r1,#0x27
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;595      *val = status.t_da;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00040          UBFX     r0,r0,#1,#1
00001c  7020              STRB     r0,[r4,#0]
;;;596    
;;;597      return ret;
00001e  4630              MOV      r0,r6
;;;598    }
000020  bdf8              POP      {r3-r7,pc}
;;;599    
                          ENDP


                          AREA ||i.lps22hb_temperature_raw_get||, CODE, READONLY, ALIGN=1

                  lps22hb_temperature_raw_get PROC
;;;660      */
;;;661    int32_t lps22hb_temperature_raw_get(lps22hb_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;662    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;663      int32_t ret;
;;;664      ret =  lps22hb_read_reg(ctx, LPS22HB_TEMP_OUT_L, (uint8_t*) buff, 2);
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  212b              MOVS     r1,#0x2b
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lps22hb_read_reg
000012  4606              MOV      r6,r0
;;;665      return ret;
000014  4630              MOV      r0,r6
;;;666    }
000016  bd70              POP      {r4-r6,pc}
;;;667    
                          ENDP


                          AREA ||i.lps22hb_write_reg||, CODE, READONLY, ALIGN=1

                  lps22hb_write_reg PROC
;;;82       */
;;;83     int32_t lps22hb_write_reg(lps22hb_ctx_t* ctx, uint8_t reg, uint8_t* data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;84                               uint16_t len)
;;;85     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;86       int32_t ret;
;;;87       ret = ctx->write_reg(ctx->handle, reg, data, len);
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  f8d4c000          LDR      r12,[r4,#0]
000016  68a0              LDR      r0,[r4,#8]
000018  47e0              BLX      r12
00001a  4680              MOV      r8,r0
;;;88       return ret;
00001c  4640              MOV      r0,r8
;;;89     }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;90     
                          ENDP

