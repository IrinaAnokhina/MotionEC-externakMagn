; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\lsm303agr_reg.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\lsm303agr_reg.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr\lsm303agr_reg.c]
                          THUMB

                          AREA ||i.lsm303agr_acceleration_raw_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_acceleration_raw_get PROC
;;;859      */
;;;860    int32_t lsm303agr_acceleration_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;861    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;862      int32_t ret;
;;;863      ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_X_L_A, buff, 6);
000006  2306              MOVS     r3,#6
000008  4622              MOV      r2,r4
00000a  2128              MOVS     r1,#0x28
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;864      return ret;
000014  4630              MOV      r0,r6
;;;865    }
000016  bd70              POP      {r4-r6,pc}
;;;866    
                          ENDP


                          AREA ||i.lsm303agr_act_threshold_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_act_threshold_get PROC
;;;3374     */
;;;3375   int32_t lsm303agr_act_threshold_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3376   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3377     lsm303agr_act_ths_a_t act_ths_a;
;;;3378     int32_t ret;
;;;3379   
;;;3380     ret = lsm303agr_read_reg(ctx, LSM303AGR_ACT_THS_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213e              MOVS     r1,#0x3e
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3381                              (uint8_t*)&act_ths_a, 1);
;;;3382     *val = act_ths_a.acth;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000007f          AND      r0,r0,#0x7f
00001c  7020              STRB     r0,[r4,#0]
;;;3383   
;;;3384     return ret;
00001e  4630              MOV      r0,r6
;;;3385   }
000020  bdf8              POP      {r3-r7,pc}
;;;3386   
                          ENDP


                          AREA ||i.lsm303agr_act_threshold_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_act_threshold_set PROC
;;;3348     */
;;;3349   int32_t lsm303agr_act_threshold_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3350   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3351     lsm303agr_act_ths_a_t act_ths_a;
;;;3352     int32_t ret;
;;;3353   
;;;3354     ret = lsm303agr_read_reg(ctx, LSM303AGR_ACT_THS_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213e              MOVS     r1,#0x3e
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;3355                              (uint8_t*)&act_ths_a, 1);
;;;3356     if(ret == 0){
000014  b95d              CBNZ     r5,|L3.46|
;;;3357       act_ths_a.acth = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640006          BFI      r0,r4,#0,#7
00001e  9000              STR      r0,[sp,#0]
;;;3358       ret = lsm303agr_write_reg(ctx, LSM303AGR_ACT_THS_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  213e              MOVS     r1,#0x3e
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L3.46|
;;;3359                                 (uint8_t*)&act_ths_a, 1);
;;;3360     }
;;;3361   
;;;3362     return ret;
00002e  4628              MOV      r0,r5
;;;3363   }
000030  bdf8              POP      {r3-r7,pc}
;;;3364   
                          ENDP


                          AREA ||i.lsm303agr_act_timeout_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_act_timeout_get PROC
;;;3418     */
;;;3419   int32_t lsm303agr_act_timeout_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3420   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3421     lsm303agr_act_dur_a_t act_dur_a;
;;;3422     int32_t ret;
;;;3423   
;;;3424     ret = lsm303agr_read_reg(ctx, LSM303AGR_ACT_DUR_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213f              MOVS     r1,#0x3f
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3425                              (uint8_t*)&act_dur_a, 1);
;;;3426     *val = act_dur_a.actd;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  7020              STRB     r0,[r4,#0]
;;;3427   
;;;3428     return ret;
00001a  4630              MOV      r0,r6
;;;3429   }
00001c  bdf8              POP      {r3-r7,pc}
;;;3430   
                          ENDP


                          AREA ||i.lsm303agr_act_timeout_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_act_timeout_set PROC
;;;3394     */
;;;3395   int32_t lsm303agr_act_timeout_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3396   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3397     lsm303agr_act_dur_a_t act_dur_a;
;;;3398     int32_t ret;
;;;3399   
;;;3400     ret = lsm303agr_read_reg(ctx, LSM303AGR_ACT_DUR_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213f              MOVS     r1,#0x3f
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;3401                              (uint8_t*)&act_dur_a, 1);
;;;3402     if(ret == 0){
000014  b945              CBNZ     r5,|L5.40|
;;;3403       act_dur_a.actd = (uint8_t)val;
000016  b2e0              UXTB     r0,r4
000018  9000              STR      r0,[sp,#0]
;;;3404       ret = lsm303agr_write_reg(ctx, LSM303AGR_ACT_DUR_A,
00001a  2301              MOVS     r3,#1
00001c  466a              MOV      r2,sp
00001e  213f              MOVS     r1,#0x3f
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       lsm303agr_write_reg
000026  4605              MOV      r5,r0
                  |L5.40|
;;;3405                                 (uint8_t*)&act_dur_a, 1);
;;;3406     }
;;;3407   
;;;3408     return ret;
000028  4628              MOV      r0,r5
;;;3409   }
00002a  bdf8              POP      {r3-r7,pc}
;;;3410   
                          ENDP


                          AREA ||i.lsm303agr_double_tap_timeout_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_double_tap_timeout_get PROC
;;;3313     */
;;;3314   int32_t lsm303agr_double_tap_timeout_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3315   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3316     lsm303agr_time_window_a_t time_window_a;
;;;3317     int32_t ret;
;;;3318   
;;;3319     ret = lsm303agr_read_reg(ctx, LSM303AGR_TIME_WINDOW_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213d              MOVS     r1,#0x3d
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3320                              (uint8_t*)&time_window_a, 1);
;;;3321     *val = time_window_a.tw;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  7020              STRB     r0,[r4,#0]
;;;3322   
;;;3323     return ret;
00001a  4630              MOV      r0,r6
;;;3324   }
00001c  bdf8              POP      {r3-r7,pc}
;;;3325   
                          ENDP


                          AREA ||i.lsm303agr_double_tap_timeout_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_double_tap_timeout_set PROC
;;;3286     */
;;;3287   int32_t lsm303agr_double_tap_timeout_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3288   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3289     lsm303agr_time_window_a_t time_window_a;
;;;3290     int32_t ret;
;;;3291   
;;;3292     ret = lsm303agr_read_reg(ctx, LSM303AGR_TIME_WINDOW_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213d              MOVS     r1,#0x3d
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;3293                              (uint8_t*)&time_window_a, 1);
;;;3294     if(ret == 0){
000014  b945              CBNZ     r5,|L7.40|
;;;3295       time_window_a.tw = (uint8_t)val;
000016  b2e0              UXTB     r0,r4
000018  9000              STR      r0,[sp,#0]
;;;3296       ret = lsm303agr_write_reg(ctx, LSM303AGR_TIME_WINDOW_A,
00001a  2301              MOVS     r3,#1
00001c  466a              MOV      r2,sp
00001e  213d              MOVS     r1,#0x3d
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       lsm303agr_write_reg
000026  4605              MOV      r5,r0
                  |L7.40|
;;;3297                                 (uint8_t*)&time_window_a, 1);
;;;3298     }
;;;3299   
;;;3300     return ret;
000028  4628              MOV      r0,r5
;;;3301   }
00002a  bdf8              POP      {r3-r7,pc}
;;;3302   
                          ENDP


                          AREA ||i.lsm303agr_from_fs_16g_hr_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_16g_hr_to_mg PROC
;;;118    
;;;119    float_t lsm303agr_from_fs_16g_hr_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;120    {
;;;121      return ((float_t)lsb / 16.0f ) * 11.72f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eeb31a00          VMOV.F32 s2,#16.00000000
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a02          VLDR     s0,|L8.28|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;122    }
000018  4770              BX       lr
;;;123    
                          ENDP

00001a  0000              DCW      0x0000
                  |L8.28|
00001c  413b851f          DCFS     0x413b851f ; 11.720000267028809

                          AREA ||i.lsm303agr_from_fs_16g_lp_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_16g_lp_to_mg PROC
;;;168    
;;;169    float_t lsm303agr_from_fs_16g_lp_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;170    {
;;;171      return ((float_t)lsb / 256.0f ) * 187.58f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  ed9f1a04          VLDR     s2,|L9.28|
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a03          VLDR     s0,|L9.32|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;172    }
000018  4770              BX       lr
;;;173    
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
00001c  43800000          DCFS     0x43800000 ; 256
                  |L9.32|
000020  433b947b          DCFS     0x433b947b ; 187.58000183105469

                          AREA ||i.lsm303agr_from_fs_16g_nm_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_16g_nm_to_mg PROC
;;;143    
;;;144    float_t lsm303agr_from_fs_16g_nm_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;145    {
;;;146      return ((float_t)lsb / 64.0f ) * 46.9f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  ed9f1a04          VLDR     s2,|L10.28|
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a03          VLDR     s0,|L10.32|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;147    }
000018  4770              BX       lr
;;;148    
                          ENDP

00001a  0000              DCW      0x0000
                  |L10.28|
00001c  42800000          DCFS     0x42800000 ; 64
                  |L10.32|
000020  423b999a          DCFS     0x423b999a ; 46.900001525878906

                          AREA ||i.lsm303agr_from_fs_2g_hr_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_2g_hr_to_mg PROC
;;;103    
;;;104    float_t lsm303agr_from_fs_2g_hr_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;105    {
;;;106      return ((float_t)lsb / 16.0f ) * 0.98f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eeb31a00          VMOV.F32 s2,#16.00000000
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a02          VLDR     s0,|L11.28|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;107    }
000018  4770              BX       lr
;;;108    
                          ENDP

00001a  0000              DCW      0x0000
                  |L11.28|
00001c  3f7ae148          DCFS     0x3f7ae148 ; 0.98000001907348633

                          AREA ||i.lsm303agr_from_fs_2g_lp_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_2g_lp_to_mg PROC
;;;153    
;;;154    float_t lsm303agr_from_fs_2g_lp_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;155    {
;;;156      return ((float_t)lsb / 256.0f ) * 15.63f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  ed9f1a04          VLDR     s2,|L12.28|
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a03          VLDR     s0,|L12.32|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;157    }
000018  4770              BX       lr
;;;158    
                          ENDP

00001a  0000              DCW      0x0000
                  |L12.28|
00001c  43800000          DCFS     0x43800000 ; 256
                  |L12.32|
000020  417a147b          DCFS     0x417a147b ; 15.630000114440918

                          AREA ||i.lsm303agr_from_fs_2g_nm_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_2g_nm_to_mg PROC
;;;128    
;;;129    float_t lsm303agr_from_fs_2g_nm_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;130    {
;;;131      return ((float_t)lsb / 64.0f ) * 3.9f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  ed9f1a04          VLDR     s2,|L13.28|
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a03          VLDR     s0,|L13.32|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;132    }
000018  4770              BX       lr
;;;133    
                          ENDP

00001a  0000              DCW      0x0000
                  |L13.28|
00001c  42800000          DCFS     0x42800000 ; 64
                  |L13.32|
000020  4079999a          DCFS     0x4079999a ; 3.9000000953674316

                          AREA ||i.lsm303agr_from_fs_4g_hr_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_4g_hr_to_mg PROC
;;;108    
;;;109    float_t lsm303agr_from_fs_4g_hr_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;110    {
;;;111      return ((float_t)lsb / 16.0f ) * 1.95f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eeb31a00          VMOV.F32 s2,#16.00000000
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a02          VLDR     s0,|L14.28|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;112    }
000018  4770              BX       lr
;;;113    
                          ENDP

00001a  0000              DCW      0x0000
                  |L14.28|
00001c  3ff9999a          DCFS     0x3ff9999a ; 1.9500000476837158

                          AREA ||i.lsm303agr_from_fs_4g_lp_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_4g_lp_to_mg PROC
;;;158    
;;;159    float_t lsm303agr_from_fs_4g_lp_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;160    {
;;;161      return ((float_t)lsb / 256.0f ) * 31.26f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  ed9f1a04          VLDR     s2,|L15.28|
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a03          VLDR     s0,|L15.32|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;162    }
000018  4770              BX       lr
;;;163    
                          ENDP

00001a  0000              DCW      0x0000
                  |L15.28|
00001c  43800000          DCFS     0x43800000 ; 256
                  |L15.32|
000020  41fa147b          DCFS     0x41fa147b ; 31.260000228881836

                          AREA ||i.lsm303agr_from_fs_4g_nm_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_4g_nm_to_mg PROC
;;;133    
;;;134    float_t lsm303agr_from_fs_4g_nm_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;135    {
;;;136      return ((float_t)lsb / 64.0f ) * 7.82f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  ed9f1a04          VLDR     s2,|L16.28|
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a03          VLDR     s0,|L16.32|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;137    }
000018  4770              BX       lr
;;;138    
                          ENDP

00001a  0000              DCW      0x0000
                  |L16.28|
00001c  42800000          DCFS     0x42800000 ; 64
                  |L16.32|
000020  40fa3d71          DCFS     0x40fa3d71 ; 7.820000171661377

                          AREA ||i.lsm303agr_from_fs_8g_hr_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_8g_hr_to_mg PROC
;;;113    
;;;114    float_t lsm303agr_from_fs_8g_hr_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;115    {
;;;116      return ((float_t)lsb / 16.0f ) * 3.9f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eeb31a00          VMOV.F32 s2,#16.00000000
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a02          VLDR     s0,|L17.28|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;117    }
000018  4770              BX       lr
;;;118    
                          ENDP

00001a  0000              DCW      0x0000
                  |L17.28|
00001c  4079999a          DCFS     0x4079999a ; 3.9000000953674316

                          AREA ||i.lsm303agr_from_fs_8g_lp_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_8g_lp_to_mg PROC
;;;163    
;;;164    float_t lsm303agr_from_fs_8g_lp_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;165    {
;;;166      return ((float_t)lsb / 256.0f ) * 62.52f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  ed9f1a04          VLDR     s2,|L18.28|
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a03          VLDR     s0,|L18.32|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;167    }
000018  4770              BX       lr
;;;168    
                          ENDP

00001a  0000              DCW      0x0000
                  |L18.28|
00001c  43800000          DCFS     0x43800000 ; 256
                  |L18.32|
000020  427a147b          DCFS     0x427a147b ; 62.520000457763672

                          AREA ||i.lsm303agr_from_fs_8g_nm_to_mg||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_fs_8g_nm_to_mg PROC
;;;138    
;;;139    float_t lsm303agr_from_fs_8g_nm_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;140    {
;;;141      return ((float_t)lsb / 64.0f ) * 15.63f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  ed9f1a04          VLDR     s2,|L19.28|
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  ed9f0a03          VLDR     s0,|L19.32|
000014  ee200a80          VMUL.F32 s0,s1,s0
;;;142    }
000018  4770              BX       lr
;;;143    
                          ENDP

00001a  0000              DCW      0x0000
                  |L19.28|
00001c  42800000          DCFS     0x42800000 ; 64
                  |L19.32|
000020  417a147b          DCFS     0x417a147b ; 15.630000114440918

                          AREA ||i.lsm303agr_from_lsb_hr_to_celsius||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_lsb_hr_to_celsius PROC
;;;123    
;;;124    float_t lsm303agr_from_lsb_hr_to_celsius(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;125    {
;;;126      return ( ( (float_t)lsb / 64.0f ) / 4.0f ) + 25.0f;
000004  eef80ac0          VCVT.F32.S32 s1,s0
000008  ed9f1a06          VLDR     s2,|L20.36|
00000c  ee800a81          VDIV.F32 s0,s1,s2
000010  eeb11a00          VMOV.F32 s2,#4.00000000
000014  eec00a01          VDIV.F32 s1,s0,s2
000018  eeb30a09          VMOV.F32 s0,#25.00000000
00001c  ee300a80          VADD.F32 s0,s1,s0
;;;127    }
000020  4770              BX       lr
;;;128    
                          ENDP

000022  0000              DCW      0x0000
                  |L20.36|
000024  42800000          DCFS     0x42800000 ; 64

                          AREA ||i.lsm303agr_from_lsb_lp_to_celsius||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_lsb_lp_to_celsius PROC
;;;173    
;;;174    float_t lsm303agr_from_lsb_lp_to_celsius(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;175    {
;;;176      return ( ( (float_t)lsb / 256.0f ) * 1.0f ) + 25.0f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  ed9f1a05          VLDR     s2,|L21.32|
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  eeb71a00          VMOV.F32 s2,#1.00000000
000014  eeb30a09          VMOV.F32 s0,#25.00000000
000018  ee000a81          VMLA.F32 s0,s1,s2
;;;177    }
00001c  4770              BX       lr
;;;178    
                          ENDP

00001e  0000              DCW      0x0000
                  |L21.32|
000020  43800000          DCFS     0x43800000 ; 256

                          AREA ||i.lsm303agr_from_lsb_nm_to_celsius||, CODE, READONLY, ALIGN=2

                  lsm303agr_from_lsb_nm_to_celsius PROC
;;;148    
;;;149    float_t lsm303agr_from_lsb_nm_to_celsius(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;150    {
;;;151      return ( ( (float_t)lsb / 64.0f ) / 4.0f ) + 25.0f;
000004  eef80ac0          VCVT.F32.S32 s1,s0
000008  ed9f1a06          VLDR     s2,|L22.36|
00000c  ee800a81          VDIV.F32 s0,s1,s2
000010  eeb11a00          VMOV.F32 s2,#4.00000000
000014  eec00a01          VDIV.F32 s1,s0,s2
000018  eeb30a09          VMOV.F32 s0,#25.00000000
00001c  ee300a80          VADD.F32 s0,s1,s0
;;;152    }
000020  4770              BX       lr
;;;153    
                          ENDP

000022  0000              DCW      0x0000
                  |L22.36|
000024  42800000          DCFS     0x42800000 ; 64

                          AREA ||i.lsm303agr_from_lsb_to_mgauss||, CODE, READONLY, ALIGN=1

                  lsm303agr_from_lsb_to_mgauss PROC
;;;178    
;;;179    float_t lsm303agr_from_lsb_to_mgauss(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;180    {
;;;181      return (float_t)lsb * 1.5f;
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eef70a08          VMOV.F32 s1,#1.50000000
00000c  ee200a20          VMUL.F32 s0,s0,s1
;;;182    }
000010  4770              BX       lr
;;;183    
                          ENDP


                          AREA ||i.lsm303agr_mag_block_data_update_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_block_data_update_get PROC
;;;1338     */
;;;1339   int32_t lsm303agr_mag_block_data_update_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1340                                               uint8_t *val)
;;;1341   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1342     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;1343     int32_t ret;
;;;1344   
;;;1345     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1346                              (uint8_t*)&cfg_reg_c_m, 1);
;;;1347     *val = cfg_reg_c_m.bdu;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1348   
;;;1349     return ret;
00001e  4630              MOV      r0,r6
;;;1350   }
000020  bdf8              POP      {r3-r7,pc}
;;;1351   
                          ENDP


                          AREA ||i.lsm303agr_mag_block_data_update_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_block_data_update_set PROC
;;;1313     */
;;;1314   int32_t lsm303agr_mag_block_data_update_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1315                                               uint8_t val)
;;;1316   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1317     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;1318     int32_t ret;
;;;1319   
;;;1320     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1321                              (uint8_t*)&cfg_reg_c_m, 1);
;;;1322     if(ret == 0){
000014  b95d              CBNZ     r5,|L25.46|
;;;1323       cfg_reg_c_m.bdu = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;1324       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2162              MOVS     r1,#0x62
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L25.46|
;;;1325                                 (uint8_t*)&cfg_reg_c_m, 1);
;;;1326     }
;;;1327   
;;;1328     return ret;
00002e  4628              MOV      r0,r5
;;;1329   }
000030  bdf8              POP      {r3-r7,pc}
;;;1330   
                          ENDP


                          AREA ||i.lsm303agr_mag_boot_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_boot_get PROC
;;;1699     */
;;;1700   int32_t lsm303agr_mag_boot_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1701   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1702     lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;1703     int32_t ret;
;;;1704   
;;;1705     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1706                              (uint8_t*)&cfg_reg_a_m, 1);
;;;1707     *val = cfg_reg_a_m.reboot;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1708   
;;;1709     return ret;
00001e  4630              MOV      r0,r6
;;;1710   }
000020  bdf8              POP      {r3-r7,pc}
;;;1711   
                          ENDP


                          AREA ||i.lsm303agr_mag_boot_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_boot_set PROC
;;;1675     */
;;;1676   int32_t lsm303agr_mag_boot_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1677   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1678     lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;1679     int32_t ret;
;;;1680   
;;;1681     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1682                              (uint8_t*)&cfg_reg_a_m, 1);
;;;1683     if(ret == 0){
000014  b95d              CBNZ     r5,|L27.46|
;;;1684       cfg_reg_a_m.reboot = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9000              STR      r0,[sp,#0]
;;;1685       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2160              MOVS     r1,#0x60
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L27.46|
;;;1686                                 (uint8_t*)&cfg_reg_a_m, 1);
;;;1687     }
;;;1688   
;;;1689     return ret;
00002e  4628              MOV      r0,r5
;;;1690   }
000030  bdf8              POP      {r3-r7,pc}
;;;1691   
                          ENDP


                          AREA ||i.lsm303agr_mag_data_format_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_data_format_get PROC
;;;1788     */
;;;1789   int32_t lsm303agr_mag_data_format_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1790                                         lsm303agr_ble_m_t *val)
;;;1791   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1792     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;1793     int32_t ret;
;;;1794   
;;;1795     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1796                              (uint8_t*)&cfg_reg_c_m, 1);
;;;1797   
;;;1798       switch (cfg_reg_c_m.ble){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  b110              CBZ      r0,|L28.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L28.48|
000022  e002              B        |L28.42|
                  |L28.36|
;;;1799       case LSM303AGR_MG_LSB_AT_LOW_ADD:
;;;1800         *val = LSM303AGR_MG_LSB_AT_LOW_ADD;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;1801         break;
000028  e005              B        |L28.54|
                  |L28.42|
;;;1802       case LSM303AGR_MG_MSB_AT_LOW_ADD:
;;;1803         *val = LSM303AGR_MG_MSB_AT_LOW_ADD;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;1804         break;
00002e  e002              B        |L28.54|
                  |L28.48|
;;;1805       default:
;;;1806         *val = LSM303AGR_MG_LSB_AT_LOW_ADD;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;1807         break;
000034  bf00              NOP      
                  |L28.54|
000036  bf00              NOP                            ;1801
;;;1808     }
;;;1809     return ret;
000038  4630              MOV      r0,r6
;;;1810   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1811   
                          ENDP


                          AREA ||i.lsm303agr_mag_data_format_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_data_format_set PROC
;;;1763     */
;;;1764   int32_t lsm303agr_mag_data_format_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1765                                         lsm303agr_ble_m_t val)
;;;1766   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1767     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;1768     int32_t ret;
;;;1769   
;;;1770     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1771                              (uint8_t*)&cfg_reg_c_m, 1);
;;;1772     if(ret == 0){
000014  b95d              CBNZ     r5,|L29.46|
;;;1773       cfg_reg_c_m.ble = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;1774       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2162              MOVS     r1,#0x62
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L29.46|
;;;1775                                 (uint8_t*)&cfg_reg_c_m, 1);
;;;1776     }
;;;1777   
;;;1778     return ret;
00002e  4628              MOV      r0,r5
;;;1779   }
000030  bdf8              POP      {r3-r7,pc}
;;;1780   
                          ENDP


                          AREA ||i.lsm303agr_mag_data_ovr_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_data_ovr_get PROC
;;;1379     */
;;;1380   int32_t lsm303agr_mag_data_ovr_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1381   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1382     lsm303agr_status_reg_m_t status_reg_m;
;;;1383     int32_t ret;
;;;1384   
;;;1385     ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2167              MOVS     r1,#0x67
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1386                              (uint8_t*)&status_reg_m, 1);
;;;1387     *val = status_reg_m.zyxor;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;1388   
;;;1389     return ret;
00001c  4630              MOV      r0,r6
;;;1390   }
00001e  bdf8              POP      {r3-r7,pc}
;;;1391   
                          ENDP


                          AREA ||i.lsm303agr_mag_data_rate_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_data_rate_get PROC
;;;1002     */
;;;1003   int32_t lsm303agr_mag_data_rate_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1004                                       lsm303agr_mg_odr_m_t *val)
;;;1005   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1006     lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;1007     int32_t ret;
;;;1008   
;;;1009     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1010                              (uint8_t*)&cfg_reg_a_m, 1);
;;;1011   
;;;1012       switch (cfg_reg_a_m.odr){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00081          UBFX     r0,r0,#2,#2
00001c  b130              CBZ      r0,|L31.44|
00001e  2801              CMP      r0,#1
000020  d007              BEQ      |L31.50|
000022  2802              CMP      r0,#2
000024  d008              BEQ      |L31.56|
000026  2803              CMP      r0,#3
000028  d10c              BNE      |L31.68|
00002a  e008              B        |L31.62|
                  |L31.44|
;;;1013       case LSM303AGR_MG_ODR_10Hz:
;;;1014         *val = LSM303AGR_MG_ODR_10Hz;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;1015         break;
000030  e00b              B        |L31.74|
                  |L31.50|
;;;1016       case LSM303AGR_MG_ODR_20Hz:
;;;1017         *val = LSM303AGR_MG_ODR_20Hz;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;1018         break;
000036  e008              B        |L31.74|
                  |L31.56|
;;;1019       case LSM303AGR_MG_ODR_50Hz:
;;;1020         *val = LSM303AGR_MG_ODR_50Hz;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;1021         break;
00003c  e005              B        |L31.74|
                  |L31.62|
;;;1022       case LSM303AGR_MG_ODR_100Hz:
;;;1023         *val = LSM303AGR_MG_ODR_100Hz;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;1024         break;
000042  e002              B        |L31.74|
                  |L31.68|
;;;1025       default:
;;;1026         *val = LSM303AGR_MG_ODR_10Hz;
000044  2000              MOVS     r0,#0
000046  7020              STRB     r0,[r4,#0]
;;;1027         break;
000048  bf00              NOP      
                  |L31.74|
00004a  bf00              NOP                            ;1015
;;;1028     }
;;;1029     return ret;
00004c  4630              MOV      r0,r6
;;;1030   }
00004e  bdf8              POP      {r3-r7,pc}
;;;1031   
                          ENDP


                          AREA ||i.lsm303agr_mag_data_rate_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_data_rate_set PROC
;;;977      */
;;;978    int32_t lsm303agr_mag_data_rate_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;979                                        lsm303agr_mg_odr_m_t val)
;;;980    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;981      lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;982      int32_t ret;
;;;983    
;;;984      ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;985                               (uint8_t*)&cfg_reg_a_m, 1);
;;;986      if(ret == 0){
000014  b95d              CBNZ     r5,|L32.46|
;;;987        cfg_reg_a_m.odr = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640083          BFI      r0,r4,#2,#2
00001e  9000              STR      r0,[sp,#0]
;;;988        ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2160              MOVS     r1,#0x60
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L32.46|
;;;989                                  (uint8_t*)&cfg_reg_a_m, 1);
;;;990      }
;;;991    
;;;992      return ret;
00002e  4628              MOV      r0,r5
;;;993    }
000030  bdf8              POP      {r3-r7,pc}
;;;994    
                          ENDP


                          AREA ||i.lsm303agr_mag_data_ready_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_data_ready_get PROC
;;;1359     */
;;;1360   int32_t lsm303agr_mag_data_ready_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1361   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1362     lsm303agr_status_reg_m_t status_reg_m;
;;;1363     int32_t ret;
;;;1364   
;;;1365     ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2167              MOVS     r1,#0x67
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1366                              (uint8_t*)&status_reg_m, 1);
;;;1367     *val = status_reg_m.zyxda;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1368   
;;;1369     return ret;
00001e  4630              MOV      r0,r6
;;;1370   }
000020  bdf8              POP      {r3-r7,pc}
;;;1371   
                          ENDP


                          AREA ||i.lsm303agr_mag_device_id_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_device_id_get PROC
;;;1616     */
;;;1617   int32_t lsm303agr_mag_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;1618   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1619     int32_t ret;
;;;1620     ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_M, buff, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  214f              MOVS     r1,#0x4f
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1621     return ret;
000014  4630              MOV      r0,r6
;;;1622   }
000016  bd70              POP      {r4-r6,pc}
;;;1623   
                          ENDP


                          AREA ||i.lsm303agr_mag_drdy_on_pin_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_drdy_on_pin_get PROC
;;;2612     */
;;;2613   int32_t lsm303agr_mag_drdy_on_pin_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2614   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2615     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;2616     int32_t ret;
;;;2617   
;;;2618     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2619                              (uint8_t*)&cfg_reg_c_m, 1);
;;;2620     *val = cfg_reg_c_m.int_mag;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  7020              STRB     r0,[r4,#0]
;;;2621   
;;;2622     return ret;
00001e  4630              MOV      r0,r6
;;;2623   }
000020  bdf8              POP      {r3-r7,pc}
;;;2624   
                          ENDP


                          AREA ||i.lsm303agr_mag_drdy_on_pin_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_drdy_on_pin_set PROC
;;;2588     */
;;;2589   int32_t lsm303agr_mag_drdy_on_pin_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2590   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2591     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;2592     int32_t ret;
;;;2593   
;;;2594     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2595                              (uint8_t*)&cfg_reg_c_m, 1);
;;;2596     if(ret == 0){
000014  b95d              CBNZ     r5,|L36.46|
;;;2597       cfg_reg_c_m.int_mag = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;2598       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2162              MOVS     r1,#0x62
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L36.46|
;;;2599                                 (uint8_t*)&cfg_reg_c_m, 1);
;;;2600     }
;;;2601   
;;;2602     return ret;
00002e  4628              MOV      r0,r5
;;;2603   }
000030  bdf8              POP      {r3-r7,pc}
;;;2604   
                          ENDP


                          AREA ||i.lsm303agr_mag_i2c_interface_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_i2c_interface_get PROC
;;;3532     */
;;;3533   int32_t lsm303agr_mag_i2c_interface_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3534                                           lsm303agr_i2c_dis_m_t *val)
;;;3535   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3536     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;3537     int32_t ret;
;;;3538   
;;;3539     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3540                              (uint8_t*)&cfg_reg_c_m, 1);
;;;3541   
;;;3542       switch (cfg_reg_c_m.i2c_dis){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  b110              CBZ      r0,|L37.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L37.48|
000022  e002              B        |L37.42|
                  |L37.36|
;;;3543       case LSM303AGR_I2C_ENABLE:
;;;3544         *val = LSM303AGR_I2C_ENABLE;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;3545         break;
000028  e005              B        |L37.54|
                  |L37.42|
;;;3546       case LSM303AGR_I2C_DISABLE:
;;;3547         *val = LSM303AGR_I2C_DISABLE;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;3548         break;
00002e  e002              B        |L37.54|
                  |L37.48|
;;;3549       default:
;;;3550         *val = LSM303AGR_I2C_ENABLE;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;3551         break;
000034  bf00              NOP      
                  |L37.54|
000036  bf00              NOP                            ;3545
;;;3552     }
;;;3553     return ret;
000038  4630              MOV      r0,r6
;;;3554   }
00003a  bdf8              POP      {r3-r7,pc}
;;;3555   
                          ENDP


                          AREA ||i.lsm303agr_mag_i2c_interface_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_i2c_interface_set PROC
;;;3507     */
;;;3508   int32_t lsm303agr_mag_i2c_interface_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3509                                           lsm303agr_i2c_dis_m_t val)
;;;3510   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3511     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;3512     int32_t ret;
;;;3513   
;;;3514     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;3515                              (uint8_t*)&cfg_reg_c_m, 1);
;;;3516     if(ret == 0){
000014  b95d              CBNZ     r5,|L38.46|
;;;3517       cfg_reg_c_m.i2c_dis = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641045          BFI      r0,r4,#5,#1
00001e  9000              STR      r0,[sp,#0]
;;;3518       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2162              MOVS     r1,#0x62
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L38.46|
;;;3519                                 (uint8_t*)&cfg_reg_c_m, 1);
;;;3520     }
;;;3521   
;;;3522     return ret;
00002e  4628              MOV      r0,r5
;;;3523   }
000030  bdf8              POP      {r3-r7,pc}
;;;3524   
                          ENDP


                          AREA ||i.lsm303agr_mag_int_gen_conf_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_int_gen_conf_get PROC
;;;2692     */
;;;2693   int32_t lsm303agr_mag_int_gen_conf_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2694                                          lsm303agr_int_crtl_reg_m_t *val)
;;;2695   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2696     int32_t ret;
;;;2697     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT_CRTL_REG_M,
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2163              MOVS     r1,#0x63
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2698                              (uint8_t*) val, 1);
;;;2699     return ret;
000014  4630              MOV      r0,r6
;;;2700   }
000016  bd70              POP      {r4-r6,pc}
;;;2701   
                          ENDP


                          AREA ||i.lsm303agr_mag_int_gen_conf_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_int_gen_conf_set PROC
;;;2676     */
;;;2677   int32_t lsm303agr_mag_int_gen_conf_set(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2678                                          lsm303agr_int_crtl_reg_m_t *val)
;;;2679   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2680     int32_t ret;
;;;2681     ret = lsm303agr_write_reg(ctx, LSM303AGR_INT_CRTL_REG_M, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2163              MOVS     r1,#0x63
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_write_reg
000012  4606              MOV      r6,r0
;;;2682     return ret;
000014  4630              MOV      r0,r6
;;;2683   }
000016  bd70              POP      {r4-r6,pc}
;;;2684   
                          ENDP


                          AREA ||i.lsm303agr_mag_int_gen_source_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_int_gen_source_get PROC
;;;2709     */
;;;2710   int32_t lsm303agr_mag_int_gen_source_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2711                                            lsm303agr_int_source_reg_m_t *val)
;;;2712   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2713     int32_t ret;
;;;2714     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT_SOURCE_REG_M,
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2164              MOVS     r1,#0x64
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2715                              (uint8_t*) val, 1);
;;;2716     return ret;
000014  4630              MOV      r0,r6
;;;2717   }
000016  bd70              POP      {r4-r6,pc}
;;;2718   
                          ENDP


                          AREA ||i.lsm303agr_mag_int_gen_treshold_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_int_gen_treshold_get PROC
;;;2748     */
;;;2749   int32_t lsm303agr_mag_int_gen_treshold_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2750                                              uint8_t *buff)
;;;2751   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2752     int32_t ret;
;;;2753     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT_THS_L_REG_M, buff, 2);
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  2165              MOVS     r1,#0x65
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2754     return ret;
000014  4630              MOV      r0,r6
;;;2755   }
000016  bd70              POP      {r4-r6,pc}
;;;2756   
                          ENDP


                          AREA ||i.lsm303agr_mag_int_gen_treshold_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_int_gen_treshold_set PROC
;;;2729     */
;;;2730   int32_t lsm303agr_mag_int_gen_treshold_set(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2731                                              uint8_t *buff)
;;;2732   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2733     int32_t ret;
;;;2734     ret = lsm303agr_write_reg(ctx, LSM303AGR_INT_THS_L_REG_M, buff, 2);
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  2165              MOVS     r1,#0x65
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_write_reg
000012  4606              MOV      r6,r0
;;;2735     return ret;
000014  4630              MOV      r0,r6
;;;2736   }
000016  bd70              POP      {r4-r6,pc}
;;;2737   
                          ENDP


                          AREA ||i.lsm303agr_mag_int_on_pin_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_int_on_pin_get PROC
;;;2656     */
;;;2657   int32_t lsm303agr_mag_int_on_pin_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2658   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2659     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;2660     int32_t ret;
;;;2661   
;;;2662     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2663                              (uint8_t*)&cfg_reg_c_m, 1);
;;;2664     *val = cfg_reg_c_m.int_mag_pin;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;2665   
;;;2666     return ret;
00001e  4630              MOV      r0,r6
;;;2667   }
000020  bdf8              POP      {r3-r7,pc}
;;;2668   
                          ENDP


                          AREA ||i.lsm303agr_mag_int_on_pin_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_int_on_pin_set PROC
;;;2632     */
;;;2633   int32_t lsm303agr_mag_int_on_pin_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2634   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2635     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;2636     int32_t ret;
;;;2637   
;;;2638     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2639                              (uint8_t*)&cfg_reg_c_m, 1);
;;;2640     if(ret == 0){
000014  b95d              CBNZ     r5,|L45.46|
;;;2641       cfg_reg_c_m.int_mag_pin = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9000              STR      r0,[sp,#0]
;;;2642       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2162              MOVS     r1,#0x62
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L45.46|
;;;2643                                 (uint8_t*)&cfg_reg_c_m, 1);
;;;2644     }
;;;2645   
;;;2646     return ret;
00002e  4628              MOV      r0,r5
;;;2647   }
000030  bdf8              POP      {r3-r7,pc}
;;;2648   
                          ENDP


                          AREA ||i.lsm303agr_mag_low_pass_bandwidth_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_low_pass_bandwidth_get PROC
;;;1164     */
;;;1165   int32_t lsm303agr_mag_low_pass_bandwidth_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1166                                                lsm303agr_lpf_m_t *val)
;;;1167   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1168     lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
;;;1169     int32_t ret;
;;;1170   
;;;1171     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2161              MOVS     r1,#0x61
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1172                              (uint8_t*)&cfg_reg_b_m, 1);
;;;1173   
;;;1174       switch (cfg_reg_b_m.lpf){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  b110              CBZ      r0,|L46.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L46.48|
000022  e002              B        |L46.42|
                  |L46.36|
;;;1175       case LSM303AGR_ODR_DIV_2:
;;;1176         *val = LSM303AGR_ODR_DIV_2;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;1177         break;
000028  e005              B        |L46.54|
                  |L46.42|
;;;1178       case LSM303AGR_ODR_DIV_4:
;;;1179         *val = LSM303AGR_ODR_DIV_4;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;1180         break;
00002e  e002              B        |L46.54|
                  |L46.48|
;;;1181       default:
;;;1182         *val = LSM303AGR_ODR_DIV_2;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;1183         break;
000034  bf00              NOP      
                  |L46.54|
000036  bf00              NOP                            ;1177
;;;1184     }
;;;1185     return ret;
000038  4630              MOV      r0,r6
;;;1186   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1187   
                          ENDP


                          AREA ||i.lsm303agr_mag_low_pass_bandwidth_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_low_pass_bandwidth_set PROC
;;;1139     */
;;;1140   int32_t lsm303agr_mag_low_pass_bandwidth_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1141                                                lsm303agr_lpf_m_t val)
;;;1142   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1143     lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
;;;1144     int32_t ret;
;;;1145   
;;;1146     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2161              MOVS     r1,#0x61
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1147                              (uint8_t*)&cfg_reg_b_m, 1);
;;;1148     if(ret == 0){
000014  b95d              CBNZ     r5,|L47.46|
;;;1149       cfg_reg_b_m.lpf = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;1150       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_B_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2161              MOVS     r1,#0x61
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L47.46|
;;;1151                                 (uint8_t*)&cfg_reg_b_m, 1);
;;;1152     }
;;;1153   
;;;1154     return ret;
00002e  4628              MOV      r0,r5
;;;1155   }
000030  bdf8              POP      {r3-r7,pc}
;;;1156   
                          ENDP


                          AREA ||i.lsm303agr_mag_offset_int_conf_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_offset_int_conf_get PROC
;;;2557     */
;;;2558   int32_t lsm303agr_mag_offset_int_conf_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2559                                             lsm303agr_int_on_dataoff_m_t *val)
;;;2560   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2561     lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
;;;2562     int32_t ret;
;;;2563   
;;;2564     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2161              MOVS     r1,#0x61
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2565                              (uint8_t*)&cfg_reg_b_m, 1);
;;;2566   
;;;2567       switch (cfg_reg_b_m.int_on_dataoff){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  b110              CBZ      r0,|L48.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L48.48|
000022  e002              B        |L48.42|
                  |L48.36|
;;;2568       case LSM303AGR_CHECK_BEFORE:
;;;2569         *val = LSM303AGR_CHECK_BEFORE;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;2570         break;
000028  e005              B        |L48.54|
                  |L48.42|
;;;2571       case LSM303AGR_CHECK_AFTER:
;;;2572         *val = LSM303AGR_CHECK_AFTER;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;2573         break;
00002e  e002              B        |L48.54|
                  |L48.48|
;;;2574       default:
;;;2575         *val = LSM303AGR_CHECK_BEFORE;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;2576         break;
000034  bf00              NOP      
                  |L48.54|
000036  bf00              NOP                            ;2570
;;;2577     }
;;;2578     return ret;
000038  4630              MOV      r0,r6
;;;2579   }
00003a  bdf8              POP      {r3-r7,pc}
;;;2580   
                          ENDP


                          AREA ||i.lsm303agr_mag_offset_int_conf_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_offset_int_conf_set PROC
;;;2530     */
;;;2531   int32_t lsm303agr_mag_offset_int_conf_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2532                                             lsm303agr_int_on_dataoff_m_t val)
;;;2533   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2534     lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
;;;2535     int32_t ret;
;;;2536   
;;;2537     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2161              MOVS     r1,#0x61
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2538                              (uint8_t*)&cfg_reg_b_m, 1);
;;;2539     if(ret == 0){
000014  b95d              CBNZ     r5,|L49.46|
;;;2540       cfg_reg_b_m.int_on_dataoff = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;2541       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_B_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2161              MOVS     r1,#0x61
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L49.46|
;;;2542                                 (uint8_t*)&cfg_reg_b_m, 1);
;;;2543     }
;;;2544   
;;;2545     return ret;
00002e  4628              MOV      r0,r5
;;;2546   }
000030  bdf8              POP      {r3-r7,pc}
;;;2547   
                          ENDP


                          AREA ||i.lsm303agr_mag_offset_temp_comp_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_offset_temp_comp_get PROC
;;;1119     */
;;;1120   int32_t lsm303agr_mag_offset_temp_comp_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1121   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1122     lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;1123     int32_t ret;
;;;1124   
;;;1125     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1126                              (uint8_t*)&cfg_reg_a_m, 1);
;;;1127     *val = cfg_reg_a_m.comp_temp_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;1128   
;;;1129     return ret;
00001c  4630              MOV      r0,r6
;;;1130   }
00001e  bdf8              POP      {r3-r7,pc}
;;;1131   
                          ENDP


                          AREA ||i.lsm303agr_mag_offset_temp_comp_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_offset_temp_comp_set PROC
;;;1095     */
;;;1096   int32_t lsm303agr_mag_offset_temp_comp_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1097   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1098     lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;1099     int32_t ret;
;;;1100   
;;;1101     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1102                              (uint8_t*)&cfg_reg_a_m, 1);
;;;1103     if(ret == 0){
000014  b95d              CBNZ     r5,|L51.46|
;;;1104       cfg_reg_a_m.comp_temp_en = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;1105       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2160              MOVS     r1,#0x60
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L51.46|
;;;1106                                 (uint8_t*)&cfg_reg_a_m, 1);
;;;1107     }
;;;1108   
;;;1109     return ret;
00002e  4628              MOV      r0,r5
;;;1110   }
000030  bdf8              POP      {r3-r7,pc}
;;;1111   
                          ENDP


                          AREA ||i.lsm303agr_mag_operating_mode_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_operating_mode_get PROC
;;;943      */
;;;944    int32_t lsm303agr_mag_operating_mode_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;945                                             lsm303agr_md_m_t *val)
;;;946    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;947      lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;948      int32_t ret;
;;;949    
;;;950      ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;951                               (uint8_t*)&cfg_reg_a_m, 1);
;;;952    
;;;953        switch (cfg_reg_a_m.md){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000003          AND      r0,r0,#3
00001c  b120              CBZ      r0,|L52.40|
00001e  2801              CMP      r0,#1
000020  d005              BEQ      |L52.46|
000022  2802              CMP      r0,#2
000024  d109              BNE      |L52.58|
000026  e005              B        |L52.52|
                  |L52.40|
;;;954        case LSM303AGR_CONTINUOUS_MODE:
;;;955          *val = LSM303AGR_CONTINUOUS_MODE;
000028  2000              MOVS     r0,#0
00002a  7020              STRB     r0,[r4,#0]
;;;956          break;
00002c  e008              B        |L52.64|
                  |L52.46|
;;;957        case LSM303AGR_SINGLE_TRIGGER:
;;;958          *val = LSM303AGR_SINGLE_TRIGGER;
00002e  2001              MOVS     r0,#1
000030  7020              STRB     r0,[r4,#0]
;;;959          break;
000032  e005              B        |L52.64|
                  |L52.52|
;;;960        case LSM303AGR_POWER_DOWN:
;;;961          *val = LSM303AGR_POWER_DOWN;
000034  2002              MOVS     r0,#2
000036  7020              STRB     r0,[r4,#0]
;;;962          break;
000038  e002              B        |L52.64|
                  |L52.58|
;;;963        default:
;;;964          *val = LSM303AGR_CONTINUOUS_MODE;
00003a  2000              MOVS     r0,#0
00003c  7020              STRB     r0,[r4,#0]
;;;965          break;
00003e  bf00              NOP      
                  |L52.64|
000040  bf00              NOP                            ;956
;;;966      }
;;;967      return ret;
000042  4630              MOV      r0,r6
;;;968    }
000044  bdf8              POP      {r3-r7,pc}
;;;969    
                          ENDP


                          AREA ||i.lsm303agr_mag_operating_mode_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_operating_mode_set PROC
;;;918      */
;;;919    int32_t lsm303agr_mag_operating_mode_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;920                                             lsm303agr_md_m_t val)
;;;921    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;922      lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;923      int32_t ret;
;;;924    
;;;925      ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;926                               (uint8_t*)&cfg_reg_a_m, 1);
;;;927      if(ret == 0){
000014  b95d              CBNZ     r5,|L53.46|
;;;928        cfg_reg_a_m.md = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640001          BFI      r0,r4,#0,#2
00001e  9000              STR      r0,[sp,#0]
;;;929        ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2160              MOVS     r1,#0x60
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L53.46|
;;;930                                  (uint8_t*)&cfg_reg_a_m, 1);
;;;931      }
;;;932    
;;;933      return ret;
00002e  4628              MOV      r0,r5
;;;934    }
000030  bdf8              POP      {r3-r7,pc}
;;;935    
                          ENDP


                          AREA ||i.lsm303agr_mag_power_mode_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_power_mode_get PROC
;;;1064     */
;;;1065   int32_t lsm303agr_mag_power_mode_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1066                                        lsm303agr_lp_m_t *val)
;;;1067   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1068     lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;1069     int32_t ret;
;;;1070   
;;;1071     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1072                              (uint8_t*)&cfg_reg_a_m, 1);
;;;1073   
;;;1074       switch (cfg_reg_a_m.lp){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  b110              CBZ      r0,|L54.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L54.48|
000022  e002              B        |L54.42|
                  |L54.36|
;;;1075       case LSM303AGR_HIGH_RESOLUTION:
;;;1076         *val = LSM303AGR_HIGH_RESOLUTION;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;1077         break;
000028  e005              B        |L54.54|
                  |L54.42|
;;;1078       case LSM303AGR_LOW_POWER:
;;;1079         *val = LSM303AGR_LOW_POWER;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;1080         break;
00002e  e002              B        |L54.54|
                  |L54.48|
;;;1081       default:
;;;1082         *val = LSM303AGR_HIGH_RESOLUTION;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;1083         break;
000034  bf00              NOP      
                  |L54.54|
000036  bf00              NOP                            ;1077
;;;1084     }
;;;1085     return ret;
000038  4630              MOV      r0,r6
;;;1086   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1087   
                          ENDP


                          AREA ||i.lsm303agr_mag_power_mode_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_power_mode_set PROC
;;;1039     */
;;;1040   int32_t lsm303agr_mag_power_mode_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1041                                        lsm303agr_lp_m_t val)
;;;1042   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1043     lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;1044     int32_t ret;
;;;1045   
;;;1046     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1047                              (uint8_t*)&cfg_reg_a_m, 1);
;;;1048     if(ret == 0){
000014  b95d              CBNZ     r5,|L55.46|
;;;1049       cfg_reg_a_m.lp = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;1050       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2160              MOVS     r1,#0x60
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L55.46|
;;;1051                                 (uint8_t*)&cfg_reg_a_m, 1);
;;;1052     }
;;;1053   
;;;1054     return ret;
00002e  4628              MOV      r0,r5
;;;1055   }
000030  bdf8              POP      {r3-r7,pc}
;;;1056   
                          ENDP


                          AREA ||i.lsm303agr_mag_reset_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_reset_get PROC
;;;1655     */
;;;1656   int32_t lsm303agr_mag_reset_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1657   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1658     lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;1659     int32_t ret;
;;;1660   
;;;1661     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1662                              (uint8_t*)&cfg_reg_a_m, 1);
;;;1663     *val = cfg_reg_a_m.soft_rst;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1664   
;;;1665     return ret;
00001e  4630              MOV      r0,r6
;;;1666   }
000020  bdf8              POP      {r3-r7,pc}
;;;1667   
                          ENDP


                          AREA ||i.lsm303agr_mag_reset_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_reset_set PROC
;;;1631     */
;;;1632   int32_t lsm303agr_mag_reset_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1633   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1634     lsm303agr_cfg_reg_a_m_t cfg_reg_a_m;
;;;1635     int32_t ret;
;;;1636   
;;;1637     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_A_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1638                              (uint8_t*)&cfg_reg_a_m, 1);
;;;1639     if(ret == 0){
000014  b95d              CBNZ     r5,|L57.46|
;;;1640       cfg_reg_a_m.soft_rst = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641045          BFI      r0,r4,#5,#1
00001e  9000              STR      r0,[sp,#0]
;;;1641       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_A_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2160              MOVS     r1,#0x60
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L57.46|
;;;1642                                 (uint8_t*)&cfg_reg_a_m, 1);
;;;1643     }
;;;1644   
;;;1645     return ret;
00002e  4628              MOV      r0,r5
;;;1646   }
000030  bdf8              POP      {r3-r7,pc}
;;;1647   
                          ENDP


                          AREA ||i.lsm303agr_mag_self_test_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_self_test_get PROC
;;;1743     */
;;;1744   int32_t lsm303agr_mag_self_test_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1745   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1746     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;1747     int32_t ret;
;;;1748   
;;;1749     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1750                              (uint8_t*)&cfg_reg_c_m, 1);
;;;1751     *val = cfg_reg_c_m.self_test;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00040          UBFX     r0,r0,#1,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1752   
;;;1753     return ret;
00001e  4630              MOV      r0,r6
;;;1754   }
000020  bdf8              POP      {r3-r7,pc}
;;;1755   
                          ENDP


                          AREA ||i.lsm303agr_mag_self_test_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_self_test_set PROC
;;;1719     */
;;;1720   int32_t lsm303agr_mag_self_test_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1721   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1722     lsm303agr_cfg_reg_c_m_t cfg_reg_c_m;
;;;1723     int32_t ret;
;;;1724   
;;;1725     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_C_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2162              MOVS     r1,#0x62
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1726                              (uint8_t*)&cfg_reg_c_m, 1);
;;;1727     if(ret == 0){
000014  b95d              CBNZ     r5,|L59.46|
;;;1728       cfg_reg_c_m.self_test = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640041          BFI      r0,r4,#1,#1
00001e  9000              STR      r0,[sp,#0]
;;;1729       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_C_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2162              MOVS     r1,#0x62
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L59.46|
;;;1730                                 (uint8_t*)&cfg_reg_c_m, 1);
;;;1731     }
;;;1732   
;;;1733     return ret;
00002e  4628              MOV      r0,r5
;;;1734   }
000030  bdf8              POP      {r3-r7,pc}
;;;1735   
                          ENDP


                          AREA ||i.lsm303agr_mag_set_rst_mode_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_set_rst_mode_get PROC
;;;1220     */
;;;1221   int32_t lsm303agr_mag_set_rst_mode_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1222                                          lsm303agr_set_rst_m_t *val)
;;;1223   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1224     lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
;;;1225     int32_t ret;
;;;1226   
;;;1227     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2161              MOVS     r1,#0x61
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1228                              (uint8_t*)&cfg_reg_b_m, 1);
;;;1229   
;;;1230       switch (cfg_reg_b_m.set_rst){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00041          UBFX     r0,r0,#1,#2
00001c  b120              CBZ      r0,|L60.40|
00001e  2801              CMP      r0,#1
000020  d005              BEQ      |L60.46|
000022  2802              CMP      r0,#2
000024  d109              BNE      |L60.58|
000026  e005              B        |L60.52|
                  |L60.40|
;;;1231       case LSM303AGR_SET_SENS_ODR_DIV_63:
;;;1232         *val = LSM303AGR_SET_SENS_ODR_DIV_63;
000028  2000              MOVS     r0,#0
00002a  7020              STRB     r0,[r4,#0]
;;;1233         break;
00002c  e008              B        |L60.64|
                  |L60.46|
;;;1234       case LSM303AGR_SENS_OFF_CANC_EVERY_ODR:
;;;1235         *val = LSM303AGR_SENS_OFF_CANC_EVERY_ODR;
00002e  2001              MOVS     r0,#1
000030  7020              STRB     r0,[r4,#0]
;;;1236         break;
000032  e005              B        |L60.64|
                  |L60.52|
;;;1237       case LSM303AGR_SET_SENS_ONLY_AT_POWER_ON:
;;;1238         *val = LSM303AGR_SET_SENS_ONLY_AT_POWER_ON;
000034  2002              MOVS     r0,#2
000036  7020              STRB     r0,[r4,#0]
;;;1239         break;
000038  e002              B        |L60.64|
                  |L60.58|
;;;1240       default:
;;;1241         *val = LSM303AGR_SET_SENS_ODR_DIV_63;
00003a  2000              MOVS     r0,#0
00003c  7020              STRB     r0,[r4,#0]
;;;1242         break;
00003e  bf00              NOP      
                  |L60.64|
000040  bf00              NOP                            ;1233
;;;1243     }
;;;1244     return ret;
000042  4630              MOV      r0,r6
;;;1245   }
000044  bdf8              POP      {r3-r7,pc}
;;;1246   
                          ENDP


                          AREA ||i.lsm303agr_mag_set_rst_mode_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_set_rst_mode_set PROC
;;;1195     */
;;;1196   int32_t lsm303agr_mag_set_rst_mode_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1197                                          lsm303agr_set_rst_m_t val)
;;;1198   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1199     lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
;;;1200     int32_t ret;
;;;1201   
;;;1202     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2161              MOVS     r1,#0x61
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1203                              (uint8_t*)&cfg_reg_b_m, 1);
;;;1204     if(ret == 0){
000014  b95d              CBNZ     r5,|L61.46|
;;;1205       cfg_reg_b_m.set_rst = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640042          BFI      r0,r4,#1,#2
00001e  9000              STR      r0,[sp,#0]
;;;1206       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_B_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2161              MOVS     r1,#0x61
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L61.46|
;;;1207                                 (uint8_t*)&cfg_reg_b_m, 1);
;;;1208     }
;;;1209   
;;;1210     return ret;
00002e  4628              MOV      r0,r5
;;;1211   }
000030  bdf8              POP      {r3-r7,pc}
;;;1212   
                          ENDP


                          AREA ||i.lsm303agr_mag_set_rst_sensor_single_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_set_rst_sensor_single_get PROC
;;;1292     */
;;;1293   int32_t lsm303agr_mag_set_rst_sensor_single_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1294                                                   uint8_t *val)
;;;1295   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1296     lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
;;;1297     int32_t ret;
;;;1298   
;;;1299     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2161              MOVS     r1,#0x61
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1300                              (uint8_t*)&cfg_reg_b_m, 1);
;;;1301     *val = cfg_reg_b_m.off_canc_one_shot;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1302   
;;;1303     return ret;
00001e  4630              MOV      r0,r6
;;;1304   }
000020  bdf8              POP      {r3-r7,pc}
;;;1305   
                          ENDP


                          AREA ||i.lsm303agr_mag_set_rst_sensor_single_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_set_rst_sensor_single_set PROC
;;;1260     */
;;;1261   int32_t lsm303agr_mag_set_rst_sensor_single_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1262                                                   uint8_t val)
;;;1263   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1264     lsm303agr_cfg_reg_b_m_t cfg_reg_b_m;
;;;1265     int32_t ret;
;;;1266   
;;;1267     ret = lsm303agr_read_reg(ctx, LSM303AGR_CFG_REG_B_M,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2161              MOVS     r1,#0x61
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1268                              (uint8_t*)&cfg_reg_b_m, 1);
;;;1269     if(ret == 0){
000014  b95d              CBNZ     r5,|L63.46|
;;;1270       cfg_reg_b_m.off_canc_one_shot = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;1271       ret = lsm303agr_write_reg(ctx, LSM303AGR_CFG_REG_B_M,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2161              MOVS     r1,#0x61
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L63.46|
;;;1272                                 (uint8_t*)&cfg_reg_b_m, 1);
;;;1273     }
;;;1274   
;;;1275     return ret;
00002e  4628              MOV      r0,r5
;;;1276   }
000030  bdf8              POP      {r3-r7,pc}
;;;1277   
                          ENDP


                          AREA ||i.lsm303agr_mag_status_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_status_get PROC
;;;1819     */
;;;1820   int32_t lsm303agr_mag_status_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;1821                                    lsm303agr_status_reg_m_t *val)
;;;1822   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1823     int32_t ret;
;;;1824     ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_M, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2167              MOVS     r1,#0x67
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1825     return ret;
000014  4630              MOV      r0,r6
;;;1826   }
000016  bd70              POP      {r4-r6,pc}
;;;1827   
                          ENDP


                          AREA ||i.lsm303agr_mag_user_offset_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_user_offset_get PROC
;;;903      */
;;;904    int32_t lsm303agr_mag_user_offset_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;905    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;906      int32_t ret;
;;;907      ret = lsm303agr_read_reg(ctx, LSM303AGR_OFFSET_X_REG_L_M, buff, 6);
000006  2306              MOVS     r3,#6
000008  4622              MOV      r2,r4
00000a  2145              MOVS     r1,#0x45
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;908      return ret;
000014  4630              MOV      r0,r6
;;;909    }
000016  bd70              POP      {r4-r6,pc}
;;;910    
                          ENDP


                          AREA ||i.lsm303agr_mag_user_offset_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_mag_user_offset_set PROC
;;;881      */
;;;882    int32_t lsm303agr_mag_user_offset_set(lsm303agr_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;883    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;884      int32_t ret;
;;;885      ret = lsm303agr_write_reg(ctx, LSM303AGR_OFFSET_X_REG_L_M, buff, 6);
000006  2306              MOVS     r3,#6
000008  4622              MOV      r2,r4
00000a  2145              MOVS     r1,#0x45
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_write_reg
000012  4606              MOV      r6,r0
;;;886      return ret;
000014  4630              MOV      r0,r6
;;;887    }
000016  bd70              POP      {r4-r6,pc}
;;;888    
                          ENDP


                          AREA ||i.lsm303agr_magnetic_raw_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_magnetic_raw_get PROC
;;;1399     */
;;;1400   int32_t lsm303agr_magnetic_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;1401   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1402     int32_t ret;
;;;1403     ret = lsm303agr_read_reg(ctx, LSM303AGR_OUTX_L_REG_M, buff, 6);
000006  2306              MOVS     r3,#6
000008  4622              MOV      r2,r4
00000a  2168              MOVS     r1,#0x68
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1404     return ret;
000014  4630              MOV      r0,r6
;;;1405   }
000016  bd70              POP      {r4-r6,pc}
;;;1406   
                          ENDP


                          AREA ||i.lsm303agr_quiet_dur_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_quiet_dur_get PROC
;;;3263     */
;;;3264   int32_t lsm303agr_quiet_dur_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3265   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3266     lsm303agr_time_latency_a_t time_latency_a;
;;;3267     int32_t ret;
;;;3268   
;;;3269     ret = lsm303agr_read_reg(ctx, LSM303AGR_TIME_LATENCY_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213c              MOVS     r1,#0x3c
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3270                              (uint8_t*)&time_latency_a, 1);
;;;3271     *val = time_latency_a.tla;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  7020              STRB     r0,[r4,#0]
;;;3272   
;;;3273     return ret;
00001a  4630              MOV      r0,r6
;;;3274   }
00001c  bdf8              POP      {r3-r7,pc}
;;;3275   
                          ENDP


                          AREA ||i.lsm303agr_quiet_dur_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_quiet_dur_set PROC
;;;3237     */
;;;3238   int32_t lsm303agr_quiet_dur_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3239   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3240     lsm303agr_time_latency_a_t time_latency_a;
;;;3241     int32_t ret;
;;;3242   
;;;3243     ret = lsm303agr_read_reg(ctx, LSM303AGR_TIME_LATENCY_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213c              MOVS     r1,#0x3c
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;3244                              (uint8_t*)&time_latency_a, 1);
;;;3245     if(ret == 0){
000014  b945              CBNZ     r5,|L69.40|
;;;3246       time_latency_a.tla = (uint8_t)val;
000016  b2e0              UXTB     r0,r4
000018  9000              STR      r0,[sp,#0]
;;;3247       ret = lsm303agr_write_reg(ctx, LSM303AGR_TIME_LATENCY_A,
00001a  2301              MOVS     r3,#1
00001c  466a              MOV      r2,sp
00001e  213c              MOVS     r1,#0x3c
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       lsm303agr_write_reg
000026  4605              MOV      r5,r0
                  |L69.40|
;;;3248                                 (uint8_t*)&time_latency_a, 1);
;;;3249     }
;;;3250   
;;;3251     return ret;
000028  4628              MOV      r0,r5
;;;3252   }
00002a  bdf8              POP      {r3-r7,pc}
;;;3253   
                          ENDP


                          AREA ||i.lsm303agr_read_reg||, CODE, READONLY, ALIGN=1

                  lsm303agr_read_reg PROC
;;;65       */
;;;66     int32_t lsm303agr_read_reg(lsm303agr_ctx_t* ctx, uint8_t reg, uint8_t* data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;67                              uint16_t len)
;;;68     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;69       int32_t ret;
;;;70       ret = ctx->read_reg(ctx->handle, reg, data, len);
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  e9d4c001          LDRD     r12,r0,[r4,#4]
000016  47e0              BLX      r12
000018  4680              MOV      r8,r0
;;;71       return ret;
00001a  4640              MOV      r0,r8
;;;72     }
00001c  e8bd81f0          POP      {r4-r8,pc}
;;;73     
                          ENDP


                          AREA ||i.lsm303agr_shock_dur_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_shock_dur_get PROC
;;;3214     */
;;;3215   int32_t lsm303agr_shock_dur_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3216   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3217     lsm303agr_time_limit_a_t time_limit_a;
;;;3218     int32_t ret;
;;;3219   
;;;3220     ret = lsm303agr_read_reg(ctx, LSM303AGR_TIME_LIMIT_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213b              MOVS     r1,#0x3b
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3221                              (uint8_t*)&time_limit_a, 1);
;;;3222     *val = time_limit_a.tli;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000007f          AND      r0,r0,#0x7f
00001c  7020              STRB     r0,[r4,#0]
;;;3223   
;;;3224     return ret;
00001e  4630              MOV      r0,r6
;;;3225   }
000020  bdf8              POP      {r3-r7,pc}
;;;3226   
                          ENDP


                          AREA ||i.lsm303agr_shock_dur_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_shock_dur_set PROC
;;;3188     */
;;;3189   int32_t lsm303agr_shock_dur_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3190   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3191     lsm303agr_time_limit_a_t time_limit_a;
;;;3192     int32_t ret;
;;;3193   
;;;3194     ret = lsm303agr_read_reg(ctx, LSM303AGR_TIME_LIMIT_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213b              MOVS     r1,#0x3b
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;3195                              (uint8_t*)&time_limit_a, 1);
;;;3196     if(ret == 0){
000014  b95d              CBNZ     r5,|L72.46|
;;;3197       time_limit_a.tli = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640006          BFI      r0,r4,#0,#7
00001e  9000              STR      r0,[sp,#0]
;;;3198       ret = lsm303agr_write_reg(ctx, LSM303AGR_TIME_LIMIT_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  213b              MOVS     r1,#0x3b
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L72.46|
;;;3199                                 (uint8_t*)&time_limit_a, 1);
;;;3200     }
;;;3201   
;;;3202     return ret;
00002e  4628              MOV      r0,r5
;;;3203   }
000030  bdf8              POP      {r3-r7,pc}
;;;3204   
                          ENDP


                          AREA ||i.lsm303agr_tap_conf_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_tap_conf_get PROC
;;;3108     */
;;;3109   int32_t lsm303agr_tap_conf_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;3110                                  lsm303agr_click_cfg_a_t *val)
;;;3111   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3112     int32_t ret;
;;;3113     ret = lsm303agr_read_reg(ctx, LSM303AGR_CLICK_CFG_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2138              MOVS     r1,#0x38
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3114     return ret;
000014  4630              MOV      r0,r6
;;;3115   }
000016  bd70              POP      {r4-r6,pc}
;;;3116   
                          ENDP


                          AREA ||i.lsm303agr_tap_conf_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_tap_conf_set PROC
;;;3092     */
;;;3093   int32_t lsm303agr_tap_conf_set(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;3094                                  lsm303agr_click_cfg_a_t *val)
;;;3095   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3096     int32_t ret;
;;;3097     ret = lsm303agr_write_reg(ctx, LSM303AGR_CLICK_CFG_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2138              MOVS     r1,#0x38
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_write_reg
000012  4606              MOV      r6,r0
;;;3098     return ret;
000014  4630              MOV      r0,r6
;;;3099   }
000016  bd70              POP      {r4-r6,pc}
;;;3100   
                          ENDP


                          AREA ||i.lsm303agr_tap_source_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_tap_source_get PROC
;;;3124     */
;;;3125   int32_t lsm303agr_tap_source_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;3126                                    lsm303agr_click_src_a_t *val)
;;;3127   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3128     int32_t ret;
;;;3129     ret = lsm303agr_read_reg(ctx, LSM303AGR_CLICK_SRC_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2139              MOVS     r1,#0x39
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3130     return ret;
000014  4630              MOV      r0,r6
;;;3131   }
000016  bd70              POP      {r4-r6,pc}
;;;3132   
                          ENDP


                          AREA ||i.lsm303agr_tap_threshold_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_tap_threshold_get PROC
;;;3166     */
;;;3167   int32_t lsm303agr_tap_threshold_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3168   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3169     lsm303agr_click_ths_a_t click_ths_a;
;;;3170     int32_t ret;
;;;3171   
;;;3172     ret = lsm303agr_read_reg(ctx, LSM303AGR_CLICK_THS_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213a              MOVS     r1,#0x3a
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3173                              (uint8_t*)&click_ths_a, 1);
;;;3174     *val = click_ths_a.ths;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000007f          AND      r0,r0,#0x7f
00001c  7020              STRB     r0,[r4,#0]
;;;3175   
;;;3176     return ret;
00001e  4630              MOV      r0,r6
;;;3177   }
000020  bdf8              POP      {r3-r7,pc}
;;;3178   
                          ENDP


                          AREA ||i.lsm303agr_tap_threshold_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_tap_threshold_set PROC
;;;3141     */
;;;3142   int32_t lsm303agr_tap_threshold_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3143   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3144     lsm303agr_click_ths_a_t click_ths_a;
;;;3145     int32_t ret;
;;;3146   
;;;3147     ret = lsm303agr_read_reg(ctx, LSM303AGR_CLICK_THS_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213a              MOVS     r1,#0x3a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;3148                              (uint8_t*)&click_ths_a, 1);
;;;3149     if(ret == 0){
000014  b95d              CBNZ     r5,|L77.46|
;;;3150       click_ths_a.ths = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640006          BFI      r0,r4,#0,#7
00001e  9000              STR      r0,[sp,#0]
;;;3151       ret = lsm303agr_write_reg(ctx, LSM303AGR_CLICK_THS_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  213a              MOVS     r1,#0x3a
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L77.46|
;;;3152                                 (uint8_t*)&click_ths_a, 1);
;;;3153     }
;;;3154   
;;;3155     return ret;
00002e  4628              MOV      r0,r5
;;;3156   }
000030  bdf8              POP      {r3-r7,pc}
;;;3157   
                          ENDP


                          AREA ||i.lsm303agr_temp_data_ovr_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_temp_data_ovr_get PROC
;;;238      */
;;;239    int32_t lsm303agr_temp_data_ovr_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;240    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;241      lsm303agr_status_reg_aux_a_t status_reg_aux_a;
;;;242      int32_t ret;
;;;243    
;;;244      ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_AUX_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2107              MOVS     r1,#7
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;245                               (uint8_t*)&status_reg_aux_a, 1);
;;;246      *val = status_reg_aux_a.tor;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;247    
;;;248      return ret;
00001e  4630              MOV      r0,r6
;;;249    }
000020  bdf8              POP      {r3-r7,pc}
;;;250    
                          ENDP


                          AREA ||i.lsm303agr_temp_data_ready_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_temp_data_ready_get PROC
;;;218      */
;;;219    int32_t lsm303agr_temp_data_ready_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;220    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;221      lsm303agr_status_reg_aux_a_t status_reg_aux_a;
;;;222      int32_t ret;
;;;223    
;;;224      ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_AUX_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2107              MOVS     r1,#7
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;225                               (uint8_t*)&status_reg_aux_a, 1);
;;;226      *val = status_reg_aux_a.tda;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  7020              STRB     r0,[r4,#0]
;;;227    
;;;228      return ret;
00001e  4630              MOV      r0,r6
;;;229    }
000020  bdf8              POP      {r3-r7,pc}
;;;230    
                          ENDP


                          AREA ||i.lsm303agr_temp_status_reg_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_temp_status_reg_get PROC
;;;203      */
;;;204    int32_t lsm303agr_temp_status_reg_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;205    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;206      int32_t ret;
;;;207      ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_AUX_A, buff, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2107              MOVS     r1,#7
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;208      return ret;
000014  4630              MOV      r0,r6
;;;209    }
000016  bd70              POP      {r4-r6,pc}
;;;210    
                          ENDP


                          AREA ||i.lsm303agr_temperature_meas_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_temperature_meas_get PROC
;;;298      */
;;;299    int32_t lsm303agr_temperature_meas_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;300                                          lsm303agr_temp_en_a_t *val)
;;;301    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;302      lsm303agr_temp_cfg_reg_a_t temp_cfg_reg_a;
;;;303      int32_t ret;
;;;304    
;;;305      ret = lsm303agr_read_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211f              MOVS     r1,#0x1f
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;306                               (uint8_t*)&temp_cfg_reg_a, 1);
;;;307      switch (temp_cfg_reg_a.temp_en){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  0980              LSRS     r0,r0,#6
00001a  b110              CBZ      r0,|L81.34|
00001c  2803              CMP      r0,#3
00001e  d106              BNE      |L81.46|
000020  e002              B        |L81.40|
                  |L81.34|
;;;308        case LSM303AGR_TEMP_DISABLE:
;;;309          *val = LSM303AGR_TEMP_DISABLE;
000022  2000              MOVS     r0,#0
000024  7020              STRB     r0,[r4,#0]
;;;310          break;
000026  e005              B        |L81.52|
                  |L81.40|
;;;311        case LSM303AGR_TEMP_ENABLE:
;;;312          *val = LSM303AGR_TEMP_ENABLE;
000028  2003              MOVS     r0,#3
00002a  7020              STRB     r0,[r4,#0]
;;;313          break;
00002c  e002              B        |L81.52|
                  |L81.46|
;;;314        default:
;;;315          *val = LSM303AGR_TEMP_DISABLE;
00002e  2000              MOVS     r0,#0
000030  7020              STRB     r0,[r4,#0]
;;;316          break;
000032  bf00              NOP      
                  |L81.52|
000034  bf00              NOP                            ;310
;;;317      }
;;;318    
;;;319      return ret;
000036  4630              MOV      r0,r6
;;;320    }
000038  bdf8              POP      {r3-r7,pc}
;;;321    
                          ENDP


                          AREA ||i.lsm303agr_temperature_meas_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_temperature_meas_set PROC
;;;273      */
;;;274    int32_t lsm303agr_temperature_meas_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;275                                           lsm303agr_temp_en_a_t val)
;;;276    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;277      lsm303agr_temp_cfg_reg_a_t temp_cfg_reg_a;
;;;278      int32_t ret;
;;;279    
;;;280      ret = lsm303agr_read_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211f              MOVS     r1,#0x1f
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;281                               (uint8_t*)&temp_cfg_reg_a, 1);
;;;282      if(ret == 0){
000014  b95d              CBNZ     r5,|L82.46|
;;;283        temp_cfg_reg_a.temp_en = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641087          BFI      r0,r4,#6,#2
00001e  9000              STR      r0,[sp,#0]
;;;284        ret = lsm303agr_write_reg(ctx, LSM303AGR_TEMP_CFG_REG_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  211f              MOVS     r1,#0x1f
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L82.46|
;;;285                                  (uint8_t*)&temp_cfg_reg_a, 1);
;;;286      }
;;;287    
;;;288      return ret;
00002e  4628              MOV      r0,r5
;;;289    }
000030  bdf8              POP      {r3-r7,pc}
;;;290    
                          ENDP


                          AREA ||i.lsm303agr_temperature_raw_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_temperature_raw_get PROC
;;;258      */
;;;259    int32_t lsm303agr_temperature_raw_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;260    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;261      int32_t ret;
;;;262      ret = lsm303agr_read_reg(ctx, LSM303AGR_OUT_TEMP_L_A, buff, 2);
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  210c              MOVS     r1,#0xc
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;263      return ret;
000014  4630              MOV      r0,r6
;;;264    }
000016  bd70              POP      {r4-r6,pc}
;;;265    
                          ENDP


                          AREA ||i.lsm303agr_write_reg||, CODE, READONLY, ALIGN=1

                  lsm303agr_write_reg PROC
;;;83       */
;;;84     int32_t lsm303agr_write_reg(lsm303agr_ctx_t* ctx, uint8_t reg, uint8_t* data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;85                               uint16_t len)
;;;86     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;87       int32_t ret;
;;;88       ret = ctx->write_reg(ctx->handle, reg, data, len);
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  f8d4c000          LDR      r12,[r4,#0]
000016  68a0              LDR      r0,[r4,#8]
000018  47e0              BLX      r12
00001a  4680              MOV      r8,r0
;;;89       return ret;
00001c  4640              MOV      r0,r8
;;;90     }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;91     
                          ENDP


                          AREA ||i.lsm303agr_xl_block_data_update_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_block_data_update_get PROC
;;;764      */
;;;765    int32_t lsm303agr_xl_block_data_update_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;766                                               uint8_t *val)
;;;767    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;768      lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;769      int32_t ret;
;;;770    
;;;771      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2123              MOVS     r1,#0x23
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;772                               (uint8_t*)&ctrl_reg4_a, 1);
;;;773      *val = ctrl_reg4_a.bdu;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;774    
;;;775      return ret;
00001c  4630              MOV      r0,r6
;;;776    }
00001e  bdf8              POP      {r3-r7,pc}
;;;777    
                          ENDP


                          AREA ||i.lsm303agr_xl_block_data_update_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_block_data_update_set PROC
;;;739      */
;;;740    int32_t lsm303agr_xl_block_data_update_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;741                                               uint8_t val)
;;;742    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;743      lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;744      int32_t ret;
;;;745    
;;;746      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2123              MOVS     r1,#0x23
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;747                               (uint8_t*)&ctrl_reg4_a, 1);
;;;748      if(ret == 0){
000014  b95d              CBNZ     r5,|L86.46|
;;;749        ctrl_reg4_a.bdu = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;750        ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2123              MOVS     r1,#0x23
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L86.46|
;;;751                                  (uint8_t*)&ctrl_reg4_a, 1);
;;;752      }
;;;753    
;;;754      return ret;
00002e  4628              MOV      r0,r5
;;;755    }
000030  bdf8              POP      {r3-r7,pc}
;;;756    
                          ENDP


                          AREA ||i.lsm303agr_xl_boot_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_boot_get PROC
;;;1580     */
;;;1581   int32_t lsm303agr_xl_boot_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1582   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1583     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;1584     int32_t ret;
;;;1585   
;;;1586     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1587                              (uint8_t*)&ctrl_reg5_a, 1);
;;;1588     *val = ctrl_reg5_a.boot;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;1589   
;;;1590     return ret;
00001c  4630              MOV      r0,r6
;;;1591   }
00001e  bdf8              POP      {r3-r7,pc}
;;;1592   
                          ENDP


                          AREA ||i.lsm303agr_xl_boot_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_boot_set PROC
;;;1556     */
;;;1557   int32_t lsm303agr_xl_boot_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1558   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1559     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;1560     int32_t ret;
;;;1561   
;;;1562     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1563                              (uint8_t*)&ctrl_reg5_a, 1);
;;;1564     if(ret == 0){
000014  b95d              CBNZ     r5,|L88.46|
;;;1565       ctrl_reg5_a.boot = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;1566       ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG5_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2124              MOVS     r1,#0x24
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L88.46|
;;;1567                                 (uint8_t*)&ctrl_reg5_a, 1);
;;;1568     }
;;;1569   
;;;1570     return ret;
00002e  4628              MOV      r0,r5
;;;1571   }
000030  bdf8              POP      {r3-r7,pc}
;;;1572   
                          ENDP


                          AREA ||i.lsm303agr_xl_data_format_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_data_format_get PROC
;;;1525     */
;;;1526   int32_t lsm303agr_xl_data_format_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1527                                        lsm303agr_ble_a_t *val)
;;;1528   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1529     lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;1530     int32_t ret;
;;;1531   
;;;1532     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2123              MOVS     r1,#0x23
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1533                              (uint8_t*)&ctrl_reg4_a, 1);
;;;1534   
;;;1535       switch (ctrl_reg4_a.ble){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  b110              CBZ      r0,|L89.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L89.48|
000022  e002              B        |L89.42|
                  |L89.36|
;;;1536       case LSM303AGR_XL_LSB_AT_LOW_ADD:
;;;1537         *val = LSM303AGR_XL_LSB_AT_LOW_ADD;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;1538         break;
000028  e005              B        |L89.54|
                  |L89.42|
;;;1539       case LSM303AGR_XL_MSB_AT_LOW_ADD:
;;;1540         *val = LSM303AGR_XL_MSB_AT_LOW_ADD;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;1541         break;
00002e  e002              B        |L89.54|
                  |L89.48|
;;;1542       default:
;;;1543         *val = LSM303AGR_XL_LSB_AT_LOW_ADD;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;1544         break;
000034  bf00              NOP      
                  |L89.54|
000036  bf00              NOP                            ;1538
;;;1545     }
;;;1546     return ret;
000038  4630              MOV      r0,r6
;;;1547   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1548   
                          ENDP


                          AREA ||i.lsm303agr_xl_data_format_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_data_format_set PROC
;;;1500     */
;;;1501   int32_t lsm303agr_xl_data_format_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1502                                        lsm303agr_ble_a_t val)
;;;1503   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1504     lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;1505     int32_t ret;
;;;1506   
;;;1507     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2123              MOVS     r1,#0x23
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1508                              (uint8_t*)&ctrl_reg4_a, 1);
;;;1509     if(ret == 0){
000014  b95d              CBNZ     r5,|L90.46|
;;;1510       ctrl_reg4_a.ble = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9000              STR      r0,[sp,#0]
;;;1511       ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2123              MOVS     r1,#0x23
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L90.46|
;;;1512                                 (uint8_t*)&ctrl_reg4_a, 1);
;;;1513     }
;;;1514   
;;;1515     return ret;
00002e  4628              MOV      r0,r5
;;;1516   }
000030  bdf8              POP      {r3-r7,pc}
;;;1517   
                          ENDP


                          AREA ||i.lsm303agr_xl_data_ovr_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_data_ovr_get PROC
;;;839      */
;;;840    int32_t lsm303agr_xl_data_ovr_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;841    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;842      lsm303agr_status_reg_a_t status_reg_a;
;;;843      int32_t ret;
;;;844    
;;;845      ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2127              MOVS     r1,#0x27
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;846                               (uint8_t*)&status_reg_a, 1);
;;;847      *val = status_reg_a.zyxor;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;848    
;;;849      return ret;
00001c  4630              MOV      r0,r6
;;;850    }
00001e  bdf8              POP      {r3-r7,pc}
;;;851    
                          ENDP


                          AREA ||i.lsm303agr_xl_data_rate_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_data_rate_get PROC
;;;436      */
;;;437    int32_t lsm303agr_xl_data_rate_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;438                                       lsm303agr_odr_a_t *val)
;;;439    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;440      lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
;;;441      int32_t ret;
;;;442    
;;;443      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2120              MOVS     r1,#0x20
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;444                               (uint8_t*)&ctrl_reg1_a, 1);
;;;445    
;;;446      switch (ctrl_reg1_a.odr){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  0900              LSRS     r0,r0,#4
00001a  280a              CMP      r0,#0xa
00001c  d224              BCS      |L92.104|
00001e  e8dff000          TBB      [pc,r0]
000022  0508              DCB      0x05,0x08
000024  0b0e1114          DCB      0x0b,0x0e,0x11,0x14
000028  171a1d20          DCB      0x17,0x1a,0x1d,0x20
;;;447        case LSM303AGR_XL_POWER_DOWN:
;;;448          *val = LSM303AGR_XL_POWER_DOWN;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;449          break;
000030  e01d              B        |L92.110|
;;;450        case LSM303AGR_XL_ODR_1Hz:
;;;451          *val = LSM303AGR_XL_ODR_1Hz;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;452          break;
000036  e01a              B        |L92.110|
;;;453        case LSM303AGR_XL_ODR_10Hz:
;;;454          *val = LSM303AGR_XL_ODR_10Hz;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;455          break;
00003c  e017              B        |L92.110|
;;;456        case LSM303AGR_XL_ODR_25Hz:
;;;457          *val = LSM303AGR_XL_ODR_25Hz;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;458          break;
000042  e014              B        |L92.110|
;;;459        case LSM303AGR_XL_ODR_50Hz:
;;;460          *val = LSM303AGR_XL_ODR_50Hz;
000044  2004              MOVS     r0,#4
000046  7020              STRB     r0,[r4,#0]
;;;461          break;
000048  e011              B        |L92.110|
;;;462        case LSM303AGR_XL_ODR_100Hz:
;;;463          *val = LSM303AGR_XL_ODR_100Hz;
00004a  2005              MOVS     r0,#5
00004c  7020              STRB     r0,[r4,#0]
;;;464          break;
00004e  e00e              B        |L92.110|
;;;465        case LSM303AGR_XL_ODR_200Hz:
;;;466          *val = LSM303AGR_XL_ODR_200Hz;
000050  2006              MOVS     r0,#6
000052  7020              STRB     r0,[r4,#0]
;;;467          break;
000054  e00b              B        |L92.110|
;;;468        case LSM303AGR_XL_ODR_400Hz:
;;;469          *val = LSM303AGR_XL_ODR_400Hz;
000056  2007              MOVS     r0,#7
000058  7020              STRB     r0,[r4,#0]
;;;470          break;
00005a  e008              B        |L92.110|
;;;471        case LSM303AGR_XL_ODR_1kHz620_LP:
;;;472          *val = LSM303AGR_XL_ODR_1kHz620_LP;
00005c  2008              MOVS     r0,#8
00005e  7020              STRB     r0,[r4,#0]
;;;473          break;
000060  e005              B        |L92.110|
;;;474        case LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP:
;;;475          *val = LSM303AGR_XL_ODR_1kHz344_NM_HP_5kHz376_LP;
000062  2009              MOVS     r0,#9
000064  7020              STRB     r0,[r4,#0]
;;;476          break;
000066  e002              B        |L92.110|
                  |L92.104|
;;;477        default:
;;;478          *val = LSM303AGR_XL_POWER_DOWN;
000068  2000              MOVS     r0,#0
00006a  7020              STRB     r0,[r4,#0]
;;;479          break;
00006c  bf00              NOP      
                  |L92.110|
00006e  bf00              NOP                            ;449
;;;480      }
;;;481    
;;;482      return ret;
000070  4630              MOV      r0,r6
;;;483    }
000072  bdf8              POP      {r3-r7,pc}
;;;484    
                          ENDP


                          AREA ||i.lsm303agr_xl_data_rate_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_data_rate_set PROC
;;;411      */
;;;412    int32_t lsm303agr_xl_data_rate_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;413                                       lsm303agr_odr_a_t val)
;;;414    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;415      lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
;;;416      int32_t ret;
;;;417    
;;;418      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2120              MOVS     r1,#0x20
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;419                               (uint8_t*)&ctrl_reg1_a, 1);
;;;420      if(ret == 0){
000014  b95d              CBNZ     r5,|L93.46|
;;;421        ctrl_reg1_a.odr = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641007          BFI      r0,r4,#4,#4
00001e  9000              STR      r0,[sp,#0]
;;;422       ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2120              MOVS     r1,#0x20
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L93.46|
;;;423                                 (uint8_t*)&ctrl_reg1_a, 1);
;;;424      }
;;;425    
;;;426      return ret;
00002e  4628              MOV      r0,r5
;;;427    }
000030  bdf8              POP      {r3-r7,pc}
;;;428    
                          ENDP


                          AREA ||i.lsm303agr_xl_data_ready_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_data_ready_get PROC
;;;819      */
;;;820    int32_t lsm303agr_xl_data_ready_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;821    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;822      lsm303agr_status_reg_a_t status_reg_a;
;;;823      int32_t ret;
;;;824    
;;;825      ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2127              MOVS     r1,#0x27
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;826                               (uint8_t*)&status_reg_a, 1);
;;;827      *val = status_reg_a.zyxda;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  7020              STRB     r0,[r4,#0]
;;;828    
;;;829      return ret;
00001e  4630              MOV      r0,r6
;;;830    }
000020  bdf8              POP      {r3-r7,pc}
;;;831    
                          ENDP


                          AREA ||i.lsm303agr_xl_device_id_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_device_id_get PROC
;;;1426     */
;;;1427   int32_t lsm303agr_xl_device_id_get(lsm303agr_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;1428   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1429     int32_t ret;
;;;1430     ret = lsm303agr_read_reg(ctx, LSM303AGR_WHO_AM_I_A, buff, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  210f              MOVS     r1,#0xf
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1431     return ret;
000014  4630              MOV      r0,r6
;;;1432   }
000016  bd70              POP      {r4-r6,pc}
;;;1433   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_data_level_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_data_level_get PROC
;;;2999     */
;;;3000   int32_t lsm303agr_xl_fifo_data_level_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3001   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3002     lsm303agr_fifo_src_reg_a_t fifo_src_reg_a;
;;;3003     int32_t ret;
;;;3004   
;;;3005     ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_SRC_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  212f              MOVS     r1,#0x2f
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3006                              (uint8_t*)&fifo_src_reg_a, 1);
;;;3007     *val = fifo_src_reg_a.fss;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000001f          AND      r0,r0,#0x1f
00001c  7020              STRB     r0,[r4,#0]
;;;3008   
;;;3009     return ret;
00001e  4630              MOV      r0,r6
;;;3010   }
000020  bdf8              POP      {r3-r7,pc}
;;;3011   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_empty_flag_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_empty_flag_get PROC
;;;3019     */
;;;3020   int32_t lsm303agr_xl_fifo_empty_flag_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3021   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3022     lsm303agr_fifo_src_reg_a_t fifo_src_reg_a;
;;;3023     int32_t ret;
;;;3024   
;;;3025     ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_SRC_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  212f              MOVS     r1,#0x2f
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3026                              (uint8_t*)&fifo_src_reg_a, 1);
;;;3027     *val = fifo_src_reg_a.empty;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  7020              STRB     r0,[r4,#0]
;;;3028   
;;;3029     return ret;
00001e  4630              MOV      r0,r6
;;;3030   }
000020  bdf8              POP      {r3-r7,pc}
;;;3031   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_fth_flag_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_fth_flag_get PROC
;;;3059     */
;;;3060   int32_t lsm303agr_xl_fifo_fth_flag_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3061   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3062     lsm303agr_fifo_src_reg_a_t fifo_src_reg_a;
;;;3063     int32_t ret;
;;;3064   
;;;3065     ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_SRC_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  212f              MOVS     r1,#0x2f
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3066                              (uint8_t*)&fifo_src_reg_a, 1);
;;;3067     *val = fifo_src_reg_a.wtm;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;3068   
;;;3069     return ret;
00001c  4630              MOV      r0,r6
;;;3070   }
00001e  bdf8              POP      {r3-r7,pc}
;;;3071   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_get PROC
;;;2801     */
;;;2802   int32_t lsm303agr_xl_fifo_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2803   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2804     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;2805     int32_t ret;
;;;2806   
;;;2807     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2808                              (uint8_t*)&ctrl_reg5_a, 1);
;;;2809     *val = ctrl_reg5_a.fifo_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;2810   
;;;2811     return ret;
00001e  4630              MOV      r0,r6
;;;2812   }
000020  bdf8              POP      {r3-r7,pc}
;;;2813   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_mode_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_mode_get PROC
;;;2946     */
;;;2947   int32_t lsm303agr_xl_fifo_mode_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2948                                      lsm303agr_fm_a_t *val)
;;;2949   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2950     lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
;;;2951     int32_t ret;
;;;2952   
;;;2953     ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  212e              MOVS     r1,#0x2e
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2954                              (uint8_t*)&fifo_ctrl_reg_a, 1);
;;;2955   
;;;2956       switch (fifo_ctrl_reg_a.fm){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  0980              LSRS     r0,r0,#6
00001a  b130              CBZ      r0,|L100.42|
00001c  2801              CMP      r0,#1
00001e  d007              BEQ      |L100.48|
000020  2802              CMP      r0,#2
000022  d008              BEQ      |L100.54|
000024  2803              CMP      r0,#3
000026  d10c              BNE      |L100.66|
000028  e008              B        |L100.60|
                  |L100.42|
;;;2957       case LSM303AGR_BYPASS_MODE:
;;;2958         *val = LSM303AGR_BYPASS_MODE;
00002a  2000              MOVS     r0,#0
00002c  7020              STRB     r0,[r4,#0]
;;;2959         break;
00002e  e00b              B        |L100.72|
                  |L100.48|
;;;2960       case LSM303AGR_FIFO_MODE:
;;;2961         *val = LSM303AGR_FIFO_MODE;
000030  2001              MOVS     r0,#1
000032  7020              STRB     r0,[r4,#0]
;;;2962         break;
000034  e008              B        |L100.72|
                  |L100.54|
;;;2963       case LSM303AGR_DYNAMIC_STREAM_MODE:
;;;2964         *val = LSM303AGR_DYNAMIC_STREAM_MODE;
000036  2002              MOVS     r0,#2
000038  7020              STRB     r0,[r4,#0]
;;;2965         break;
00003a  e005              B        |L100.72|
                  |L100.60|
;;;2966       case LSM303AGR_STREAM_TO_FIFO_MODE:
;;;2967         *val = LSM303AGR_STREAM_TO_FIFO_MODE;
00003c  2003              MOVS     r0,#3
00003e  7020              STRB     r0,[r4,#0]
;;;2968         break;
000040  e002              B        |L100.72|
                  |L100.66|
;;;2969       default:
;;;2970         *val = LSM303AGR_BYPASS_MODE;
000042  2000              MOVS     r0,#0
000044  7020              STRB     r0,[r4,#0]
;;;2971         break;
000046  bf00              NOP      
                  |L100.72|
000048  bf00              NOP                            ;2959
;;;2972     }
;;;2973     return ret;
00004a  4630              MOV      r0,r6
;;;2974   }
00004c  bdf8              POP      {r3-r7,pc}
;;;2975   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_mode_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_mode_set PROC
;;;2921     */
;;;2922   int32_t lsm303agr_xl_fifo_mode_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2923                                      lsm303agr_fm_a_t val)
;;;2924   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2925     lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
;;;2926     int32_t ret;
;;;2927   
;;;2928     ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  212e              MOVS     r1,#0x2e
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2929                              (uint8_t*)&fifo_ctrl_reg_a, 1);
;;;2930     if(ret == 0){
000014  b95d              CBNZ     r5,|L101.46|
;;;2931       fifo_ctrl_reg_a.fm = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641087          BFI      r0,r4,#6,#2
00001e  9000              STR      r0,[sp,#0]
;;;2932       ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  212e              MOVS     r1,#0x2e
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L101.46|
;;;2933                                 (uint8_t*)&fifo_ctrl_reg_a, 1);
;;;2934     }
;;;2935   
;;;2936     return ret;
00002e  4628              MOV      r0,r5
;;;2937   }
000030  bdf8              POP      {r3-r7,pc}
;;;2938   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_ovr_flag_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_ovr_flag_get PROC
;;;3039     */
;;;3040   int32_t lsm303agr_xl_fifo_ovr_flag_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3041   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3042     lsm303agr_fifo_src_reg_a_t fifo_src_reg_a;
;;;3043     int32_t ret;
;;;3044   
;;;3045     ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_SRC_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  212f              MOVS     r1,#0x2f
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3046                              (uint8_t*)&fifo_src_reg_a, 1);
;;;3047     *val = fifo_src_reg_a.ovrn_fifo;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;3048   
;;;3049     return ret;
00001e  4630              MOV      r0,r6
;;;3050   }
000020  bdf8              POP      {r3-r7,pc}
;;;3051   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_set PROC
;;;2777     */
;;;2778   int32_t lsm303agr_xl_fifo_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2779   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2780     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;2781     int32_t ret;
;;;2782   
;;;2783     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2784                              (uint8_t*)&ctrl_reg5_a, 1);
;;;2785     if(ret == 0){
000014  b95d              CBNZ     r5,|L103.46|
;;;2786       ctrl_reg5_a.fifo_en = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9000              STR      r0,[sp,#0]
;;;2787       ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG5_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2124              MOVS     r1,#0x24
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L103.46|
;;;2788                                 (uint8_t*)&ctrl_reg5_a, 1);
;;;2789     }
;;;2790   
;;;2791     return ret;
00002e  4628              MOV      r0,r5
;;;2792   }
000030  bdf8              POP      {r3-r7,pc}
;;;2793   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_status_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_status_get PROC
;;;2983     */
;;;2984   int32_t lsm303agr_xl_fifo_status_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2985                                        lsm303agr_fifo_src_reg_a_t *val)
;;;2986   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2987     int32_t ret;
;;;2988     ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_SRC_REG_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  212f              MOVS     r1,#0x2f
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2989     return ret;
000014  4630              MOV      r0,r6
;;;2990   }
000016  bd70              POP      {r4-r6,pc}
;;;2991   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_trigger_event_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_trigger_event_get PROC
;;;2890     */
;;;2891   int32_t lsm303agr_xl_fifo_trigger_event_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2892                                               lsm303agr_tr_a_t *val)
;;;2893   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2894     lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
;;;2895     int32_t ret;
;;;2896   
;;;2897     ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  212e              MOVS     r1,#0x2e
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2898                              (uint8_t*)&fifo_ctrl_reg_a, 1);
;;;2899   
;;;2900       switch (fifo_ctrl_reg_a.tr){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  b110              CBZ      r0,|L105.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L105.48|
000022  e002              B        |L105.42|
                  |L105.36|
;;;2901       case LSM303AGR_INT1_GEN:
;;;2902         *val = LSM303AGR_INT1_GEN;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;2903         break;
000028  e005              B        |L105.54|
                  |L105.42|
;;;2904       case LSM303AGR_INT2_GEN:
;;;2905         *val = LSM303AGR_INT2_GEN;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;2906         break;
00002e  e002              B        |L105.54|
                  |L105.48|
;;;2907       default:
;;;2908         *val = LSM303AGR_INT1_GEN;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;2909         break;
000034  bf00              NOP      
                  |L105.54|
000036  bf00              NOP                            ;2903
;;;2910     }
;;;2911     return ret;
000038  4630              MOV      r0,r6
;;;2912   }
00003a  bdf8              POP      {r3-r7,pc}
;;;2913   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_trigger_event_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_trigger_event_set PROC
;;;2865     */
;;;2866   int32_t lsm303agr_xl_fifo_trigger_event_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2867                                           lsm303agr_tr_a_t val)
;;;2868   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2869     lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
;;;2870     int32_t ret;
;;;2871   
;;;2872     ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  212e              MOVS     r1,#0x2e
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2873                              (uint8_t*)&fifo_ctrl_reg_a, 1);
;;;2874     if(ret == 0){
000014  b95d              CBNZ     r5,|L106.46|
;;;2875       fifo_ctrl_reg_a.tr = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641045          BFI      r0,r4,#5,#1
00001e  9000              STR      r0,[sp,#0]
;;;2876       ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  212e              MOVS     r1,#0x2e
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L106.46|
;;;2877                                 (uint8_t*)&fifo_ctrl_reg_a, 1);
;;;2878     }
;;;2879   
;;;2880     return ret;
00002e  4628              MOV      r0,r5
;;;2881   }
000030  bdf8              POP      {r3-r7,pc}
;;;2882   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_watermark_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_watermark_get PROC
;;;2845     */
;;;2846   int32_t lsm303agr_xl_fifo_watermark_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2847   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2848     lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
;;;2849     int32_t ret;
;;;2850   
;;;2851     ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  212e              MOVS     r1,#0x2e
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2852                              (uint8_t*)&fifo_ctrl_reg_a, 1);
;;;2853     *val = fifo_ctrl_reg_a.fth;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000001f          AND      r0,r0,#0x1f
00001c  7020              STRB     r0,[r4,#0]
;;;2854   
;;;2855     return ret;
00001e  4630              MOV      r0,r6
;;;2856   }
000020  bdf8              POP      {r3-r7,pc}
;;;2857   
                          ENDP


                          AREA ||i.lsm303agr_xl_fifo_watermark_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_fifo_watermark_set PROC
;;;2821     */
;;;2822   int32_t lsm303agr_xl_fifo_watermark_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2823   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2824     lsm303agr_fifo_ctrl_reg_a_t fifo_ctrl_reg_a;
;;;2825     int32_t ret;
;;;2826   
;;;2827     ret = lsm303agr_read_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  212e              MOVS     r1,#0x2e
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2828                              (uint8_t*)&fifo_ctrl_reg_a, 1);
;;;2829     if(ret == 0){
000014  b95d              CBNZ     r5,|L108.46|
;;;2830       fifo_ctrl_reg_a.fth = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640004          BFI      r0,r4,#0,#5
00001e  9000              STR      r0,[sp,#0]
;;;2831       ret = lsm303agr_write_reg(ctx, LSM303AGR_FIFO_CTRL_REG_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  212e              MOVS     r1,#0x2e
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L108.46|
;;;2832                                 (uint8_t*)&fifo_ctrl_reg_a, 1);
;;;2833     }
;;;2834   
;;;2835     return ret;
00002e  4628              MOV      r0,r5
;;;2836   }
000030  bdf8              POP      {r3-r7,pc}
;;;2837   
                          ENDP


                          AREA ||i.lsm303agr_xl_filter_reference_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_filter_reference_get PROC
;;;803      */
;;;804    int32_t lsm303agr_xl_filter_reference_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;805                                              uint8_t *buff)
;;;806    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;807      int32_t ret;
;;;808      ret = lsm303agr_read_reg(ctx, LSM303AGR_REFERENCE_A, buff, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2126              MOVS     r1,#0x26
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;809      return ret;
000014  4630              MOV      r0,r6
;;;810    }
000016  bd70              POP      {r4-r6,pc}
;;;811    
                          ENDP


                          AREA ||i.lsm303agr_xl_filter_reference_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_filter_reference_set PROC
;;;786      */
;;;787    int32_t lsm303agr_xl_filter_reference_set(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;788                                              uint8_t *buff)
;;;789    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;790      int32_t ret;
;;;791      ret = lsm303agr_write_reg(ctx, LSM303AGR_REFERENCE_A, buff, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2126              MOVS     r1,#0x26
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_write_reg
000012  4606              MOV      r6,r0
;;;792      return ret;
000014  4630              MOV      r0,r6
;;;793    }
000016  bd70              POP      {r4-r6,pc}
;;;794    
                          ENDP


                          AREA ||i.lsm303agr_xl_full_scale_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_full_scale_get PROC
;;;702      */
;;;703    int32_t lsm303agr_xl_full_scale_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;704                                        lsm303agr_fs_a_t *val)
;;;705    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;706      lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;707      int32_t ret;
;;;708    
;;;709      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2123              MOVS     r1,#0x23
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;710                               (uint8_t*)&ctrl_reg4_a, 1);
;;;711    
;;;712      switch (ctrl_reg4_a.fs){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01001          UBFX     r0,r0,#4,#2
00001c  b130              CBZ      r0,|L111.44|
00001e  2801              CMP      r0,#1
000020  d007              BEQ      |L111.50|
000022  2802              CMP      r0,#2
000024  d008              BEQ      |L111.56|
000026  2803              CMP      r0,#3
000028  d10c              BNE      |L111.68|
00002a  e008              B        |L111.62|
                  |L111.44|
;;;713        case LSM303AGR_2g:
;;;714          *val = LSM303AGR_2g;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;715          break;
000030  e00b              B        |L111.74|
                  |L111.50|
;;;716        case LSM303AGR_4g:
;;;717          *val = LSM303AGR_4g;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;718          break;
000036  e008              B        |L111.74|
                  |L111.56|
;;;719        case LSM303AGR_8g:
;;;720          *val = LSM303AGR_8g;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;721          break;
00003c  e005              B        |L111.74|
                  |L111.62|
;;;722        case LSM303AGR_16g:
;;;723          *val = LSM303AGR_16g;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;724          break;
000042  e002              B        |L111.74|
                  |L111.68|
;;;725        default:
;;;726          *val = LSM303AGR_2g;
000044  2000              MOVS     r0,#0
000046  7020              STRB     r0,[r4,#0]
;;;727          break;
000048  bf00              NOP      
                  |L111.74|
00004a  bf00              NOP                            ;715
;;;728      }
;;;729      return ret;
00004c  4630              MOV      r0,r6
;;;730    }
00004e  bdf8              POP      {r3-r7,pc}
;;;731    
                          ENDP


                          AREA ||i.lsm303agr_xl_full_scale_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_full_scale_set PROC
;;;677      */
;;;678    int32_t lsm303agr_xl_full_scale_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;679                                        lsm303agr_fs_a_t val)
;;;680    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;681      lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;682      int32_t ret;
;;;683    
;;;684      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2123              MOVS     r1,#0x23
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;685                               (uint8_t*)&ctrl_reg4_a, 1);
;;;686      if(ret == 0){
000014  b95d              CBNZ     r5,|L112.46|
;;;687        ctrl_reg4_a.fs = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641005          BFI      r0,r4,#4,#2
00001e  9000              STR      r0,[sp,#0]
;;;688        ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2123              MOVS     r1,#0x23
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L112.46|
;;;689                                  (uint8_t*)&ctrl_reg4_a, 1);
;;;690      }
;;;691    
;;;692      return ret;
00002e  4628              MOV      r0,r5
;;;693    }
000030  bdf8              POP      {r3-r7,pc}
;;;694    
                          ENDP


                          AREA ||i.lsm303agr_xl_high_pass_bandwidth_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_high_pass_bandwidth_get PROC
;;;578      */
;;;579    int32_t lsm303agr_xl_high_pass_bandwidth_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;580                                                 lsm303agr_hpcf_a_t *val)
;;;581    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;582      lsm303agr_ctrl_reg2_a_t ctrl_reg2_a;
;;;583      int32_t ret;
;;;584    
;;;585      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG2_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2121              MOVS     r1,#0x21
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;586                               (uint8_t*)&ctrl_reg2_a, 1);
;;;587    
;;;588      switch (ctrl_reg2_a.hpcf){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01001          UBFX     r0,r0,#4,#2
00001c  b130              CBZ      r0,|L113.44|
00001e  2801              CMP      r0,#1
000020  d007              BEQ      |L113.50|
000022  2802              CMP      r0,#2
000024  d008              BEQ      |L113.56|
000026  2803              CMP      r0,#3
000028  d10c              BNE      |L113.68|
00002a  e008              B        |L113.62|
                  |L113.44|
;;;589        case LSM303AGR_AGGRESSIVE:
;;;590          *val = LSM303AGR_AGGRESSIVE;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;591          break;
000030  e00b              B        |L113.74|
                  |L113.50|
;;;592        case LSM303AGR_STRONG:
;;;593          *val = LSM303AGR_STRONG;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;594          break;
000036  e008              B        |L113.74|
                  |L113.56|
;;;595        case LSM303AGR_MEDIUM:
;;;596          *val = LSM303AGR_MEDIUM;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;597          break;
00003c  e005              B        |L113.74|
                  |L113.62|
;;;598        case LSM303AGR_LIGHT:
;;;599          *val = LSM303AGR_LIGHT;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;600          break;
000042  e002              B        |L113.74|
                  |L113.68|
;;;601        default:
;;;602          *val = LSM303AGR_AGGRESSIVE;
000044  2000              MOVS     r0,#0
000046  7020              STRB     r0,[r4,#0]
;;;603          break;
000048  bf00              NOP      
                  |L113.74|
00004a  bf00              NOP                            ;591
;;;604      }
;;;605      return ret;
00004c  4630              MOV      r0,r6
;;;606    }
00004e  bdf8              POP      {r3-r7,pc}
;;;607    
                          ENDP


                          AREA ||i.lsm303agr_xl_high_pass_bandwidth_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_high_pass_bandwidth_set PROC
;;;546      */
;;;547    int32_t lsm303agr_xl_high_pass_bandwidth_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;548                                                 lsm303agr_hpcf_a_t val)
;;;549    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;550      lsm303agr_ctrl_reg2_a_t ctrl_reg2_a;
;;;551      int32_t ret;
;;;552    
;;;553      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG2_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2121              MOVS     r1,#0x21
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;554                               (uint8_t*)&ctrl_reg2_a, 1);
;;;555      if(ret == 0){
000014  b95d              CBNZ     r5,|L114.46|
;;;556        ctrl_reg2_a.hpcf = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641005          BFI      r0,r4,#4,#2
00001e  9000              STR      r0,[sp,#0]
;;;557        ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG2_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2121              MOVS     r1,#0x21
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L114.46|
;;;558                                  (uint8_t*)&ctrl_reg2_a, 1);
;;;559      }
;;;560    
;;;561      return ret;
00002e  4628              MOV      r0,r5
;;;562    }
000030  bdf8              POP      {r3-r7,pc}
;;;563    
                          ENDP


                          AREA ||i.lsm303agr_xl_high_pass_int_conf_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_high_pass_int_conf_get PROC
;;;2188     */
;;;2189   int32_t lsm303agr_xl_high_pass_int_conf_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2190                                               lsm303agr_hp_a_t *val)
;;;2191   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2192     lsm303agr_ctrl_reg2_a_t ctrl_reg2_a;
;;;2193     int32_t ret;
;;;2194   
;;;2195     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG2_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2121              MOVS     r1,#0x21
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2196                              (uint8_t*)&ctrl_reg2_a, 1);
;;;2197   
;;;2198       switch (ctrl_reg2_a.hp){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000007          AND      r0,r0,#7
00001c  2808              CMP      r0,#8
00001e  d21d              BCS      |L115.92|
000020  e8dff000          TBB      [pc,r0]
000024  04070a10          DCB      0x04,0x07,0x0a,0x10
000028  0d131619          DCB      0x0d,0x13,0x16,0x19
;;;2199       case LSM303AGR_DISC_FROM_INT_GENERATOR:
;;;2200         *val = LSM303AGR_DISC_FROM_INT_GENERATOR;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;2201         break;
000030  e017              B        |L115.98|
;;;2202       case LSM303AGR_ON_INT1_GEN:
;;;2203         *val = LSM303AGR_ON_INT1_GEN;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;2204         break;
000036  e014              B        |L115.98|
;;;2205       case LSM303AGR_ON_INT2_GEN:
;;;2206         *val = LSM303AGR_ON_INT2_GEN;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;2207         break;
00003c  e011              B        |L115.98|
;;;2208       case LSM303AGR_ON_TAP_GEN:
;;;2209         *val = LSM303AGR_ON_TAP_GEN;
00003e  2004              MOVS     r0,#4
000040  7020              STRB     r0,[r4,#0]
;;;2210         break;
000042  e00e              B        |L115.98|
;;;2211       case LSM303AGR_ON_INT1_INT2_GEN:
;;;2212         *val = LSM303AGR_ON_INT1_INT2_GEN;
000044  2003              MOVS     r0,#3
000046  7020              STRB     r0,[r4,#0]
;;;2213         break;
000048  e00b              B        |L115.98|
;;;2214       case LSM303AGR_ON_INT1_TAP_GEN:
;;;2215         *val = LSM303AGR_ON_INT1_TAP_GEN;
00004a  2005              MOVS     r0,#5
00004c  7020              STRB     r0,[r4,#0]
;;;2216         break;
00004e  e008              B        |L115.98|
;;;2217       case LSM303AGR_ON_INT2_TAP_GEN:
;;;2218         *val = LSM303AGR_ON_INT2_TAP_GEN;
000050  2006              MOVS     r0,#6
000052  7020              STRB     r0,[r4,#0]
;;;2219         break;
000054  e005              B        |L115.98|
;;;2220       case LSM303AGR_ON_INT1_INT2_TAP_GEN:
;;;2221         *val = LSM303AGR_ON_INT1_INT2_TAP_GEN;
000056  2007              MOVS     r0,#7
000058  7020              STRB     r0,[r4,#0]
;;;2222         break;
00005a  e002              B        |L115.98|
                  |L115.92|
;;;2223       default:
;;;2224         *val = LSM303AGR_DISC_FROM_INT_GENERATOR;
00005c  2000              MOVS     r0,#0
00005e  7020              STRB     r0,[r4,#0]
;;;2225         break;
000060  bf00              NOP      
                  |L115.98|
000062  bf00              NOP                            ;2201
;;;2226     }
;;;2227     return ret;
000064  4630              MOV      r0,r6
;;;2228   }
000066  bdf8              POP      {r3-r7,pc}
;;;2229   
                          ENDP


                          AREA ||i.lsm303agr_xl_high_pass_int_conf_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_high_pass_int_conf_set PROC
;;;2163     */
;;;2164   int32_t lsm303agr_xl_high_pass_int_conf_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2165                                               lsm303agr_hp_a_t val)
;;;2166   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2167     lsm303agr_ctrl_reg2_a_t ctrl_reg2_a;
;;;2168     int32_t ret;
;;;2169   
;;;2170     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG2_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2121              MOVS     r1,#0x21
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2171                              (uint8_t*)&ctrl_reg2_a, 1);
;;;2172     if(ret == 0){
000014  b95d              CBNZ     r5,|L116.46|
;;;2173       ctrl_reg2_a.hp = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640002          BFI      r0,r4,#0,#3
00001e  9000              STR      r0,[sp,#0]
;;;2174       ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG2_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2121              MOVS     r1,#0x21
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L116.46|
;;;2175                                 (uint8_t*)&ctrl_reg2_a, 1);
;;;2176     }
;;;2177   
;;;2178     return ret;
00002e  4628              MOV      r0,r5
;;;2179   }
000030  bdf8              POP      {r3-r7,pc}
;;;2180   
                          ENDP


                          AREA ||i.lsm303agr_xl_high_pass_mode_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_high_pass_mode_get PROC
;;;640      */
;;;641    int32_t lsm303agr_xl_high_pass_mode_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;642                                            lsm303agr_hpm_a_t *val)
;;;643    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;644      lsm303agr_ctrl_reg2_a_t ctrl_reg2_a;
;;;645      int32_t ret;
;;;646    
;;;647      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG2_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2121              MOVS     r1,#0x21
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;648                               (uint8_t*)&ctrl_reg2_a, 1);
;;;649    
;;;650      switch (ctrl_reg2_a.hpm){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  0980              LSRS     r0,r0,#6
00001a  b130              CBZ      r0,|L117.42|
00001c  2801              CMP      r0,#1
00001e  d007              BEQ      |L117.48|
000020  2802              CMP      r0,#2
000022  d008              BEQ      |L117.54|
000024  2803              CMP      r0,#3
000026  d10c              BNE      |L117.66|
000028  e008              B        |L117.60|
                  |L117.42|
;;;651        case LSM303AGR_NORMAL_WITH_RST:
;;;652          *val = LSM303AGR_NORMAL_WITH_RST;
00002a  2000              MOVS     r0,#0
00002c  7020              STRB     r0,[r4,#0]
;;;653          break;
00002e  e00b              B        |L117.72|
                  |L117.48|
;;;654        case LSM303AGR_REFERENCE_MODE:
;;;655          *val = LSM303AGR_REFERENCE_MODE;
000030  2001              MOVS     r0,#1
000032  7020              STRB     r0,[r4,#0]
;;;656          break;
000034  e008              B        |L117.72|
                  |L117.54|
;;;657        case LSM303AGR_NORMAL:
;;;658          *val = LSM303AGR_NORMAL;
000036  2002              MOVS     r0,#2
000038  7020              STRB     r0,[r4,#0]
;;;659          break;
00003a  e005              B        |L117.72|
                  |L117.60|
;;;660        case LSM303AGR_AUTORST_ON_INT:
;;;661          *val = LSM303AGR_AUTORST_ON_INT;
00003c  2003              MOVS     r0,#3
00003e  7020              STRB     r0,[r4,#0]
;;;662          break;
000040  e002              B        |L117.72|
                  |L117.66|
;;;663        default:
;;;664          *val = LSM303AGR_NORMAL_WITH_RST;
000042  2000              MOVS     r0,#0
000044  7020              STRB     r0,[r4,#0]
;;;665          break;
000046  bf00              NOP      
                  |L117.72|
000048  bf00              NOP                            ;653
;;;666      }
;;;667      return ret;
00004a  4630              MOV      r0,r6
;;;668    }
00004c  bdf8              POP      {r3-r7,pc}
;;;669    
                          ENDP


                          AREA ||i.lsm303agr_xl_high_pass_mode_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_high_pass_mode_set PROC
;;;615      */
;;;616    int32_t lsm303agr_xl_high_pass_mode_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;617                                            lsm303agr_hpm_a_t val)
;;;618    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;619      lsm303agr_ctrl_reg2_a_t ctrl_reg2_a;
;;;620      int32_t ret;
;;;621    
;;;622      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG2_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2121              MOVS     r1,#0x21
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;623                               (uint8_t*)&ctrl_reg2_a, 1);
;;;624      if(ret == 0){
000014  b95d              CBNZ     r5,|L118.46|
;;;625        ctrl_reg2_a.hpm = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641087          BFI      r0,r4,#6,#2
00001e  9000              STR      r0,[sp,#0]
;;;626        ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG2_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2121              MOVS     r1,#0x21
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L118.46|
;;;627                                  (uint8_t*)&ctrl_reg2_a, 1);
;;;628      }
;;;629    
;;;630      return ret;
00002e  4628              MOV      r0,r5
;;;631    }
000030  bdf8              POP      {r3-r7,pc}
;;;632    
                          ENDP


                          AREA ||i.lsm303agr_xl_high_pass_on_outputs_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_high_pass_on_outputs_get PROC
;;;518      */
;;;519    int32_t lsm303agr_xl_high_pass_on_outputs_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;520                                                  uint8_t *val)
;;;521    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;522      lsm303agr_ctrl_reg2_a_t ctrl_reg2_a;
;;;523      int32_t ret;
;;;524    
;;;525      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG2_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2121              MOVS     r1,#0x21
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;526                               (uint8_t*)&ctrl_reg2_a, 1);
;;;527      *val = ctrl_reg2_a.fds;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  7020              STRB     r0,[r4,#0]
;;;528    
;;;529      return ret;
00001e  4630              MOV      r0,r6
;;;530    }
000020  bdf8              POP      {r3-r7,pc}
;;;531    
                          ENDP


                          AREA ||i.lsm303agr_xl_high_pass_on_outputs_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_high_pass_on_outputs_set PROC
;;;492      */
;;;493    int32_t lsm303agr_xl_high_pass_on_outputs_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;494                                                  uint8_t val)
;;;495    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;496      lsm303agr_ctrl_reg2_a_t ctrl_reg2_a;
;;;497      int32_t ret;
;;;498    
;;;499      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG2_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2121              MOVS     r1,#0x21
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;500                               (uint8_t*)&ctrl_reg2_a, 1);
;;;501      if(ret == 0){
000014  b95d              CBNZ     r5,|L120.46|
;;;502        ctrl_reg2_a.fds = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;503        ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG2_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2121              MOVS     r1,#0x21
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L120.46|
;;;504                                  (uint8_t*)&ctrl_reg2_a, 1);
;;;505      }
;;;506    
;;;507      return ret;
00002e  4628              MOV      r0,r5
;;;508    }
000030  bdf8              POP      {r3-r7,pc}
;;;509    
                          ENDP


                          AREA ||i.lsm303agr_xl_int1_gen_conf_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int1_gen_conf_get PROC
;;;1864     */
;;;1865   int32_t lsm303agr_xl_int1_gen_conf_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;1866                                          lsm303agr_int1_cfg_a_t *val)
;;;1867   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1868     int32_t ret;
;;;1869     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT1_CFG_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2130              MOVS     r1,#0x30
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1870     return ret;
000014  4630              MOV      r0,r6
;;;1871   }
000016  bd70              POP      {r4-r6,pc}
;;;1872   
                          ENDP


                          AREA ||i.lsm303agr_xl_int1_gen_conf_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int1_gen_conf_set PROC
;;;1848     */
;;;1849   int32_t lsm303agr_xl_int1_gen_conf_set(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;1850                                          lsm303agr_int1_cfg_a_t *val)
;;;1851   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1852     int32_t ret;
;;;1853     ret = lsm303agr_write_reg(ctx, LSM303AGR_INT1_CFG_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2130              MOVS     r1,#0x30
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_write_reg
000012  4606              MOV      r6,r0
;;;1854     return ret;
000014  4630              MOV      r0,r6
;;;1855   }
000016  bd70              POP      {r4-r6,pc}
;;;1856   
                          ENDP


                          AREA ||i.lsm303agr_xl_int1_gen_duration_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int1_gen_duration_get PROC
;;;1972     */
;;;1973   int32_t lsm303agr_xl_int1_gen_duration_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1974   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1975     lsm303agr_int1_duration_a_t int1_duration_a;
;;;1976     int32_t ret;
;;;1977   
;;;1978     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT1_DURATION_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2133              MOVS     r1,#0x33
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1979                              (uint8_t*)&int1_duration_a, 1);
;;;1980     *val = int1_duration_a.d;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000007f          AND      r0,r0,#0x7f
00001c  7020              STRB     r0,[r4,#0]
;;;1981   
;;;1982     return ret;
00001e  4630              MOV      r0,r6
;;;1983   }
000020  bdf8              POP      {r3-r7,pc}
;;;1984   
                          ENDP


                          AREA ||i.lsm303agr_xl_int1_gen_duration_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int1_gen_duration_set PROC
;;;1947     */
;;;1948   int32_t lsm303agr_xl_int1_gen_duration_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1949   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1950     lsm303agr_int1_duration_a_t int1_duration_a;
;;;1951     int32_t ret;
;;;1952   
;;;1953     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT1_DURATION_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2133              MOVS     r1,#0x33
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1954                              (uint8_t*)&int1_duration_a, 1);
;;;1955     if(ret == 0){
000014  b95d              CBNZ     r5,|L124.46|
;;;1956       int1_duration_a.d = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640006          BFI      r0,r4,#0,#7
00001e  9000              STR      r0,[sp,#0]
;;;1957       ret = lsm303agr_write_reg(ctx, LSM303AGR_INT1_DURATION_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2133              MOVS     r1,#0x33
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L124.46|
;;;1958                                 (uint8_t*)&int1_duration_a, 1);
;;;1959     }
;;;1960   
;;;1961     return ret;
00002e  4628              MOV      r0,r5
;;;1962   }
000030  bdf8              POP      {r3-r7,pc}
;;;1963   
                          ENDP


                          AREA ||i.lsm303agr_xl_int1_gen_source_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int1_gen_source_get PROC
;;;1880     */
;;;1881   int32_t lsm303agr_xl_int1_gen_source_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;1882                                            lsm303agr_int1_src_a_t *val)
;;;1883   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1884     int32_t ret;
;;;1885     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT1_SRC_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2131              MOVS     r1,#0x31
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1886     return ret;
000014  4630              MOV      r0,r6
;;;1887   }
000016  bd70              POP      {r4-r6,pc}
;;;1888   
                          ENDP


                          AREA ||i.lsm303agr_xl_int1_gen_threshold_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int1_gen_threshold_get PROC
;;;1925     */
;;;1926   int32_t lsm303agr_xl_int1_gen_threshold_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1927                                               uint8_t *val)
;;;1928   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1929     lsm303agr_int1_ths_a_t int1_ths_a;
;;;1930     int32_t ret;
;;;1931   
;;;1932     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT1_THS_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2132              MOVS     r1,#0x32
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1933                              (uint8_t*)&int1_ths_a, 1);
;;;1934     *val = int1_ths_a.ths;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000007f          AND      r0,r0,#0x7f
00001c  7020              STRB     r0,[r4,#0]
;;;1935   
;;;1936     return ret;
00001e  4630              MOV      r0,r6
;;;1937   }
000020  bdf8              POP      {r3-r7,pc}
;;;1938   
                          ENDP


                          AREA ||i.lsm303agr_xl_int1_gen_threshold_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int1_gen_threshold_set PROC
;;;1898     */
;;;1899   int32_t lsm303agr_xl_int1_gen_threshold_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1900                                               uint8_t val)
;;;1901   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1902     lsm303agr_int1_ths_a_t int1_ths_a;
;;;1903     int32_t ret;
;;;1904   
;;;1905     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT1_THS_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2132              MOVS     r1,#0x32
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1906                              (uint8_t*)&int1_ths_a, 1);
;;;1907     if(ret == 0){
000014  b95d              CBNZ     r5,|L127.46|
;;;1908       int1_ths_a.ths = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640006          BFI      r0,r4,#0,#7
00001e  9000              STR      r0,[sp,#0]
;;;1909       ret = lsm303agr_write_reg(ctx, LSM303AGR_INT1_THS_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2132              MOVS     r1,#0x32
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L127.46|
;;;1910                                 (uint8_t*)&int1_ths_a, 1);
;;;1911     }
;;;1912   
;;;1913     return ret;
00002e  4628              MOV      r0,r5
;;;1914   }
000030  bdf8              POP      {r3-r7,pc}
;;;1915   
                          ENDP


                          AREA ||i.lsm303agr_xl_int1_pin_detect_4d_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int1_pin_detect_4d_get PROC
;;;2403     */
;;;2404   int32_t lsm303agr_xl_int1_pin_detect_4d_get(lsm303agr_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2405   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2406     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;2407     int32_t ret;
;;;2408   
;;;2409     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2410                              (uint8_t*)&ctrl_reg5_a, 1);
;;;2411     *val = ctrl_reg5_a.d4d_int1;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  7020              STRB     r0,[r4,#0]
;;;2412   
;;;2413     return ret;
00001e  4630              MOV      r0,r6
;;;2414   }
000020  bdf8              POP      {r3-r7,pc}
;;;2415   
                          ENDP


                          AREA ||i.lsm303agr_xl_int1_pin_detect_4d_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int1_pin_detect_4d_set PROC
;;;2378     */
;;;2379   int32_t lsm303agr_xl_int1_pin_detect_4d_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2380   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2381     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;2382     int32_t ret;
;;;2383   
;;;2384     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2385                              (uint8_t*)&ctrl_reg5_a, 1);
;;;2386     if(ret == 0){
000014  b95d              CBNZ     r5,|L129.46|
;;;2387       ctrl_reg5_a.d4d_int1 = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640082          BFI      r0,r4,#2,#1
00001e  9000              STR      r0,[sp,#0]
;;;2388       ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG5_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2124              MOVS     r1,#0x24
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L129.46|
;;;2389                                 (uint8_t*)&ctrl_reg5_a, 1);
;;;2390     }
;;;2391   
;;;2392     return ret;
00002e  4628              MOV      r0,r5
;;;2393   }
000030  bdf8              POP      {r3-r7,pc}
;;;2394   
                          ENDP


                          AREA ||i.lsm303agr_xl_int1pin_notification_mode_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int1pin_notification_mode_get PROC
;;;2452     */
;;;2453   int32_t lsm303agr_xl_int1pin_notification_mode_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2454                                                      lsm303agr_lir_int1_a_t *val)
;;;2455   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2456     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;2457     int32_t ret;
;;;2458   
;;;2459     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2460                              (uint8_t*)&ctrl_reg5_a, 1);
;;;2461   
;;;2462       switch (ctrl_reg5_a.lir_int1){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  b110              CBZ      r0,|L130.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L130.48|
000022  e002              B        |L130.42|
                  |L130.36|
;;;2463       case LSM303AGR_INT1_PULSED:
;;;2464         *val = LSM303AGR_INT1_PULSED;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;2465         break;
000028  e005              B        |L130.54|
                  |L130.42|
;;;2466       case LSM303AGR_INT1_LATCHED:
;;;2467         *val = LSM303AGR_INT1_LATCHED;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;2468         break;
00002e  e002              B        |L130.54|
                  |L130.48|
;;;2469       default:
;;;2470         *val = LSM303AGR_INT1_PULSED;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;2471         break;
000034  bf00              NOP      
                  |L130.54|
000036  bf00              NOP                            ;2465
;;;2472     }
;;;2473     return ret;
000038  4630              MOV      r0,r6
;;;2474   }
00003a  bdf8              POP      {r3-r7,pc}
;;;2475   
                          ENDP


                          AREA ||i.lsm303agr_xl_int1pin_notification_mode_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int1pin_notification_mode_set PROC
;;;2425     */
;;;2426   int32_t lsm303agr_xl_int1pin_notification_mode_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2427                                                      lsm303agr_lir_int1_a_t val)
;;;2428   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2429     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;2430     int32_t ret;
;;;2431   
;;;2432     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2433                              (uint8_t*)&ctrl_reg5_a, 1);
;;;2434     if(ret == 0){
000014  b95d              CBNZ     r5,|L131.46|
;;;2435       ctrl_reg5_a.lir_int1 = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;2436       ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG5_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2124              MOVS     r1,#0x24
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L131.46|
;;;2437                                 (uint8_t*)&ctrl_reg5_a, 1);
;;;2438     }
;;;2439   
;;;2440     return ret;
00002e  4628              MOV      r0,r5
;;;2441   }
000030  bdf8              POP      {r3-r7,pc}
;;;2442   
                          ENDP


                          AREA ||i.lsm303agr_xl_int2_gen_conf_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int2_gen_conf_get PROC
;;;2021     */
;;;2022   int32_t lsm303agr_xl_int2_gen_conf_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2023                                          lsm303agr_int2_cfg_a_t *val)
;;;2024   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2025     int32_t ret;
;;;2026     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT2_CFG_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2134              MOVS     r1,#0x34
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2027     return ret;
000014  4630              MOV      r0,r6
;;;2028   }
000016  bd70              POP      {r4-r6,pc}
;;;2029   
                          ENDP


                          AREA ||i.lsm303agr_xl_int2_gen_conf_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int2_gen_conf_set PROC
;;;2005     */
;;;2006   int32_t lsm303agr_xl_int2_gen_conf_set(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2007                                          lsm303agr_int2_cfg_a_t *val)
;;;2008   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2009     int32_t ret;
;;;2010     ret = lsm303agr_write_reg(ctx, LSM303AGR_INT2_CFG_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2134              MOVS     r1,#0x34
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_write_reg
000012  4606              MOV      r6,r0
;;;2011     return ret;
000014  4630              MOV      r0,r6
;;;2012   }
000016  bd70              POP      {r4-r6,pc}
;;;2013   
                          ENDP


                          AREA ||i.lsm303agr_xl_int2_gen_duration_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int2_gen_duration_get PROC
;;;2129     */
;;;2130   int32_t lsm303agr_xl_int2_gen_duration_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2131                                              uint8_t *val)
;;;2132   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2133     lsm303agr_int2_duration_a_t int2_duration_a;
;;;2134     int32_t ret;
;;;2135   
;;;2136     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT2_DURATION_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2137              MOVS     r1,#0x37
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2137                              (uint8_t*)&int2_duration_a, 1);
;;;2138     *val = int2_duration_a.d;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000007f          AND      r0,r0,#0x7f
00001c  7020              STRB     r0,[r4,#0]
;;;2139   
;;;2140     return ret;
00001e  4630              MOV      r0,r6
;;;2141   }
000020  bdf8              POP      {r3-r7,pc}
;;;2142   
                          ENDP


                          AREA ||i.lsm303agr_xl_int2_gen_duration_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int2_gen_duration_set PROC
;;;2104     */
;;;2105   int32_t lsm303agr_xl_int2_gen_duration_set(lsm303agr_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2106   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2107     lsm303agr_int2_duration_a_t int2_duration_a;
;;;2108     int32_t ret;
;;;2109   
;;;2110     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT2_DURATION_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2137              MOVS     r1,#0x37
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2111                              (uint8_t*)&int2_duration_a, 1);
;;;2112     if(ret == 0){
000014  b95d              CBNZ     r5,|L135.46|
;;;2113       int2_duration_a.d = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640006          BFI      r0,r4,#0,#7
00001e  9000              STR      r0,[sp,#0]
;;;2114       ret = lsm303agr_write_reg(ctx, LSM303AGR_INT2_DURATION_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2137              MOVS     r1,#0x37
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L135.46|
;;;2115                                 (uint8_t*)&int2_duration_a, 1);
;;;2116     }
;;;2117   
;;;2118     return ret;
00002e  4628              MOV      r0,r5
;;;2119   }
000030  bdf8              POP      {r3-r7,pc}
;;;2120   
                          ENDP


                          AREA ||i.lsm303agr_xl_int2_gen_source_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int2_gen_source_get PROC
;;;2037     */
;;;2038   int32_t lsm303agr_xl_int2_gen_source_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2039                                            lsm303agr_int2_src_a_t *val)
;;;2040   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2041     int32_t ret;
;;;2042     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT2_SRC_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2135              MOVS     r1,#0x35
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2043     return ret;
000014  4630              MOV      r0,r6
;;;2044   }
000016  bd70              POP      {r4-r6,pc}
;;;2045   
                          ENDP


                          AREA ||i.lsm303agr_xl_int2_gen_threshold_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int2_gen_threshold_get PROC
;;;2082     */
;;;2083   int32_t lsm303agr_xl_int2_gen_threshold_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2084                                               uint8_t *val)
;;;2085   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2086     lsm303agr_int2_ths_a_t int2_ths_a;
;;;2087     int32_t ret;
;;;2088   
;;;2089     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT2_THS_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2136              MOVS     r1,#0x36
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2090                              (uint8_t*)&int2_ths_a, 1);
;;;2091     *val = int2_ths_a.ths;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000007f          AND      r0,r0,#0x7f
00001c  7020              STRB     r0,[r4,#0]
;;;2092   
;;;2093     return ret;
00001e  4630              MOV      r0,r6
;;;2094   }
000020  bdf8              POP      {r3-r7,pc}
;;;2095   
                          ENDP


                          AREA ||i.lsm303agr_xl_int2_gen_threshold_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int2_gen_threshold_set PROC
;;;2055     */
;;;2056   int32_t lsm303agr_xl_int2_gen_threshold_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2057                                               uint8_t val)
;;;2058   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2059     lsm303agr_int2_ths_a_t int2_ths_a;
;;;2060     int32_t ret;
;;;2061   
;;;2062     ret = lsm303agr_read_reg(ctx, LSM303AGR_INT2_THS_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2136              MOVS     r1,#0x36
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2063                              (uint8_t*)&int2_ths_a, 1);
;;;2064     if(ret == 0){
000014  b95d              CBNZ     r5,|L138.46|
;;;2065       int2_ths_a.ths = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640006          BFI      r0,r4,#0,#7
00001e  9000              STR      r0,[sp,#0]
;;;2066       ret = lsm303agr_write_reg(ctx, LSM303AGR_INT2_THS_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2136              MOVS     r1,#0x36
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L138.46|
;;;2067                                 (uint8_t*)&int2_ths_a, 1);
;;;2068     }
;;;2069   
;;;2070     return ret;
00002e  4628              MOV      r0,r5
;;;2071   }
000030  bdf8              POP      {r3-r7,pc}
;;;2072   
                          ENDP


                          AREA ||i.lsm303agr_xl_int2_pin_detect_4d_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int2_pin_detect_4d_get PROC
;;;2296     */
;;;2297   int32_t lsm303agr_xl_int2_pin_detect_4d_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2298                                               uint8_t *val)
;;;2299   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2300     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;2301     int32_t ret;
;;;2302   
;;;2303     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2304                              (uint8_t*)&ctrl_reg5_a, 1);
;;;2305     *val = ctrl_reg5_a.d4d_int2;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  7020              STRB     r0,[r4,#0]
;;;2306   
;;;2307     return ret;
00001e  4630              MOV      r0,r6
;;;2308   }
000020  bdf8              POP      {r3-r7,pc}
;;;2309   
                          ENDP


                          AREA ||i.lsm303agr_xl_int2_pin_detect_4d_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int2_pin_detect_4d_set PROC
;;;2270     */
;;;2271   int32_t lsm303agr_xl_int2_pin_detect_4d_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2272                                               uint8_t val)
;;;2273   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2274     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;2275     int32_t ret;
;;;2276   
;;;2277     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2278                              (uint8_t*)&ctrl_reg5_a, 1);
;;;2279     if(ret == 0){
000014  b95d              CBNZ     r5,|L140.46|
;;;2280       ctrl_reg5_a.d4d_int2 = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;2281       ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG5_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2124              MOVS     r1,#0x24
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L140.46|
;;;2282                                 (uint8_t*)&ctrl_reg5_a, 1);
;;;2283     }
;;;2284   
;;;2285     return ret;
00002e  4628              MOV      r0,r5
;;;2286   }
000030  bdf8              POP      {r3-r7,pc}
;;;2287   
                          ENDP


                          AREA ||i.lsm303agr_xl_int2pin_notification_mode_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int2pin_notification_mode_get PROC
;;;2346     */
;;;2347   int32_t lsm303agr_xl_int2pin_notification_mode_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2348                                                   lsm303agr_lir_int2_a_t *val)
;;;2349   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2350     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;2351     int32_t ret;
;;;2352   
;;;2353     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2354                              (uint8_t*)&ctrl_reg5_a, 1);
;;;2355   
;;;2356       switch (ctrl_reg5_a.lir_int2){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00040          UBFX     r0,r0,#1,#1
00001c  b110              CBZ      r0,|L141.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L141.48|
000022  e002              B        |L141.42|
                  |L141.36|
;;;2357       case LSM303AGR_INT2_PULSED:
;;;2358         *val = LSM303AGR_INT2_PULSED;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;2359         break;
000028  e005              B        |L141.54|
                  |L141.42|
;;;2360       case LSM303AGR_INT2_LATCHED:
;;;2361         *val = LSM303AGR_INT2_LATCHED;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;2362         break;
00002e  e002              B        |L141.54|
                  |L141.48|
;;;2363       default:
;;;2364         *val = LSM303AGR_INT2_PULSED;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;2365         break;
000034  bf00              NOP      
                  |L141.54|
000036  bf00              NOP                            ;2359
;;;2366     }
;;;2367     return ret;
000038  4630              MOV      r0,r6
;;;2368   }
00003a  bdf8              POP      {r3-r7,pc}
;;;2369   
                          ENDP


                          AREA ||i.lsm303agr_xl_int2pin_notification_mode_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_int2pin_notification_mode_set PROC
;;;2319     */
;;;2320   int32_t lsm303agr_xl_int2pin_notification_mode_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2321                                                      lsm303agr_lir_int2_a_t val)
;;;2322   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2323     lsm303agr_ctrl_reg5_a_t ctrl_reg5_a;
;;;2324     int32_t ret;
;;;2325   
;;;2326     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG5_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2124              MOVS     r1,#0x24
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;2327                              (uint8_t*)&ctrl_reg5_a, 1);
;;;2328     if(ret == 0){
000014  b95d              CBNZ     r5,|L142.46|
;;;2329       ctrl_reg5_a.lir_int2 = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640041          BFI      r0,r4,#1,#1
00001e  9000              STR      r0,[sp,#0]
;;;2330       ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG5_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2124              MOVS     r1,#0x24
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L142.46|
;;;2331                                 (uint8_t*)&ctrl_reg5_a, 1);
;;;2332     }
;;;2333   
;;;2334     return ret;
00002e  4628              MOV      r0,r5
;;;2335   }
000030  bdf8              POP      {r3-r7,pc}
;;;2336   
                          ENDP


                          AREA ||i.lsm303agr_xl_operating_mode_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_operating_mode_get PROC
;;;378      */
;;;379    int32_t lsm303agr_xl_operating_mode_get(lsm303agr_ctx_t *ctx,
000000  b57c              PUSH     {r2-r6,lr}
;;;380                                            lsm303agr_op_md_a_t *val)
;;;381    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;382      lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;383      lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
;;;384      int32_t ret;
;;;385    
;;;386      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2120              MOVS     r1,#0x20
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;387                               (uint8_t*)&ctrl_reg1_a, 1);
;;;388      if(ret == 0){
000014  b935              CBNZ     r5,|L143.36|
;;;389        ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000016  2301              MOVS     r3,#1
000018  aa01              ADD      r2,sp,#4
00001a  2123              MOVS     r1,#0x23
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       lsm303agr_read_reg
000022  4605              MOV      r5,r0
                  |L143.36|
;;;390                                 (uint8_t*)&ctrl_reg4_a, 1);
;;;391      }
;;;392    
;;;393      if ( ctrl_reg1_a.lpen != PROPERTY_DISABLE ){
000024  f89d0000          LDRB     r0,[sp,#0]
000028  f3c000c0          UBFX     r0,r0,#3,#1
00002c  b110              CBZ      r0,|L143.52|
;;;394        *val = LSM303AGR_LP_8bit;
00002e  2002              MOVS     r0,#2
000030  7020              STRB     r0,[r4,#0]
000032  e009              B        |L143.72|
                  |L143.52|
;;;395      } else if (ctrl_reg4_a.hr  != PROPERTY_DISABLE ) {
000034  f89d0004          LDRB     r0,[sp,#4]
000038  f3c000c0          UBFX     r0,r0,#3,#1
00003c  b110              CBZ      r0,|L143.68|
;;;396        *val = LSM303AGR_HR_12bit;
00003e  2000              MOVS     r0,#0
000040  7020              STRB     r0,[r4,#0]
000042  e001              B        |L143.72|
                  |L143.68|
;;;397      } else{
;;;398        *val = LSM303AGR_NM_10bit;
000044  2001              MOVS     r0,#1
000046  7020              STRB     r0,[r4,#0]
                  |L143.72|
;;;399      }
;;;400    
;;;401      return ret;
000048  4628              MOV      r0,r5
;;;402    }
00004a  bd7c              POP      {r2-r6,pc}
;;;403    
                          ENDP


                          AREA ||i.lsm303agr_xl_operating_mode_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_operating_mode_set PROC
;;;330      */
;;;331    int32_t lsm303agr_xl_operating_mode_set(lsm303agr_ctx_t *ctx,
000000  e92d41fc          PUSH     {r2-r8,lr}
;;;332                                            lsm303agr_op_md_a_t val)
;;;333    {
000004  4680              MOV      r8,r0
000006  460f              MOV      r7,r1
;;;334      lsm303agr_ctrl_reg1_a_t ctrl_reg1_a;
;;;335      lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;336      int32_t ret;
;;;337      uint8_t lpen, hr;
;;;338    
;;;339      if ( val == LSM303AGR_HR_12bit ){
000008  b917              CBNZ     r7,|L144.16|
;;;340        lpen = 0;
00000a  2500              MOVS     r5,#0
;;;341        hr   = 1;
00000c  2601              MOVS     r6,#1
00000e  e006              B        |L144.30|
                  |L144.16|
;;;342      } else if (val == LSM303AGR_NM_10bit) {
000010  2f01              CMP      r7,#1
000012  d102              BNE      |L144.26|
;;;343        lpen = 0;
000014  2500              MOVS     r5,#0
;;;344        hr   = 0;
000016  2600              MOVS     r6,#0
000018  e001              B        |L144.30|
                  |L144.26|
;;;345      } else {
;;;346        lpen = 1;
00001a  2501              MOVS     r5,#1
;;;347        hr   = 0;
00001c  2600              MOVS     r6,#0
                  |L144.30|
;;;348      }
;;;349    
;;;350      ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG1_A,
00001e  2301              MOVS     r3,#1
000020  aa01              ADD      r2,sp,#4
000022  2120              MOVS     r1,#0x20
000024  4640              MOV      r0,r8
000026  f7fffffe          BL       lsm303agr_read_reg
00002a  4604              MOV      r4,r0
;;;351                               (uint8_t*)&ctrl_reg1_a, 1);
;;;352      ctrl_reg1_a.lpen = (uint8_t)lpen;
00002c  f89d0004          LDRB     r0,[sp,#4]
000030  f36500c3          BFI      r0,r5,#3,#1
000034  9001              STR      r0,[sp,#4]
;;;353      if(ret == 0){
000036  b934              CBNZ     r4,|L144.70|
;;;354        ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG1_A,
000038  2301              MOVS     r3,#1
00003a  aa01              ADD      r2,sp,#4
00003c  2120              MOVS     r1,#0x20
00003e  4640              MOV      r0,r8
000040  f7fffffe          BL       lsm303agr_write_reg
000044  4604              MOV      r4,r0
                  |L144.70|
;;;355                                  (uint8_t*)&ctrl_reg1_a, 1);
;;;356      }
;;;357      if(ret == 0){
000046  b934              CBNZ     r4,|L144.86|
;;;358        ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000048  2301              MOVS     r3,#1
00004a  466a              MOV      r2,sp
00004c  2123              MOVS     r1,#0x23
00004e  4640              MOV      r0,r8
000050  f7fffffe          BL       lsm303agr_read_reg
000054  4604              MOV      r4,r0
                  |L144.86|
;;;359                                 (uint8_t*)&ctrl_reg4_a, 1);
;;;360      }
;;;361      if(ret == 0){
000056  b95c              CBNZ     r4,|L144.112|
;;;362        ctrl_reg4_a.hr = hr;
000058  f89d0000          LDRB     r0,[sp,#0]
00005c  f36600c3          BFI      r0,r6,#3,#1
000060  9000              STR      r0,[sp,#0]
;;;363        ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
000062  2301              MOVS     r3,#1
000064  466a              MOV      r2,sp
000066  2123              MOVS     r1,#0x23
000068  4640              MOV      r0,r8
00006a  f7fffffe          BL       lsm303agr_write_reg
00006e  4604              MOV      r4,r0
                  |L144.112|
;;;364                                  (uint8_t*)&ctrl_reg4_a, 1);
;;;365      }
;;;366    
;;;367      return ret;
000070  4620              MOV      r0,r4
;;;368    }
000072  e8bd81fc          POP      {r2-r8,pc}
;;;369    
                          ENDP


                          AREA ||i.lsm303agr_xl_pin_int1_config_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_pin_int1_config_get PROC
;;;2253     */
;;;2254   int32_t lsm303agr_xl_pin_int1_config_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2255                                            lsm303agr_ctrl_reg3_a_t *val)
;;;2256   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2257     int32_t ret;
;;;2258     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG3_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2122              MOVS     r1,#0x22
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2259     return ret;
000014  4630              MOV      r0,r6
;;;2260   }
000016  bd70              POP      {r4-r6,pc}
;;;2261   
                          ENDP


                          AREA ||i.lsm303agr_xl_pin_int1_config_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_pin_int1_config_set PROC
;;;2237     */
;;;2238   int32_t lsm303agr_xl_pin_int1_config_set(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2239                                            lsm303agr_ctrl_reg3_a_t *val)
;;;2240   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2241     int32_t ret;
;;;2242     ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG3_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2122              MOVS     r1,#0x22
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_write_reg
000012  4606              MOV      r6,r0
;;;2243     return ret;
000014  4630              MOV      r0,r6
;;;2244   }
000016  bd70              POP      {r4-r6,pc}
;;;2245   
                          ENDP


                          AREA ||i.lsm303agr_xl_pin_int2_config_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_pin_int2_config_get PROC
;;;2499     */
;;;2500   int32_t lsm303agr_xl_pin_int2_config_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2501                                            lsm303agr_ctrl_reg6_a_t *val)
;;;2502   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2503     int32_t ret;
;;;2504     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG6_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2125              MOVS     r1,#0x25
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;2505     return ret;
000014  4630              MOV      r0,r6
;;;2506   }
000016  bd70              POP      {r4-r6,pc}
;;;2507   
                          ENDP


                          AREA ||i.lsm303agr_xl_pin_int2_config_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_pin_int2_config_set PROC
;;;2483     */
;;;2484   int32_t lsm303agr_xl_pin_int2_config_set(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;2485                                            lsm303agr_ctrl_reg6_a_t *val)
;;;2486   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2487     int32_t ret;
;;;2488     ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG6_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2125              MOVS     r1,#0x25
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_write_reg
000012  4606              MOV      r6,r0
;;;2489     return ret;
000014  4630              MOV      r0,r6
;;;2490   }
000016  bd70              POP      {r4-r6,pc}
;;;2491   
                          ENDP


                          AREA ||i.lsm303agr_xl_self_test_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_self_test_get PROC
;;;1466     */
;;;1467   int32_t lsm303agr_xl_self_test_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1468                                      lsm303agr_st_a_t *val)
;;;1469   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1470     lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;1471     int32_t ret;
;;;1472   
;;;1473     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2123              MOVS     r1,#0x23
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1474                              (uint8_t*)&ctrl_reg4_a, 1);
;;;1475   
;;;1476       switch (ctrl_reg4_a.st){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00041          UBFX     r0,r0,#1,#2
00001c  b120              CBZ      r0,|L149.40|
00001e  2801              CMP      r0,#1
000020  d005              BEQ      |L149.46|
000022  2802              CMP      r0,#2
000024  d109              BNE      |L149.58|
000026  e005              B        |L149.52|
                  |L149.40|
;;;1477       case LSM303AGR_ST_DISABLE:
;;;1478         *val = LSM303AGR_ST_DISABLE;
000028  2000              MOVS     r0,#0
00002a  7020              STRB     r0,[r4,#0]
;;;1479         break;
00002c  e008              B        |L149.64|
                  |L149.46|
;;;1480       case LSM303AGR_ST_POSITIVE:
;;;1481         *val = LSM303AGR_ST_POSITIVE;
00002e  2001              MOVS     r0,#1
000030  7020              STRB     r0,[r4,#0]
;;;1482         break;
000032  e005              B        |L149.64|
                  |L149.52|
;;;1483       case LSM303AGR_ST_NEGATIVE:
;;;1484         *val = LSM303AGR_ST_NEGATIVE;
000034  2002              MOVS     r0,#2
000036  7020              STRB     r0,[r4,#0]
;;;1485         break;
000038  e002              B        |L149.64|
                  |L149.58|
;;;1486       default:
;;;1487         *val = LSM303AGR_ST_DISABLE;
00003a  2000              MOVS     r0,#0
00003c  7020              STRB     r0,[r4,#0]
;;;1488         break;
00003e  bf00              NOP      
                  |L149.64|
000040  bf00              NOP                            ;1479
;;;1489     }
;;;1490     return ret;
000042  4630              MOV      r0,r6
;;;1491   }
000044  bdf8              POP      {r3-r7,pc}
;;;1492   
                          ENDP


                          AREA ||i.lsm303agr_xl_self_test_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_self_test_set PROC
;;;1441     */
;;;1442   int32_t lsm303agr_xl_self_test_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1443                                      lsm303agr_st_a_t val)
;;;1444   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1445     lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;1446     int32_t ret;
;;;1447   
;;;1448     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2123              MOVS     r1,#0x23
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;1449                              (uint8_t*)&ctrl_reg4_a, 1);
;;;1450     if(ret == 0){
000014  b95d              CBNZ     r5,|L150.46|
;;;1451       ctrl_reg4_a.st = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640042          BFI      r0,r4,#1,#2
00001e  9000              STR      r0,[sp,#0]
;;;1452       ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2123              MOVS     r1,#0x23
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L150.46|
;;;1453                                 (uint8_t*)&ctrl_reg4_a, 1);
;;;1454     }
;;;1455   
;;;1456     return ret;
00002e  4628              MOV      r0,r5
;;;1457   }
000030  bdf8              POP      {r3-r7,pc}
;;;1458   
                          ENDP


                          AREA ||i.lsm303agr_xl_spi_mode_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_spi_mode_get PROC
;;;3476     */
;;;3477   int32_t lsm303agr_xl_spi_mode_get(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3478                                     lsm303agr_sim_a_t *val)
;;;3479   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3480     lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;3481     int32_t ret;
;;;3482   
;;;3483     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2123              MOVS     r1,#0x23
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;3484                              (uint8_t*)&ctrl_reg4_a, 1);
;;;3485   
;;;3486       switch (ctrl_reg4_a.spi_enable){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  b110              CBZ      r0,|L151.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L151.48|
000022  e002              B        |L151.42|
                  |L151.36|
;;;3487       case LSM303AGR_SPI_4_WIRE:
;;;3488         *val = LSM303AGR_SPI_4_WIRE;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;3489         break;
000028  e005              B        |L151.54|
                  |L151.42|
;;;3490       case LSM303AGR_SPI_3_WIRE:
;;;3491         *val = LSM303AGR_SPI_3_WIRE;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;3492         break;
00002e  e002              B        |L151.54|
                  |L151.48|
;;;3493       default:
;;;3494         *val = LSM303AGR_SPI_4_WIRE;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;3495         break;
000034  bf00              NOP      
                  |L151.54|
000036  bf00              NOP                            ;3489
;;;3496     }
;;;3497     return ret;
000038  4630              MOV      r0,r6
;;;3498   }
00003a  bdf8              POP      {r3-r7,pc}
;;;3499   
                          ENDP


                          AREA ||i.lsm303agr_xl_spi_mode_set||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_spi_mode_set PROC
;;;3451     */
;;;3452   int32_t lsm303agr_xl_spi_mode_set(lsm303agr_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3453                                     lsm303agr_sim_a_t val)
;;;3454   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3455     lsm303agr_ctrl_reg4_a_t ctrl_reg4_a;
;;;3456     int32_t ret;
;;;3457   
;;;3458     ret = lsm303agr_read_reg(ctx, LSM303AGR_CTRL_REG4_A,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2123              MOVS     r1,#0x23
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4605              MOV      r5,r0
;;;3459                              (uint8_t*)&ctrl_reg4_a, 1);
;;;3460     if(ret == 0){
000014  b95d              CBNZ     r5,|L152.46|
;;;3461       ctrl_reg4_a.spi_enable = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;3462       ret = lsm303agr_write_reg(ctx, LSM303AGR_CTRL_REG4_A,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2123              MOVS     r1,#0x23
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm303agr_write_reg
00002c  4605              MOV      r5,r0
                  |L152.46|
;;;3463                                 (uint8_t*)&ctrl_reg4_a, 1);
;;;3464     }
;;;3465   
;;;3466     return ret;
00002e  4628              MOV      r0,r5
;;;3467   }
000030  bdf8              POP      {r3-r7,pc}
;;;3468   
                          ENDP


                          AREA ||i.lsm303agr_xl_status_get||, CODE, READONLY, ALIGN=1

                  lsm303agr_xl_status_get PROC
;;;1600     */
;;;1601   int32_t lsm303agr_xl_status_get(lsm303agr_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;1602                                   lsm303agr_status_reg_a_t *val)
;;;1603   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1604     int32_t ret;
;;;1605     ret = lsm303agr_read_reg(ctx, LSM303AGR_STATUS_REG_A, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  2127              MOVS     r1,#0x27
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm303agr_read_reg
000012  4606              MOV      r6,r0
;;;1606     return ret;
000014  4630              MOV      r0,r6
;;;1607   }
000016  bd70              POP      {r4-r6,pc}
;;;1608   
                          ENDP

