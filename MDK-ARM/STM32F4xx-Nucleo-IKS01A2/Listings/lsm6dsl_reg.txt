; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\lsm6dsl_reg.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\lsm6dsl_reg.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl\lsm6dsl_reg.c]
                          THUMB

                          AREA ||i.lsm6dsl_4d_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_4d_mode_get PROC
;;;3493     */
;;;3494   int32_t lsm6dsl_4d_mode_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3495   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3496     lsm6dsl_tap_ths_6d_t tap_ths_6d;
;;;3497     int32_t ret;
;;;3498   
;;;3499     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_THS_6D, (uint8_t*)&tap_ths_6d, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2159              MOVS     r1,#0x59
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3500     *val = tap_ths_6d.d4d_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;3501   
;;;3502     return ret;
00001c  4630              MOV      r0,r6
;;;3503   }
00001e  bdf8              POP      {r3-r7,pc}
;;;3504   
                          ENDP


                          AREA ||i.lsm6dsl_4d_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_4d_mode_set PROC
;;;3471     */
;;;3472   int32_t lsm6dsl_4d_mode_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3473   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3474     lsm6dsl_tap_ths_6d_t tap_ths_6d;
;;;3475     int32_t ret;
;;;3476   
;;;3477     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_THS_6D, (uint8_t*)&tap_ths_6d, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2159              MOVS     r1,#0x59
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3478     if(ret == 0){
000014  b95d              CBNZ     r5,|L2.46|
;;;3479       tap_ths_6d.d4d_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;3480       ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_THS_6D,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2159              MOVS     r1,#0x59
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L2.46|
;;;3481                               (uint8_t*)&tap_ths_6d, 1);
;;;3482     }
;;;3483     return ret;
00002e  4628              MOV      r0,r5
;;;3484   }
000030  bdf8              POP      {r3-r7,pc}
;;;3485   
                          ENDP


                          AREA ||i.lsm6dsl_6d_feed_data_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_6d_feed_data_get PROC
;;;3385     */
;;;3386   int32_t lsm6dsl_6d_feed_data_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3387                                    lsm6dsl_low_pass_on_6d_t *val)
;;;3388   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3389     lsm6dsl_ctrl8_xl_t ctrl8_xl;
;;;3390     int32_t ret;
;;;3391   
;;;3392     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2117              MOVS     r1,#0x17
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3393     switch (ctrl8_xl.low_pass_on_6d) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  b110              CBZ      r0,|L3.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L3.48|
000022  e002              B        |L3.42|
                  |L3.36|
;;;3394       case LSM6DSL_ODR_DIV_2_FEED:
;;;3395         *val = LSM6DSL_ODR_DIV_2_FEED;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;3396         break;
000028  e005              B        |L3.54|
                  |L3.42|
;;;3397       case LSM6DSL_LPF2_FEED:
;;;3398         *val = LSM6DSL_LPF2_FEED;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;3399         break;
00002e  e002              B        |L3.54|
                  |L3.48|
;;;3400       default:
;;;3401         *val = LSM6DSL_6D_FEED_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;3402         break;
000034  bf00              NOP      
                  |L3.54|
000036  bf00              NOP                            ;3396
;;;3403     }
;;;3404   
;;;3405     return ret;
000038  4630              MOV      r0,r6
;;;3406   }
00003a  bdf8              POP      {r3-r7,pc}
;;;3407   
                          ENDP


                          AREA ||i.lsm6dsl_6d_feed_data_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_6d_feed_data_set PROC
;;;3363     */
;;;3364   int32_t lsm6dsl_6d_feed_data_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3365                                    lsm6dsl_low_pass_on_6d_t val)
;;;3366   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3367     lsm6dsl_ctrl8_xl_t ctrl8_xl;
;;;3368     int32_t ret;
;;;3369   
;;;3370     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2117              MOVS     r1,#0x17
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3371     if(ret == 0){
000014  b95d              CBNZ     r5,|L4.46|
;;;3372       ctrl8_xl.low_pass_on_6d = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;3373       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2117              MOVS     r1,#0x17
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L4.46|
;;;3374     }
;;;3375     return ret;
00002e  4628              MOV      r0,r5
;;;3376   }
000030  bdf8              POP      {r3-r7,pc}
;;;3377   
                          ENDP


                          AREA ||i.lsm6dsl_6d_threshold_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_6d_threshold_get PROC
;;;3436     */
;;;3437   int32_t lsm6dsl_6d_threshold_get(lsm6dsl_ctx_t *ctx, lsm6dsl_sixd_ths_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3438   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3439     lsm6dsl_tap_ths_6d_t tap_ths_6d;
;;;3440     int32_t ret;
;;;3441   
;;;3442     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_THS_6D, (uint8_t*)&tap_ths_6d, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2159              MOVS     r1,#0x59
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3443     switch (tap_ths_6d.sixd_ths) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01041          UBFX     r0,r0,#5,#2
00001c  b130              CBZ      r0,|L5.44|
00001e  2801              CMP      r0,#1
000020  d007              BEQ      |L5.50|
000022  2802              CMP      r0,#2
000024  d008              BEQ      |L5.56|
000026  2803              CMP      r0,#3
000028  d10c              BNE      |L5.68|
00002a  e008              B        |L5.62|
                  |L5.44|
;;;3444       case LSM6DSL_DEG_80:
;;;3445         *val = LSM6DSL_DEG_80;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;3446         break;
000030  e00b              B        |L5.74|
                  |L5.50|
;;;3447       case LSM6DSL_DEG_70:
;;;3448         *val = LSM6DSL_DEG_70;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;3449         break;
000036  e008              B        |L5.74|
                  |L5.56|
;;;3450       case LSM6DSL_DEG_60:
;;;3451         *val = LSM6DSL_DEG_60;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;3452         break;
00003c  e005              B        |L5.74|
                  |L5.62|
;;;3453       case LSM6DSL_DEG_50:
;;;3454         *val = LSM6DSL_DEG_50;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;3455         break;
000042  e002              B        |L5.74|
                  |L5.68|
;;;3456       default:
;;;3457         *val = LSM6DSL_6D_TH_ND;
000044  2004              MOVS     r0,#4
000046  7020              STRB     r0,[r4,#0]
;;;3458         break;
000048  bf00              NOP      
                  |L5.74|
00004a  bf00              NOP                            ;3446
;;;3459     }
;;;3460   
;;;3461     return ret;
00004c  4630              MOV      r0,r6
;;;3462   }
00004e  bdf8              POP      {r3-r7,pc}
;;;3463   
                          ENDP


                          AREA ||i.lsm6dsl_6d_threshold_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_6d_threshold_set PROC
;;;3415     */
;;;3416   int32_t lsm6dsl_6d_threshold_set(lsm6dsl_ctx_t *ctx, lsm6dsl_sixd_ths_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3417   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3418     lsm6dsl_tap_ths_6d_t tap_ths_6d;
;;;3419     int32_t ret;
;;;3420   
;;;3421     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_THS_6D, (uint8_t*)&tap_ths_6d, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2159              MOVS     r1,#0x59
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3422     if(ret == 0){
000014  b95d              CBNZ     r5,|L6.46|
;;;3423       tap_ths_6d.sixd_ths = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641046          BFI      r0,r4,#5,#2
00001e  9000              STR      r0,[sp,#0]
;;;3424       ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_THS_6D, (uint8_t*)&tap_ths_6d, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2159              MOVS     r1,#0x59
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L6.46|
;;;3425     }
;;;3426     return ret;
00002e  4628              MOV      r0,r5
;;;3427   }
000030  bdf8              POP      {r3-r7,pc}
;;;3428   
                          ENDP


                          AREA ||i.lsm6dsl_acceleration_raw_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_acceleration_raw_get PROC
;;;1092     */
;;;1093   int32_t lsm6dsl_acceleration_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;1094   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1095     int32_t ret;
;;;1096     ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_XL, buff, 6);
000006  2306              MOVS     r3,#6
000008  4622              MOV      r2,r4
00000a  2128              MOVS     r1,#0x28
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1097     return ret;
000014  4630              MOV      r0,r6
;;;1098   }
000016  bd70              POP      {r4-r6,pc}
;;;1099   
                          ENDP


                          AREA ||i.lsm6dsl_act_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_act_mode_get PROC
;;;2878     */
;;;2879   int32_t lsm6dsl_act_mode_get(lsm6dsl_ctx_t *ctx, lsm6dsl_inact_en_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2880   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2881     lsm6dsl_tap_cfg_t tap_cfg;
;;;2882     int32_t ret;
;;;2883   
;;;2884     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2885     switch (tap_cfg.inact_en) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01041          UBFX     r0,r0,#5,#2
00001c  b130              CBZ      r0,|L8.44|
00001e  2801              CMP      r0,#1
000020  d007              BEQ      |L8.50|
000022  2802              CMP      r0,#2
000024  d008              BEQ      |L8.56|
000026  2803              CMP      r0,#3
000028  d10c              BNE      |L8.68|
00002a  e008              B        |L8.62|
                  |L8.44|
;;;2886       case LSM6DSL_PROPERTY_DISABLE:
;;;2887         *val = LSM6DSL_PROPERTY_DISABLE;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;2888         break;
000030  e00b              B        |L8.74|
                  |L8.50|
;;;2889       case LSM6DSL_XL_12Hz5_GY_NOT_AFFECTED:
;;;2890         *val = LSM6DSL_XL_12Hz5_GY_NOT_AFFECTED;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;2891         break;
000036  e008              B        |L8.74|
                  |L8.56|
;;;2892       case LSM6DSL_XL_12Hz5_GY_SLEEP:
;;;2893         *val = LSM6DSL_XL_12Hz5_GY_SLEEP;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;2894         break;
00003c  e005              B        |L8.74|
                  |L8.62|
;;;2895       case LSM6DSL_XL_12Hz5_GY_PD:
;;;2896         *val = LSM6DSL_XL_12Hz5_GY_PD;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;2897         break;
000042  e002              B        |L8.74|
                  |L8.68|
;;;2898       default:
;;;2899         *val = LSM6DSL_ACT_MODE_ND;
000044  2004              MOVS     r0,#4
000046  7020              STRB     r0,[r4,#0]
;;;2900         break;
000048  bf00              NOP      
                  |L8.74|
00004a  bf00              NOP                            ;2888
;;;2901     }
;;;2902   
;;;2903     return ret;
00004c  4630              MOV      r0,r6
;;;2904   }
00004e  bdf8              POP      {r3-r7,pc}
;;;2905   
                          ENDP


                          AREA ||i.lsm6dsl_act_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_act_mode_set PROC
;;;2857     */
;;;2858   int32_t lsm6dsl_act_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_inact_en_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2859   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2860     lsm6dsl_tap_cfg_t tap_cfg;
;;;2861     int32_t ret;
;;;2862   
;;;2863     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2864     if(ret == 0){
000014  b95d              CBNZ     r5,|L9.46|
;;;2865       tap_cfg.inact_en = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641046          BFI      r0,r4,#5,#2
00001e  9000              STR      r0,[sp,#0]
;;;2866       ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2158              MOVS     r1,#0x58
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L9.46|
;;;2867     }
;;;2868     return ret;
00002e  4628              MOV      r0,r5
;;;2869   }
000030  bdf8              POP      {r3-r7,pc}
;;;2870   
                          ENDP


                          AREA ||i.lsm6dsl_act_sleep_dur_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_act_sleep_dur_get PROC
;;;2935     */
;;;2936   int32_t lsm6dsl_act_sleep_dur_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2937   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2938     lsm6dsl_wake_up_dur_t wake_up_dur;
;;;2939     int32_t ret;
;;;2940   
;;;2941     ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215c              MOVS     r1,#0x5c
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2942     *val = wake_up_dur.sleep_dur;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000000f          AND      r0,r0,#0xf
00001c  7020              STRB     r0,[r4,#0]
;;;2943   
;;;2944     return ret;
00001e  4630              MOV      r0,r6
;;;2945   }
000020  bdf8              POP      {r3-r7,pc}
;;;2946   
                          ENDP


                          AREA ||i.lsm6dsl_act_sleep_dur_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_act_sleep_dur_set PROC
;;;2913     */
;;;2914   int32_t lsm6dsl_act_sleep_dur_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2915   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2916     lsm6dsl_wake_up_dur_t wake_up_dur;
;;;2917     int32_t ret;
;;;2918   
;;;2919     ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215c              MOVS     r1,#0x5c
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2920     if(ret == 0){
000014  b95d              CBNZ     r5,|L11.46|
;;;2921       wake_up_dur.sleep_dur = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640003          BFI      r0,r4,#0,#4
00001e  9000              STR      r0,[sp,#0]
;;;2922       ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  215c              MOVS     r1,#0x5c
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L11.46|
;;;2923             (uint8_t*)&wake_up_dur, 1);
;;;2924     }
;;;2925     return ret;
00002e  4628              MOV      r0,r5
;;;2926   }
000030  bdf8              POP      {r3-r7,pc}
;;;2927   
                          ENDP


                          AREA ||i.lsm6dsl_all_on_int1_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_all_on_int1_get PROC
;;;2640     */
;;;2641   int32_t lsm6dsl_all_on_int1_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2642   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2643     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;2644     int32_t ret;
;;;2645   
;;;2646     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2113              MOVS     r1,#0x13
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2647     *val = ctrl4_c.int2_on_int1;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  7020              STRB     r0,[r4,#0]
;;;2648   
;;;2649     return ret;
00001e  4630              MOV      r0,r6
;;;2650   }
000020  bdf8              POP      {r3-r7,pc}
;;;2651   
                          ENDP


                          AREA ||i.lsm6dsl_all_on_int1_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_all_on_int1_set PROC
;;;2619     */
;;;2620   int32_t lsm6dsl_all_on_int1_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2621   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2622     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;2623     int32_t ret;
;;;2624   
;;;2625     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2113              MOVS     r1,#0x13
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2626     if(ret == 0){
000014  b95d              CBNZ     r5,|L13.46|
;;;2627       ctrl4_c.int2_on_int1 = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641045          BFI      r0,r4,#5,#1
00001e  9000              STR      r0,[sp,#0]
;;;2628       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2113              MOVS     r1,#0x13
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L13.46|
;;;2629     }
;;;2630     return ret;
00002e  4628              MOV      r0,r5
;;;2631   }
000030  bdf8              POP      {r3-r7,pc}
;;;2632   
                          ENDP


                          AREA ||i.lsm6dsl_all_sources_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_all_sources_get PROC
;;;700      */
;;;701    int32_t lsm6dsl_all_sources_get(lsm6dsl_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;702                                    lsm6dsl_all_sources_t *val)
;;;703    {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;704      int32_t ret;
;;;705    
;;;706      ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_SRC,
000006  2301              MOVS     r3,#1
000008  462a              MOV      r2,r5
00000a  211b              MOVS     r1,#0x1b
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4604              MOV      r4,r0
;;;707                             (uint8_t*)&(val->wake_up_src), 1);
;;;708      if(ret == 0){
000014  b934              CBNZ     r4,|L14.36|
;;;709        ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_SRC,
000016  2301              MOVS     r3,#1
000018  1c6a              ADDS     r2,r5,#1
00001a  211c              MOVS     r1,#0x1c
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       lsm6dsl_read_reg
000022  4604              MOV      r4,r0
                  |L14.36|
;;;710                               (uint8_t*)&(val->tap_src), 1);
;;;711      }
;;;712      if(ret == 0){
000024  b934              CBNZ     r4,|L14.52|
;;;713        ret = lsm6dsl_read_reg(ctx, LSM6DSL_D6D_SRC,
000026  2301              MOVS     r3,#1
000028  1caa              ADDS     r2,r5,#2
00002a  211d              MOVS     r1,#0x1d
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       lsm6dsl_read_reg
000032  4604              MOV      r4,r0
                  |L14.52|
;;;714                               (uint8_t*)&(val->d6d_src), 1);
;;;715      }
;;;716      if(ret == 0){
000034  b934              CBNZ     r4,|L14.68|
;;;717        ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG,
000036  2301              MOVS     r3,#1
000038  1cea              ADDS     r2,r5,#3
00003a  211e              MOVS     r1,#0x1e
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       lsm6dsl_read_reg
000042  4604              MOV      r4,r0
                  |L14.68|
;;;718                               (uint8_t*)&(val->status_reg), 1);
;;;719      }
;;;720      if(ret == 0){
000044  b934              CBNZ     r4,|L14.84|
;;;721        ret = lsm6dsl_read_reg(ctx, LSM6DSL_FUNC_SRC1,
000046  2301              MOVS     r3,#1
000048  1d2a              ADDS     r2,r5,#4
00004a  2153              MOVS     r1,#0x53
00004c  4630              MOV      r0,r6
00004e  f7fffffe          BL       lsm6dsl_read_reg
000052  4604              MOV      r4,r0
                  |L14.84|
;;;722                               (uint8_t*)&(val->func_src1), 1);
;;;723      }
;;;724      if(ret == 0){
000054  b934              CBNZ     r4,|L14.100|
;;;725        ret = lsm6dsl_read_reg(ctx, LSM6DSL_FUNC_SRC2,
000056  2301              MOVS     r3,#1
000058  1d6a              ADDS     r2,r5,#5
00005a  2154              MOVS     r1,#0x54
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       lsm6dsl_read_reg
000062  4604              MOV      r4,r0
                  |L14.100|
;;;726                               (uint8_t*)&(val->func_src2), 1);
;;;727      }
;;;728      if(ret == 0){
000064  b934              CBNZ     r4,|L14.116|
;;;729        ret = lsm6dsl_read_reg(ctx, LSM6DSL_WRIST_TILT_IA,
000066  2301              MOVS     r3,#1
000068  1daa              ADDS     r2,r5,#6
00006a  2155              MOVS     r1,#0x55
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       lsm6dsl_read_reg
000072  4604              MOV      r4,r0
                  |L14.116|
;;;730                               (uint8_t*)&(val->wrist_tilt_ia), 1);
;;;731      }
;;;732      if(ret == 0){
000074  b924              CBNZ     r4,|L14.128|
;;;733        ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_B);
000076  2105              MOVS     r1,#5
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       lsm6dsl_mem_bank_set
00007e  4604              MOV      r4,r0
                  |L14.128|
;;;734      }
;;;735      if(ret == 0){
000080  b934              CBNZ     r4,|L14.144|
;;;736        ret = lsm6dsl_read_reg(ctx, LSM6DSL_A_WRIST_TILT_MASK,
000082  2301              MOVS     r3,#1
000084  1dea              ADDS     r2,r5,#7
000086  2159              MOVS     r1,#0x59
000088  4630              MOV      r0,r6
00008a  f7fffffe          BL       lsm6dsl_read_reg
00008e  4604              MOV      r4,r0
                  |L14.144|
;;;737                               (uint8_t*)&(val->a_wrist_tilt_mask), 1);
;;;738      }
;;;739      if(ret == 0){
000090  b924              CBNZ     r4,|L14.156|
;;;740        ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000092  2100              MOVS     r1,#0
000094  4630              MOV      r0,r6
000096  f7fffffe          BL       lsm6dsl_mem_bank_set
00009a  4604              MOV      r4,r0
                  |L14.156|
;;;741      }
;;;742    
;;;743      return ret;
00009c  4620              MOV      r0,r4
;;;744    }
00009e  bd70              POP      {r4-r6,pc}
;;;745    /**
                          ENDP


                          AREA ||i.lsm6dsl_angular_rate_raw_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_angular_rate_raw_get PROC
;;;1076     */
;;;1077   int32_t lsm6dsl_angular_rate_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;1078   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1079     int32_t ret;
;;;1080     ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUTX_L_G, buff, 6);
000006  2306              MOVS     r3,#6
000008  4622              MOV      r2,r4
00000a  2122              MOVS     r1,#0x22
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1081     return ret;
000014  4630              MOV      r0,r6
;;;1082   }
000016  bd70              POP      {r4-r6,pc}
;;;1083   
                          ENDP


                          AREA ||i.lsm6dsl_auto_increment_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_auto_increment_get PROC
;;;1390     */
;;;1391   int32_t lsm6dsl_auto_increment_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1392   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1393     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;1394     int32_t ret;
;;;1395   
;;;1396     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1397     *val = ctrl3_c.if_inc;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1398   
;;;1399     return ret;
00001e  4630              MOV      r0,r6
;;;1400   }
000020  bdf8              POP      {r3-r7,pc}
;;;1401   
                          ENDP


                          AREA ||i.lsm6dsl_auto_increment_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_auto_increment_set PROC
;;;1368     */
;;;1369   int32_t lsm6dsl_auto_increment_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1370   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1371     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;1372     int32_t ret;
;;;1373   
;;;1374     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1375     if(ret == 0){
000014  b95d              CBNZ     r5,|L17.46|
;;;1376       ctrl3_c.if_inc = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640082          BFI      r0,r4,#2,#1
00001e  9000              STR      r0,[sp,#0]
;;;1377       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L17.46|
;;;1378     }
;;;1379     return ret;
00002e  4628              MOV      r0,r5
;;;1380   }
000030  bdf8              POP      {r3-r7,pc}
;;;1381   
                          ENDP


                          AREA ||i.lsm6dsl_block_data_update_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_block_data_update_get PROC
;;;468      */
;;;469    int32_t lsm6dsl_block_data_update_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;470    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;471      lsm6dsl_ctrl3_c_t ctrl3_c;
;;;472      int32_t ret;
;;;473    
;;;474      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;475      *val = ctrl3_c.bdu;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;476    
;;;477      return ret;
00001e  4630              MOV      r0,r6
;;;478    }
000020  bdf8              POP      {r3-r7,pc}
;;;479    
                          ENDP


                          AREA ||i.lsm6dsl_block_data_update_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_block_data_update_set PROC
;;;447      */
;;;448    int32_t lsm6dsl_block_data_update_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;449    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;450      lsm6dsl_ctrl3_c_t ctrl3_c;
;;;451      int32_t ret;
;;;452    
;;;453      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;454      if(ret == 0){
000014  b95d              CBNZ     r5,|L19.46|
;;;455        ctrl3_c.bdu = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9000              STR      r0,[sp,#0]
;;;456        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L19.46|
;;;457      }
;;;458      return ret;
00002e  4628              MOV      r0,r5
;;;459    }
000030  bdf8              POP      {r3-r7,pc}
;;;460    
                          ENDP


                          AREA ||i.lsm6dsl_boot_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_boot_get PROC
;;;1430     */
;;;1431   int32_t lsm6dsl_boot_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1432   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1433     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;1434     int32_t ret;
;;;1435   
;;;1436     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1437     *val = ctrl3_c.boot;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;1438   
;;;1439     return ret;
00001c  4630              MOV      r0,r6
;;;1440   }
00001e  bdf8              POP      {r3-r7,pc}
;;;1441   
                          ENDP


                          AREA ||i.lsm6dsl_boot_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_boot_set PROC
;;;1409     */
;;;1410   int32_t lsm6dsl_boot_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1411   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1412     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;1413     int32_t ret;
;;;1414   
;;;1415     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1416     if(ret == 0){
000014  b95d              CBNZ     r5,|L21.46|
;;;1417       ctrl3_c.boot = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;1418       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L21.46|
;;;1419     }
;;;1420     return ret;
00002e  4628              MOV      r0,r5
;;;1421   }
000030  bdf8              POP      {r3-r7,pc}
;;;1422   
                          ENDP


                          AREA ||i.lsm6dsl_data_format_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_data_format_get PROC
;;;1338     */
;;;1339   int32_t lsm6dsl_data_format_get(lsm6dsl_ctx_t *ctx, lsm6dsl_ble_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1340   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1341     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;1342     int32_t ret;
;;;1343   
;;;1344     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1345     switch (ctrl3_c.ble) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00040          UBFX     r0,r0,#1,#1
00001c  b110              CBZ      r0,|L22.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L22.48|
000022  e002              B        |L22.42|
                  |L22.36|
;;;1346       case LSM6DSL_LSB_AT_LOW_ADD:
;;;1347         *val = LSM6DSL_LSB_AT_LOW_ADD;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;1348         break;
000028  e005              B        |L22.54|
                  |L22.42|
;;;1349       case LSM6DSL_MSB_AT_LOW_ADD:
;;;1350         *val = LSM6DSL_MSB_AT_LOW_ADD;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;1351         break;
00002e  e002              B        |L22.54|
                  |L22.48|
;;;1352       default:
;;;1353         *val = LSM6DSL_DATA_FMT_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;1354         break;
000034  bf00              NOP      
                  |L22.54|
000036  bf00              NOP                            ;1348
;;;1355     }
;;;1356   
;;;1357     return ret;
000038  4630              MOV      r0,r6
;;;1358   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1359   
                          ENDP


                          AREA ||i.lsm6dsl_data_format_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_data_format_set PROC
;;;1317     */
;;;1318   int32_t lsm6dsl_data_format_set(lsm6dsl_ctx_t *ctx, lsm6dsl_ble_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1319   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1320     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;1321     int32_t ret;
;;;1322   
;;;1323     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1324     if(ret == 0){
000014  b95d              CBNZ     r5,|L23.46|
;;;1325       ctrl3_c.ble = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640041          BFI      r0,r4,#1,#1
00001e  9000              STR      r0,[sp,#0]
;;;1326       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L23.46|
;;;1327     }
;;;1328     return ret;
00002e  4628              MOV      r0,r5
;;;1329   }
000030  bdf8              POP      {r3-r7,pc}
;;;1330   
                          ENDP


                          AREA ||i.lsm6dsl_data_ready_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_data_ready_mode_get PROC
;;;1231     */
;;;1232   int32_t lsm6dsl_data_ready_mode_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1233                                       lsm6dsl_drdy_pulsed_g_t *val)
;;;1234   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1235     lsm6dsl_drdy_pulse_cfg_g_t drdy_pulse_cfg_g;
;;;1236     int32_t ret;
;;;1237   
;;;1238     ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1239                            (uint8_t*)&drdy_pulse_cfg_g, 1);
;;;1240     switch (drdy_pulse_cfg_g.drdy_pulsed) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  b110              CBZ      r0,|L24.34|
00001c  2801              CMP      r0,#1
00001e  d106              BNE      |L24.46|
000020  e002              B        |L24.40|
                  |L24.34|
;;;1241       case LSM6DSL_DRDY_LATCHED:
;;;1242         *val = LSM6DSL_DRDY_LATCHED;
000022  2000              MOVS     r0,#0
000024  7020              STRB     r0,[r4,#0]
;;;1243         break;
000026  e005              B        |L24.52|
                  |L24.40|
;;;1244       case LSM6DSL_DRDY_PULSED:
;;;1245         *val = LSM6DSL_DRDY_PULSED;
000028  2001              MOVS     r0,#1
00002a  7020              STRB     r0,[r4,#0]
;;;1246         break;
00002c  e002              B        |L24.52|
                  |L24.46|
;;;1247       default:
;;;1248         *val = LSM6DSL_DRDY_ND;
00002e  2002              MOVS     r0,#2
000030  7020              STRB     r0,[r4,#0]
;;;1249         break;
000032  bf00              NOP      
                  |L24.52|
000034  bf00              NOP                            ;1243
;;;1250     }
;;;1251   
;;;1252     return ret;
000036  4630              MOV      r0,r6
;;;1253   }
000038  bdf8              POP      {r3-r7,pc}
;;;1254   
                          ENDP


                          AREA ||i.lsm6dsl_data_ready_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_data_ready_mode_set PROC
;;;1207     */
;;;1208   int32_t lsm6dsl_data_ready_mode_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1209                                       lsm6dsl_drdy_pulsed_g_t val)
;;;1210   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1211     lsm6dsl_drdy_pulse_cfg_g_t drdy_pulse_cfg_g;
;;;1212     int32_t ret;
;;;1213   
;;;1214     ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210b              MOVS     r1,#0xb
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1215                            (uint8_t*)&drdy_pulse_cfg_g, 1);
;;;1216     if(ret == 0){
000014  b95d              CBNZ     r5,|L25.46|
;;;1217       drdy_pulse_cfg_g.drdy_pulsed = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;1218       ret = lsm6dsl_write_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  210b              MOVS     r1,#0xb
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L25.46|
;;;1219                               (uint8_t*)&drdy_pulse_cfg_g, 1);
;;;1220     }
;;;1221     return ret;
00002e  4628              MOV      r0,r5
;;;1222   }
000030  bdf8              POP      {r3-r7,pc}
;;;1223   
                          ENDP


                          AREA ||i.lsm6dsl_den_enable_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_enable_get PROC
;;;4605     */
;;;4606   int32_t lsm6dsl_den_enable_get(lsm6dsl_ctx_t *ctx, lsm6dsl_den_xl_en_t *val)
000000  b57c              PUSH     {r2-r6,lr}
;;;4607   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4608     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;4609     lsm6dsl_ctrl9_xl_t ctrl9_xl;
;;;4610     int32_t ret;
;;;4611   
;;;4612     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000006  2301              MOVS     r3,#1
000008  aa01              ADD      r2,sp,#4
00000a  2113              MOVS     r1,#0x13
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4613     if(ret == 0){
000014  bb15              CBNZ     r5,|L26.92|
;;;4614       ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000016  2301              MOVS     r3,#1
000018  466a              MOV      r2,sp
00001a  2118              MOVS     r1,#0x18
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       lsm6dsl_read_reg
000022  4605              MOV      r5,r0
;;;4615       switch ( ( ctrl4_c.den_xl_en << 1) + ctrl9_xl.den_xl_g ) {
000024  f89d0000          LDRB     r0,[sp,#0]
000028  f3c01000          UBFX     r0,r0,#4,#1
00002c  f89d1004          LDRB     r1,[sp,#4]
000030  09c9              LSRS     r1,r1,#7
000032  eb000041          ADD      r0,r0,r1,LSL #1
000036  b120              CBZ      r0,|L26.66|
000038  2801              CMP      r0,#1
00003a  d005              BEQ      |L26.72|
00003c  2802              CMP      r0,#2
00003e  d109              BNE      |L26.84|
000040  e005              B        |L26.78|
                  |L26.66|
;;;4616         case LSM6DSL_STAMP_IN_GY_DATA:
;;;4617           *val = LSM6DSL_STAMP_IN_GY_DATA;
000042  2000              MOVS     r0,#0
000044  7020              STRB     r0,[r4,#0]
;;;4618           break;
000046  e008              B        |L26.90|
                  |L26.72|
;;;4619         case LSM6DSL_STAMP_IN_XL_DATA:
;;;4620           *val = LSM6DSL_STAMP_IN_XL_DATA;
000048  2001              MOVS     r0,#1
00004a  7020              STRB     r0,[r4,#0]
;;;4621           break;
00004c  e005              B        |L26.90|
                  |L26.78|
;;;4622         case LSM6DSL_STAMP_IN_GY_XL_DATA:
;;;4623           *val = LSM6DSL_STAMP_IN_GY_XL_DATA;
00004e  2002              MOVS     r0,#2
000050  7020              STRB     r0,[r4,#0]
;;;4624           break;
000052  e002              B        |L26.90|
                  |L26.84|
;;;4625         default:
;;;4626           *val = LSM6DSL_DEN_STAMP_ND;
000054  2003              MOVS     r0,#3
000056  7020              STRB     r0,[r4,#0]
;;;4627           break;
000058  bf00              NOP      
                  |L26.90|
00005a  bf00              NOP                            ;4618
                  |L26.92|
;;;4628       }
;;;4629     }
;;;4630   
;;;4631     return ret;
00005c  4628              MOV      r0,r5
;;;4632   }
00005e  bd7c              POP      {r2-r6,pc}
;;;4633   
                          ENDP


                          AREA ||i.lsm6dsl_den_enable_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_enable_set PROC
;;;4575     */
;;;4576   int32_t lsm6dsl_den_enable_set(lsm6dsl_ctx_t *ctx, lsm6dsl_den_xl_en_t val)
000000  b57c              PUSH     {r2-r6,lr}
;;;4577   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4578     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;4579     lsm6dsl_ctrl9_xl_t ctrl9_xl;
;;;4580     int32_t ret;
;;;4581   
;;;4582     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2118              MOVS     r1,#0x18
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4583     if(ret == 0){
000014  bb0d              CBNZ     r5,|L27.90|
;;;4584       ctrl9_xl.den_xl_g = (uint8_t)val & 0x01U;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;4585       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2118              MOVS     r1,#0x18
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
;;;4586       if(ret == 0){
00002e  b9a5              CBNZ     r5,|L27.90|
;;;4587         ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000030  2301              MOVS     r3,#1
000032  aa01              ADD      r2,sp,#4
000034  2113              MOVS     r1,#0x13
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       lsm6dsl_read_reg
00003c  4605              MOV      r5,r0
;;;4588         if(ret == 0){
00003e  b965              CBNZ     r5,|L27.90|
;;;4589           ctrl4_c.den_xl_en = (uint8_t)val & 0x02U;
000040  2000              MOVS     r0,#0
000042  f89d1004          LDRB     r1,[sp,#4]
000046  f36011c7          BFI      r1,r0,#7,#1
00004a  9101              STR      r1,[sp,#4]
;;;4590           ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
00004c  2301              MOVS     r3,#1
00004e  aa01              ADD      r2,sp,#4
000050  2113              MOVS     r1,#0x13
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       lsm6dsl_write_reg
000058  4605              MOV      r5,r0
                  |L27.90|
;;;4591         }
;;;4592       }
;;;4593     }
;;;4594     return ret;
00005a  4628              MOV      r0,r5
;;;4595   }
00005c  bd7c              POP      {r2-r6,pc}
;;;4596   
                          ENDP


                          AREA ||i.lsm6dsl_den_mark_axis_x_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_mark_axis_x_get PROC
;;;4742     */
;;;4743   int32_t lsm6dsl_den_mark_axis_x_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4744   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4745     lsm6dsl_ctrl9_xl_t ctrl9_xl;
;;;4746     int32_t ret;
;;;4747   
;;;4748     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2118              MOVS     r1,#0x18
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4749     *val = ctrl9_xl.den_x;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;4750   
;;;4751     return ret;
00001c  4630              MOV      r0,r6
;;;4752   }
00001e  bdf8              POP      {r3-r7,pc}
;;;4753   
                          ENDP


                          AREA ||i.lsm6dsl_den_mark_axis_x_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_mark_axis_x_set PROC
;;;4721     */
;;;4722   int32_t lsm6dsl_den_mark_axis_x_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4723   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4724     lsm6dsl_ctrl9_xl_t ctrl9_xl;
;;;4725     int32_t ret;
;;;4726   
;;;4727     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2118              MOVS     r1,#0x18
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4728     if(ret == 0){
000014  b95d              CBNZ     r5,|L29.46|
;;;4729       ctrl9_xl.den_x = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;4730       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2118              MOVS     r1,#0x18
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L29.46|
;;;4731     }
;;;4732     return ret;
00002e  4628              MOV      r0,r5
;;;4733   }
000030  bdf8              POP      {r3-r7,pc}
;;;4734   
                          ENDP


                          AREA ||i.lsm6dsl_den_mark_axis_y_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_mark_axis_y_get PROC
;;;4702     */
;;;4703   int32_t lsm6dsl_den_mark_axis_y_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4704   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4705     lsm6dsl_ctrl9_xl_t ctrl9_xl;
;;;4706     int32_t ret;
;;;4707   
;;;4708     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2118              MOVS     r1,#0x18
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4709     *val = ctrl9_xl.den_y;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;4710   
;;;4711     return ret;
00001e  4630              MOV      r0,r6
;;;4712   }
000020  bdf8              POP      {r3-r7,pc}
;;;4713   
                          ENDP


                          AREA ||i.lsm6dsl_den_mark_axis_y_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_mark_axis_y_set PROC
;;;4681     */
;;;4682   int32_t lsm6dsl_den_mark_axis_y_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4683   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4684     lsm6dsl_ctrl9_xl_t ctrl9_xl;
;;;4685     int32_t ret;
;;;4686   
;;;4687     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2118              MOVS     r1,#0x18
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4688     if(ret == 0){
000014  b95d              CBNZ     r5,|L31.46|
;;;4689       ctrl9_xl.den_y = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9000              STR      r0,[sp,#0]
;;;4690       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2118              MOVS     r1,#0x18
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L31.46|
;;;4691     }
;;;4692     return ret;
00002e  4628              MOV      r0,r5
;;;4693   }
000030  bdf8              POP      {r3-r7,pc}
;;;4694   
                          ENDP


                          AREA ||i.lsm6dsl_den_mark_axis_z_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_mark_axis_z_get PROC
;;;4662     */
;;;4663   int32_t lsm6dsl_den_mark_axis_z_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4664   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4665     lsm6dsl_ctrl9_xl_t ctrl9_xl;
;;;4666     int32_t ret;
;;;4667   
;;;4668     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2118              MOVS     r1,#0x18
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4669     *val = ctrl9_xl.den_z;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  7020              STRB     r0,[r4,#0]
;;;4670   
;;;4671     return ret;
00001e  4630              MOV      r0,r6
;;;4672   }
000020  bdf8              POP      {r3-r7,pc}
;;;4673   
                          ENDP


                          AREA ||i.lsm6dsl_den_mark_axis_z_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_mark_axis_z_set PROC
;;;4641     */
;;;4642   int32_t lsm6dsl_den_mark_axis_z_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4643   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4644     lsm6dsl_ctrl9_xl_t ctrl9_xl;
;;;4645     int32_t ret;
;;;4646   
;;;4647     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2118              MOVS     r1,#0x18
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4648     if(ret == 0){
000014  b95d              CBNZ     r5,|L33.46|
;;;4649       ctrl9_xl.den_z = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641045          BFI      r0,r4,#5,#1
00001e  9000              STR      r0,[sp,#0]
;;;4650       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2118              MOVS     r1,#0x18
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L33.46|
;;;4651     }
;;;4652     return ret;
00002e  4628              MOV      r0,r5
;;;4653   }
000030  bdf8              POP      {r3-r7,pc}
;;;4654   
                          ENDP


                          AREA ||i.lsm6dsl_den_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_mode_get PROC
;;;4539     */
;;;4540   int32_t lsm6dsl_den_mode_get(lsm6dsl_ctx_t *ctx, lsm6dsl_den_mode_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4541   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4542     lsm6dsl_ctrl6_c_t ctrl6_c;
;;;4543     int32_t ret;
;;;4544   
;;;4545     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2115              MOVS     r1,#0x15
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4546     switch (ctrl6_c.den_mode) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  0940              LSRS     r0,r0,#5
00001a  b130              CBZ      r0,|L34.42|
00001c  2802              CMP      r0,#2
00001e  d00a              BEQ      |L34.54|
000020  2803              CMP      r0,#3
000022  d005              BEQ      |L34.48|
000024  2804              CMP      r0,#4
000026  d10c              BNE      |L34.66|
000028  e008              B        |L34.60|
                  |L34.42|
;;;4547       case LSM6DSL_DEN_DISABLE:
;;;4548         *val = LSM6DSL_DEN_DISABLE;
00002a  2000              MOVS     r0,#0
00002c  7020              STRB     r0,[r4,#0]
;;;4549         break;
00002e  e00b              B        |L34.72|
                  |L34.48|
;;;4550       case LSM6DSL_LEVEL_LETCHED:
;;;4551         *val = LSM6DSL_LEVEL_LETCHED;
000030  2003              MOVS     r0,#3
000032  7020              STRB     r0,[r4,#0]
;;;4552         break;
000034  e008              B        |L34.72|
                  |L34.54|
;;;4553       case LSM6DSL_LEVEL_TRIGGER:
;;;4554         *val = LSM6DSL_LEVEL_TRIGGER;
000036  2002              MOVS     r0,#2
000038  7020              STRB     r0,[r4,#0]
;;;4555         break;
00003a  e005              B        |L34.72|
                  |L34.60|
;;;4556       case LSM6DSL_EDGE_TRIGGER:
;;;4557         *val = LSM6DSL_EDGE_TRIGGER;
00003c  2004              MOVS     r0,#4
00003e  7020              STRB     r0,[r4,#0]
;;;4558         break;
000040  e002              B        |L34.72|
                  |L34.66|
;;;4559       default:
;;;4560         *val = LSM6DSL_DEN_MODE_ND;
000042  2005              MOVS     r0,#5
000044  7020              STRB     r0,[r4,#0]
;;;4561         break;
000046  bf00              NOP      
                  |L34.72|
000048  bf00              NOP                            ;4549
;;;4562     }
;;;4563   
;;;4564     return ret;
00004a  4630              MOV      r0,r6
;;;4565   }
00004c  bdf8              POP      {r3-r7,pc}
;;;4566   
                          ENDP


                          AREA ||i.lsm6dsl_den_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_mode_set PROC
;;;4518     */
;;;4519   int32_t lsm6dsl_den_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_den_mode_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4520   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4521     lsm6dsl_ctrl6_c_t ctrl6_c;
;;;4522     int32_t ret;
;;;4523   
;;;4524     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2115              MOVS     r1,#0x15
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4525     if(ret == 0){
000014  b95d              CBNZ     r5,|L35.46|
;;;4526       ctrl6_c.den_mode = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641047          BFI      r0,r4,#5,#3
00001e  9000              STR      r0,[sp,#0]
;;;4527       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2115              MOVS     r1,#0x15
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L35.46|
;;;4528     }
;;;4529     return ret;
00002e  4628              MOV      r0,r5
;;;4530   }
000030  bdf8              POP      {r3-r7,pc}
;;;4531   
                          ENDP


                          AREA ||i.lsm6dsl_den_polarity_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_polarity_get PROC
;;;4489     */
;;;4490   int32_t lsm6dsl_den_polarity_get(lsm6dsl_ctx_t *ctx, lsm6dsl_den_lh_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4491   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4492     lsm6dsl_ctrl5_c_t ctrl5_c;
;;;4493     int32_t ret;
;;;4494   
;;;4495     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4496     switch (ctrl5_c.den_lh) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  b110              CBZ      r0,|L36.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L36.48|
000022  e002              B        |L36.42|
                  |L36.36|
;;;4497       case LSM6DSL_DEN_ACT_LOW:
;;;4498         *val = LSM6DSL_DEN_ACT_LOW;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;4499         break;
000028  e005              B        |L36.54|
                  |L36.42|
;;;4500       case LSM6DSL_DEN_ACT_HIGH:
;;;4501         *val = LSM6DSL_DEN_ACT_HIGH;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;4502         break;
00002e  e002              B        |L36.54|
                  |L36.48|
;;;4503       default:
;;;4504         *val = LSM6DSL_DEN_POL_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;4505         break;
000034  bf00              NOP      
                  |L36.54|
000036  bf00              NOP                            ;4499
;;;4506     }
;;;4507   
;;;4508     return ret;
000038  4630              MOV      r0,r6
;;;4509   }
00003a  bdf8              POP      {r3-r7,pc}
;;;4510   
                          ENDP


                          AREA ||i.lsm6dsl_den_polarity_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_den_polarity_set PROC
;;;4468     */
;;;4469    int32_t lsm6dsl_den_polarity_set(lsm6dsl_ctx_t *ctx, lsm6dsl_den_lh_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4470   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4471     lsm6dsl_ctrl5_c_t ctrl5_c;
;;;4472     int32_t ret;
;;;4473   
;;;4474     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4475     if(ret == 0){
000014  b95d              CBNZ     r5,|L37.46|
;;;4476       ctrl5_c.den_lh = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;4477       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2114              MOVS     r1,#0x14
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L37.46|
;;;4478     }
;;;4479     return ret;
00002e  4628              MOV      r0,r5
;;;4480   }
000030  bdf8              POP      {r3-r7,pc}
;;;4481   
                          ENDP


                          AREA ||i.lsm6dsl_device_id_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_device_id_get PROC
;;;1262     */
;;;1263   int32_t lsm6dsl_device_id_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;1264   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1265     int32_t ret;
;;;1266     ret = lsm6dsl_read_reg(ctx, LSM6DSL_WHO_AM_I, buff, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  210f              MOVS     r1,#0xf
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1267     return ret;
000014  4630              MOV      r0,r6
;;;1268   }
000016  bd70              POP      {r4-r6,pc}
;;;1269   
                          ENDP


                          AREA ||i.lsm6dsl_ff_dur_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_ff_dur_get PROC
;;;3556     */
;;;3557   int32_t lsm6dsl_ff_dur_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b57c              PUSH     {r2-r6,lr}
;;;3558   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3559     lsm6dsl_wake_up_dur_t wake_up_dur;
;;;3560     lsm6dsl_free_fall_t free_fall;
;;;3561     int32_t ret;
;;;3562   
;;;3563     ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
000006  2301              MOVS     r3,#1
000008  aa01              ADD      r2,sp,#4
00000a  215c              MOVS     r1,#0x5c
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3564     if(ret == 0){
000014  b935              CBNZ     r5,|L39.36|
;;;3565       ret = lsm6dsl_read_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
000016  2301              MOVS     r3,#1
000018  466a              MOV      r2,sp
00001a  215d              MOVS     r1,#0x5d
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       lsm6dsl_read_reg
000022  4605              MOV      r5,r0
                  |L39.36|
;;;3566     }
;;;3567     *val = (wake_up_dur.ff_dur << 5) + free_fall.ff_dur;
000024  f89d0004          LDRB     r0,[sp,#4]
000028  09c0              LSRS     r0,r0,#7
00002a  0140              LSLS     r0,r0,#5
00002c  f89d1000          LDRB     r1,[sp,#0]
000030  eb0000d1          ADD      r0,r0,r1,LSR #3
000034  7020              STRB     r0,[r4,#0]
;;;3568   
;;;3569     return ret;
000036  4628              MOV      r0,r5
;;;3570   }
000038  bd7c              POP      {r2-r6,pc}
;;;3571   
                          ENDP


                          AREA ||i.lsm6dsl_ff_dur_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_ff_dur_set PROC
;;;3525     */
;;;3526   int32_t lsm6dsl_ff_dur_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b57c              PUSH     {r2-r6,lr}
;;;3527   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3528     lsm6dsl_wake_up_dur_t wake_up_dur;
;;;3529     lsm6dsl_free_fall_t free_fall;
;;;3530     int32_t ret;
;;;3531   
;;;3532     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215d              MOVS     r1,#0x5d
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3533     if(ret == 0){
000014  bb0d              CBNZ     r5,|L40.90|
;;;3534       free_fall.ff_dur = (val & 0x1FU);
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c7          BFI      r0,r4,#3,#5
00001e  9000              STR      r0,[sp,#0]
;;;3535       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  215d              MOVS     r1,#0x5d
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
;;;3536       if(ret == 0){
00002e  b9a5              CBNZ     r5,|L40.90|
;;;3537         ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR,
000030  2301              MOVS     r3,#1
000032  aa01              ADD      r2,sp,#4
000034  215c              MOVS     r1,#0x5c
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       lsm6dsl_read_reg
00003c  4605              MOV      r5,r0
;;;3538                                (uint8_t*)&wake_up_dur, 1);
;;;3539         if(ret == 0){
00003e  b965              CBNZ     r5,|L40.90|
;;;3540           wake_up_dur.ff_dur = (val & 0x20U) >> 5;
000040  0960              LSRS     r0,r4,#5
000042  f89d1004          LDRB     r1,[sp,#4]
000046  f36011c7          BFI      r1,r0,#7,#1
00004a  9101              STR      r1,[sp,#4]
;;;3541           ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
00004c  2301              MOVS     r3,#1
00004e  aa01              ADD      r2,sp,#4
000050  215c              MOVS     r1,#0x5c
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       lsm6dsl_write_reg
000058  4605              MOV      r5,r0
                  |L40.90|
;;;3542                                   (uint8_t*)&wake_up_dur, 1);
;;;3543         }
;;;3544       }
;;;3545     }
;;;3546     return ret;
00005a  4628              MOV      r0,r5
;;;3547   }
00005c  bd7c              POP      {r2-r6,pc}
;;;3548   
                          ENDP


                          AREA ||i.lsm6dsl_ff_threshold_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_ff_threshold_get PROC
;;;3600     */
;;;3601   int32_t lsm6dsl_ff_threshold_get(lsm6dsl_ctx_t *ctx, lsm6dsl_ff_ths_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3602   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3603     lsm6dsl_free_fall_t free_fall;
;;;3604     int32_t ret;
;;;3605   
;;;3606     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215d              MOVS     r1,#0x5d
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3607     switch (free_fall.ff_ths) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000007          AND      r0,r0,#7
00001c  2808              CMP      r0,#8
00001e  d21d              BCS      |L41.92|
000020  e8dff000          TBB      [pc,r0]
000024  04070a0d          DCB      0x04,0x07,0x0a,0x0d
000028  10131619          DCB      0x10,0x13,0x16,0x19
;;;3608       case LSM6DSL_FF_TSH_156mg:
;;;3609         *val = LSM6DSL_FF_TSH_156mg;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;3610         break;
000030  e017              B        |L41.98|
;;;3611       case LSM6DSL_FF_TSH_219mg:
;;;3612         *val = LSM6DSL_FF_TSH_219mg;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;3613         break;
000036  e014              B        |L41.98|
;;;3614       case LSM6DSL_FF_TSH_250mg:
;;;3615         *val = LSM6DSL_FF_TSH_250mg;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;3616         break;
00003c  e011              B        |L41.98|
;;;3617       case LSM6DSL_FF_TSH_312mg:
;;;3618         *val = LSM6DSL_FF_TSH_312mg;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;3619         break;
000042  e00e              B        |L41.98|
;;;3620       case LSM6DSL_FF_TSH_344mg:
;;;3621         *val = LSM6DSL_FF_TSH_344mg;
000044  2004              MOVS     r0,#4
000046  7020              STRB     r0,[r4,#0]
;;;3622         break;
000048  e00b              B        |L41.98|
;;;3623       case LSM6DSL_FF_TSH_406mg:
;;;3624         *val = LSM6DSL_FF_TSH_406mg;
00004a  2005              MOVS     r0,#5
00004c  7020              STRB     r0,[r4,#0]
;;;3625         break;
00004e  e008              B        |L41.98|
;;;3626       case LSM6DSL_FF_TSH_469mg:
;;;3627         *val = LSM6DSL_FF_TSH_469mg;
000050  2006              MOVS     r0,#6
000052  7020              STRB     r0,[r4,#0]
;;;3628         break;
000054  e005              B        |L41.98|
;;;3629       case LSM6DSL_FF_TSH_500mg:
;;;3630         *val = LSM6DSL_FF_TSH_500mg;
000056  2007              MOVS     r0,#7
000058  7020              STRB     r0,[r4,#0]
;;;3631         break;
00005a  e002              B        |L41.98|
                  |L41.92|
;;;3632       default:
;;;3633         *val = LSM6DSL_FF_TSH_ND;
00005c  2008              MOVS     r0,#8
00005e  7020              STRB     r0,[r4,#0]
;;;3634         break;
000060  bf00              NOP      
                  |L41.98|
000062  bf00              NOP                            ;3610
;;;3635     }
;;;3636   
;;;3637     return ret;
000064  4630              MOV      r0,r6
;;;3638   }
000066  bdf8              POP      {r3-r7,pc}
;;;3639   
                          ENDP


                          AREA ||i.lsm6dsl_ff_threshold_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_ff_threshold_set PROC
;;;3579     */
;;;3580   int32_t lsm6dsl_ff_threshold_set(lsm6dsl_ctx_t *ctx, lsm6dsl_ff_ths_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3581   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3582     lsm6dsl_free_fall_t free_fall;
;;;3583     int32_t ret;
;;;3584   
;;;3585     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215d              MOVS     r1,#0x5d
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3586     if(ret == 0){
000014  b95d              CBNZ     r5,|L42.46|
;;;3587       free_fall.ff_ths = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640002          BFI      r0,r4,#0,#3
00001e  9000              STR      r0,[sp,#0]
;;;3588       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FREE_FALL, (uint8_t*)&free_fall, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  215d              MOVS     r1,#0x5d
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L42.46|
;;;3589     }
;;;3590     return ret;
00002e  4628              MOV      r0,r5
;;;3591   }
000030  bdf8              POP      {r3-r7,pc}
;;;3592   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_data_level_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_data_level_get PROC
;;;3712     */
;;;3713   int32_t lsm6dsl_fifo_data_level_get(lsm6dsl_ctx_t *ctx, uint16_t *val)
000000  b57c              PUSH     {r2-r6,lr}
;;;3714   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3715     lsm6dsl_fifo_status1_t fifo_status1;
;;;3716     lsm6dsl_fifo_status2_t fifo_status2;
;;;3717     int32_t ret;
;;;3718   
;;;3719     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS1,
000006  2301              MOVS     r3,#1
000008  aa01              ADD      r2,sp,#4
00000a  213a              MOVS     r1,#0x3a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3720                            (uint8_t*)&fifo_status1, 1);
;;;3721     if(ret == 0){
000014  b97d              CBNZ     r5,|L43.54|
;;;3722       ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS2,
000016  2301              MOVS     r3,#1
000018  466a              MOV      r2,sp
00001a  213b              MOVS     r1,#0x3b
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       lsm6dsl_read_reg
000022  4605              MOV      r5,r0
;;;3723                              (uint8_t*)&fifo_status2, 1);
;;;3724       *val = ( (uint16_t) fifo_status2.diff_fifo << 8) +
000024  f89d0004          LDRB     r0,[sp,#4]
000028  f89d1000          LDRB     r1,[sp,#0]
00002c  f0010107          AND      r1,r1,#7
000030  eb002001          ADD      r0,r0,r1,LSL #8
000034  8020              STRH     r0,[r4,#0]
                  |L43.54|
;;;3725                (uint16_t) fifo_status1.diff_fifo;
;;;3726     }
;;;3727   
;;;3728     return ret;
000036  4628              MOV      r0,r5
;;;3729   }
000038  bd7c              POP      {r2-r6,pc}
;;;3730   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_data_rate_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_data_rate_get PROC
;;;4399     */
;;;4400   int32_t lsm6dsl_fifo_data_rate_get(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_fifo_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4401   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4402     lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
;;;4403     int32_t ret;
;;;4404   
;;;4405     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210a              MOVS     r1,#0xa
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4406     switch (fifo_ctrl5.odr_fifo) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c3          UBFX     r0,r0,#3,#4
00001c  280b              CMP      r0,#0xb
00001e  d228              BCS      |L44.114|
000020  e8dff000          TBB      [pc,r0]
000024  06090c0f          DCB      0x06,0x09,0x0c,0x0f
000028  1215181b          DCB      0x12,0x15,0x18,0x1b
00002c  1e212400          DCB      0x1e,0x21,0x24,0x00
;;;4407       case LSM6DSL_FIFO_DISABLE:
;;;4408         *val = LSM6DSL_FIFO_DISABLE;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;4409         break;
000034  e020              B        |L44.120|
;;;4410       case LSM6DSL_FIFO_12Hz5:
;;;4411         *val = LSM6DSL_FIFO_12Hz5;
000036  2001              MOVS     r0,#1
000038  7020              STRB     r0,[r4,#0]
;;;4412         break;
00003a  e01d              B        |L44.120|
;;;4413       case LSM6DSL_FIFO_26Hz:
;;;4414         *val = LSM6DSL_FIFO_26Hz;
00003c  2002              MOVS     r0,#2
00003e  7020              STRB     r0,[r4,#0]
;;;4415         break;
000040  e01a              B        |L44.120|
;;;4416       case LSM6DSL_FIFO_52Hz:
;;;4417         *val = LSM6DSL_FIFO_52Hz;
000042  2003              MOVS     r0,#3
000044  7020              STRB     r0,[r4,#0]
;;;4418         break;
000046  e017              B        |L44.120|
;;;4419       case LSM6DSL_FIFO_104Hz:
;;;4420         *val = LSM6DSL_FIFO_104Hz;
000048  2004              MOVS     r0,#4
00004a  7020              STRB     r0,[r4,#0]
;;;4421         break;
00004c  e014              B        |L44.120|
;;;4422       case LSM6DSL_FIFO_208Hz:
;;;4423         *val = LSM6DSL_FIFO_208Hz;
00004e  2005              MOVS     r0,#5
000050  7020              STRB     r0,[r4,#0]
;;;4424         break;
000052  e011              B        |L44.120|
;;;4425       case LSM6DSL_FIFO_416Hz:
;;;4426         *val = LSM6DSL_FIFO_416Hz;
000054  2006              MOVS     r0,#6
000056  7020              STRB     r0,[r4,#0]
;;;4427         break;
000058  e00e              B        |L44.120|
;;;4428       case LSM6DSL_FIFO_833Hz:
;;;4429         *val = LSM6DSL_FIFO_833Hz;
00005a  2007              MOVS     r0,#7
00005c  7020              STRB     r0,[r4,#0]
;;;4430         break;
00005e  e00b              B        |L44.120|
;;;4431       case LSM6DSL_FIFO_1k66Hz:
;;;4432         *val = LSM6DSL_FIFO_1k66Hz;
000060  2008              MOVS     r0,#8
000062  7020              STRB     r0,[r4,#0]
;;;4433         break;
000064  e008              B        |L44.120|
;;;4434       case LSM6DSL_FIFO_3k33Hz:
;;;4435         *val = LSM6DSL_FIFO_3k33Hz;
000066  2009              MOVS     r0,#9
000068  7020              STRB     r0,[r4,#0]
;;;4436         break;
00006a  e005              B        |L44.120|
;;;4437       case LSM6DSL_FIFO_6k66Hz:
;;;4438         *val = LSM6DSL_FIFO_6k66Hz;
00006c  200a              MOVS     r0,#0xa
00006e  7020              STRB     r0,[r4,#0]
;;;4439         break;
000070  e002              B        |L44.120|
                  |L44.114|
;;;4440       default:
;;;4441         *val = LSM6DSL_FIFO_RATE_ND;
000072  200b              MOVS     r0,#0xb
000074  7020              STRB     r0,[r4,#0]
;;;4442         break;
000076  bf00              NOP      
                  |L44.120|
000078  bf00              NOP                            ;4409
;;;4443     }
;;;4444   
;;;4445     return ret;
00007a  4630              MOV      r0,r6
;;;4446   }
00007c  bdf8              POP      {r3-r7,pc}
;;;4447   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_data_rate_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_data_rate_set PROC
;;;4378     */
;;;4379   int32_t lsm6dsl_fifo_data_rate_set(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_fifo_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4380   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4381     lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
;;;4382     int32_t ret;
;;;4383   
;;;4384     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210a              MOVS     r1,#0xa
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4385     if(ret == 0){
000014  b95d              CBNZ     r5,|L45.46|
;;;4386       fifo_ctrl5.odr_fifo = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c6          BFI      r0,r4,#3,#4
00001e  9000              STR      r0,[sp,#0]
;;;4387       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  210a              MOVS     r1,#0xa
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L45.46|
;;;4388     }
;;;4389     return ret;
00002e  4628              MOV      r0,r5
;;;4390   }
000030  bdf8              POP      {r3-r7,pc}
;;;4391   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_dataset_3_batch_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_dataset_3_batch_get PROC
;;;4116     */
;;;4117   int32_t lsm6dsl_fifo_dataset_3_batch_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;4118                                            lsm6dsl_dec_ds3_fifo_t *val)
;;;4119   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4120     lsm6dsl_fifo_ctrl4_t fifo_ctrl4;
;;;4121     int32_t ret;
;;;4122   
;;;4123     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL4, (uint8_t*)&fifo_ctrl4, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2109              MOVS     r1,#9
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4124     switch (fifo_ctrl4.dec_ds3_fifo) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000007          AND      r0,r0,#7
00001c  2808              CMP      r0,#8
00001e  d21d              BCS      |L46.92|
000020  e8dff000          TBB      [pc,r0]
000024  04070a0d          DCB      0x04,0x07,0x0a,0x0d
000028  10131619          DCB      0x10,0x13,0x16,0x19
;;;4125       case LSM6DSL_FIFO_DS3_DISABLE:
;;;4126         *val = LSM6DSL_FIFO_DS3_DISABLE;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;4127         break;
000030  e017              B        |L46.98|
;;;4128       case LSM6DSL_FIFO_DS3_NO_DEC:
;;;4129         *val = LSM6DSL_FIFO_DS3_NO_DEC;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;4130         break;
000036  e014              B        |L46.98|
;;;4131       case LSM6DSL_FIFO_DS3_DEC_2:
;;;4132         *val = LSM6DSL_FIFO_DS3_DEC_2;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;4133         break;
00003c  e011              B        |L46.98|
;;;4134       case LSM6DSL_FIFO_DS3_DEC_3:
;;;4135         *val = LSM6DSL_FIFO_DS3_DEC_3;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;4136         break;
000042  e00e              B        |L46.98|
;;;4137       case LSM6DSL_FIFO_DS3_DEC_4:
;;;4138         *val = LSM6DSL_FIFO_DS3_DEC_4;
000044  2004              MOVS     r0,#4
000046  7020              STRB     r0,[r4,#0]
;;;4139         break;
000048  e00b              B        |L46.98|
;;;4140       case LSM6DSL_FIFO_DS3_DEC_8:
;;;4141         *val = LSM6DSL_FIFO_DS3_DEC_8;
00004a  2005              MOVS     r0,#5
00004c  7020              STRB     r0,[r4,#0]
;;;4142         break;
00004e  e008              B        |L46.98|
;;;4143       case LSM6DSL_FIFO_DS3_DEC_16:
;;;4144         *val = LSM6DSL_FIFO_DS3_DEC_16;
000050  2006              MOVS     r0,#6
000052  7020              STRB     r0,[r4,#0]
;;;4145         break;
000054  e005              B        |L46.98|
;;;4146       case LSM6DSL_FIFO_DS3_DEC_32:
;;;4147         *val = LSM6DSL_FIFO_DS3_DEC_32;
000056  2007              MOVS     r0,#7
000058  7020              STRB     r0,[r4,#0]
;;;4148         break;
00005a  e002              B        |L46.98|
                  |L46.92|
;;;4149       default:
;;;4150         *val = LSM6DSL_FIFO_DS3_DEC_ND;
00005c  2008              MOVS     r0,#8
00005e  7020              STRB     r0,[r4,#0]
;;;4151         break;
000060  bf00              NOP      
                  |L46.98|
000062  bf00              NOP                            ;4127
;;;4152     }
;;;4153   
;;;4154     return ret;
000064  4630              MOV      r0,r6
;;;4155   }
000066  bdf8              POP      {r3-r7,pc}
;;;4156   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_dataset_3_batch_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_dataset_3_batch_set PROC
;;;4092     */
;;;4093   int32_t lsm6dsl_fifo_dataset_3_batch_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;4094                                            lsm6dsl_dec_ds3_fifo_t val)
;;;4095   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4096     lsm6dsl_fifo_ctrl4_t fifo_ctrl4;
;;;4097     int32_t ret;
;;;4098   
;;;4099     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL4, (uint8_t*)&fifo_ctrl4, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2109              MOVS     r1,#9
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4100     if(ret == 0){
000014  b95d              CBNZ     r5,|L47.46|
;;;4101       fifo_ctrl4.dec_ds3_fifo = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640002          BFI      r0,r4,#0,#3
00001e  9000              STR      r0,[sp,#0]
;;;4102       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL4,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2109              MOVS     r1,#9
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L47.46|
;;;4103                               (uint8_t*)&fifo_ctrl4, 1);
;;;4104     }
;;;4105     return ret;
00002e  4628              MOV      r0,r5
;;;4106   }
000030  bdf8              POP      {r3-r7,pc}
;;;4107   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_dataset_4_batch_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_dataset_4_batch_get PROC
;;;4189     */
;;;4190   int32_t lsm6dsl_fifo_dataset_4_batch_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;4191                                            lsm6dsl_dec_ds4_fifo_t *val)
;;;4192   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4193     lsm6dsl_fifo_ctrl4_t fifo_ctrl4;
;;;4194     int32_t ret;
;;;4195   
;;;4196     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL4, (uint8_t*)&fifo_ctrl4, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2109              MOVS     r1,#9
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4197     switch (fifo_ctrl4.dec_ds4_fifo) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c2          UBFX     r0,r0,#3,#3
00001c  2808              CMP      r0,#8
00001e  d21d              BCS      |L48.92|
000020  e8dff000          TBB      [pc,r0]
000024  04070a0d          DCB      0x04,0x07,0x0a,0x0d
000028  10131619          DCB      0x10,0x13,0x16,0x19
;;;4198       case LSM6DSL_FIFO_DS4_DISABLE:
;;;4199         *val = LSM6DSL_FIFO_DS4_DISABLE;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;4200         break;
000030  e017              B        |L48.98|
;;;4201       case LSM6DSL_FIFO_DS4_NO_DEC:
;;;4202         *val = LSM6DSL_FIFO_DS4_NO_DEC;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;4203         break;
000036  e014              B        |L48.98|
;;;4204       case LSM6DSL_FIFO_DS4_DEC_2:
;;;4205         *val = LSM6DSL_FIFO_DS4_DEC_2;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;4206         break;
00003c  e011              B        |L48.98|
;;;4207       case LSM6DSL_FIFO_DS4_DEC_3:
;;;4208         *val = LSM6DSL_FIFO_DS4_DEC_3;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;4209         break;
000042  e00e              B        |L48.98|
;;;4210       case LSM6DSL_FIFO_DS4_DEC_4:
;;;4211         *val = LSM6DSL_FIFO_DS4_DEC_4;
000044  2004              MOVS     r0,#4
000046  7020              STRB     r0,[r4,#0]
;;;4212         break;
000048  e00b              B        |L48.98|
;;;4213       case LSM6DSL_FIFO_DS4_DEC_8:
;;;4214         *val = LSM6DSL_FIFO_DS4_DEC_8;
00004a  2005              MOVS     r0,#5
00004c  7020              STRB     r0,[r4,#0]
;;;4215         break;
00004e  e008              B        |L48.98|
;;;4216       case LSM6DSL_FIFO_DS4_DEC_16:
;;;4217         *val = LSM6DSL_FIFO_DS4_DEC_16;
000050  2006              MOVS     r0,#6
000052  7020              STRB     r0,[r4,#0]
;;;4218         break;
000054  e005              B        |L48.98|
;;;4219       case LSM6DSL_FIFO_DS4_DEC_32:
;;;4220         *val = LSM6DSL_FIFO_DS4_DEC_32;
000056  2007              MOVS     r0,#7
000058  7020              STRB     r0,[r4,#0]
;;;4221         break;
00005a  e002              B        |L48.98|
                  |L48.92|
;;;4222       default:
;;;4223         *val = LSM6DSL_FIFO_DS4_DEC_ND;
00005c  2008              MOVS     r0,#8
00005e  7020              STRB     r0,[r4,#0]
;;;4224         break;
000060  bf00              NOP      
                  |L48.98|
000062  bf00              NOP                            ;4200
;;;4225     }
;;;4226   
;;;4227     return ret;
000064  4630              MOV      r0,r6
;;;4228   }
000066  bdf8              POP      {r3-r7,pc}
;;;4229   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_dataset_4_batch_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_dataset_4_batch_set PROC
;;;4165     */
;;;4166   int32_t lsm6dsl_fifo_dataset_4_batch_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;4167                                            lsm6dsl_dec_ds4_fifo_t val)
;;;4168   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4169     lsm6dsl_fifo_ctrl4_t fifo_ctrl4;
;;;4170     int32_t ret;
;;;4171   
;;;4172     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL4, (uint8_t*)&fifo_ctrl4, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2109              MOVS     r1,#9
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4173     if(ret == 0){
000014  b95d              CBNZ     r5,|L49.46|
;;;4174       fifo_ctrl4.dec_ds4_fifo = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c5          BFI      r0,r4,#3,#3
00001e  9000              STR      r0,[sp,#0]
;;;4175       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL4,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2109              MOVS     r1,#9
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L49.46|
;;;4176                               (uint8_t*)&fifo_ctrl4, 1);
;;;4177     }
;;;4178     return ret;
00002e  4628              MOV      r0,r5
;;;4179   }
000030  bdf8              POP      {r3-r7,pc}
;;;4180   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_gy_batch_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_gy_batch_get PROC
;;;4043     */
;;;4044   int32_t lsm6dsl_fifo_gy_batch_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;4045                                     lsm6dsl_dec_fifo_gyro_t *val)
;;;4046   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4047     lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
;;;4048     int32_t ret;
;;;4049   
;;;4050     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2108              MOVS     r1,#8
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4051     switch (fifo_ctrl3.dec_fifo_gyro) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c2          UBFX     r0,r0,#3,#3
00001c  2808              CMP      r0,#8
00001e  d21d              BCS      |L50.92|
000020  e8dff000          TBB      [pc,r0]
000024  04070a0d          DCB      0x04,0x07,0x0a,0x0d
000028  10131619          DCB      0x10,0x13,0x16,0x19
;;;4052       case LSM6DSL_FIFO_GY_DISABLE:
;;;4053         *val = LSM6DSL_FIFO_GY_DISABLE;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;4054         break;
000030  e017              B        |L50.98|
;;;4055       case LSM6DSL_FIFO_GY_NO_DEC:
;;;4056         *val = LSM6DSL_FIFO_GY_NO_DEC;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;4057         break;
000036  e014              B        |L50.98|
;;;4058       case LSM6DSL_FIFO_GY_DEC_2:
;;;4059         *val = LSM6DSL_FIFO_GY_DEC_2;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;4060         break;
00003c  e011              B        |L50.98|
;;;4061       case LSM6DSL_FIFO_GY_DEC_3:
;;;4062         *val = LSM6DSL_FIFO_GY_DEC_3;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;4063         break;
000042  e00e              B        |L50.98|
;;;4064       case LSM6DSL_FIFO_GY_DEC_4:
;;;4065         *val = LSM6DSL_FIFO_GY_DEC_4;
000044  2004              MOVS     r0,#4
000046  7020              STRB     r0,[r4,#0]
;;;4066         break;
000048  e00b              B        |L50.98|
;;;4067       case LSM6DSL_FIFO_GY_DEC_8:
;;;4068         *val = LSM6DSL_FIFO_GY_DEC_8;
00004a  2005              MOVS     r0,#5
00004c  7020              STRB     r0,[r4,#0]
;;;4069         break;
00004e  e008              B        |L50.98|
;;;4070       case LSM6DSL_FIFO_GY_DEC_16:
;;;4071         *val = LSM6DSL_FIFO_GY_DEC_16;
000050  2006              MOVS     r0,#6
000052  7020              STRB     r0,[r4,#0]
;;;4072         break;
000054  e005              B        |L50.98|
;;;4073       case LSM6DSL_FIFO_GY_DEC_32:
;;;4074         *val = LSM6DSL_FIFO_GY_DEC_32;
000056  2007              MOVS     r0,#7
000058  7020              STRB     r0,[r4,#0]
;;;4075         break;
00005a  e002              B        |L50.98|
                  |L50.92|
;;;4076       default:
;;;4077         *val = LSM6DSL_FIFO_GY_DEC_ND;
00005c  2008              MOVS     r0,#8
00005e  7020              STRB     r0,[r4,#0]
;;;4078         break;
000060  bf00              NOP      
                  |L50.98|
000062  bf00              NOP                            ;4054
;;;4079     }
;;;4080   
;;;4081     return ret;
000064  4630              MOV      r0,r6
;;;4082   }
000066  bdf8              POP      {r3-r7,pc}
;;;4083   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_gy_batch_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_gy_batch_set PROC
;;;4020     */
;;;4021   int32_t lsm6dsl_fifo_gy_batch_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;4022                                     lsm6dsl_dec_fifo_gyro_t val)
;;;4023   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4024     lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
;;;4025     int32_t ret;
;;;4026   
;;;4027     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2108              MOVS     r1,#8
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4028     if(ret == 0){
000014  b95d              CBNZ     r5,|L51.46|
;;;4029       fifo_ctrl3.dec_fifo_gyro = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c5          BFI      r0,r4,#3,#3
00001e  9000              STR      r0,[sp,#0]
;;;4030       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2108              MOVS     r1,#8
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L51.46|
;;;4031     }
;;;4032     return ret;
00002e  4628              MOV      r0,r5
;;;4033   }
000030  bdf8              POP      {r3-r7,pc}
;;;4034   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_mode_get PROC
;;;4340     */
;;;4341   int32_t lsm6dsl_fifo_mode_get(lsm6dsl_ctx_t *ctx, lsm6dsl_fifo_mode_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4342   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4343     lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
;;;4344     int32_t ret;
;;;4345   
;;;4346     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210a              MOVS     r1,#0xa
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4347     switch (fifo_ctrl5.fifo_mode) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000007          AND      r0,r0,#7
00001c  2807              CMP      r0,#7
00001e  d214              BCS      |L52.74|
000020  e8dff000          TBB      [pc,r0]
000024  0407130a          DCB      0x04,0x07,0x13,0x0a
000028  0d131000          DCB      0x0d,0x13,0x10,0x00
;;;4348       case LSM6DSL_BYPASS_MODE:
;;;4349         *val = LSM6DSL_BYPASS_MODE;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;4350         break;
000030  e00e              B        |L52.80|
;;;4351       case LSM6DSL_FIFO_MODE:
;;;4352         *val = LSM6DSL_FIFO_MODE;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;4353         break;
000036  e00b              B        |L52.80|
;;;4354       case LSM6DSL_STREAM_TO_FIFO_MODE:
;;;4355         *val = LSM6DSL_STREAM_TO_FIFO_MODE;
000038  2003              MOVS     r0,#3
00003a  7020              STRB     r0,[r4,#0]
;;;4356         break;
00003c  e008              B        |L52.80|
;;;4357       case LSM6DSL_BYPASS_TO_STREAM_MODE:
;;;4358         *val = LSM6DSL_BYPASS_TO_STREAM_MODE;
00003e  2004              MOVS     r0,#4
000040  7020              STRB     r0,[r4,#0]
;;;4359         break;
000042  e005              B        |L52.80|
;;;4360       case LSM6DSL_STREAM_MODE:
;;;4361         *val = LSM6DSL_STREAM_MODE;
000044  2006              MOVS     r0,#6
000046  7020              STRB     r0,[r4,#0]
;;;4362         break;
000048  e002              B        |L52.80|
                  |L52.74|
;;;4363       default:
;;;4364         *val = LSM6DSL_FIFO_MODE_ND;
00004a  2008              MOVS     r0,#8
00004c  7020              STRB     r0,[r4,#0]
;;;4365         break;
00004e  bf00              NOP      
                  |L52.80|
000050  bf00              NOP                            ;4350
;;;4366     }
;;;4367   
;;;4368     return ret;
000052  4630              MOV      r0,r6
;;;4369   }
000054  bdf8              POP      {r3-r7,pc}
;;;4370   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_mode_set PROC
;;;4319     */
;;;4320   int32_t lsm6dsl_fifo_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fifo_mode_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4321   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4322     lsm6dsl_fifo_ctrl5_t fifo_ctrl5;
;;;4323     int32_t ret;
;;;4324   
;;;4325     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  210a              MOVS     r1,#0xa
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4326     if(ret == 0){
000014  b95d              CBNZ     r5,|L53.46|
;;;4327       fifo_ctrl5.fifo_mode = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640002          BFI      r0,r4,#0,#3
00001e  9000              STR      r0,[sp,#0]
;;;4328       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL5, (uint8_t*)&fifo_ctrl5, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  210a              MOVS     r1,#0xa
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L53.46|
;;;4329     }
;;;4330     return ret;
00002e  4628              MOV      r0,r5
;;;4331   }
000030  bdf8              POP      {r3-r7,pc}
;;;4332   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_pattern_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_pattern_get PROC
;;;3758     */
;;;3759   int32_t lsm6dsl_fifo_pattern_get(lsm6dsl_ctx_t *ctx, uint16_t *val)
000000  b57c              PUSH     {r2-r6,lr}
;;;3760   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3761     lsm6dsl_fifo_status3_t fifo_status3;
;;;3762     lsm6dsl_fifo_status4_t fifo_status4;
;;;3763     int32_t ret;
;;;3764   
;;;3765     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS3,
000006  2301              MOVS     r3,#1
000008  aa01              ADD      r2,sp,#4
00000a  213c              MOVS     r1,#0x3c
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3766                            (uint8_t*)&fifo_status3, 1);
;;;3767     if(ret == 0){
000014  b97d              CBNZ     r5,|L54.54|
;;;3768       ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS4,
000016  2301              MOVS     r3,#1
000018  466a              MOV      r2,sp
00001a  213d              MOVS     r1,#0x3d
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       lsm6dsl_read_reg
000022  4605              MOV      r5,r0
;;;3769                              (uint8_t*)&fifo_status4, 1);
;;;3770       *val = ( (uint16_t)fifo_status4.fifo_pattern << 8) +
000024  f89d0004          LDRB     r0,[sp,#4]
000028  f89d1000          LDRB     r1,[sp,#0]
00002c  f0010103          AND      r1,r1,#3
000030  eb002001          ADD      r0,r0,r1,LSL #8
000034  8020              STRH     r0,[r4,#0]
                  |L54.54|
;;;3771                fifo_status3.fifo_pattern;
;;;3772     }
;;;3773     return ret;
000036  4628              MOV      r0,r5
;;;3774   }
000038  bd7c              POP      {r2-r6,pc}
;;;3775   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_pedo_and_timestamp_batch_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_pedo_and_timestamp_batch_get PROC
;;;3926     */
;;;3927   int32_t lsm6dsl_fifo_pedo_and_timestamp_batch_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3928                                                     uint8_t *val)
;;;3929   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3930     lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
;;;3931     int32_t ret;
;;;3932   
;;;3933     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2107              MOVS     r1,#7
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3934     *val = fifo_ctrl2.timer_pedo_fifo_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;3935   
;;;3936     return ret;
00001c  4630              MOV      r0,r6
;;;3937   }
00001e  bdf8              POP      {r3-r7,pc}
;;;3938   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_pedo_and_timestamp_batch_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_pedo_and_timestamp_batch_set PROC
;;;3902     */
;;;3903   int32_t lsm6dsl_fifo_pedo_and_timestamp_batch_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3904                                                     uint8_t val)
;;;3905   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3906     lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
;;;3907     int32_t ret;
;;;3908   
;;;3909     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2107              MOVS     r1,#7
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3910     if(ret == 0){
000014  b95d              CBNZ     r5,|L56.46|
;;;3911       fifo_ctrl2.timer_pedo_fifo_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;3912       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2107              MOVS     r1,#7
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L56.46|
;;;3913                               (uint8_t*)&fifo_ctrl2, 1);
;;;3914     }
;;;3915     return ret;
00002e  4628              MOV      r0,r5
;;;3916   }
000030  bdf8              POP      {r3-r7,pc}
;;;3917   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_raw_data_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_raw_data_get PROC
;;;1123     */
;;;1124   int32_t lsm6dsl_fifo_raw_data_get(lsm6dsl_ctx_t *ctx, uint8_t *buffer,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;1125                                     uint8_t len)
;;;1126   {
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;1127     int32_t ret;
;;;1128     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_DATA_OUT_L, buffer, len);
00000a  462b              MOV      r3,r5
00000c  4622              MOV      r2,r4
00000e  213e              MOVS     r1,#0x3e
000010  4630              MOV      r0,r6
000012  f7fffffe          BL       lsm6dsl_read_reg
000016  4607              MOV      r7,r0
;;;1129     return ret;
000018  4638              MOV      r0,r7
;;;1130   }
00001a  e8bd81f0          POP      {r4-r8,pc}
;;;1131   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_stop_on_wtm_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_stop_on_wtm_get PROC
;;;4300     */
;;;4301   int32_t lsm6dsl_fifo_stop_on_wtm_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4302   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4303     lsm6dsl_fifo_ctrl4_t fifo_ctrl4;
;;;4304     int32_t ret;
;;;4305   
;;;4306     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL4, (uint8_t*)&fifo_ctrl4, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2109              MOVS     r1,#9
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4307     *val = fifo_ctrl4.stop_on_fth;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;4308   
;;;4309     return ret;
00001c  4630              MOV      r0,r6
;;;4310   }
00001e  bdf8              POP      {r3-r7,pc}
;;;4311   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_stop_on_wtm_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_stop_on_wtm_set PROC
;;;4278     */
;;;4279   int32_t lsm6dsl_fifo_stop_on_wtm_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4280   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4281     lsm6dsl_fifo_ctrl4_t fifo_ctrl4;
;;;4282     int32_t ret;
;;;4283   
;;;4284     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL4, (uint8_t*)&fifo_ctrl4, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2109              MOVS     r1,#9
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4285     if(ret == 0){
000014  b95d              CBNZ     r5,|L59.46|
;;;4286       fifo_ctrl4.stop_on_fth = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;4287       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL4, (uint8_t*)&fifo_ctrl4, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2109              MOVS     r1,#9
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L59.46|
;;;4288     }
;;;4289     return ret;
00002e  4628              MOV      r0,r5
;;;4290   }
000030  bdf8              POP      {r3-r7,pc}
;;;4291   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_temp_batch_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_temp_batch_get PROC
;;;3806     */
;;;3807   int32_t lsm6dsl_fifo_temp_batch_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3808   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3809     lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
;;;3810     int32_t ret;
;;;3811   
;;;3812     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2107              MOVS     r1,#7
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3813     *val = fifo_ctrl2.fifo_temp_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  7020              STRB     r0,[r4,#0]
;;;3814   
;;;3815     return ret;
00001e  4630              MOV      r0,r6
;;;3816   }
000020  bdf8              POP      {r3-r7,pc}
;;;3817   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_temp_batch_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_temp_batch_set PROC
;;;3783     */
;;;3784   int32_t lsm6dsl_fifo_temp_batch_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3785   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3786     lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
;;;3787     int32_t ret;
;;;3788   
;;;3789     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2107              MOVS     r1,#7
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3790     if(ret == 0){
000014  b95d              CBNZ     r5,|L61.46|
;;;3791       fifo_ctrl2.fifo_temp_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;3792       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2107              MOVS     r1,#7
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L61.46|
;;;3793                               (uint8_t*)&fifo_ctrl2, 1);
;;;3794     }
;;;3795   
;;;3796     return ret;
00002e  4628              MOV      r0,r5
;;;3797   }
000030  bdf8              POP      {r3-r7,pc}
;;;3798   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_watermark_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_watermark_get PROC
;;;3687     */
;;;3688   int32_t lsm6dsl_fifo_watermark_get(lsm6dsl_ctx_t *ctx, uint16_t *val)
000000  b57c              PUSH     {r2-r6,lr}
;;;3689   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3690     lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
;;;3691     lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
;;;3692     int32_t ret;
;;;3693   
;;;3694     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
000006  2301              MOVS     r3,#1
000008  aa01              ADD      r2,sp,#4
00000a  2106              MOVS     r1,#6
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3695     if(ret == 0){
000014  b935              CBNZ     r5,|L62.36|
;;;3696       ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
000016  2301              MOVS     r3,#1
000018  466a              MOV      r2,sp
00001a  2107              MOVS     r1,#7
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       lsm6dsl_read_reg
000022  4605              MOV      r5,r0
                  |L62.36|
;;;3697     }
;;;3698     *val = ((uint16_t)fifo_ctrl2.fth << 8) + (uint16_t)fifo_ctrl1.fth;
000024  f89d0004          LDRB     r0,[sp,#4]
000028  f89d1000          LDRB     r1,[sp,#0]
00002c  f0010107          AND      r1,r1,#7
000030  eb002001          ADD      r0,r0,r1,LSL #8
000034  8020              STRH     r0,[r4,#0]
;;;3699   
;;;3700     return ret;
000036  4628              MOV      r0,r5
;;;3701   }
000038  bd7c              POP      {r2-r6,pc}
;;;3702   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_watermark_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_watermark_set PROC
;;;3660     */
;;;3661   int32_t lsm6dsl_fifo_watermark_set(lsm6dsl_ctx_t *ctx, uint16_t val)
000000  b57c              PUSH     {r2-r6,lr}
;;;3662   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3663     lsm6dsl_fifo_ctrl1_t fifo_ctrl1;
;;;3664     lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
;;;3665     int32_t ret;
;;;3666   
;;;3667     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2107              MOVS     r1,#7
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3668     if(ret == 0){
000014  b9b5              CBNZ     r5,|L63.68|
;;;3669       fifo_ctrl1.fth = (uint8_t) (0x00FFU & val);
000016  b2e0              UXTB     r0,r4
000018  9001              STR      r0,[sp,#4]
;;;3670       fifo_ctrl2.fth = (uint8_t) (( 0x0700U & val ) >> 8);
00001a  0a21              LSRS     r1,r4,#8
00001c  f89d0000          LDRB     r0,[sp,#0]
000020  f3610002          BFI      r0,r1,#0,#3
000024  9000              STR      r0,[sp,#0]
;;;3671       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL1, (uint8_t*)&fifo_ctrl1, 1);
000026  2301              MOVS     r3,#1
000028  aa01              ADD      r2,sp,#4
00002a  2106              MOVS     r1,#6
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       lsm6dsl_write_reg
000032  4605              MOV      r5,r0
;;;3672       if(ret == 0){
000034  b935              CBNZ     r5,|L63.68|
;;;3673         ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
000036  2301              MOVS     r3,#1
000038  466a              MOV      r2,sp
00003a  2107              MOVS     r1,#7
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       lsm6dsl_write_reg
000042  4605              MOV      r5,r0
                  |L63.68|
;;;3674                                 (uint8_t*)&fifo_ctrl2, 1);
;;;3675       }
;;;3676     }
;;;3677     return ret;
000044  4628              MOV      r0,r5
;;;3678   }
000046  bd7c              POP      {r2-r6,pc}
;;;3679   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_write_trigger_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_write_trigger_get PROC
;;;3861     */
;;;3862   int32_t lsm6dsl_fifo_write_trigger_get(lsm6dsl_ctx_t *ctx,
000000  b57c              PUSH     {r2-r6,lr}
;;;3863                                          lsm6dsl_trigger_fifo_t *val)
;;;3864   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3865     lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
;;;3866     lsm6dsl_master_config_t master_config;
;;;3867     int32_t ret;
;;;3868   
;;;3869     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
000006  2301              MOVS     r3,#1
000008  aa01              ADD      r2,sp,#4
00000a  2107              MOVS     r1,#7
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3870     if(ret == 0){
000014  b9fd              CBNZ     r5,|L64.86|
;;;3871       ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000016  2301              MOVS     r3,#1
000018  466a              MOV      r2,sp
00001a  211a              MOVS     r1,#0x1a
00001c  4630              MOV      r0,r6
00001e  f7fffffe          BL       lsm6dsl_read_reg
000022  4605              MOV      r5,r0
;;;3872                              (uint8_t*)&master_config, 1);
;;;3873   
;;;3874       switch ( ( fifo_ctrl2.timer_pedo_fifo_drdy << 1 ) +
000024  f89d0004          LDRB     r0,[sp,#4]
000028  f3c01080          UBFX     r0,r0,#6,#1
00002c  eb000040          ADD      r0,r0,r0,LSL #1
000030  b120              CBZ      r0,|L64.60|
000032  2801              CMP      r0,#1
000034  d005              BEQ      |L64.66|
000036  2802              CMP      r0,#2
000038  d109              BNE      |L64.78|
00003a  e005              B        |L64.72|
                  |L64.60|
;;;3875                fifo_ctrl2. timer_pedo_fifo_drdy ) {
;;;3876         case LSM6DSL_TRG_XL_GY_DRDY:
;;;3877           *val = LSM6DSL_TRG_XL_GY_DRDY;
00003c  2000              MOVS     r0,#0
00003e  7020              STRB     r0,[r4,#0]
;;;3878           break;
000040  e008              B        |L64.84|
                  |L64.66|
;;;3879         case LSM6DSL_TRG_STEP_DETECT:
;;;3880           *val = LSM6DSL_TRG_STEP_DETECT;
000042  2001              MOVS     r0,#1
000044  7020              STRB     r0,[r4,#0]
;;;3881           break;
000046  e005              B        |L64.84|
                  |L64.72|
;;;3882         case LSM6DSL_TRG_SH_DRDY:
;;;3883           *val = LSM6DSL_TRG_SH_DRDY;
000048  2002              MOVS     r0,#2
00004a  7020              STRB     r0,[r4,#0]
;;;3884           break;
00004c  e002              B        |L64.84|
                  |L64.78|
;;;3885         default:
;;;3886           *val = LSM6DSL_TRG_SH_ND;
00004e  2003              MOVS     r0,#3
000050  7020              STRB     r0,[r4,#0]
;;;3887           break;
000052  bf00              NOP      
                  |L64.84|
000054  bf00              NOP                            ;3878
                  |L64.86|
;;;3888       }
;;;3889     }
;;;3890   
;;;3891     return ret;
000056  4628              MOV      r0,r5
;;;3892   }
000058  bd7c              POP      {r2-r6,pc}
;;;3893   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_write_trigger_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_write_trigger_set PROC
;;;3826     */
;;;3827   int32_t lsm6dsl_fifo_write_trigger_set(lsm6dsl_ctx_t *ctx,
000000  b57c              PUSH     {r2-r6,lr}
;;;3828                                          lsm6dsl_trigger_fifo_t val)
;;;3829   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3830     lsm6dsl_fifo_ctrl2_t fifo_ctrl2;
;;;3831     lsm6dsl_master_config_t master_config;
;;;3832     int32_t ret;
;;;3833   
;;;3834     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL2, (uint8_t*)&fifo_ctrl2, 1);
000006  2301              MOVS     r3,#1
000008  aa01              ADD      r2,sp,#4
00000a  2107              MOVS     r1,#7
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3835     if(ret == 0){
000014  bb0d              CBNZ     r5,|L65.90|
;;;3836       fifo_ctrl2.timer_pedo_fifo_drdy = (uint8_t)val & 0x01U;
000016  f89d0004          LDRB     r0,[sp,#4]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9001              STR      r0,[sp,#4]
;;;3837       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL2,
000020  2301              MOVS     r3,#1
000022  aa01              ADD      r2,sp,#4
000024  2107              MOVS     r1,#7
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
;;;3838                               (uint8_t*)&fifo_ctrl2, 1);
;;;3839       if(ret == 0){
00002e  b9a5              CBNZ     r5,|L65.90|
;;;3840         ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000030  2301              MOVS     r3,#1
000032  466a              MOV      r2,sp
000034  211a              MOVS     r1,#0x1a
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       lsm6dsl_read_reg
00003c  4605              MOV      r5,r0
;;;3841                                (uint8_t*)&master_config, 1);
;;;3842         if(ret == 0){
00003e  b965              CBNZ     r5,|L65.90|
;;;3843           master_config.data_valid_sel_fifo = (((uint8_t)val & 0x02U) >> 1);
000040  0860              LSRS     r0,r4,#1
000042  f89d1000          LDRB     r1,[sp,#0]
000046  f3601186          BFI      r1,r0,#6,#1
00004a  9100              STR      r1,[sp,#0]
;;;3844           ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
00004c  2301              MOVS     r3,#1
00004e  466a              MOV      r2,sp
000050  211a              MOVS     r1,#0x1a
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       lsm6dsl_write_reg
000058  4605              MOV      r5,r0
                  |L65.90|
;;;3845                                   (uint8_t*)&master_config, 1);
;;;3846         }
;;;3847       }
;;;3848     }
;;;3849   
;;;3850     return ret;
00005a  4628              MOV      r0,r5
;;;3851   }
00005c  bd7c              POP      {r2-r6,pc}
;;;3852   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_wtm_flag_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_wtm_flag_get PROC
;;;3738     */
;;;3739   int32_t lsm6dsl_fifo_wtm_flag_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3740   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3741     lsm6dsl_fifo_status2_t fifo_status2;
;;;3742     int32_t ret;
;;;3743   
;;;3744     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_STATUS2, (uint8_t*)&fifo_status2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  213b              MOVS     r1,#0x3b
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3745     *val = fifo_status2.waterm;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;3746   
;;;3747     return ret;
00001c  4630              MOV      r0,r6
;;;3748   }
00001e  bdf8              POP      {r3-r7,pc}
;;;3749   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_xl_batch_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_xl_batch_get PROC
;;;3971     */
;;;3972   int32_t lsm6dsl_fifo_xl_batch_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3973                                     lsm6dsl_dec_fifo_xl_t *val)
;;;3974   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3975     lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
;;;3976     int32_t ret;
;;;3977   
;;;3978     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2108              MOVS     r1,#8
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3979     switch (fifo_ctrl3.dec_fifo_xl) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000007          AND      r0,r0,#7
00001c  2808              CMP      r0,#8
00001e  d21d              BCS      |L67.92|
000020  e8dff000          TBB      [pc,r0]
000024  04070a0d          DCB      0x04,0x07,0x0a,0x0d
000028  10131619          DCB      0x10,0x13,0x16,0x19
;;;3980       case LSM6DSL_FIFO_XL_DISABLE:
;;;3981         *val = LSM6DSL_FIFO_XL_DISABLE;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;3982         break;
000030  e017              B        |L67.98|
;;;3983       case LSM6DSL_FIFO_XL_NO_DEC:
;;;3984         *val = LSM6DSL_FIFO_XL_NO_DEC;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;3985         break;
000036  e014              B        |L67.98|
;;;3986       case LSM6DSL_FIFO_XL_DEC_2:
;;;3987         *val = LSM6DSL_FIFO_XL_DEC_2;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;3988         break;
00003c  e011              B        |L67.98|
;;;3989       case LSM6DSL_FIFO_XL_DEC_3:
;;;3990         *val = LSM6DSL_FIFO_XL_DEC_3;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;3991         break;
000042  e00e              B        |L67.98|
;;;3992       case LSM6DSL_FIFO_XL_DEC_4:
;;;3993         *val = LSM6DSL_FIFO_XL_DEC_4;
000044  2004              MOVS     r0,#4
000046  7020              STRB     r0,[r4,#0]
;;;3994         break;
000048  e00b              B        |L67.98|
;;;3995       case LSM6DSL_FIFO_XL_DEC_8:
;;;3996         *val = LSM6DSL_FIFO_XL_DEC_8;
00004a  2005              MOVS     r0,#5
00004c  7020              STRB     r0,[r4,#0]
;;;3997         break;
00004e  e008              B        |L67.98|
;;;3998       case LSM6DSL_FIFO_XL_DEC_16:
;;;3999         *val = LSM6DSL_FIFO_XL_DEC_16;
000050  2006              MOVS     r0,#6
000052  7020              STRB     r0,[r4,#0]
;;;4000         break;
000054  e005              B        |L67.98|
;;;4001       case LSM6DSL_FIFO_XL_DEC_32:
;;;4002         *val = LSM6DSL_FIFO_XL_DEC_32;
000056  2007              MOVS     r0,#7
000058  7020              STRB     r0,[r4,#0]
;;;4003         break;
00005a  e002              B        |L67.98|
                  |L67.92|
;;;4004       default:
;;;4005         *val = LSM6DSL_FIFO_XL_DEC_ND;
00005c  2008              MOVS     r0,#8
00005e  7020              STRB     r0,[r4,#0]
;;;4006         break;
000060  bf00              NOP      
                  |L67.98|
000062  bf00              NOP                            ;3982
;;;4007     }
;;;4008   
;;;4009     return ret;
000064  4630              MOV      r0,r6
;;;4010   }
000066  bdf8              POP      {r3-r7,pc}
;;;4011   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_xl_batch_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_xl_batch_set PROC
;;;3947     */
;;;3948   int32_t lsm6dsl_fifo_xl_batch_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3949                                     lsm6dsl_dec_fifo_xl_t val)
;;;3950   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3951     lsm6dsl_fifo_ctrl3_t fifo_ctrl3;
;;;3952     int32_t ret;
;;;3953   
;;;3954     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL3, (uint8_t*)&fifo_ctrl3, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2108              MOVS     r1,#8
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3955     if(ret == 0){
000014  b95d              CBNZ     r5,|L68.46|
;;;3956       fifo_ctrl3.dec_fifo_xl = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640002          BFI      r0,r4,#0,#3
00001e  9000              STR      r0,[sp,#0]
;;;3957       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL3,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2108              MOVS     r1,#8
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L68.46|
;;;3958                               (uint8_t*)&fifo_ctrl3, 1);
;;;3959     }
;;;3960     return ret;
00002e  4628              MOV      r0,r5
;;;3961   }
000030  bdf8              POP      {r3-r7,pc}
;;;3962   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_xl_gy_8bit_format_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_xl_gy_8bit_format_get PROC
;;;4258     */
;;;4259   int32_t lsm6dsl_fifo_xl_gy_8bit_format_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4260   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4261     lsm6dsl_fifo_ctrl4_t fifo_ctrl4;
;;;4262     int32_t ret;
;;;4263   
;;;4264     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL4, (uint8_t*)&fifo_ctrl4, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2109              MOVS     r1,#9
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4265     *val = fifo_ctrl4.only_high_data;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;4266   
;;;4267     return ret;
00001e  4630              MOV      r0,r6
;;;4268   }
000020  bdf8              POP      {r3-r7,pc}
;;;4269   
                          ENDP


                          AREA ||i.lsm6dsl_fifo_xl_gy_8bit_format_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_fifo_xl_gy_8bit_format_set PROC
;;;4237     */
;;;4238   int32_t lsm6dsl_fifo_xl_gy_8bit_format_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4239   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4240     lsm6dsl_fifo_ctrl4_t fifo_ctrl4;
;;;4241     int32_t ret;
;;;4242   
;;;4243     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FIFO_CTRL4, (uint8_t*)&fifo_ctrl4, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2109              MOVS     r1,#9
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4244     if(ret == 0){
000014  b95d              CBNZ     r5,|L70.46|
;;;4245       fifo_ctrl4.only_high_data = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9000              STR      r0,[sp,#0]
;;;4246       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FIFO_CTRL4, (uint8_t*)&fifo_ctrl4, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2109              MOVS     r1,#9
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L70.46|
;;;4247     }
;;;4248     return ret;
00002e  4628              MOV      r0,r5
;;;4249   }
000030  bdf8              POP      {r3-r7,pc}
;;;4250   
                          ENDP


                          AREA ||i.lsm6dsl_filter_settling_mask_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_filter_settling_mask_get PROC
;;;1590     */
;;;1591   int32_t lsm6dsl_filter_settling_mask_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1592   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1593     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;1594     int32_t ret;
;;;1595   
;;;1596     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2113              MOVS     r1,#0x13
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1597     *val = ctrl4_c.drdy_mask;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1598   
;;;1599     return ret;
00001e  4630              MOV      r0,r6
;;;1600   }
000020  bdf8              POP      {r3-r7,pc}
;;;1601   
                          ENDP


                          AREA ||i.lsm6dsl_filter_settling_mask_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_filter_settling_mask_set PROC
;;;1568     */
;;;1569   int32_t lsm6dsl_filter_settling_mask_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1570   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1571     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;1572     int32_t ret;
;;;1573   
;;;1574     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2113              MOVS     r1,#0x13
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1575     if(ret == 0){
000014  b95d              CBNZ     r5,|L72.46|
;;;1576       ctrl4_c.drdy_mask = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;1577       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2113              MOVS     r1,#0x13
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L72.46|
;;;1578     }
;;;1579     return ret;
00002e  4628              MOV      r0,r5
;;;1580   }
000030  bdf8              POP      {r3-r7,pc}
;;;1581   
                          ENDP


                          AREA ||i.lsm6dsl_from_fs1000dps_to_mdps||, CODE, READONLY, ALIGN=2

                  lsm6dsl_from_fs1000dps_to_mdps PROC
;;;138    
;;;139    float_t lsm6dsl_from_fs1000dps_to_mdps(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;140    {
;;;141      return ((float_t)lsb * 35.0f);
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eddf0a02          VLDR     s1,|L73.20|
00000c  ee200a20          VMUL.F32 s0,s0,s1
;;;142    }
000010  4770              BX       lr
;;;143    
                          ENDP

000012  0000              DCW      0x0000
                  |L73.20|
000014  420c0000          DCFS     0x420c0000 ; 35

                          AREA ||i.lsm6dsl_from_fs125dps_to_mdps||, CODE, READONLY, ALIGN=2

                  lsm6dsl_from_fs125dps_to_mdps PROC
;;;123    
;;;124    float_t lsm6dsl_from_fs125dps_to_mdps(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;125    {
;;;126      return ((float_t)lsb * 4.375f);
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eddf0a02          VLDR     s1,|L74.20|
00000c  ee200a20          VMUL.F32 s0,s0,s1
;;;127    }
000010  4770              BX       lr
;;;128    
                          ENDP

000012  0000              DCW      0x0000
                  |L74.20|
000014  408c0000          DCFS     0x408c0000 ; 4.375

                          AREA ||i.lsm6dsl_from_fs16g_to_mg||, CODE, READONLY, ALIGN=2

                  lsm6dsl_from_fs16g_to_mg PROC
;;;118    
;;;119    float_t lsm6dsl_from_fs16g_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;120    {
;;;121      return ((float_t)lsb * 0.488f);
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eddf0a02          VLDR     s1,|L75.20|
00000c  ee200a20          VMUL.F32 s0,s0,s1
;;;122    }
000010  4770              BX       lr
;;;123    
                          ENDP

000012  0000              DCW      0x0000
                  |L75.20|
000014  3ef9db23          DCFS     0x3ef9db23 ; 0.48800000548362732

                          AREA ||i.lsm6dsl_from_fs2000dps_to_mdps||, CODE, READONLY, ALIGN=2

                  lsm6dsl_from_fs2000dps_to_mdps PROC
;;;143    
;;;144    float_t lsm6dsl_from_fs2000dps_to_mdps(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;145    {
;;;146      return ((float_t)lsb * 70.0f);
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eddf0a02          VLDR     s1,|L76.20|
00000c  ee200a20          VMUL.F32 s0,s0,s1
;;;147    }
000010  4770              BX       lr
;;;148    
                          ENDP

000012  0000              DCW      0x0000
                  |L76.20|
000014  428c0000          DCFS     0x428c0000 ; 70

                          AREA ||i.lsm6dsl_from_fs250dps_to_mdps||, CODE, READONLY, ALIGN=2

                  lsm6dsl_from_fs250dps_to_mdps PROC
;;;128    
;;;129    float_t lsm6dsl_from_fs250dps_to_mdps(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;130    {
;;;131      return ((float_t)lsb * 8.750f);
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eddf0a02          VLDR     s1,|L77.20|
00000c  ee200a20          VMUL.F32 s0,s0,s1
;;;132    }
000010  4770              BX       lr
;;;133    
                          ENDP

000012  0000              DCW      0x0000
                  |L77.20|
000014  410c0000          DCFS     0x410c0000 ; 8.75

                          AREA ||i.lsm6dsl_from_fs2g_to_mg||, CODE, READONLY, ALIGN=2

                  lsm6dsl_from_fs2g_to_mg PROC
;;;103    
;;;104    float_t lsm6dsl_from_fs2g_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;105    {
;;;106      return ((float_t)lsb * 0.061f);
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eddf0a02          VLDR     s1,|L78.20|
00000c  ee200a20          VMUL.F32 s0,s0,s1
;;;107    }
000010  4770              BX       lr
;;;108    
                          ENDP

000012  0000              DCW      0x0000
                  |L78.20|
000014  3d79db23          DCFS     0x3d79db23 ; 0.061000000685453415

                          AREA ||i.lsm6dsl_from_fs4g_to_mg||, CODE, READONLY, ALIGN=2

                  lsm6dsl_from_fs4g_to_mg PROC
;;;108    
;;;109    float_t lsm6dsl_from_fs4g_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;110    {
;;;111      return ((float_t)lsb * 0.122f);
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eddf0a02          VLDR     s1,|L79.20|
00000c  ee200a20          VMUL.F32 s0,s0,s1
;;;112    }
000010  4770              BX       lr
;;;113    
                          ENDP

000012  0000              DCW      0x0000
                  |L79.20|
000014  3df9db23          DCFS     0x3df9db23 ; 0.12200000137090683

                          AREA ||i.lsm6dsl_from_fs500dps_to_mdps||, CODE, READONLY, ALIGN=2

                  lsm6dsl_from_fs500dps_to_mdps PROC
;;;133    
;;;134    float_t lsm6dsl_from_fs500dps_to_mdps(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;135    {
;;;136      return ((float_t)lsb * 17.50f);
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eddf0a02          VLDR     s1,|L80.20|
00000c  ee200a20          VMUL.F32 s0,s0,s1
;;;137    }
000010  4770              BX       lr
;;;138    
                          ENDP

000012  0000              DCW      0x0000
                  |L80.20|
000014  418c0000          DCFS     0x418c0000 ; 17.5

                          AREA ||i.lsm6dsl_from_fs8g_to_mg||, CODE, READONLY, ALIGN=2

                  lsm6dsl_from_fs8g_to_mg PROC
;;;113    
;;;114    float_t lsm6dsl_from_fs8g_to_mg(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;115    {
;;;116      return ((float_t)lsb * 0.244f);
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  eddf0a02          VLDR     s1,|L81.20|
00000c  ee200a20          VMUL.F32 s0,s0,s1
;;;117    }
000010  4770              BX       lr
;;;118    
                          ENDP

000012  0000              DCW      0x0000
                  |L81.20|
000014  3e79db23          DCFS     0x3e79db23 ; 0.24400000274181366

                          AREA ||i.lsm6dsl_from_lsb_to_celsius||, CODE, READONLY, ALIGN=2

                  lsm6dsl_from_lsb_to_celsius PROC
;;;148    
;;;149    float_t lsm6dsl_from_lsb_to_celsius(int16_t lsb)
000000  ee000a10          VMOV     s0,r0
;;;150    {
;;;151      return (((float_t)lsb / 256.0f) + 25.0f);
000004  eeb80ac0          VCVT.F32.S32 s0,s0
000008  ed9f1a04          VLDR     s2,|L82.28|
00000c  eec00a01          VDIV.F32 s1,s0,s2
000010  eeb30a09          VMOV.F32 s0,#25.00000000
000014  ee300a80          VADD.F32 s0,s1,s0
;;;152    }
000018  4770              BX       lr
;;;153    
                          ENDP

00001a  0000              DCW      0x0000
                  |L82.28|
00001c  43800000          DCFS     0x43800000 ; 256

                          AREA ||i.lsm6dsl_func_en_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_func_en_set PROC
;;;5691     */
;;;5692   int32_t lsm6dsl_func_en_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5693   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5694     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;5695     int32_t ret;
;;;5696   
;;;5697     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5698     if(ret == 0){
000014  b95d              CBNZ     r5,|L83.46|
;;;5699       ctrl10_c.func_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640082          BFI      r0,r4,#2,#1
00001e  9000              STR      r0,[sp,#0]
;;;5700       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2119              MOVS     r1,#0x19
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L83.46|
;;;5701     }
;;;5702   
;;;5703     return ret;
00002e  4628              MOV      r0,r5
;;;5704   }
000030  bdf8              POP      {r3-r7,pc}
;;;5705   
                          ENDP


                          AREA ||i.lsm6dsl_gy_band_pass_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_band_pass_get PROC
;;;2049     */
;;;2050   int32_t lsm6dsl_gy_band_pass_get(lsm6dsl_ctx_t *ctx, lsm6dsl_lpf1_sel_g_t *val)
000000  b5fe              PUSH     {r1-r7,lr}
;;;2051   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2052     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;2053     lsm6dsl_ctrl6_c_t ctrl6_c;
;;;2054     lsm6dsl_ctrl7_g_t ctrl7_g;
;;;2055     int32_t ret;
;;;2056   
;;;2057     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
000006  2301              MOVS     r3,#1
000008  aa01              ADD      r2,sp,#4
00000a  2115              MOVS     r1,#0x15
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2058     if(ret == 0){
000014  2d00              CMP      r5,#0
000016  d16c              BNE      |L84.242|
;;;2059       ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000018  2301              MOVS     r3,#1
00001a  aa02              ADD      r2,sp,#8
00001c  2113              MOVS     r1,#0x13
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       lsm6dsl_read_reg
000024  4605              MOV      r5,r0
;;;2060       if(ret == 0){
000026  2d00              CMP      r5,#0
000028  d163              BNE      |L84.242|
;;;2061         ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
00002a  2301              MOVS     r3,#1
00002c  466a              MOV      r2,sp
00002e  2116              MOVS     r1,#0x16
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       lsm6dsl_read_reg
000036  4605              MOV      r5,r0
;;;2062   
;;;2063         switch ( ( ctrl7_g.hp_en_g << 7 ) + ( ctrl7_g.hpm_g << 4 ) +
000038  f89d0000          LDRB     r0,[sp,#0]
00003c  f3c01080          UBFX     r0,r0,#6,#1
000040  01c0              LSLS     r0,r0,#7
000042  f89d1000          LDRB     r1,[sp,#0]
000046  f3c11101          UBFX     r1,r1,#4,#2
00004a  eb001001          ADD      r0,r0,r1,LSL #4
00004e  f89d1008          LDRB     r1,[sp,#8]
000052  f3c10140          UBFX     r1,r1,#1,#1
000056  eb0000c1          ADD      r0,r0,r1,LSL #3
00005a  f89d1004          LDRB     r1,[sp,#4]
00005e  f0010103          AND      r1,r1,#3
000062  4408              ADD      r0,r0,r1
000064  2890              CMP      r0,#0x90
000066  d01f              BEQ      |L84.168|
000068  dc0e              BGT      |L84.136|
00006a  280b              CMP      r0,#0xb
00006c  d02e              BEQ      |L84.204|
00006e  dc06              BGT      |L84.126|
000070  2808              CMP      r0,#8
000072  d028              BEQ      |L84.198|
000074  2809              CMP      r0,#9
000076  d023              BEQ      |L84.192|
000078  280a              CMP      r0,#0xa
00007a  d136              BNE      |L84.234|
00007c  e01d              B        |L84.186|
                  |L84.126|
00007e  2880              CMP      r0,#0x80
000080  d00f              BEQ      |L84.162|
000082  288a              CMP      r0,#0x8a
000084  d131              BNE      |L84.234|
000086  e024              B        |L84.210|
                  |L84.136|
000088  28a8              CMP      r0,#0xa8
00008a  d028              BEQ      |L84.222|
00008c  dc04              BGT      |L84.152|
00008e  2899              CMP      r0,#0x99
000090  d022              BEQ      |L84.216|
000092  28a0              CMP      r0,#0xa0
000094  d129              BNE      |L84.234|
000096  e00a              B        |L84.174|
                  |L84.152|
000098  28b0              CMP      r0,#0xb0
00009a  d00b              BEQ      |L84.180|
00009c  28bb              CMP      r0,#0xbb
00009e  d124              BNE      |L84.234|
0000a0  e020              B        |L84.228|
                  |L84.162|
;;;2064                  ( ctrl4_c.lpf1_sel_g << 3) + ctrl6_c.ftype ) {
;;;2065           case LSM6DSL_HP_16mHz_LP2:
;;;2066             *val = LSM6DSL_HP_16mHz_LP2;
0000a2  2080              MOVS     r0,#0x80
0000a4  7020              STRB     r0,[r4,#0]
;;;2067             break;
0000a6  e023              B        |L84.240|
                  |L84.168|
;;;2068           case LSM6DSL_HP_65mHz_LP2:
;;;2069             *val = LSM6DSL_HP_65mHz_LP2;
0000a8  2090              MOVS     r0,#0x90
0000aa  7020              STRB     r0,[r4,#0]
;;;2070             break;
0000ac  e020              B        |L84.240|
                  |L84.174|
;;;2071           case LSM6DSL_HP_260mHz_LP2:
;;;2072             *val = LSM6DSL_HP_260mHz_LP2;
0000ae  20a0              MOVS     r0,#0xa0
0000b0  7020              STRB     r0,[r4,#0]
;;;2073             break;
0000b2  e01d              B        |L84.240|
                  |L84.180|
;;;2074           case LSM6DSL_HP_1Hz04_LP2:
;;;2075             *val = LSM6DSL_HP_1Hz04_LP2;
0000b4  20b0              MOVS     r0,#0xb0
0000b6  7020              STRB     r0,[r4,#0]
;;;2076             break;
0000b8  e01a              B        |L84.240|
                  |L84.186|
;;;2077           case LSM6DSL_HP_DISABLE_LP1_LIGHT:
;;;2078             *val = LSM6DSL_HP_DISABLE_LP1_LIGHT;
0000ba  200a              MOVS     r0,#0xa
0000bc  7020              STRB     r0,[r4,#0]
;;;2079             break;
0000be  e017              B        |L84.240|
                  |L84.192|
;;;2080           case LSM6DSL_HP_DISABLE_LP1_NORMAL:
;;;2081             *val = LSM6DSL_HP_DISABLE_LP1_NORMAL;
0000c0  2009              MOVS     r0,#9
0000c2  7020              STRB     r0,[r4,#0]
;;;2082             break;
0000c4  e014              B        |L84.240|
                  |L84.198|
;;;2083           case LSM6DSL_HP_DISABLE_LP_STRONG:
;;;2084             *val = LSM6DSL_HP_DISABLE_LP_STRONG;
0000c6  2008              MOVS     r0,#8
0000c8  7020              STRB     r0,[r4,#0]
;;;2085             break;
0000ca  e011              B        |L84.240|
                  |L84.204|
;;;2086           case LSM6DSL_HP_DISABLE_LP1_AGGRESSIVE:
;;;2087             *val = LSM6DSL_HP_DISABLE_LP1_AGGRESSIVE;
0000cc  200b              MOVS     r0,#0xb
0000ce  7020              STRB     r0,[r4,#0]
;;;2088             break;
0000d0  e00e              B        |L84.240|
                  |L84.210|
;;;2089           case LSM6DSL_HP_16mHz_LP1_LIGHT:
;;;2090             *val = LSM6DSL_HP_16mHz_LP1_LIGHT;
0000d2  208a              MOVS     r0,#0x8a
0000d4  7020              STRB     r0,[r4,#0]
;;;2091             break;
0000d6  e00b              B        |L84.240|
                  |L84.216|
;;;2092           case LSM6DSL_HP_65mHz_LP1_NORMAL:
;;;2093             *val = LSM6DSL_HP_65mHz_LP1_NORMAL;
0000d8  2099              MOVS     r0,#0x99
0000da  7020              STRB     r0,[r4,#0]
;;;2094             break;
0000dc  e008              B        |L84.240|
                  |L84.222|
;;;2095           case LSM6DSL_HP_260mHz_LP1_STRONG:
;;;2096             *val = LSM6DSL_HP_260mHz_LP1_STRONG;
0000de  20a8              MOVS     r0,#0xa8
0000e0  7020              STRB     r0,[r4,#0]
;;;2097             break;
0000e2  e005              B        |L84.240|
                  |L84.228|
;;;2098           case LSM6DSL_HP_1Hz04_LP1_AGGRESSIVE:
;;;2099             *val = LSM6DSL_HP_1Hz04_LP1_AGGRESSIVE;
0000e4  20bb              MOVS     r0,#0xbb
0000e6  7020              STRB     r0,[r4,#0]
;;;2100             break;
0000e8  e002              B        |L84.240|
                  |L84.234|
;;;2101           default:
;;;2102             *val = LSM6DSL_HP_GY_BAND_NA;
0000ea  20ff              MOVS     r0,#0xff
0000ec  7020              STRB     r0,[r4,#0]
;;;2103             break;
0000ee  bf00              NOP      
                  |L84.240|
0000f0  bf00              NOP                            ;2067
                  |L84.242|
;;;2104         }
;;;2105       }
;;;2106     }
;;;2107   
;;;2108     return ret;
0000f2  4628              MOV      r0,r5
;;;2109   }
0000f4  bdfe              POP      {r1-r7,pc}
;;;2110   
                          ENDP


                          AREA ||i.lsm6dsl_gy_band_pass_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_band_pass_set PROC
;;;2009     */
;;;2010   int32_t lsm6dsl_gy_band_pass_set(lsm6dsl_ctx_t *ctx, lsm6dsl_lpf1_sel_g_t val)
000000  b5fe              PUSH     {r1-r7,lr}
;;;2011   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2012     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;2013     lsm6dsl_ctrl6_c_t ctrl6_c;
;;;2014     lsm6dsl_ctrl7_g_t ctrl7_g;
;;;2015     int32_t ret;
;;;2016   
;;;2017     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2116              MOVS     r1,#0x16
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2018     if(ret == 0){
000014  2d00              CMP      r5,#0
000016  d13d              BNE      |L85.148|
;;;2019       ctrl7_g.hpm_g  =  ( (uint8_t)val & 0x30U ) >> 4;
000018  0920              LSRS     r0,r4,#4
00001a  f89d1000          LDRB     r1,[sp,#0]
00001e  f3601105          BFI      r1,r0,#4,#2
000022  9100              STR      r1,[sp,#0]
;;;2020       ctrl7_g.hp_en_g = ( (uint8_t)val & 0x80U ) >> 7;
000024  09e1              LSRS     r1,r4,#7
000026  f89d0000          LDRB     r0,[sp,#0]
00002a  f3611086          BFI      r0,r1,#6,#1
00002e  9000              STR      r0,[sp,#0]
;;;2021       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
000030  2301              MOVS     r3,#1
000032  466a              MOV      r2,sp
000034  2116              MOVS     r1,#0x16
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       lsm6dsl_write_reg
00003c  4605              MOV      r5,r0
;;;2022       if(ret == 0){
00003e  bb4d              CBNZ     r5,|L85.148|
;;;2023         ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
000040  2301              MOVS     r3,#1
000042  aa01              ADD      r2,sp,#4
000044  2115              MOVS     r1,#0x15
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       lsm6dsl_read_reg
00004c  4605              MOV      r5,r0
;;;2024         if(ret == 0){
00004e  bb0d              CBNZ     r5,|L85.148|
;;;2025           ctrl6_c.ftype = (uint8_t)val & 0x03U;
000050  f89d0004          LDRB     r0,[sp,#4]
000054  f3640001          BFI      r0,r4,#0,#2
000058  9001              STR      r0,[sp,#4]
;;;2026           ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
00005a  2301              MOVS     r3,#1
00005c  aa01              ADD      r2,sp,#4
00005e  2115              MOVS     r1,#0x15
000060  4630              MOV      r0,r6
000062  f7fffffe          BL       lsm6dsl_write_reg
000066  4605              MOV      r5,r0
;;;2027           if(ret == 0){
000068  b9a5              CBNZ     r5,|L85.148|
;;;2028             ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C,
00006a  2301              MOVS     r3,#1
00006c  aa02              ADD      r2,sp,#8
00006e  2113              MOVS     r1,#0x13
000070  4630              MOV      r0,r6
000072  f7fffffe          BL       lsm6dsl_read_reg
000076  4605              MOV      r5,r0
;;;2029                                    (uint8_t*)&ctrl4_c, 1);
;;;2030             if(ret == 0){
000078  b965              CBNZ     r5,|L85.148|
;;;2031               ctrl4_c.lpf1_sel_g = ( (uint8_t)val & 0x08U ) >> 3;
00007a  08e0              LSRS     r0,r4,#3
00007c  f89d1008          LDRB     r1,[sp,#8]
000080  f3600141          BFI      r1,r0,#1,#1
000084  9102              STR      r1,[sp,#8]
;;;2032               ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C,
000086  2301              MOVS     r3,#1
000088  aa02              ADD      r2,sp,#8
00008a  2113              MOVS     r1,#0x13
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       lsm6dsl_write_reg
000092  4605              MOV      r5,r0
                  |L85.148|
;;;2033                                       (uint8_t*)&ctrl4_c, 1);
;;;2034             }
;;;2035           }
;;;2036         }
;;;2037       }
;;;2038     }
;;;2039     return ret;
000094  4628              MOV      r0,r5
;;;2040   }
000096  bdfe              POP      {r1-r7,pc}
;;;2041   
                          ENDP


                          AREA ||i.lsm6dsl_gy_data_rate_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_data_rate_get PROC
;;;391      */
;;;392    int32_t lsm6dsl_gy_data_rate_get(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_g_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;393    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;394      lsm6dsl_ctrl2_g_t ctrl2_g;
;;;395      int32_t ret;
;;;396    
;;;397      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;398      switch (ctrl2_g.odr_g) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  0900              LSRS     r0,r0,#4
00001a  280b              CMP      r0,#0xb
00001c  d228              BCS      |L86.112|
00001e  e8dff000          TBB      [pc,r0]
000022  0609              DCB      0x06,0x09
000024  0c0f1215          DCB      0x0c,0x0f,0x12,0x15
000028  181b1e21          DCB      0x18,0x1b,0x1e,0x21
00002c  2400              DCB      0x24,0x00
;;;399        case LSM6DSL_GY_ODR_OFF:
;;;400          *val = LSM6DSL_GY_ODR_OFF;
00002e  2000              MOVS     r0,#0
000030  7020              STRB     r0,[r4,#0]
;;;401          break;
000032  e020              B        |L86.118|
;;;402        case LSM6DSL_GY_ODR_12Hz5:
;;;403          *val = LSM6DSL_GY_ODR_12Hz5;
000034  2001              MOVS     r0,#1
000036  7020              STRB     r0,[r4,#0]
;;;404          break;
000038  e01d              B        |L86.118|
;;;405        case LSM6DSL_GY_ODR_26Hz:
;;;406          *val = LSM6DSL_GY_ODR_26Hz;
00003a  2002              MOVS     r0,#2
00003c  7020              STRB     r0,[r4,#0]
;;;407          break;
00003e  e01a              B        |L86.118|
;;;408        case LSM6DSL_GY_ODR_52Hz:
;;;409          *val = LSM6DSL_GY_ODR_52Hz;
000040  2003              MOVS     r0,#3
000042  7020              STRB     r0,[r4,#0]
;;;410          break;
000044  e017              B        |L86.118|
;;;411        case LSM6DSL_GY_ODR_104Hz:
;;;412          *val = LSM6DSL_GY_ODR_104Hz;
000046  2004              MOVS     r0,#4
000048  7020              STRB     r0,[r4,#0]
;;;413          break;
00004a  e014              B        |L86.118|
;;;414        case LSM6DSL_GY_ODR_208Hz:
;;;415          *val = LSM6DSL_GY_ODR_208Hz;
00004c  2005              MOVS     r0,#5
00004e  7020              STRB     r0,[r4,#0]
;;;416          break;
000050  e011              B        |L86.118|
;;;417        case LSM6DSL_GY_ODR_416Hz:
;;;418          *val = LSM6DSL_GY_ODR_416Hz;
000052  2006              MOVS     r0,#6
000054  7020              STRB     r0,[r4,#0]
;;;419          break;
000056  e00e              B        |L86.118|
;;;420        case LSM6DSL_GY_ODR_833Hz:
;;;421          *val = LSM6DSL_GY_ODR_833Hz;
000058  2007              MOVS     r0,#7
00005a  7020              STRB     r0,[r4,#0]
;;;422          break;
00005c  e00b              B        |L86.118|
;;;423        case LSM6DSL_GY_ODR_1k66Hz:
;;;424          *val = LSM6DSL_GY_ODR_1k66Hz;
00005e  2008              MOVS     r0,#8
000060  7020              STRB     r0,[r4,#0]
;;;425          break;
000062  e008              B        |L86.118|
;;;426        case LSM6DSL_GY_ODR_3k33Hz:
;;;427          *val = LSM6DSL_GY_ODR_3k33Hz;
000064  2009              MOVS     r0,#9
000066  7020              STRB     r0,[r4,#0]
;;;428          break;
000068  e005              B        |L86.118|
;;;429        case LSM6DSL_GY_ODR_6k66Hz:
;;;430          *val = LSM6DSL_GY_ODR_6k66Hz;
00006a  200a              MOVS     r0,#0xa
00006c  7020              STRB     r0,[r4,#0]
;;;431          break;
00006e  e002              B        |L86.118|
                  |L86.112|
;;;432        default:
;;;433          *val = LSM6DSL_GY_ODR_ND;
000070  200b              MOVS     r0,#0xb
000072  7020              STRB     r0,[r4,#0]
;;;434          break;
000074  bf00              NOP      
                  |L86.118|
000076  bf00              NOP                            ;401
;;;435      }
;;;436    
;;;437      return ret;
000078  4630              MOV      r0,r6
;;;438    }
00007a  bdf8              POP      {r3-r7,pc}
;;;439    
                          ENDP


                          AREA ||i.lsm6dsl_gy_data_rate_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_data_rate_set PROC
;;;370      */
;;;371    int32_t lsm6dsl_gy_data_rate_set(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_g_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;372    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;373      lsm6dsl_ctrl2_g_t ctrl2_g;
;;;374      int32_t ret;
;;;375    
;;;376      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;377      if(ret == 0){
000014  b95d              CBNZ     r5,|L87.46|
;;;378        ctrl2_g.odr_g = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641007          BFI      r0,r4,#4,#4
00001e  9000              STR      r0,[sp,#0]
;;;379        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2111              MOVS     r1,#0x11
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L87.46|
;;;380      }
;;;381      return ret;
00002e  4628              MOV      r0,r5
;;;382    }
000030  bdf8              POP      {r3-r7,pc}
;;;383    
                          ENDP


                          AREA ||i.lsm6dsl_gy_flag_data_ready_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_flag_data_ready_get PROC
;;;786      */
;;;787    int32_t lsm6dsl_gy_flag_data_ready_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;788    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;789      lsm6dsl_status_reg_t status_reg;
;;;790      int32_t ret;
;;;791    
;;;792      ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*)&status_reg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211e              MOVS     r1,#0x1e
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;793      *val = status_reg.gda;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00040          UBFX     r0,r0,#1,#1
00001c  7020              STRB     r0,[r4,#0]
;;;794    
;;;795      return ret;
00001e  4630              MOV      r0,r6
;;;796    }
000020  bdf8              POP      {r3-r7,pc}
;;;797    
                          ENDP


                          AREA ||i.lsm6dsl_gy_full_scale_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_full_scale_get PROC
;;;332      */
;;;333    int32_t lsm6dsl_gy_full_scale_get(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_g_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;334    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;335      lsm6dsl_ctrl2_g_t ctrl2_g;
;;;336      int32_t ret;
;;;337    
;;;338      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;339      switch (ctrl2_g.fs_g) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00042          UBFX     r0,r0,#1,#3
00001c  2807              CMP      r0,#7
00001e  d214              BCS      |L89.74|
000020  e8dff000          TBB      [pc,r0]
000024  04070a13          DCB      0x04,0x07,0x0a,0x13
000028  0d131000          DCB      0x0d,0x13,0x10,0x00
;;;340        case LSM6DSL_250dps:
;;;341          *val = LSM6DSL_250dps;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;342          break;
000030  e00e              B        |L89.80|
;;;343        case LSM6DSL_125dps:
;;;344          *val = LSM6DSL_125dps;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;345          break;
000036  e00b              B        |L89.80|
;;;346        case LSM6DSL_500dps:
;;;347          *val = LSM6DSL_500dps;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;348          break;
00003c  e008              B        |L89.80|
;;;349        case LSM6DSL_1000dps:
;;;350          *val = LSM6DSL_1000dps;
00003e  2004              MOVS     r0,#4
000040  7020              STRB     r0,[r4,#0]
;;;351          break;
000042  e005              B        |L89.80|
;;;352        case LSM6DSL_2000dps:
;;;353          *val = LSM6DSL_2000dps;
000044  2006              MOVS     r0,#6
000046  7020              STRB     r0,[r4,#0]
;;;354          break;
000048  e002              B        |L89.80|
                  |L89.74|
;;;355        default:
;;;356          *val = LSM6DSL_GY_FS_ND;
00004a  2007              MOVS     r0,#7
00004c  7020              STRB     r0,[r4,#0]
;;;357          break;
00004e  bf00              NOP      
                  |L89.80|
000050  bf00              NOP                            ;342
;;;358      }
;;;359    
;;;360      return ret;
000052  4630              MOV      r0,r6
;;;361    }
000054  bdf8              POP      {r3-r7,pc}
;;;362    
                          ENDP


                          AREA ||i.lsm6dsl_gy_full_scale_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_full_scale_set PROC
;;;311      */
;;;312    int32_t lsm6dsl_gy_full_scale_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_g_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;313    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;314      lsm6dsl_ctrl2_g_t ctrl2_g;
;;;315      int32_t ret;
;;;316    
;;;317      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2111              MOVS     r1,#0x11
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;318      if(ret == 0){
000014  b95d              CBNZ     r5,|L90.46|
;;;319        ctrl2_g.fs_g = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640043          BFI      r0,r4,#1,#3
00001e  9000              STR      r0,[sp,#0]
;;;320        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL2_G, (uint8_t*)&ctrl2_g, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2111              MOVS     r1,#0x11
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L90.46|
;;;321      }
;;;322      return ret;
00002e  4628              MOV      r0,r5
;;;323    }
000030  bdf8              POP      {r3-r7,pc}
;;;324    
                          ENDP


                          AREA ||i.lsm6dsl_gy_power_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_power_mode_get PROC
;;;670      */
;;;671    int32_t lsm6dsl_gy_power_mode_get(lsm6dsl_ctx_t *ctx, lsm6dsl_g_hm_mode_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;672    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;673      lsm6dsl_ctrl7_g_t ctrl7_g;
;;;674      int32_t ret;
;;;675    
;;;676      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2116              MOVS     r1,#0x16
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;677      switch (ctrl7_g.g_hm_mode) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  b110              CBZ      r0,|L91.34|
00001c  2801              CMP      r0,#1
00001e  d106              BNE      |L91.46|
000020  e002              B        |L91.40|
                  |L91.34|
;;;678        case LSM6DSL_GY_HIGH_PERFORMANCE:
;;;679          *val = LSM6DSL_GY_HIGH_PERFORMANCE;
000022  2000              MOVS     r0,#0
000024  7020              STRB     r0,[r4,#0]
;;;680          break;
000026  e005              B        |L91.52|
                  |L91.40|
;;;681        case LSM6DSL_GY_NORMAL:
;;;682          *val = LSM6DSL_GY_NORMAL;
000028  2001              MOVS     r0,#1
00002a  7020              STRB     r0,[r4,#0]
;;;683          break;
00002c  e002              B        |L91.52|
                  |L91.46|
;;;684        default:
;;;685          *val = LSM6DSL_GY_PW_MODE_ND;
00002e  2002              MOVS     r0,#2
000030  7020              STRB     r0,[r4,#0]
;;;686          break;
000032  bf00              NOP      
                  |L91.52|
000034  bf00              NOP                            ;680
;;;687      }
;;;688    
;;;689      return ret;
000036  4630              MOV      r0,r6
;;;690    }
000038  bdf8              POP      {r3-r7,pc}
;;;691    
                          ENDP


                          AREA ||i.lsm6dsl_gy_power_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_power_mode_set PROC
;;;649      */
;;;650    int32_t lsm6dsl_gy_power_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_g_hm_mode_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;651    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;652      lsm6dsl_ctrl7_g_t ctrl7_g;
;;;653      int32_t ret;
;;;654    
;;;655      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2116              MOVS     r1,#0x16
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;656      if(ret == 0){
000014  b95d              CBNZ     r5,|L92.46|
;;;657        ctrl7_g.g_hm_mode = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;658        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2116              MOVS     r1,#0x16
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L92.46|
;;;659      }
;;;660      return ret;
00002e  4628              MOV      r0,r5
;;;661    }
000030  bdf8              POP      {r3-r7,pc}
;;;662    
                          ENDP


                          AREA ||i.lsm6dsl_gy_self_test_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_self_test_get PROC
;;;1522     */
;;;1523   int32_t lsm6dsl_gy_self_test_get(lsm6dsl_ctx_t *ctx, lsm6dsl_st_g_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1524   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1525     lsm6dsl_ctrl5_c_t ctrl5_c;
;;;1526     int32_t ret;
;;;1527   
;;;1528     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1529     switch (ctrl5_c.st_g) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00081          UBFX     r0,r0,#2,#2
00001c  b120              CBZ      r0,|L93.40|
00001e  2801              CMP      r0,#1
000020  d005              BEQ      |L93.46|
000022  2803              CMP      r0,#3
000024  d109              BNE      |L93.58|
000026  e005              B        |L93.52|
                  |L93.40|
;;;1530       case LSM6DSL_GY_ST_DISABLE:
;;;1531         *val = LSM6DSL_GY_ST_DISABLE;
000028  2000              MOVS     r0,#0
00002a  7020              STRB     r0,[r4,#0]
;;;1532         break;
00002c  e008              B        |L93.64|
                  |L93.46|
;;;1533       case LSM6DSL_GY_ST_POSITIVE:
;;;1534         *val = LSM6DSL_GY_ST_POSITIVE;
00002e  2001              MOVS     r0,#1
000030  7020              STRB     r0,[r4,#0]
;;;1535         break;
000032  e005              B        |L93.64|
                  |L93.52|
;;;1536       case LSM6DSL_GY_ST_NEGATIVE:
;;;1537         *val = LSM6DSL_GY_ST_NEGATIVE;
000034  2003              MOVS     r0,#3
000036  7020              STRB     r0,[r4,#0]
;;;1538         break;
000038  e002              B        |L93.64|
                  |L93.58|
;;;1539       default:
;;;1540         *val = LSM6DSL_GY_ST_ND;
00003a  2004              MOVS     r0,#4
00003c  7020              STRB     r0,[r4,#0]
;;;1541         break;
00003e  bf00              NOP      
                  |L93.64|
000040  bf00              NOP                            ;1532
;;;1542     }
;;;1543   
;;;1544     return ret;
000042  4630              MOV      r0,r6
;;;1545   }
000044  bdf8              POP      {r3-r7,pc}
;;;1546   
                          ENDP


                          AREA ||i.lsm6dsl_gy_self_test_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_self_test_set PROC
;;;1501     */
;;;1502   int32_t lsm6dsl_gy_self_test_set(lsm6dsl_ctx_t *ctx, lsm6dsl_st_g_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1503   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1504     lsm6dsl_ctrl5_c_t ctrl5_c;
;;;1505     int32_t ret;
;;;1506   
;;;1507     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1508     if(ret == 0){
000014  b95d              CBNZ     r5,|L94.46|
;;;1509       ctrl5_c.st_g = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640083          BFI      r0,r4,#2,#2
00001e  9000              STR      r0,[sp,#0]
;;;1510       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2114              MOVS     r1,#0x14
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L94.46|
;;;1511     }
;;;1512     return ret;
00002e  4628              MOV      r0,r5
;;;1513   }
000030  bdf8              POP      {r3-r7,pc}
;;;1514   
                          ENDP


                          AREA ||i.lsm6dsl_gy_sleep_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_sleep_mode_get PROC
;;;2838     */
;;;2839   int32_t lsm6dsl_gy_sleep_mode_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2840   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2841     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;2842     int32_t ret;
;;;2843   
;;;2844     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2113              MOVS     r1,#0x13
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2845     *val = ctrl4_c.sleep;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01080          UBFX     r0,r0,#6,#1
00001c  7020              STRB     r0,[r4,#0]
;;;2846   
;;;2847     return ret;
00001e  4630              MOV      r0,r6
;;;2848   }
000020  bdf8              POP      {r3-r7,pc}
;;;2849   
                          ENDP


                          AREA ||i.lsm6dsl_gy_sleep_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_gy_sleep_mode_set PROC
;;;2817     */
;;;2818   int32_t lsm6dsl_gy_sleep_mode_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2819   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2820     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;2821     int32_t ret;
;;;2822   
;;;2823     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2113              MOVS     r1,#0x13
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2824     if(ret == 0){
000014  b95d              CBNZ     r5,|L96.46|
;;;2825       ctrl4_c.sleep = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641086          BFI      r0,r4,#6,#1
00001e  9000              STR      r0,[sp,#0]
;;;2826       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2113              MOVS     r1,#0x13
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L96.46|
;;;2827     }
;;;2828     return ret;
00002e  4628              MOV      r0,r5
;;;2829   }
000030  bdf8              POP      {r3-r7,pc}
;;;2830   
                          ENDP


                          AREA ||i.lsm6dsl_i2c_interface_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_i2c_interface_get PROC
;;;2202     */
;;;2203   int32_t lsm6dsl_i2c_interface_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2204                                     lsm6dsl_i2c_disable_t *val)
;;;2205   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2206     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;2207     int32_t ret;
;;;2208   
;;;2209     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2113              MOVS     r1,#0x13
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2210     switch (ctrl4_c.i2c_disable) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  b110              CBZ      r0,|L97.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L97.48|
000022  e002              B        |L97.42|
                  |L97.36|
;;;2211       case LSM6DSL_I2C_ENABLE:
;;;2212         *val = LSM6DSL_I2C_ENABLE;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;2213         break;
000028  e005              B        |L97.54|
                  |L97.42|
;;;2214       case LSM6DSL_I2C_DISABLE:
;;;2215         *val = LSM6DSL_I2C_DISABLE;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;2216         break;
00002e  e002              B        |L97.54|
                  |L97.48|
;;;2217       default:
;;;2218         *val = LSM6DSL_I2C_MODE_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;2219         break;
000034  bf00              NOP      
                  |L97.54|
000036  bf00              NOP                            ;2213
;;;2220     }
;;;2221   
;;;2222     return ret;
000038  4630              MOV      r0,r6
;;;2223   }
00003a  bdf8              POP      {r3-r7,pc}
;;;2224   
                          ENDP


                          AREA ||i.lsm6dsl_i2c_interface_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_i2c_interface_set PROC
;;;2180     */
;;;2181   int32_t lsm6dsl_i2c_interface_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;2182                                     lsm6dsl_i2c_disable_t val)
;;;2183   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2184     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;2185     int32_t ret;
;;;2186   
;;;2187     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2113              MOVS     r1,#0x13
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2188     if(ret == 0){
000014  b95d              CBNZ     r5,|L98.46|
;;;2189       ctrl4_c.i2c_disable = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640082          BFI      r0,r4,#2,#1
00001e  9000              STR      r0,[sp,#0]
;;;2190       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2113              MOVS     r1,#0x13
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L98.46|
;;;2191     }
;;;2192     return ret;
00002e  4628              MOV      r0,r5
;;;2193   }
000030  bdf8              POP      {r3-r7,pc}
;;;2194   
                          ENDP


                          AREA ||i.lsm6dsl_int_notification_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_int_notification_get PROC
;;;2680     */
;;;2681   int32_t lsm6dsl_int_notification_get(lsm6dsl_ctx_t *ctx, lsm6dsl_lir_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2682   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2683     lsm6dsl_tap_cfg_t tap_cfg;
;;;2684     int32_t ret;
;;;2685   
;;;2686     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2687     switch (tap_cfg.lir) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  b110              CBZ      r0,|L99.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L99.48|
000022  e002              B        |L99.42|
                  |L99.36|
;;;2688       case LSM6DSL_INT_PULSED:
;;;2689         *val = LSM6DSL_INT_PULSED;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;2690         break;
000028  e005              B        |L99.54|
                  |L99.42|
;;;2691       case LSM6DSL_INT_LATCHED:
;;;2692         *val = LSM6DSL_INT_LATCHED;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;2693         break;
00002e  e002              B        |L99.54|
                  |L99.48|
;;;2694       default:
;;;2695         *val = LSM6DSL_INT_MODE;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;2696         break;
000034  bf00              NOP      
                  |L99.54|
000036  bf00              NOP                            ;2690
;;;2697     }
;;;2698   
;;;2699     return ret;
000038  4630              MOV      r0,r6
;;;2700   }
00003a  bdf8              POP      {r3-r7,pc}
;;;2701   
                          ENDP


                          AREA ||i.lsm6dsl_int_notification_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_int_notification_set PROC
;;;2659     */
;;;2660   int32_t lsm6dsl_int_notification_set(lsm6dsl_ctx_t *ctx, lsm6dsl_lir_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2661   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2662     lsm6dsl_tap_cfg_t tap_cfg;
;;;2663     int32_t ret;
;;;2664   
;;;2665     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2666     if(ret == 0){
000014  b95d              CBNZ     r5,|L100.46|
;;;2667       tap_cfg.lir = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;2668       ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2158              MOVS     r1,#0x58
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L100.46|
;;;2669     }
;;;2670     return ret;
00002e  4628              MOV      r0,r5
;;;2671   }
000030  bdf8              POP      {r3-r7,pc}
;;;2672   
                          ENDP


                          AREA ||i.lsm6dsl_mag_calibrated_raw_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_mag_calibrated_raw_get PROC
;;;1107     */
;;;1108   int32_t lsm6dsl_mag_calibrated_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;1109   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1110     int32_t ret;
;;;1111     ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUT_MAG_RAW_X_L, buff, 6);
000006  2306              MOVS     r3,#6
000008  4622              MOV      r2,r4
00000a  2166              MOVS     r1,#0x66
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1112     return ret;
000014  4630              MOV      r0,r6
;;;1113   }
000016  bd70              POP      {r4-r6,pc}
;;;1114   
                          ENDP


                          AREA ||i.lsm6dsl_mag_hard_iron_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_mag_hard_iron_get PROC
;;;5566     */
;;;5567   int32_t lsm6dsl_mag_hard_iron_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5568   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;5569     lsm6dsl_master_config_t master_config;
;;;5570     int32_t ret;
;;;5571   
;;;5572     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;5573                            (uint8_t*)&master_config, 1);
;;;5574     *val = master_config.iron_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00040          UBFX     r0,r0,#1,#1
00001c  7020              STRB     r0,[r4,#0]
;;;5575   
;;;5576     return ret;
00001e  4630              MOV      r0,r6
;;;5577   }
000020  bdf8              POP      {r3-r7,pc}
;;;5578   
                          ENDP


                          AREA ||i.lsm6dsl_mag_hard_iron_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_mag_hard_iron_set PROC
;;;5532     */
;;;5533   int32_t lsm6dsl_mag_hard_iron_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b57c              PUSH     {r2-r6,lr}
;;;5534   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5535     lsm6dsl_master_config_t master_config;
;;;5536     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;5537     int32_t ret;
;;;5538   
;;;5539     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  aa01              ADD      r2,sp,#4
00000a  211a              MOVS     r1,#0x1a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5540                            (uint8_t*)&master_config, 1);
;;;5541     if(ret == 0){
000014  bb0d              CBNZ     r5,|L103.90|
;;;5542       master_config.iron_en = val;
000016  f89d0004          LDRB     r0,[sp,#4]
00001a  f3640041          BFI      r0,r4,#1,#1
00001e  9001              STR      r0,[sp,#4]
;;;5543       ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
000020  2301              MOVS     r3,#1
000022  aa01              ADD      r2,sp,#4
000024  211a              MOVS     r1,#0x1a
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
;;;5544                               (uint8_t*)&master_config, 1);
;;;5545       if(ret == 0){
00002e  b9a5              CBNZ     r5,|L103.90|
;;;5546         ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000030  2301              MOVS     r3,#1
000032  466a              MOV      r2,sp
000034  2119              MOVS     r1,#0x19
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       lsm6dsl_read_reg
00003c  4605              MOV      r5,r0
;;;5547         if(ret == 0){
00003e  b965              CBNZ     r5,|L103.90|
;;;5548           if (val != 0x00U) {
000040  b124              CBZ      r4,|L103.76|
;;;5549             ctrl10_c.func_en = val;
000042  f89d0000          LDRB     r0,[sp,#0]
000046  f3640082          BFI      r0,r4,#2,#1
00004a  9000              STR      r0,[sp,#0]
                  |L103.76|
;;;5550           }
;;;5551           ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C,
00004c  2301              MOVS     r3,#1
00004e  466a              MOV      r2,sp
000050  2119              MOVS     r1,#0x19
000052  4630              MOV      r0,r6
000054  f7fffffe          BL       lsm6dsl_write_reg
000058  4605              MOV      r5,r0
                  |L103.90|
;;;5552                                   (uint8_t*)&ctrl10_c, 1);
;;;5553         }
;;;5554       }
;;;5555     }
;;;5556     return ret;
00005a  4628              MOV      r0,r5
;;;5557   }
00005c  bd7c              POP      {r2-r6,pc}
;;;5558   
                          ENDP


                          AREA ||i.lsm6dsl_mag_offset_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_mag_offset_get PROC
;;;5656     */
;;;5657   int32_t lsm6dsl_mag_offset_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5658   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5659     int32_t ret;
;;;5660   
;;;5661     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5662     if(ret == 0){
000010  b964              CBNZ     r4,|L104.44|
;;;5663       ret = lsm6dsl_read_reg(ctx, LSM6DSL_MAG_OFFX_L, buff, 6);
000012  2306              MOVS     r3,#6
000014  462a              MOV      r2,r5
000016  212d              MOVS     r1,#0x2d
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;5664       if(ret == 0){
000020  b924              CBNZ     r4,|L104.44|
;;;5665         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L104.44|
;;;5666       }
;;;5667     }
;;;5668     return ret;
00002c  4620              MOV      r0,r4
;;;5669   }
00002e  bd70              POP      {r4-r6,pc}
;;;5670   
                          ENDP


                          AREA ||i.lsm6dsl_mag_offset_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_mag_offset_set PROC
;;;5633     */
;;;5634   int32_t lsm6dsl_mag_offset_set(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5635   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5636     int32_t ret;
;;;5637   
;;;5638     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5639     if(ret == 0){
000010  b964              CBNZ     r4,|L105.44|
;;;5640       ret = lsm6dsl_write_reg(ctx, LSM6DSL_MAG_OFFX_L, buff, 6);
000012  2306              MOVS     r3,#6
000014  462a              MOV      r2,r5
000016  212d              MOVS     r1,#0x2d
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_write_reg
00001e  4604              MOV      r4,r0
;;;5641       if(ret == 0){
000020  b924              CBNZ     r4,|L105.44|
;;;5642         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L105.44|
;;;5643       }
;;;5644     }
;;;5645     return ret;
00002c  4620              MOV      r0,r4
;;;5646   }
00002e  bd70              POP      {r4-r6,pc}
;;;5647   
                          ENDP


                          AREA ||i.lsm6dsl_mag_soft_iron_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_mag_soft_iron_get PROC
;;;5513     */
;;;5514   int32_t lsm6dsl_mag_soft_iron_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5515   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;5516     lsm6dsl_ctrl9_xl_t ctrl9_xl;
;;;5517     int32_t ret;
;;;5518   
;;;5519     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2118              MOVS     r1,#0x18
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;5520     *val = ctrl9_xl.soft_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  7020              STRB     r0,[r4,#0]
;;;5521   
;;;5522     return ret;
00001e  4630              MOV      r0,r6
;;;5523   }
000020  bdf8              POP      {r3-r7,pc}
;;;5524   
                          ENDP


                          AREA ||i.lsm6dsl_mag_soft_iron_mat_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_mag_soft_iron_mat_get PROC
;;;5610     */
;;;5611   int32_t lsm6dsl_mag_soft_iron_mat_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5612   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5613     int32_t ret;
;;;5614   
;;;5615     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5616     if(ret == 0){
000010  b964              CBNZ     r4,|L107.44|
;;;5617       ret = lsm6dsl_read_reg(ctx, LSM6DSL_MAG_SI_XX, buff, 9);
000012  2309              MOVS     r3,#9
000014  462a              MOV      r2,r5
000016  2124              MOVS     r1,#0x24
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;5618       if(ret == 0){
000020  b924              CBNZ     r4,|L107.44|
;;;5619         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L107.44|
;;;5620       }
;;;5621     }
;;;5622     return ret;
00002c  4620              MOV      r0,r4
;;;5623   }
00002e  bd70              POP      {r4-r6,pc}
;;;5624   
                          ENDP


                          AREA ||i.lsm6dsl_mag_soft_iron_mat_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_mag_soft_iron_mat_set PROC
;;;5587     */
;;;5588   int32_t lsm6dsl_mag_soft_iron_mat_set(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5589   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5590     int32_t ret;
;;;5591   
;;;5592     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5593     if(ret == 0){
000010  b964              CBNZ     r4,|L108.44|
;;;5594       ret = lsm6dsl_write_reg(ctx, LSM6DSL_MAG_SI_XX, buff, 9);
000012  2309              MOVS     r3,#9
000014  462a              MOV      r2,r5
000016  2124              MOVS     r1,#0x24
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_write_reg
00001e  4604              MOV      r4,r0
;;;5595       if(ret == 0){
000020  b924              CBNZ     r4,|L108.44|
;;;5596         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L108.44|
;;;5597       }
;;;5598     }
;;;5599     return ret;
00002c  4620              MOV      r0,r4
;;;5600   }
00002e  bd70              POP      {r4-r6,pc}
;;;5601   
                          ENDP


                          AREA ||i.lsm6dsl_mag_soft_iron_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_mag_soft_iron_set PROC
;;;5492     */
;;;5493   int32_t lsm6dsl_mag_soft_iron_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5494   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5495     lsm6dsl_ctrl9_xl_t ctrl9_xl;
;;;5496     int32_t ret;
;;;5497   
;;;5498     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2118              MOVS     r1,#0x18
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5499     if(ret == 0){
000014  b95d              CBNZ     r5,|L109.46|
;;;5500       ctrl9_xl.soft_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640082          BFI      r0,r4,#2,#1
00001e  9000              STR      r0,[sp,#0]
;;;5501       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL9_XL, (uint8_t*)&ctrl9_xl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2118              MOVS     r1,#0x18
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L109.46|
;;;5502     }
;;;5503     return ret;
00002e  4628              MOV      r0,r5
;;;5504   }
000030  bdf8              POP      {r3-r7,pc}
;;;5505   
                          ENDP


                          AREA ||i.lsm6dsl_mem_bank_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_mem_bank_get PROC
;;;1177     */
;;;1178   int32_t lsm6dsl_mem_bank_get(lsm6dsl_ctx_t *ctx, lsm6dsl_func_cfg_en_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1179   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1180     lsm6dsl_func_cfg_access_t func_cfg_access;
;;;1181     int32_t ret;
;;;1182   
;;;1183     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FUNC_CFG_ACCESS,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  4619              MOV      r1,r3
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1184                            (uint8_t*)&func_cfg_access, 1);
;;;1185     switch (func_cfg_access.func_cfg_en) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  0940              LSRS     r0,r0,#5
00001a  b110              CBZ      r0,|L110.34|
00001c  2805              CMP      r0,#5
00001e  d106              BNE      |L110.46|
000020  e002              B        |L110.40|
                  |L110.34|
;;;1186       case LSM6DSL_USER_BANK:
;;;1187         *val = LSM6DSL_USER_BANK;
000022  2000              MOVS     r0,#0
000024  7020              STRB     r0,[r4,#0]
;;;1188         break;
000026  e005              B        |L110.52|
                  |L110.40|
;;;1189       case LSM6DSL_BANK_B:
;;;1190         *val = LSM6DSL_BANK_B;
000028  2005              MOVS     r0,#5
00002a  7020              STRB     r0,[r4,#0]
;;;1191         break;
00002c  e002              B        |L110.52|
                  |L110.46|
;;;1192       default:
;;;1193         *val = LSM6DSL_BANK_ND;
00002e  2006              MOVS     r0,#6
000030  7020              STRB     r0,[r4,#0]
;;;1194         break;
000032  bf00              NOP      
                  |L110.52|
000034  bf00              NOP                            ;1188
;;;1195     }
;;;1196   
;;;1197     return ret;
000036  4630              MOV      r0,r6
;;;1198   }
000038  bdf8              POP      {r3-r7,pc}
;;;1199   
                          ENDP


                          AREA ||i.lsm6dsl_mem_bank_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_mem_bank_set PROC
;;;1152     */
;;;1153   int32_t lsm6dsl_mem_bank_set(lsm6dsl_ctx_t *ctx, lsm6dsl_func_cfg_en_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1154   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1155     lsm6dsl_func_cfg_access_t func_cfg_access;
;;;1156     int32_t ret;
;;;1157   
;;;1158     ret = lsm6dsl_read_reg(ctx, LSM6DSL_FUNC_CFG_ACCESS,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  4619              MOV      r1,r3
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1159                            (uint8_t*)&func_cfg_access, 1);
;;;1160     if(ret == 0){
000014  b95d              CBNZ     r5,|L111.46|
;;;1161       func_cfg_access.func_cfg_en = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641047          BFI      r0,r4,#5,#3
00001e  9000              STR      r0,[sp,#0]
;;;1162       ret = lsm6dsl_write_reg(ctx, LSM6DSL_FUNC_CFG_ACCESS,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  4619              MOV      r1,r3
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L111.46|
;;;1163                               (uint8_t*)&func_cfg_access, 1);
;;;1164     }
;;;1165   
;;;1166     return ret;
00002e  4628              MOV      r0,r5
;;;1167   }
000030  bdf8              POP      {r3-r7,pc}
;;;1168   
                          ENDP


                          AREA ||i.lsm6dsl_motion_sens_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_motion_sens_get PROC
;;;5172     */
;;;5173   int32_t lsm6dsl_motion_sens_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5174   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;5175     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;5176     int32_t ret;
;;;5177   
;;;5178     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;5179     *val = ctrl10_c.sign_motion_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  7020              STRB     r0,[r4,#0]
;;;5180   
;;;5181     return ret;
00001e  4630              MOV      r0,r6
;;;5182   }
000020  bdf8              POP      {r3-r7,pc}
;;;5183   
                          ENDP


                          AREA ||i.lsm6dsl_motion_sens_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_motion_sens_set PROC
;;;5148     */
;;;5149   int32_t lsm6dsl_motion_sens_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5150   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5151     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;5152     int32_t ret;
;;;5153   
;;;5154     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5155     if(ret == 0){
000014  b98d              CBNZ     r5,|L113.58|
;;;5156       ctrl10_c.sign_motion_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;5157       if (val != 0x00U) {
000020  b15c              CBZ      r4,|L113.58|
;;;5158         ctrl10_c.func_en = val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3640082          BFI      r0,r4,#2,#1
00002a  9000              STR      r0,[sp,#0]
;;;5159         ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  2119              MOVS     r1,#0x19
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4605              MOV      r5,r0
                  |L113.58|
;;;5160       }
;;;5161     }
;;;5162     return ret;
00003a  4628              MOV      r0,r5
;;;5163   }
00003c  bdf8              POP      {r3-r7,pc}
;;;5164   
                          ENDP


                          AREA ||i.lsm6dsl_motion_threshold_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_motion_threshold_get PROC
;;;5213     */
;;;5214   int32_t lsm6dsl_motion_threshold_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5215   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5216     int32_t ret;
;;;5217   
;;;5218     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5219     if(ret == 0){
000010  b964              CBNZ     r4,|L114.44|
;;;5220       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SM_THS, buff, 1);
000012  2301              MOVS     r3,#1
000014  462a              MOV      r2,r5
000016  2113              MOVS     r1,#0x13
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;5221       if(ret == 0){
000020  b924              CBNZ     r4,|L114.44|
;;;5222         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L114.44|
;;;5223       }
;;;5224     }
;;;5225     return ret;
00002c  4620              MOV      r0,r4
;;;5226   }
00002e  bd70              POP      {r4-r6,pc}
;;;5227   
                          ENDP


                          AREA ||i.lsm6dsl_motion_threshold_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_motion_threshold_set PROC
;;;5191     */
;;;5192   int32_t lsm6dsl_motion_threshold_set(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5193   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5194     int32_t ret;
;;;5195   
;;;5196     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5197     if(ret == 0){
000010  b964              CBNZ     r4,|L115.44|
;;;5198       ret = lsm6dsl_write_reg(ctx, LSM6DSL_SM_THS, buff, 1);
000012  2301              MOVS     r3,#1
000014  462a              MOV      r2,r5
000016  2113              MOVS     r1,#0x13
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_write_reg
00001e  4604              MOV      r4,r0
;;;5199       if(ret == 0){
000020  b924              CBNZ     r4,|L115.44|
;;;5200         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L115.44|
;;;5201       }
;;;5202     }
;;;5203     return ret;
00002c  4620              MOV      r0,r4
;;;5204   }
00002e  bd70              POP      {r4-r6,pc}
;;;5205   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_debounce_steps_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_debounce_steps_get PROC
;;;5007     */
;;;5008   int32_t lsm6dsl_pedo_debounce_steps_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5009   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5010     lsm6dsl_pedo_deb_reg_t pedo_deb_reg;
;;;5011     int32_t ret;
;;;5012   
;;;5013     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5014     if(ret == 0){
000010  b98c              CBNZ     r4,|L116.54|
;;;5015       ret = lsm6dsl_read_reg(ctx, LSM6DSL_PEDO_DEB_REG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2114              MOVS     r1,#0x14
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;5016                              (uint8_t*)&pedo_deb_reg, 1);
;;;5017         if(ret == 0){
000020  b94c              CBNZ     r4,|L116.54|
;;;5018           *val = pedo_deb_reg.deb_step;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f0000007          AND      r0,r0,#7
00002a  7028              STRB     r0,[r5,#0]
;;;5019           ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00002c  2100              MOVS     r1,#0
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       lsm6dsl_mem_bank_set
000034  4604              MOV      r4,r0
                  |L116.54|
;;;5020         }
;;;5021       }
;;;5022   
;;;5023     return ret;
000036  4620              MOV      r0,r4
;;;5024   }
000038  bdf8              POP      {r3-r7,pc}
;;;5025   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_debounce_steps_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_debounce_steps_set PROC
;;;4978     */
;;;4979   int32_t lsm6dsl_pedo_debounce_steps_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4980   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;4981     lsm6dsl_pedo_deb_reg_t pedo_deb_reg;
;;;4982     int32_t ret;
;;;4983   
;;;4984     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;4985     if(ret == 0){
000010  b9cc              CBNZ     r4,|L117.70|
;;;4986       ret = lsm6dsl_read_reg(ctx, LSM6DSL_PEDO_DEB_REG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2114              MOVS     r1,#0x14
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;4987                              (uint8_t*)&pedo_deb_reg, 1);
;;;4988       if(ret == 0){
000020  b98c              CBNZ     r4,|L117.70|
;;;4989         pedo_deb_reg.deb_step = val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3650002          BFI      r0,r5,#0,#3
00002a  9000              STR      r0,[sp,#0]
;;;4990         ret = lsm6dsl_write_reg(ctx, LSM6DSL_PEDO_DEB_REG,
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  2114              MOVS     r1,#0x14
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4604              MOV      r4,r0
;;;4991                                 (uint8_t*)&pedo_deb_reg, 1);
;;;4992           if(ret == 0){
00003a  b924              CBNZ     r4,|L117.70|
;;;4993             ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00003c  2100              MOVS     r1,#0
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       lsm6dsl_mem_bank_set
000044  4604              MOV      r4,r0
                  |L117.70|
;;;4994           }
;;;4995         }
;;;4996       }
;;;4997     return ret;
000046  4620              MOV      r0,r4
;;;4998   }
000048  bdf8              POP      {r3-r7,pc}
;;;4999   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_full_scale_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_full_scale_get PROC
;;;4943     */
;;;4944   int32_t lsm6dsl_pedo_full_scale_get(lsm6dsl_ctx_t *ctx, lsm6dsl_pedo_fs_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4945   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4946     lsm6dsl_config_pedo_ths_min_t config_pedo_ths_min;
;;;4947     int32_t ret;
;;;4948   
;;;4949     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4605              MOV      r5,r0
;;;4950     if(ret == 0){
000010  b9ed              CBNZ     r5,|L118.78|
;;;4951       ret = lsm6dsl_read_reg(ctx, LSM6DSL_CONFIG_PEDO_THS_MIN,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  210f              MOVS     r1,#0xf
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4605              MOV      r5,r0
;;;4952                              (uint8_t*)&config_pedo_ths_min, 1);
;;;4953       if(ret == 0){
000020  b9ad              CBNZ     r5,|L118.78|
;;;4954         switch (config_pedo_ths_min.pedo_fs) {
000022  f89d0000          LDRB     r0,[sp,#0]
000026  09c0              LSRS     r0,r0,#7
000028  b110              CBZ      r0,|L118.48|
00002a  2801              CMP      r0,#1
00002c  d106              BNE      |L118.60|
00002e  e002              B        |L118.54|
                  |L118.48|
;;;4955            case LSM6DSL_PEDO_AT_2g:
;;;4956             *val = LSM6DSL_PEDO_AT_2g;
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
;;;4957             break;
000034  e005              B        |L118.66|
                  |L118.54|
;;;4958           case LSM6DSL_PEDO_AT_4g:
;;;4959             *val = LSM6DSL_PEDO_AT_4g;
000036  2001              MOVS     r0,#1
000038  7020              STRB     r0,[r4,#0]
;;;4960             break;
00003a  e002              B        |L118.66|
                  |L118.60|
;;;4961           default:
;;;4962             *val = LSM6DSL_PEDO_FS_ND;
00003c  2002              MOVS     r0,#2
00003e  7020              STRB     r0,[r4,#0]
;;;4963             break;
000040  bf00              NOP      
                  |L118.66|
000042  bf00              NOP                            ;4957
;;;4964         }
;;;4965         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000044  2100              MOVS     r1,#0
000046  4630              MOV      r0,r6
000048  f7fffffe          BL       lsm6dsl_mem_bank_set
00004c  4605              MOV      r5,r0
                  |L118.78|
;;;4966       }
;;;4967     }
;;;4968     return ret;
00004e  4628              MOV      r0,r5
;;;4969   }
000050  bdf8              POP      {r3-r7,pc}
;;;4970   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_full_scale_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_full_scale_set PROC
;;;4913     */
;;;4914   int32_t lsm6dsl_pedo_full_scale_set(lsm6dsl_ctx_t *ctx, lsm6dsl_pedo_fs_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4915   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;4916     lsm6dsl_config_pedo_ths_min_t config_pedo_ths_min;
;;;4917     int32_t ret;
;;;4918   
;;;4919     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;4920     if(ret == 0){
000010  b9cc              CBNZ     r4,|L119.70|
;;;4921       ret = lsm6dsl_read_reg(ctx, LSM6DSL_CONFIG_PEDO_THS_MIN,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  210f              MOVS     r1,#0xf
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;4922                              (uint8_t*)&config_pedo_ths_min, 1);
;;;4923       if(ret == 0){
000020  b98c              CBNZ     r4,|L119.70|
;;;4924          config_pedo_ths_min.pedo_fs = (uint8_t) val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f36510c7          BFI      r0,r5,#7,#1
00002a  9000              STR      r0,[sp,#0]
;;;4925         ret = lsm6dsl_write_reg(ctx, LSM6DSL_CONFIG_PEDO_THS_MIN,
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  210f              MOVS     r1,#0xf
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4604              MOV      r4,r0
;;;4926                                 (uint8_t*)&config_pedo_ths_min, 1);
;;;4927         if(ret == 0){
00003a  b924              CBNZ     r4,|L119.70|
;;;4928           ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00003c  2100              MOVS     r1,#0
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       lsm6dsl_mem_bank_set
000044  4604              MOV      r4,r0
                  |L119.70|
;;;4929         }
;;;4930       }
;;;4931     }
;;;4932     return ret;
000046  4620              MOV      r0,r4
;;;4933   }
000048  bdf8              POP      {r3-r7,pc}
;;;4934   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_sens_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_sens_get PROC
;;;4838     */
;;;4839   int32_t lsm6dsl_pedo_sens_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4840   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4841     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;4842     int32_t ret;
;;;4843   
;;;4844     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4845     *val = ctrl10_c.pedo_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  7020              STRB     r0,[r4,#0]
;;;4846   
;;;4847     return ret;
00001e  4630              MOV      r0,r6
;;;4848   }
000020  bdf8              POP      {r3-r7,pc}
;;;4849   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_sens_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_sens_set PROC
;;;4813     */
;;;4814   int32_t lsm6dsl_pedo_sens_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4815   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4816     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;4817     int32_t ret;
;;;4818   
;;;4819     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4820     if(ret == 0){
000014  b98d              CBNZ     r5,|L121.58|
;;;4821       ctrl10_c.pedo_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;4822       if (val != 0x00U) {
000020  b124              CBZ      r4,|L121.44|
;;;4823         ctrl10_c.func_en = val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3640082          BFI      r0,r4,#2,#1
00002a  9000              STR      r0,[sp,#0]
                  |L121.44|
;;;4824       }
;;;4825       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  2119              MOVS     r1,#0x19
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4605              MOV      r5,r0
                  |L121.58|
;;;4826     }
;;;4827   
;;;4828     return ret;
00003a  4628              MOV      r0,r5
;;;4829   }
00003c  bdf8              POP      {r3-r7,pc}
;;;4830   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_step_reset_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_step_reset_get PROC
;;;4794     */
;;;4795   int32_t lsm6dsl_pedo_step_reset_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4796   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;4797     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;4798     int32_t ret;
;;;4799   
;;;4800     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;4801     *val = ctrl10_c.pedo_rst_step;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00040          UBFX     r0,r0,#1,#1
00001c  7020              STRB     r0,[r4,#0]
;;;4802   
;;;4803     return ret;
00001e  4630              MOV      r0,r6
;;;4804   }
000020  bdf8              POP      {r3-r7,pc}
;;;4805   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_step_reset_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_step_reset_set PROC
;;;4773     */
;;;4774   int32_t lsm6dsl_pedo_step_reset_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4775   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;4776     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;4777     int32_t ret;
;;;4778   
;;;4779     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;4780     if(ret == 0){
000014  b95d              CBNZ     r5,|L123.46|
;;;4781       ctrl10_c.pedo_rst_step = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640041          BFI      r0,r4,#1,#1
00001e  9000              STR      r0,[sp,#0]
;;;4782       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2119              MOVS     r1,#0x19
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L123.46|
;;;4783     }
;;;4784     return ret;
00002e  4628              MOV      r0,r5
;;;4785   }
000030  bdf8              POP      {r3-r7,pc}
;;;4786   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_steps_period_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_steps_period_get PROC
;;;5113     */
;;;5114   int32_t lsm6dsl_pedo_steps_period_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5115   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5116     int32_t ret;
;;;5117   
;;;5118     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5119     if(ret == 0){
000010  b964              CBNZ     r4,|L124.44|
;;;5120       ret = lsm6dsl_read_reg(ctx, LSM6DSL_STEP_COUNT_DELTA, buff, 1);
000012  2301              MOVS     r3,#1
000014  462a              MOV      r2,r5
000016  2115              MOVS     r1,#0x15
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;5121       if(ret == 0){
000020  b924              CBNZ     r4,|L124.44|
;;;5122         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L124.44|
;;;5123       }
;;;5124     }
;;;5125     return ret;
00002c  4620              MOV      r0,r4
;;;5126   }
00002e  bd70              POP      {r4-r6,pc}
;;;5127   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_steps_period_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_steps_period_set PROC
;;;5091     */
;;;5092   int32_t lsm6dsl_pedo_steps_period_set(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5093   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5094     int32_t ret;
;;;5095   
;;;5096     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5097     if(ret == 0){
000010  b964              CBNZ     r4,|L125.44|
;;;5098       ret = lsm6dsl_write_reg(ctx, LSM6DSL_STEP_COUNT_DELTA, buff, 1);
000012  2301              MOVS     r3,#1
000014  462a              MOV      r2,r5
000016  2115              MOVS     r1,#0x15
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_write_reg
00001e  4604              MOV      r4,r0
;;;5099       if(ret == 0){
000020  b924              CBNZ     r4,|L125.44|
;;;5100         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L125.44|
;;;5101       }
;;;5102     }
;;;5103     return ret;
00002c  4620              MOV      r0,r4
;;;5104   }
00002e  bd70              POP      {r4-r6,pc}
;;;5105   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_threshold_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_threshold_get PROC
;;;4887     */
;;;4888   int32_t lsm6dsl_pedo_threshold_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4889   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;4890     lsm6dsl_config_pedo_ths_min_t config_pedo_ths_min;
;;;4891     int32_t ret;
;;;4892   
;;;4893       ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;4894       if(ret == 0){
000010  b98c              CBNZ     r4,|L126.54|
;;;4895         ret = lsm6dsl_read_reg(ctx, LSM6DSL_CONFIG_PEDO_THS_MIN,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  210f              MOVS     r1,#0xf
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;4896                                (uint8_t*)&config_pedo_ths_min, 1);
;;;4897         if(ret == 0){
000020  b94c              CBNZ     r4,|L126.54|
;;;4898           *val =  config_pedo_ths_min.ths_min;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f000001f          AND      r0,r0,#0x1f
00002a  7028              STRB     r0,[r5,#0]
;;;4899           ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00002c  2100              MOVS     r1,#0
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       lsm6dsl_mem_bank_set
000034  4604              MOV      r4,r0
                  |L126.54|
;;;4900         }
;;;4901       }
;;;4902     return ret;
000036  4620              MOV      r0,r4
;;;4903   }
000038  bdf8              POP      {r3-r7,pc}
;;;4904   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_threshold_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_threshold_set PROC
;;;4858     */
;;;4859   int32_t lsm6dsl_pedo_threshold_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;4860   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;4861     lsm6dsl_config_pedo_ths_min_t config_pedo_ths_min;
;;;4862     int32_t ret;
;;;4863   
;;;4864     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;4865     if(ret == 0){
000010  b9cc              CBNZ     r4,|L127.70|
;;;4866       ret = lsm6dsl_read_reg(ctx, LSM6DSL_CONFIG_PEDO_THS_MIN,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  210f              MOVS     r1,#0xf
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;4867                              (uint8_t*)&config_pedo_ths_min, 1);
;;;4868         if(ret == 0){
000020  b98c              CBNZ     r4,|L127.70|
;;;4869          config_pedo_ths_min.ths_min = val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3650004          BFI      r0,r5,#0,#5
00002a  9000              STR      r0,[sp,#0]
;;;4870         ret = lsm6dsl_write_reg(ctx, LSM6DSL_CONFIG_PEDO_THS_MIN,
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  210f              MOVS     r1,#0xf
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4604              MOV      r4,r0
;;;4871                                 (uint8_t*)&config_pedo_ths_min, 1);
;;;4872           if(ret == 0){
00003a  b924              CBNZ     r4,|L127.70|
;;;4873             ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00003c  2100              MOVS     r1,#0
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       lsm6dsl_mem_bank_set
000044  4604              MOV      r4,r0
                  |L127.70|
;;;4874           }
;;;4875         }
;;;4876       }
;;;4877     return ret;
000046  4620              MOV      r0,r4
;;;4878   }
000048  bdf8              POP      {r3-r7,pc}
;;;4879   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_timeout_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_timeout_get PROC
;;;5066     */
;;;5067   int32_t lsm6dsl_pedo_timeout_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5068   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5069     lsm6dsl_pedo_deb_reg_t pedo_deb_reg;
;;;5070     int32_t ret;
;;;5071   
;;;5072     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5073     if(ret == 0){
000010  b984              CBNZ     r4,|L128.52|
;;;5074       ret = lsm6dsl_read_reg(ctx, LSM6DSL_PEDO_DEB_REG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2114              MOVS     r1,#0x14
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;5075                              (uint8_t*)&pedo_deb_reg, 1);
;;;5076       if(ret == 0){
000020  b944              CBNZ     r4,|L128.52|
;;;5077         *val = pedo_deb_reg.deb_time;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  08c0              LSRS     r0,r0,#3
000028  7028              STRB     r0,[r5,#0]
;;;5078         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00002a  2100              MOVS     r1,#0
00002c  4630              MOV      r0,r6
00002e  f7fffffe          BL       lsm6dsl_mem_bank_set
000032  4604              MOV      r4,r0
                  |L128.52|
;;;5079       }
;;;5080     }
;;;5081     return ret;
000034  4620              MOV      r0,r4
;;;5082   }
000036  bdf8              POP      {r3-r7,pc}
;;;5083   
                          ENDP


                          AREA ||i.lsm6dsl_pedo_timeout_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pedo_timeout_set PROC
;;;5035     */
;;;5036   int32_t lsm6dsl_pedo_timeout_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5037   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5038     lsm6dsl_pedo_deb_reg_t pedo_deb_reg;
;;;5039     int32_t ret;
;;;5040   
;;;5041     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5042     if(ret == 0){
000010  b9cc              CBNZ     r4,|L129.70|
;;;5043       ret = lsm6dsl_read_reg(ctx, LSM6DSL_PEDO_DEB_REG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2114              MOVS     r1,#0x14
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;5044                              (uint8_t*)&pedo_deb_reg, 1);
;;;5045       if(ret == 0){
000020  b98c              CBNZ     r4,|L129.70|
;;;5046         pedo_deb_reg.deb_time = val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f36500c7          BFI      r0,r5,#3,#5
00002a  9000              STR      r0,[sp,#0]
;;;5047         ret = lsm6dsl_write_reg(ctx, LSM6DSL_PEDO_DEB_REG,
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  2114              MOVS     r1,#0x14
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4604              MOV      r4,r0
;;;5048                                 (uint8_t*)&pedo_deb_reg, 1);
;;;5049         if(ret == 0){
00003a  b924              CBNZ     r4,|L129.70|
;;;5050           ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00003c  2100              MOVS     r1,#0
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       lsm6dsl_mem_bank_set
000044  4604              MOV      r4,r0
                  |L129.70|
;;;5051         }
;;;5052       }
;;;5053     }
;;;5054     return ret;
000046  4620              MOV      r0,r4
;;;5055   }
000048  bdf8              POP      {r3-r7,pc}
;;;5056   
                          ENDP


                          AREA ||i.lsm6dsl_pin_int1_route_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pin_int1_route_get PROC
;;;2337     */
;;;2338   int32_t lsm6dsl_pin_int1_route_get(lsm6dsl_ctx_t *ctx,
000000  b57f              PUSH     {r0-r6,lr}
;;;2339                                      lsm6dsl_int1_route_t *val)
;;;2340   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2341     lsm6dsl_master_config_t master_config;
;;;2342     lsm6dsl_int1_ctrl_t int1_ctrl;
;;;2343     lsm6dsl_md1_cfg_t md1_cfg;
;;;2344     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;2345   
;;;2346     int32_t ret;
;;;2347   
;;;2348     ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
000006  2301              MOVS     r3,#1
000008  aa02              ADD      r2,sp,#8
00000a  210d              MOVS     r1,#0xd
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2349     if(ret == 0){
000014  2d00              CMP      r5,#0
000016  d17d              BNE      |L130.276|
;;;2350       val->int1_drdy_xl       = int1_ctrl.int1_drdy_xl;
000018  f89d0008          LDRB     r0,[sp,#8]
00001c  7821              LDRB     r1,[r4,#0]
00001e  f3600100          BFI      r1,r0,#0,#1
000022  7021              STRB     r1,[r4,#0]
;;;2351       val->int1_drdy_g        = int1_ctrl.int1_drdy_g;
000024  f89d0008          LDRB     r0,[sp,#8]
000028  0841              LSRS     r1,r0,#1
00002a  7820              LDRB     r0,[r4,#0]
00002c  f3610041          BFI      r0,r1,#1,#1
000030  7020              STRB     r0,[r4,#0]
;;;2352       val->int1_boot          = int1_ctrl.int1_boot;
000032  f89d0008          LDRB     r0,[sp,#8]
000036  0881              LSRS     r1,r0,#2
000038  7820              LDRB     r0,[r4,#0]
00003a  f3610082          BFI      r0,r1,#2,#1
00003e  7020              STRB     r0,[r4,#0]
;;;2353       val->int1_fth           = int1_ctrl.int1_fth;
000040  f89d0008          LDRB     r0,[sp,#8]
000044  08c1              LSRS     r1,r0,#3
000046  7820              LDRB     r0,[r4,#0]
000048  f36100c3          BFI      r0,r1,#3,#1
00004c  7020              STRB     r0,[r4,#0]
;;;2354       val->int1_fifo_ovr      = int1_ctrl.int1_fifo_ovr;
00004e  f89d0008          LDRB     r0,[sp,#8]
000052  0901              LSRS     r1,r0,#4
000054  7820              LDRB     r0,[r4,#0]
000056  f3611004          BFI      r0,r1,#4,#1
00005a  7020              STRB     r0,[r4,#0]
;;;2355       val->int1_full_flag     = int1_ctrl.int1_full_flag;
00005c  f89d0008          LDRB     r0,[sp,#8]
000060  0941              LSRS     r1,r0,#5
000062  7820              LDRB     r0,[r4,#0]
000064  f3611045          BFI      r0,r1,#5,#1
000068  7020              STRB     r0,[r4,#0]
;;;2356       val->int1_sign_mot      = int1_ctrl.int1_sign_mot;
00006a  f89d0008          LDRB     r0,[sp,#8]
00006e  0981              LSRS     r1,r0,#6
000070  7820              LDRB     r0,[r4,#0]
000072  f3611086          BFI      r0,r1,#6,#1
000076  7020              STRB     r0,[r4,#0]
;;;2357       val->int1_step_detector = int1_ctrl.int1_step_detector ;
000078  f89d0008          LDRB     r0,[sp,#8]
00007c  09c1              LSRS     r1,r0,#7
00007e  7820              LDRB     r0,[r4,#0]
000080  f36110c7          BFI      r0,r1,#7,#1
000084  7020              STRB     r0,[r4,#0]
;;;2358   
;;;2359       ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
000086  2301              MOVS     r3,#1
000088  aa01              ADD      r2,sp,#4
00008a  215e              MOVS     r1,#0x5e
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       lsm6dsl_read_reg
000092  4605              MOV      r5,r0
;;;2360       if(ret == 0){
000094  2d00              CMP      r5,#0
000096  d155              BNE      |L130.324|
;;;2361       val->int1_timer       = md1_cfg.int1_timer;
000098  f89d0004          LDRB     r0,[sp,#4]
00009c  7861              LDRB     r1,[r4,#1]
00009e  f3600100          BFI      r1,r0,#0,#1
0000a2  7061              STRB     r1,[r4,#1]
;;;2362       val->int1_tilt        = md1_cfg.int1_tilt;
0000a4  f89d0004          LDRB     r0,[sp,#4]
0000a8  0841              LSRS     r1,r0,#1
0000aa  7860              LDRB     r0,[r4,#1]
0000ac  f3610041          BFI      r0,r1,#1,#1
0000b0  7060              STRB     r0,[r4,#1]
;;;2363       val->int1_6d          = md1_cfg.int1_6d;
0000b2  f89d0004          LDRB     r0,[sp,#4]
0000b6  0881              LSRS     r1,r0,#2
0000b8  7860              LDRB     r0,[r4,#1]
0000ba  f3610082          BFI      r0,r1,#2,#1
0000be  7060              STRB     r0,[r4,#1]
;;;2364       val->int1_double_tap  = md1_cfg.int1_double_tap;
0000c0  f89d0004          LDRB     r0,[sp,#4]
0000c4  08c1              LSRS     r1,r0,#3
0000c6  7860              LDRB     r0,[r4,#1]
0000c8  f36100c3          BFI      r0,r1,#3,#1
0000cc  7060              STRB     r0,[r4,#1]
;;;2365       val->int1_ff          = md1_cfg.int1_ff;
0000ce  f89d0004          LDRB     r0,[sp,#4]
0000d2  0901              LSRS     r1,r0,#4
0000d4  7860              LDRB     r0,[r4,#1]
0000d6  f3611004          BFI      r0,r1,#4,#1
0000da  7060              STRB     r0,[r4,#1]
;;;2366       val->int1_wu          = md1_cfg.int1_wu;
0000dc  f89d0004          LDRB     r0,[sp,#4]
0000e0  0941              LSRS     r1,r0,#5
0000e2  7860              LDRB     r0,[r4,#1]
0000e4  f3611045          BFI      r0,r1,#5,#1
0000e8  7060              STRB     r0,[r4,#1]
;;;2367       val->int1_single_tap  = md1_cfg.int1_single_tap;
0000ea  f89d0004          LDRB     r0,[sp,#4]
0000ee  0981              LSRS     r1,r0,#6
0000f0  7860              LDRB     r0,[r4,#1]
0000f2  f3611086          BFI      r0,r1,#6,#1
0000f6  7060              STRB     r0,[r4,#1]
;;;2368       val->int1_inact_state = md1_cfg.int1_inact_state;
0000f8  f89d0004          LDRB     r0,[sp,#4]
0000fc  09c1              LSRS     r1,r0,#7
0000fe  7860              LDRB     r0,[r4,#1]
000100  f36110c7          BFI      r0,r1,#7,#1
000104  7060              STRB     r0,[r4,#1]
;;;2369   
;;;2370       ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000106  2301              MOVS     r3,#1
000108  466a              MOV      r2,sp
00010a  2113              MOVS     r1,#0x13
00010c  4630              MOV      r0,r6
00010e  f7fffffe          BL       lsm6dsl_read_reg
000112  e000              B        |L130.278|
                  |L130.276|
000114  e016              B        |L130.324|
                  |L130.278|
000116  4605              MOV      r5,r0
;;;2371         if(ret == 0){
000118  b9a5              CBNZ     r5,|L130.324|
;;;2372           val->den_drdy_int1 = ctrl4_c.den_drdy_int1;
00011a  f89d0000          LDRB     r0,[sp,#0]
00011e  0901              LSRS     r1,r0,#4
000120  78a0              LDRB     r0,[r4,#2]
000122  f3610000          BFI      r0,r1,#0,#1
000126  70a0              STRB     r0,[r4,#2]
;;;2373           ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000128  2301              MOVS     r3,#1
00012a  aa03              ADD      r2,sp,#0xc
00012c  211a              MOVS     r1,#0x1a
00012e  4630              MOV      r0,r6
000130  f7fffffe          BL       lsm6dsl_read_reg
000134  4605              MOV      r5,r0
;;;2374                                  (uint8_t*)&master_config, 1);
;;;2375           val->den_drdy_int1 = master_config.drdy_on_int1;
000136  f89d000c          LDRB     r0,[sp,#0xc]
00013a  09c1              LSRS     r1,r0,#7
00013c  78a0              LDRB     r0,[r4,#2]
00013e  f3610000          BFI      r0,r1,#0,#1
000142  70a0              STRB     r0,[r4,#2]
                  |L130.324|
;;;2376         }
;;;2377       }
;;;2378     }
;;;2379     return ret;
000144  4628              MOV      r0,r5
;;;2380   }
000146  b004              ADD      sp,sp,#0x10
000148  bd70              POP      {r4-r6,pc}
;;;2381   
                          ENDP


                          AREA ||i.lsm6dsl_pin_int1_route_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pin_int1_route_set PROC
;;;2246     */
;;;2247   int32_t lsm6dsl_pin_int1_route_set(lsm6dsl_ctx_t *ctx,
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2248                                      lsm6dsl_int1_route_t val)
;;;2249   {
000002  b087              SUB      sp,sp,#0x1c
000004  4605              MOV      r5,r0
;;;2250     lsm6dsl_master_config_t master_config;
;;;2251     lsm6dsl_int1_ctrl_t int1_ctrl;
;;;2252     lsm6dsl_md1_cfg_t md1_cfg;
;;;2253     lsm6dsl_md2_cfg_t md2_cfg;
;;;2254     lsm6dsl_ctrl4_c_t ctrl4_c;
;;;2255     lsm6dsl_tap_cfg_t tap_cfg;
;;;2256     int32_t ret;
;;;2257   
;;;2258     ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
000006  2301              MOVS     r3,#1
000008  aa05              ADD      r2,sp,#0x14
00000a  210d              MOVS     r1,#0xd
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4604              MOV      r4,r0
;;;2259     if(ret == 0){
000014  bbf4              CBNZ     r4,|L131.148|
;;;2260       int1_ctrl.int1_drdy_xl        = val.int1_drdy_xl;
000016  f89d0020          LDRB     r0,[sp,#0x20]
00001a  f89d1014          LDRB     r1,[sp,#0x14]
00001e  f3600100          BFI      r1,r0,#0,#1
000022  9105              STR      r1,[sp,#0x14]
;;;2261       int1_ctrl.int1_drdy_g         = val.int1_drdy_g;
000024  f89d0020          LDRB     r0,[sp,#0x20]
000028  0841              LSRS     r1,r0,#1
00002a  f89d0014          LDRB     r0,[sp,#0x14]
00002e  f3610041          BFI      r0,r1,#1,#1
000032  9005              STR      r0,[sp,#0x14]
;;;2262       int1_ctrl.int1_boot           = val.int1_boot;
000034  f89d0020          LDRB     r0,[sp,#0x20]
000038  0881              LSRS     r1,r0,#2
00003a  f89d0014          LDRB     r0,[sp,#0x14]
00003e  f3610082          BFI      r0,r1,#2,#1
000042  9005              STR      r0,[sp,#0x14]
;;;2263       int1_ctrl.int1_fth            = val.int1_fth;
000044  f89d0020          LDRB     r0,[sp,#0x20]
000048  08c1              LSRS     r1,r0,#3
00004a  f89d0014          LDRB     r0,[sp,#0x14]
00004e  f36100c3          BFI      r0,r1,#3,#1
000052  9005              STR      r0,[sp,#0x14]
;;;2264       int1_ctrl.int1_fifo_ovr       = val.int1_fifo_ovr;
000054  f89d0020          LDRB     r0,[sp,#0x20]
000058  0901              LSRS     r1,r0,#4
00005a  f89d0014          LDRB     r0,[sp,#0x14]
00005e  f3611004          BFI      r0,r1,#4,#1
000062  9005              STR      r0,[sp,#0x14]
;;;2265       int1_ctrl.int1_full_flag      = val.int1_full_flag;
000064  f89d0020          LDRB     r0,[sp,#0x20]
000068  0941              LSRS     r1,r0,#5
00006a  f89d0014          LDRB     r0,[sp,#0x14]
00006e  f3611045          BFI      r0,r1,#5,#1
000072  9005              STR      r0,[sp,#0x14]
;;;2266       int1_ctrl.int1_sign_mot       = val.int1_sign_mot;
000074  f89d0020          LDRB     r0,[sp,#0x20]
000078  0981              LSRS     r1,r0,#6
00007a  f89d0014          LDRB     r0,[sp,#0x14]
00007e  f3611086          BFI      r0,r1,#6,#1
000082  9005              STR      r0,[sp,#0x14]
;;;2267       int1_ctrl.int1_step_detector  = val.int1_step_detector;
000084  f89d0020          LDRB     r0,[sp,#0x20]
000088  09c1              LSRS     r1,r0,#7
00008a  f89d0014          LDRB     r0,[sp,#0x14]
00008e  f36110c7          BFI      r0,r1,#7,#1
000092  e000              B        |L131.150|
                  |L131.148|
000094  e007              B        |L131.166|
                  |L131.150|
000096  9005              STR      r0,[sp,#0x14]
;;;2268       ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT1_CTRL, (uint8_t*)&int1_ctrl, 1);
000098  2301              MOVS     r3,#1
00009a  aa05              ADD      r2,sp,#0x14
00009c  210d              MOVS     r1,#0xd
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       lsm6dsl_write_reg
0000a4  4604              MOV      r4,r0
                  |L131.166|
;;;2269     }
;;;2270     if(ret == 0){
0000a6  b934              CBNZ     r4,|L131.182|
;;;2271       ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
0000a8  2301              MOVS     r3,#1
0000aa  aa04              ADD      r2,sp,#0x10
0000ac  215e              MOVS     r1,#0x5e
0000ae  4628              MOV      r0,r5
0000b0  f7fffffe          BL       lsm6dsl_read_reg
0000b4  4604              MOV      r4,r0
                  |L131.182|
;;;2272     }
;;;2273     if(ret == 0){
0000b6  b934              CBNZ     r4,|L131.198|
;;;2274       ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
0000b8  2301              MOVS     r3,#1
0000ba  aa03              ADD      r2,sp,#0xc
0000bc  215f              MOVS     r1,#0x5f
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       lsm6dsl_read_reg
0000c4  4604              MOV      r4,r0
                  |L131.198|
;;;2275     }
;;;2276     if(ret == 0){
0000c6  bbe4              CBNZ     r4,|L131.322|
;;;2277           md1_cfg.int1_timer           = val.int1_timer;
0000c8  f89d0021          LDRB     r0,[sp,#0x21]
0000cc  f89d1010          LDRB     r1,[sp,#0x10]
0000d0  f3600100          BFI      r1,r0,#0,#1
0000d4  9104              STR      r1,[sp,#0x10]
;;;2278           md1_cfg.int1_tilt            = val.int1_tilt;
0000d6  f89d0021          LDRB     r0,[sp,#0x21]
0000da  0841              LSRS     r1,r0,#1
0000dc  f89d0010          LDRB     r0,[sp,#0x10]
0000e0  f3610041          BFI      r0,r1,#1,#1
0000e4  9004              STR      r0,[sp,#0x10]
;;;2279           md1_cfg.int1_6d              = val.int1_6d;
0000e6  f89d0021          LDRB     r0,[sp,#0x21]
0000ea  0881              LSRS     r1,r0,#2
0000ec  f89d0010          LDRB     r0,[sp,#0x10]
0000f0  f3610082          BFI      r0,r1,#2,#1
0000f4  9004              STR      r0,[sp,#0x10]
;;;2280           md1_cfg.int1_double_tap      = val.int1_double_tap;
0000f6  f89d0021          LDRB     r0,[sp,#0x21]
0000fa  08c1              LSRS     r1,r0,#3
0000fc  f89d0010          LDRB     r0,[sp,#0x10]
000100  f36100c3          BFI      r0,r1,#3,#1
000104  9004              STR      r0,[sp,#0x10]
;;;2281           md1_cfg.int1_ff              = val.int1_ff;
000106  f89d0021          LDRB     r0,[sp,#0x21]
00010a  0901              LSRS     r1,r0,#4
00010c  f89d0010          LDRB     r0,[sp,#0x10]
000110  f3611004          BFI      r0,r1,#4,#1
000114  9004              STR      r0,[sp,#0x10]
;;;2282           md1_cfg.int1_wu              = val.int1_wu;
000116  f89d0021          LDRB     r0,[sp,#0x21]
00011a  0941              LSRS     r1,r0,#5
00011c  f89d0010          LDRB     r0,[sp,#0x10]
000120  f3611045          BFI      r0,r1,#5,#1
000124  9004              STR      r0,[sp,#0x10]
;;;2283           md1_cfg.int1_single_tap      = val.int1_single_tap;
000126  f89d0021          LDRB     r0,[sp,#0x21]
00012a  0981              LSRS     r1,r0,#6
00012c  f89d0010          LDRB     r0,[sp,#0x10]
000130  f3611086          BFI      r0,r1,#6,#1
000134  9004              STR      r0,[sp,#0x10]
;;;2284           md1_cfg.int1_inact_state     = val.int1_inact_state;
000136  f89d0021          LDRB     r0,[sp,#0x21]
00013a  09c1              LSRS     r1,r0,#7
00013c  f89d0010          LDRB     r0,[sp,#0x10]
000140  e000              B        |L131.324|
                  |L131.322|
000142  e009              B        |L131.344|
                  |L131.324|
000144  f36110c7          BFI      r0,r1,#7,#1
000148  9004              STR      r0,[sp,#0x10]
;;;2285           ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
00014a  2301              MOVS     r3,#1
00014c  aa04              ADD      r2,sp,#0x10
00014e  215e              MOVS     r1,#0x5e
000150  4628              MOV      r0,r5
000152  f7fffffe          BL       lsm6dsl_write_reg
000156  4604              MOV      r4,r0
                  |L131.344|
;;;2286     }
;;;2287     if(ret == 0){
000158  b934              CBNZ     r4,|L131.360|
;;;2288       ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
00015a  2301              MOVS     r3,#1
00015c  aa02              ADD      r2,sp,#8
00015e  2113              MOVS     r1,#0x13
000160  4628              MOV      r0,r5
000162  f7fffffe          BL       lsm6dsl_read_reg
000166  4604              MOV      r4,r0
                  |L131.360|
;;;2289     }
;;;2290     if(ret == 0){
000168  b96c              CBNZ     r4,|L131.390|
;;;2291       ctrl4_c.den_drdy_int1 = val.den_drdy_int1;
00016a  f89d0022          LDRB     r0,[sp,#0x22]
00016e  f89d1008          LDRB     r1,[sp,#8]
000172  f3601104          BFI      r1,r0,#4,#1
000176  9102              STR      r1,[sp,#8]
;;;2292       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL4_C, (uint8_t*)&ctrl4_c, 1);
000178  2301              MOVS     r3,#1
00017a  aa02              ADD      r2,sp,#8
00017c  2113              MOVS     r1,#0x13
00017e  4628              MOV      r0,r5
000180  f7fffffe          BL       lsm6dsl_write_reg
000184  4604              MOV      r4,r0
                  |L131.390|
;;;2293     }
;;;2294     if(ret == 0){
000186  b934              CBNZ     r4,|L131.406|
;;;2295       ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000188  2301              MOVS     r3,#1
00018a  aa06              ADD      r2,sp,#0x18
00018c  211a              MOVS     r1,#0x1a
00018e  4628              MOV      r0,r5
000190  f7fffffe          BL       lsm6dsl_read_reg
000194  4604              MOV      r4,r0
                  |L131.406|
;;;2296                              (uint8_t*)&master_config, 1);
;;;2297     }
;;;2298     if(ret == 0){
000196  b96c              CBNZ     r4,|L131.436|
;;;2299        master_config.drdy_on_int1   = val.den_drdy_int1;
000198  f89d0022          LDRB     r0,[sp,#0x22]
00019c  f89d1018          LDRB     r1,[sp,#0x18]
0001a0  f36011c7          BFI      r1,r0,#7,#1
0001a4  9106              STR      r1,[sp,#0x18]
;;;2300        ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
0001a6  2301              MOVS     r3,#1
0001a8  aa06              ADD      r2,sp,#0x18
0001aa  211a              MOVS     r1,#0x1a
0001ac  4628              MOV      r0,r5
0001ae  f7fffffe          BL       lsm6dsl_write_reg
0001b2  4604              MOV      r4,r0
                  |L131.436|
;;;2301                                (uint8_t*)&master_config, 1);
;;;2302     }
;;;2303     if(ret == 0){
0001b4  2c00              CMP      r4,#0
0001b6  d14c              BNE      |L131.594|
;;;2304       ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
0001b8  2301              MOVS     r3,#1
0001ba  aa01              ADD      r2,sp,#4
0001bc  2158              MOVS     r1,#0x58
0001be  4628              MOV      r0,r5
0001c0  f7fffffe          BL       lsm6dsl_read_reg
0001c4  4604              MOV      r4,r0
;;;2305       if ((val.int1_6d != 0x00U) ||
0001c6  f89d0021          LDRB     r0,[sp,#0x21]
0001ca  f3c00080          UBFX     r0,r0,#2,#1
0001ce  bba0              CBNZ     r0,|L131.570|
;;;2306           (val.int1_ff != 0x00U) ||
0001d0  f89d0021          LDRB     r0,[sp,#0x21]
0001d4  f3c01000          UBFX     r0,r0,#4,#1
0001d8  bb78              CBNZ     r0,|L131.570|
;;;2307           (val.int1_wu != 0x00U) ||
0001da  f89d0021          LDRB     r0,[sp,#0x21]
0001de  f3c01040          UBFX     r0,r0,#5,#1
0001e2  bb50              CBNZ     r0,|L131.570|
;;;2308           (val.int1_single_tap != 0x00U) ||
0001e4  f89d0021          LDRB     r0,[sp,#0x21]
0001e8  f3c01080          UBFX     r0,r0,#6,#1
0001ec  bb28              CBNZ     r0,|L131.570|
;;;2309           (val.int1_double_tap != 0x00U) ||
0001ee  f89d0021          LDRB     r0,[sp,#0x21]
0001f2  f3c000c0          UBFX     r0,r0,#3,#1
0001f6  bb00              CBNZ     r0,|L131.570|
;;;2310           (val.int1_inact_state != 0x00U)||
0001f8  f89d0021          LDRB     r0,[sp,#0x21]
0001fc  09c0              LSRS     r0,r0,#7
0001fe  b9e0              CBNZ     r0,|L131.570|
;;;2311           (md2_cfg.int2_6d != 0x00U) ||
000200  f89d000c          LDRB     r0,[sp,#0xc]
000204  f3c00080          UBFX     r0,r0,#2,#1
000208  b9b8              CBNZ     r0,|L131.570|
;;;2312           (md2_cfg.int2_ff != 0x00U) ||
00020a  f89d000c          LDRB     r0,[sp,#0xc]
00020e  f3c01000          UBFX     r0,r0,#4,#1
000212  b990              CBNZ     r0,|L131.570|
;;;2313           (md2_cfg.int2_wu != 0x00U) ||
000214  f89d000c          LDRB     r0,[sp,#0xc]
000218  f3c01040          UBFX     r0,r0,#5,#1
00021c  b968              CBNZ     r0,|L131.570|
;;;2314           (md2_cfg.int2_single_tap != 0x00U) ||
00021e  f89d000c          LDRB     r0,[sp,#0xc]
000222  f3c01080          UBFX     r0,r0,#6,#1
000226  b940              CBNZ     r0,|L131.570|
;;;2315           (md2_cfg.int2_double_tap != 0x00U) ||
000228  f89d000c          LDRB     r0,[sp,#0xc]
00022c  f3c000c0          UBFX     r0,r0,#3,#1
000230  b918              CBNZ     r0,|L131.570|
;;;2316           (md2_cfg.int2_inact_state!= 0x00U) ){
000232  f89d000c          LDRB     r0,[sp,#0xc]
000236  09c0              LSRS     r0,r0,#7
000238  b130              CBZ      r0,|L131.584|
                  |L131.570|
;;;2317         tap_cfg.interrupts_enable = PROPERTY_ENABLE;
00023a  f89d0004          LDRB     r0,[sp,#4]
00023e  f0200080          BIC      r0,r0,#0x80
000242  3080              ADDS     r0,r0,#0x80
000244  9001              STR      r0,[sp,#4]
000246  e004              B        |L131.594|
                  |L131.584|
;;;2318       }
;;;2319       else{
;;;2320         tap_cfg.interrupts_enable = PROPERTY_DISABLE;
000248  f89d0004          LDRB     r0,[sp,#4]
00024c  f0200080          BIC      r0,r0,#0x80
000250  9001              STR      r0,[sp,#4]
                  |L131.594|
;;;2321       }
;;;2322     }
;;;2323     if(ret == 0){
000252  b934              CBNZ     r4,|L131.610|
;;;2324       ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000254  2301              MOVS     r3,#1
000256  aa01              ADD      r2,sp,#4
000258  2158              MOVS     r1,#0x58
00025a  4628              MOV      r0,r5
00025c  f7fffffe          BL       lsm6dsl_write_reg
000260  4604              MOV      r4,r0
                  |L131.610|
;;;2325     }
;;;2326     return ret;
000262  4620              MOV      r0,r4
;;;2327   }
000264  b009              ADD      sp,sp,#0x24
000266  bd30              POP      {r4,r5,pc}
;;;2328   
                          ENDP


                          AREA ||i.lsm6dsl_pin_int2_route_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pin_int2_route_get PROC
;;;2472     */
;;;2473   int32_t lsm6dsl_pin_int2_route_get(lsm6dsl_ctx_t *ctx,
000000  b5fe              PUSH     {r1-r7,lr}
;;;2474   lsm6dsl_int2_route_t *val)
;;;2475   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2476     lsm6dsl_int2_ctrl_t int2_ctrl;
;;;2477     lsm6dsl_md2_cfg_t md2_cfg;
;;;2478     lsm6dsl_drdy_pulse_cfg_g_t drdy_pulse_cfg_g;
;;;2479   
;;;2480     int32_t ret;
;;;2481   
;;;2482     ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT2_CTRL, (uint8_t*)&int2_ctrl, 1);
000006  2301              MOVS     r3,#1
000008  aa02              ADD      r2,sp,#8
00000a  210e              MOVS     r1,#0xe
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2483     if(ret == 0){
000014  2d00              CMP      r5,#0
000016  d17d              BNE      |L132.276|
;;;2484       val->int2_drdy_xl         = int2_ctrl.int2_drdy_xl;
000018  f89d0008          LDRB     r0,[sp,#8]
00001c  7821              LDRB     r1,[r4,#0]
00001e  f3600100          BFI      r1,r0,#0,#1
000022  7021              STRB     r1,[r4,#0]
;;;2485       val->int2_drdy_g          = int2_ctrl.int2_drdy_g;
000024  f89d0008          LDRB     r0,[sp,#8]
000028  0841              LSRS     r1,r0,#1
00002a  7820              LDRB     r0,[r4,#0]
00002c  f3610041          BFI      r0,r1,#1,#1
000030  7020              STRB     r0,[r4,#0]
;;;2486       val->int2_drdy_temp       = int2_ctrl.int2_drdy_temp;
000032  f89d0008          LDRB     r0,[sp,#8]
000036  0881              LSRS     r1,r0,#2
000038  7820              LDRB     r0,[r4,#0]
00003a  f3610082          BFI      r0,r1,#2,#1
00003e  7020              STRB     r0,[r4,#0]
;;;2487       val->int2_fth             = int2_ctrl.int2_fth;
000040  f89d0008          LDRB     r0,[sp,#8]
000044  08c1              LSRS     r1,r0,#3
000046  7820              LDRB     r0,[r4,#0]
000048  f36100c3          BFI      r0,r1,#3,#1
00004c  7020              STRB     r0,[r4,#0]
;;;2488       val->int2_fifo_ovr        = int2_ctrl.int2_fifo_ovr;
00004e  f89d0008          LDRB     r0,[sp,#8]
000052  0901              LSRS     r1,r0,#4
000054  7820              LDRB     r0,[r4,#0]
000056  f3611004          BFI      r0,r1,#4,#1
00005a  7020              STRB     r0,[r4,#0]
;;;2489       val->int2_full_flag       = int2_ctrl.int2_full_flag;
00005c  f89d0008          LDRB     r0,[sp,#8]
000060  0941              LSRS     r1,r0,#5
000062  7820              LDRB     r0,[r4,#0]
000064  f3611045          BFI      r0,r1,#5,#1
000068  7020              STRB     r0,[r4,#0]
;;;2490       val->int2_step_count_ov   = int2_ctrl.int2_step_count_ov;
00006a  f89d0008          LDRB     r0,[sp,#8]
00006e  0981              LSRS     r1,r0,#6
000070  7820              LDRB     r0,[r4,#0]
000072  f3611086          BFI      r0,r1,#6,#1
000076  7020              STRB     r0,[r4,#0]
;;;2491       val->int2_step_delta      = int2_ctrl.int2_step_delta;
000078  f89d0008          LDRB     r0,[sp,#8]
00007c  09c1              LSRS     r1,r0,#7
00007e  7820              LDRB     r0,[r4,#0]
000080  f36110c7          BFI      r0,r1,#7,#1
000084  7020              STRB     r0,[r4,#0]
;;;2492   
;;;2493       ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
000086  2301              MOVS     r3,#1
000088  aa01              ADD      r2,sp,#4
00008a  215f              MOVS     r1,#0x5f
00008c  4630              MOV      r0,r6
00008e  f7fffffe          BL       lsm6dsl_read_reg
000092  4605              MOV      r5,r0
;;;2494       if(ret == 0){
000094  2d00              CMP      r5,#0
000096  d144              BNE      |L132.290|
;;;2495         val->int2_iron           = md2_cfg.int2_iron;
000098  f89d0004          LDRB     r0,[sp,#4]
00009c  7861              LDRB     r1,[r4,#1]
00009e  f3600100          BFI      r1,r0,#0,#1
0000a2  7061              STRB     r1,[r4,#1]
;;;2496         val->int2_tilt           = md2_cfg.int2_tilt;
0000a4  f89d0004          LDRB     r0,[sp,#4]
0000a8  0841              LSRS     r1,r0,#1
0000aa  7860              LDRB     r0,[r4,#1]
0000ac  f3610041          BFI      r0,r1,#1,#1
0000b0  7060              STRB     r0,[r4,#1]
;;;2497         val->int2_6d             = md2_cfg.int2_6d;
0000b2  f89d0004          LDRB     r0,[sp,#4]
0000b6  0881              LSRS     r1,r0,#2
0000b8  7860              LDRB     r0,[r4,#1]
0000ba  f3610082          BFI      r0,r1,#2,#1
0000be  7060              STRB     r0,[r4,#1]
;;;2498         val->int2_double_tap     = md2_cfg.int2_double_tap;
0000c0  f89d0004          LDRB     r0,[sp,#4]
0000c4  08c1              LSRS     r1,r0,#3
0000c6  7860              LDRB     r0,[r4,#1]
0000c8  f36100c3          BFI      r0,r1,#3,#1
0000cc  7060              STRB     r0,[r4,#1]
;;;2499         val->int2_ff             = md2_cfg.int2_ff;
0000ce  f89d0004          LDRB     r0,[sp,#4]
0000d2  0901              LSRS     r1,r0,#4
0000d4  7860              LDRB     r0,[r4,#1]
0000d6  f3611004          BFI      r0,r1,#4,#1
0000da  7060              STRB     r0,[r4,#1]
;;;2500         val->int2_wu             = md2_cfg.int2_wu;
0000dc  f89d0004          LDRB     r0,[sp,#4]
0000e0  0941              LSRS     r1,r0,#5
0000e2  7860              LDRB     r0,[r4,#1]
0000e4  f3611045          BFI      r0,r1,#5,#1
0000e8  7060              STRB     r0,[r4,#1]
;;;2501         val->int2_single_tap     = md2_cfg.int2_single_tap;
0000ea  f89d0004          LDRB     r0,[sp,#4]
0000ee  0981              LSRS     r1,r0,#6
0000f0  7860              LDRB     r0,[r4,#1]
0000f2  f3611086          BFI      r0,r1,#6,#1
0000f6  7060              STRB     r0,[r4,#1]
;;;2502         val->int2_inact_state    = md2_cfg.int2_inact_state;
0000f8  f89d0004          LDRB     r0,[sp,#4]
0000fc  09c1              LSRS     r1,r0,#7
0000fe  7860              LDRB     r0,[r4,#1]
000100  f36110c7          BFI      r0,r1,#7,#1
000104  7060              STRB     r0,[r4,#1]
;;;2503   
;;;2504         ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
000106  2301              MOVS     r3,#1
000108  466a              MOV      r2,sp
00010a  210b              MOVS     r1,#0xb
00010c  4630              MOV      r0,r6
00010e  f7fffffe          BL       lsm6dsl_read_reg
000112  e000              B        |L132.278|
                  |L132.276|
000114  e005              B        |L132.290|
                  |L132.278|
000116  4605              MOV      r5,r0
;;;2505                                (uint8_t*)&drdy_pulse_cfg_g, 1);
;;;2506         val->int2_wrist_tilt = drdy_pulse_cfg_g.int2_wrist_tilt;
000118  f89d0000          LDRB     r0,[sp,#0]
00011c  f0000001          AND      r0,r0,#1
000120  70a0              STRB     r0,[r4,#2]
                  |L132.290|
;;;2507       }
;;;2508     }
;;;2509     return ret;
000122  4628              MOV      r0,r5
;;;2510   }
000124  bdfe              POP      {r1-r7,pc}
;;;2511   
                          ENDP


                          AREA ||i.lsm6dsl_pin_int2_route_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pin_int2_route_set PROC
;;;2389     */
;;;2390   int32_t lsm6dsl_pin_int2_route_set(lsm6dsl_ctx_t *ctx,
000000  b533              PUSH     {r0,r1,r4,r5,lr}
;;;2391                                      lsm6dsl_int2_route_t val)
;;;2392   {
000002  b085              SUB      sp,sp,#0x14
000004  4605              MOV      r5,r0
;;;2393     lsm6dsl_int2_ctrl_t int2_ctrl;
;;;2394     lsm6dsl_md1_cfg_t md1_cfg;
;;;2395     lsm6dsl_md2_cfg_t md2_cfg;
;;;2396     lsm6dsl_drdy_pulse_cfg_g_t drdy_pulse_cfg_g;
;;;2397     lsm6dsl_tap_cfg_t tap_cfg;
;;;2398     int32_t ret;
;;;2399   
;;;2400   
;;;2401     ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT2_CTRL, (uint8_t*)&int2_ctrl, 1);
000006  2301              MOVS     r3,#1
000008  aa04              ADD      r2,sp,#0x10
00000a  210e              MOVS     r1,#0xe
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4604              MOV      r4,r0
;;;2402     if(ret == 0){
000014  bbf4              CBNZ     r4,|L133.148|
;;;2403       int2_ctrl.int2_drdy_xl        = val.int2_drdy_xl;
000016  f89d0018          LDRB     r0,[sp,#0x18]
00001a  f89d1010          LDRB     r1,[sp,#0x10]
00001e  f3600100          BFI      r1,r0,#0,#1
000022  9104              STR      r1,[sp,#0x10]
;;;2404       int2_ctrl.int2_drdy_g         = val.int2_drdy_g;
000024  f89d0018          LDRB     r0,[sp,#0x18]
000028  0841              LSRS     r1,r0,#1
00002a  f89d0010          LDRB     r0,[sp,#0x10]
00002e  f3610041          BFI      r0,r1,#1,#1
000032  9004              STR      r0,[sp,#0x10]
;;;2405       int2_ctrl.int2_drdy_temp      = val.int2_drdy_temp;
000034  f89d0018          LDRB     r0,[sp,#0x18]
000038  0881              LSRS     r1,r0,#2
00003a  f89d0010          LDRB     r0,[sp,#0x10]
00003e  f3610082          BFI      r0,r1,#2,#1
000042  9004              STR      r0,[sp,#0x10]
;;;2406       int2_ctrl.int2_fth            = val.int2_fth;
000044  f89d0018          LDRB     r0,[sp,#0x18]
000048  08c1              LSRS     r1,r0,#3
00004a  f89d0010          LDRB     r0,[sp,#0x10]
00004e  f36100c3          BFI      r0,r1,#3,#1
000052  9004              STR      r0,[sp,#0x10]
;;;2407       int2_ctrl.int2_fifo_ovr       = val.int2_fifo_ovr;
000054  f89d0018          LDRB     r0,[sp,#0x18]
000058  0901              LSRS     r1,r0,#4
00005a  f89d0010          LDRB     r0,[sp,#0x10]
00005e  f3611004          BFI      r0,r1,#4,#1
000062  9004              STR      r0,[sp,#0x10]
;;;2408       int2_ctrl.int2_full_flag      = val.int2_full_flag;
000064  f89d0018          LDRB     r0,[sp,#0x18]
000068  0941              LSRS     r1,r0,#5
00006a  f89d0010          LDRB     r0,[sp,#0x10]
00006e  f3611045          BFI      r0,r1,#5,#1
000072  9004              STR      r0,[sp,#0x10]
;;;2409       int2_ctrl.int2_step_count_ov  = val.int2_step_count_ov;
000074  f89d0018          LDRB     r0,[sp,#0x18]
000078  0981              LSRS     r1,r0,#6
00007a  f89d0010          LDRB     r0,[sp,#0x10]
00007e  f3611086          BFI      r0,r1,#6,#1
000082  9004              STR      r0,[sp,#0x10]
;;;2410       int2_ctrl.int2_step_delta     = val.int2_step_delta;
000084  f89d0018          LDRB     r0,[sp,#0x18]
000088  09c1              LSRS     r1,r0,#7
00008a  f89d0010          LDRB     r0,[sp,#0x10]
00008e  f36110c7          BFI      r0,r1,#7,#1
000092  e000              B        |L133.150|
                  |L133.148|
000094  e007              B        |L133.166|
                  |L133.150|
000096  9004              STR      r0,[sp,#0x10]
;;;2411       ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT2_CTRL, (uint8_t*)&int2_ctrl, 1);
000098  2301              MOVS     r3,#1
00009a  aa04              ADD      r2,sp,#0x10
00009c  210e              MOVS     r1,#0xe
00009e  4628              MOV      r0,r5
0000a0  f7fffffe          BL       lsm6dsl_write_reg
0000a4  4604              MOV      r4,r0
                  |L133.166|
;;;2412     }
;;;2413     if(ret == 0){
0000a6  b934              CBNZ     r4,|L133.182|
;;;2414       ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD1_CFG, (uint8_t*)&md1_cfg, 1);
0000a8  2301              MOVS     r3,#1
0000aa  aa03              ADD      r2,sp,#0xc
0000ac  215e              MOVS     r1,#0x5e
0000ae  4628              MOV      r0,r5
0000b0  f7fffffe          BL       lsm6dsl_read_reg
0000b4  4604              MOV      r4,r0
                  |L133.182|
;;;2415     }
;;;2416     if(ret == 0){
0000b6  b934              CBNZ     r4,|L133.198|
;;;2417       ret = lsm6dsl_read_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
0000b8  2301              MOVS     r3,#1
0000ba  aa02              ADD      r2,sp,#8
0000bc  215f              MOVS     r1,#0x5f
0000be  4628              MOV      r0,r5
0000c0  f7fffffe          BL       lsm6dsl_read_reg
0000c4  4604              MOV      r4,r0
                  |L133.198|
;;;2418     }
;;;2419     if(ret == 0){
0000c6  bbe4              CBNZ     r4,|L133.322|
;;;2420       md2_cfg.int2_iron              = val.int2_iron;
0000c8  f89d0019          LDRB     r0,[sp,#0x19]
0000cc  f89d1008          LDRB     r1,[sp,#8]
0000d0  f3600100          BFI      r1,r0,#0,#1
0000d4  9102              STR      r1,[sp,#8]
;;;2421       md2_cfg.int2_tilt              = val.int2_tilt;
0000d6  f89d0019          LDRB     r0,[sp,#0x19]
0000da  0841              LSRS     r1,r0,#1
0000dc  f89d0008          LDRB     r0,[sp,#8]
0000e0  f3610041          BFI      r0,r1,#1,#1
0000e4  9002              STR      r0,[sp,#8]
;;;2422       md2_cfg.int2_6d                = val.int2_6d;
0000e6  f89d0019          LDRB     r0,[sp,#0x19]
0000ea  0881              LSRS     r1,r0,#2
0000ec  f89d0008          LDRB     r0,[sp,#8]
0000f0  f3610082          BFI      r0,r1,#2,#1
0000f4  9002              STR      r0,[sp,#8]
;;;2423       md2_cfg.int2_double_tap        = val.int2_double_tap;
0000f6  f89d0019          LDRB     r0,[sp,#0x19]
0000fa  08c1              LSRS     r1,r0,#3
0000fc  f89d0008          LDRB     r0,[sp,#8]
000100  f36100c3          BFI      r0,r1,#3,#1
000104  9002              STR      r0,[sp,#8]
;;;2424       md2_cfg.int2_ff                = val.int2_ff;
000106  f89d0019          LDRB     r0,[sp,#0x19]
00010a  0901              LSRS     r1,r0,#4
00010c  f89d0008          LDRB     r0,[sp,#8]
000110  f3611004          BFI      r0,r1,#4,#1
000114  9002              STR      r0,[sp,#8]
;;;2425       md2_cfg.int2_wu                = val.int2_wu;
000116  f89d0019          LDRB     r0,[sp,#0x19]
00011a  0941              LSRS     r1,r0,#5
00011c  f89d0008          LDRB     r0,[sp,#8]
000120  f3611045          BFI      r0,r1,#5,#1
000124  9002              STR      r0,[sp,#8]
;;;2426       md2_cfg.int2_single_tap        = val.int2_single_tap;
000126  f89d0019          LDRB     r0,[sp,#0x19]
00012a  0981              LSRS     r1,r0,#6
00012c  f89d0008          LDRB     r0,[sp,#8]
000130  f3611086          BFI      r0,r1,#6,#1
000134  9002              STR      r0,[sp,#8]
;;;2427       md2_cfg.int2_inact_state       = val.int2_inact_state;
000136  f89d0019          LDRB     r0,[sp,#0x19]
00013a  09c1              LSRS     r1,r0,#7
00013c  f89d0008          LDRB     r0,[sp,#8]
000140  e000              B        |L133.324|
                  |L133.322|
000142  e009              B        |L133.344|
                  |L133.324|
000144  f36110c7          BFI      r0,r1,#7,#1
000148  9002              STR      r0,[sp,#8]
;;;2428       ret = lsm6dsl_write_reg(ctx, LSM6DSL_MD2_CFG, (uint8_t*)&md2_cfg, 1);
00014a  2301              MOVS     r3,#1
00014c  aa02              ADD      r2,sp,#8
00014e  215f              MOVS     r1,#0x5f
000150  4628              MOV      r0,r5
000152  f7fffffe          BL       lsm6dsl_write_reg
000156  4604              MOV      r4,r0
                  |L133.344|
;;;2429     }
;;;2430     if(ret == 0){
000158  b934              CBNZ     r4,|L133.360|
;;;2431       ret = lsm6dsl_read_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
00015a  2301              MOVS     r3,#1
00015c  aa01              ADD      r2,sp,#4
00015e  210b              MOVS     r1,#0xb
000160  4628              MOV      r0,r5
000162  f7fffffe          BL       lsm6dsl_read_reg
000166  4604              MOV      r4,r0
                  |L133.360|
;;;2432                              (uint8_t*)&drdy_pulse_cfg_g, 1);
;;;2433     }
;;;2434     if(ret == 0){
000168  b96c              CBNZ     r4,|L133.390|
;;;2435       drdy_pulse_cfg_g.int2_wrist_tilt = val.int2_wrist_tilt;
00016a  f89d001a          LDRB     r0,[sp,#0x1a]
00016e  f89d1004          LDRB     r1,[sp,#4]
000172  f3600100          BFI      r1,r0,#0,#1
000176  9101              STR      r1,[sp,#4]
;;;2436       ret = lsm6dsl_write_reg(ctx, LSM6DSL_DRDY_PULSE_CFG_G,
000178  2301              MOVS     r3,#1
00017a  aa01              ADD      r2,sp,#4
00017c  210b              MOVS     r1,#0xb
00017e  4628              MOV      r0,r5
000180  f7fffffe          BL       lsm6dsl_write_reg
000184  4604              MOV      r4,r0
                  |L133.390|
;;;2437                               (uint8_t*)&drdy_pulse_cfg_g, 1);
;;;2438     }
;;;2439     if(ret == 0){
000186  2c00              CMP      r4,#0
000188  d14c              BNE      |L133.548|
;;;2440       ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
00018a  2301              MOVS     r3,#1
00018c  466a              MOV      r2,sp
00018e  2158              MOVS     r1,#0x58
000190  4628              MOV      r0,r5
000192  f7fffffe          BL       lsm6dsl_read_reg
000196  4604              MOV      r4,r0
;;;2441       if ((md1_cfg.int1_6d != 0x00U) ||
000198  f89d000c          LDRB     r0,[sp,#0xc]
00019c  f3c00080          UBFX     r0,r0,#2,#1
0001a0  bba0              CBNZ     r0,|L133.524|
;;;2442           (md1_cfg.int1_ff != 0x00U) ||
0001a2  f89d000c          LDRB     r0,[sp,#0xc]
0001a6  f3c01000          UBFX     r0,r0,#4,#1
0001aa  bb78              CBNZ     r0,|L133.524|
;;;2443           (md1_cfg.int1_wu != 0x00U) ||
0001ac  f89d000c          LDRB     r0,[sp,#0xc]
0001b0  f3c01040          UBFX     r0,r0,#5,#1
0001b4  bb50              CBNZ     r0,|L133.524|
;;;2444           (md1_cfg.int1_single_tap != 0x00U) ||
0001b6  f89d000c          LDRB     r0,[sp,#0xc]
0001ba  f3c01080          UBFX     r0,r0,#6,#1
0001be  bb28              CBNZ     r0,|L133.524|
;;;2445           (md1_cfg.int1_double_tap != 0x00U) ||
0001c0  f89d000c          LDRB     r0,[sp,#0xc]
0001c4  f3c000c0          UBFX     r0,r0,#3,#1
0001c8  bb00              CBNZ     r0,|L133.524|
;;;2446           (md1_cfg.int1_inact_state != 0x00U) ||
0001ca  f89d000c          LDRB     r0,[sp,#0xc]
0001ce  09c0              LSRS     r0,r0,#7
0001d0  b9e0              CBNZ     r0,|L133.524|
;;;2447           (val.int2_6d != 0x00U) ||
0001d2  f89d0019          LDRB     r0,[sp,#0x19]
0001d6  f3c00080          UBFX     r0,r0,#2,#1
0001da  b9b8              CBNZ     r0,|L133.524|
;;;2448           (val.int2_ff != 0x00U) ||
0001dc  f89d0019          LDRB     r0,[sp,#0x19]
0001e0  f3c01000          UBFX     r0,r0,#4,#1
0001e4  b990              CBNZ     r0,|L133.524|
;;;2449           (val.int2_wu != 0x00U) ||
0001e6  f89d0019          LDRB     r0,[sp,#0x19]
0001ea  f3c01040          UBFX     r0,r0,#5,#1
0001ee  b968              CBNZ     r0,|L133.524|
;;;2450           (val.int2_single_tap != 0x00U) ||
0001f0  f89d0019          LDRB     r0,[sp,#0x19]
0001f4  f3c01080          UBFX     r0,r0,#6,#1
0001f8  b940              CBNZ     r0,|L133.524|
;;;2451           (val.int2_double_tap != 0x00U) ||
0001fa  f89d0019          LDRB     r0,[sp,#0x19]
0001fe  f3c000c0          UBFX     r0,r0,#3,#1
000202  b918              CBNZ     r0,|L133.524|
;;;2452           (val.int2_inact_state!= 0x00U) ){
000204  f89d0019          LDRB     r0,[sp,#0x19]
000208  09c0              LSRS     r0,r0,#7
00020a  b130              CBZ      r0,|L133.538|
                  |L133.524|
;;;2453         tap_cfg.interrupts_enable = PROPERTY_ENABLE;
00020c  f89d0000          LDRB     r0,[sp,#0]
000210  f0200080          BIC      r0,r0,#0x80
000214  3080              ADDS     r0,r0,#0x80
000216  9000              STR      r0,[sp,#0]
000218  e004              B        |L133.548|
                  |L133.538|
;;;2454       }
;;;2455       else{
;;;2456         tap_cfg.interrupts_enable = PROPERTY_DISABLE;
00021a  f89d0000          LDRB     r0,[sp,#0]
00021e  f0200080          BIC      r0,r0,#0x80
000222  9000              STR      r0,[sp,#0]
                  |L133.548|
;;;2457       }
;;;2458     }
;;;2459     if(ret == 0){
000224  b934              CBNZ     r4,|L133.564|
;;;2460       ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000226  2301              MOVS     r3,#1
000228  466a              MOV      r2,sp
00022a  2158              MOVS     r1,#0x58
00022c  4628              MOV      r0,r5
00022e  f7fffffe          BL       lsm6dsl_write_reg
000232  4604              MOV      r4,r0
                  |L133.564|
;;;2461     }
;;;2462     return ret;
000234  4620              MOV      r0,r4
;;;2463   }
000236  b007              ADD      sp,sp,#0x1c
000238  bd30              POP      {r4,r5,pc}
;;;2464   
                          ENDP


                          AREA ||i.lsm6dsl_pin_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pin_mode_get PROC
;;;2540     */
;;;2541   int32_t lsm6dsl_pin_mode_get(lsm6dsl_ctx_t *ctx, lsm6dsl_pp_od_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2542   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2543     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;2544     int32_t ret;
;;;2545   
;;;2546     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2547     switch (ctrl3_c.pp_od) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  b110              CBZ      r0,|L134.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L134.48|
000022  e002              B        |L134.42|
                  |L134.36|
;;;2548       case LSM6DSL_PUSH_PULL:
;;;2549         *val = LSM6DSL_PUSH_PULL;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;2550         break;
000028  e005              B        |L134.54|
                  |L134.42|
;;;2551       case LSM6DSL_OPEN_DRAIN:
;;;2552         *val = LSM6DSL_OPEN_DRAIN;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;2553         break;
00002e  e002              B        |L134.54|
                  |L134.48|
;;;2554       default:
;;;2555         *val = LSM6DSL_PIN_MODE_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;2556         break;
000034  bf00              NOP      
                  |L134.54|
000036  bf00              NOP                            ;2550
;;;2557     }
;;;2558   
;;;2559     return ret;
000038  4630              MOV      r0,r6
;;;2560   }
00003a  bdf8              POP      {r3-r7,pc}
;;;2561   
                          ENDP


                          AREA ||i.lsm6dsl_pin_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pin_mode_set PROC
;;;2519     */
;;;2520   int32_t lsm6dsl_pin_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_pp_od_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2521   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2522     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;2523     int32_t ret;
;;;2524   
;;;2525     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2526     if(ret == 0){
000014  b95d              CBNZ     r5,|L135.46|
;;;2527       ctrl3_c.pp_od = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;2528       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L135.46|
;;;2529     }
;;;2530     return ret;
00002e  4628              MOV      r0,r5
;;;2531   }
000030  bdf8              POP      {r3-r7,pc}
;;;2532   
                          ENDP


                          AREA ||i.lsm6dsl_pin_polarity_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pin_polarity_get PROC
;;;2590     */
;;;2591   int32_t lsm6dsl_pin_polarity_get(lsm6dsl_ctx_t *ctx, lsm6dsl_h_lactive_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2592   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2593     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;2594     int32_t ret;
;;;2595   
;;;2596     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2597     switch (ctrl3_c.h_lactive) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  b110              CBZ      r0,|L136.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L136.48|
000022  e002              B        |L136.42|
                  |L136.36|
;;;2598       case LSM6DSL_ACTIVE_HIGH:
;;;2599         *val = LSM6DSL_ACTIVE_HIGH;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;2600         break;
000028  e005              B        |L136.54|
                  |L136.42|
;;;2601       case LSM6DSL_ACTIVE_LOW:
;;;2602         *val = LSM6DSL_ACTIVE_LOW;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;2603         break;
00002e  e002              B        |L136.54|
                  |L136.48|
;;;2604       default:
;;;2605         *val = LSM6DSL_POLARITY_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;2606         break;
000034  bf00              NOP      
                  |L136.54|
000036  bf00              NOP                            ;2600
;;;2607     }
;;;2608   
;;;2609     return ret;
000038  4630              MOV      r0,r6
;;;2610   }
00003a  bdf8              POP      {r3-r7,pc}
;;;2611   
                          ENDP


                          AREA ||i.lsm6dsl_pin_polarity_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_pin_polarity_set PROC
;;;2569     */
;;;2570   int32_t lsm6dsl_pin_polarity_set(lsm6dsl_ctx_t *ctx, lsm6dsl_h_lactive_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2571   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2572     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;2573     int32_t ret;
;;;2574   
;;;2575     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2576     if(ret == 0){
000014  b95d              CBNZ     r5,|L137.46|
;;;2577       ctrl3_c.h_lactive = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641045          BFI      r0,r4,#5,#1
00001e  9000              STR      r0,[sp,#0]
;;;2578       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L137.46|
;;;2579     }
;;;2580     return ret;
00002e  4628              MOV      r0,r5
;;;2581   }
000030  bdf8              POP      {r3-r7,pc}
;;;2582   
                          ENDP


                          AREA ||i.lsm6dsl_read_reg||, CODE, READONLY, ALIGN=1

                  lsm6dsl_read_reg PROC
;;;65       */
;;;66     int32_t lsm6dsl_read_reg(lsm6dsl_ctx_t* ctx, uint8_t reg, uint8_t* data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;67                              uint16_t len)
;;;68     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;69       int32_t ret;
;;;70       ret = ctx->read_reg(ctx->handle, reg, data, len);
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  e9d4c001          LDRD     r12,r0,[r4,#4]
000016  47e0              BLX      r12
000018  4680              MOV      r8,r0
;;;71       return ret;
00001a  4640              MOV      r0,r8
;;;72     }
00001c  e8bd81f0          POP      {r4-r8,pc}
;;;73     
                          ENDP


                          AREA ||i.lsm6dsl_reset_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_reset_get PROC
;;;1298     */
;;;1299   int32_t lsm6dsl_reset_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1300   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1301     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;1302     int32_t ret;
;;;1303   
;;;1304     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1305     *val = ctrl3_c.sw_reset;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1306   
;;;1307     return ret;
00001e  4630              MOV      r0,r6
;;;1308   }
000020  bdf8              POP      {r3-r7,pc}
;;;1309   
                          ENDP


                          AREA ||i.lsm6dsl_reset_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_reset_set PROC
;;;1277     */
;;;1278   int32_t lsm6dsl_reset_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1279   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1280     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;1281     int32_t ret;
;;;1282   
;;;1283     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1284     if(ret == 0){
000014  b95d              CBNZ     r5,|L140.46|
;;;1285       ctrl3_c.sw_reset = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;1286       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L140.46|
;;;1287     }
;;;1288     return ret;
00002e  4628              MOV      r0,r5
;;;1289   }
000030  bdf8              POP      {r3-r7,pc}
;;;1290   
                          ENDP


                          AREA ||i.lsm6dsl_rounding_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_rounding_mode_get PROC
;;;1012     */
;;;1013   int32_t lsm6dsl_rounding_mode_get(lsm6dsl_ctx_t *ctx, lsm6dsl_rounding_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1014   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1015     lsm6dsl_ctrl5_c_t ctrl5_c;
;;;1016     int32_t ret;
;;;1017   
;;;1018     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1019     switch (ctrl5_c.rounding) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  0940              LSRS     r0,r0,#5
00001a  2808              CMP      r0,#8
00001c  d21d              BCS      |L141.90|
00001e  e8dff000          TBB      [pc,r0]
000022  0407              DCB      0x04,0x07
000024  0a0d1013          DCB      0x0a,0x0d,0x10,0x13
000028  1619              DCB      0x16,0x19
;;;1020       case LSM6DSL_ROUND_DISABLE:
;;;1021         *val = LSM6DSL_ROUND_DISABLE;
00002a  2000              MOVS     r0,#0
00002c  7020              STRB     r0,[r4,#0]
;;;1022         break;
00002e  e017              B        |L141.96|
;;;1023       case LSM6DSL_ROUND_XL:
;;;1024         *val = LSM6DSL_ROUND_XL;
000030  2001              MOVS     r0,#1
000032  7020              STRB     r0,[r4,#0]
;;;1025         break;
000034  e014              B        |L141.96|
;;;1026       case LSM6DSL_ROUND_GY:
;;;1027         *val = LSM6DSL_ROUND_GY;
000036  2002              MOVS     r0,#2
000038  7020              STRB     r0,[r4,#0]
;;;1028         break;
00003a  e011              B        |L141.96|
;;;1029       case LSM6DSL_ROUND_GY_XL:
;;;1030         *val = LSM6DSL_ROUND_GY_XL;
00003c  2003              MOVS     r0,#3
00003e  7020              STRB     r0,[r4,#0]
;;;1031         break;
000040  e00e              B        |L141.96|
;;;1032       case LSM6DSL_ROUND_SH1_TO_SH6:
;;;1033         *val = LSM6DSL_ROUND_SH1_TO_SH6;
000042  2004              MOVS     r0,#4
000044  7020              STRB     r0,[r4,#0]
;;;1034         break;
000046  e00b              B        |L141.96|
;;;1035       case LSM6DSL_ROUND_XL_SH1_TO_SH6:
;;;1036         *val = LSM6DSL_ROUND_XL_SH1_TO_SH6;
000048  2005              MOVS     r0,#5
00004a  7020              STRB     r0,[r4,#0]
;;;1037         break;
00004c  e008              B        |L141.96|
;;;1038       case LSM6DSL_ROUND_GY_XL_SH1_TO_SH12:
;;;1039         *val = LSM6DSL_ROUND_GY_XL_SH1_TO_SH12;
00004e  2006              MOVS     r0,#6
000050  7020              STRB     r0,[r4,#0]
;;;1040         break;
000052  e005              B        |L141.96|
;;;1041       case LSM6DSL_ROUND_GY_XL_SH1_TO_SH6:
;;;1042         *val = LSM6DSL_ROUND_GY_XL_SH1_TO_SH6;
000054  2007              MOVS     r0,#7
000056  7020              STRB     r0,[r4,#0]
;;;1043         break;
000058  e002              B        |L141.96|
                  |L141.90|
;;;1044       default:
;;;1045         *val = LSM6DSL_ROUND_OUT_ND;
00005a  2008              MOVS     r0,#8
00005c  7020              STRB     r0,[r4,#0]
;;;1046         break;
00005e  bf00              NOP      
                  |L141.96|
000060  bf00              NOP                            ;1022
;;;1047     }
;;;1048   
;;;1049     return ret;
000062  4630              MOV      r0,r6
;;;1050   }
000064  bdf8              POP      {r3-r7,pc}
;;;1051   
                          ENDP


                          AREA ||i.lsm6dsl_rounding_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_rounding_mode_set PROC
;;;990      */
;;;991    int32_t lsm6dsl_rounding_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_rounding_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;992    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;993      lsm6dsl_ctrl5_c_t ctrl5_c;
;;;994      int32_t ret;
;;;995    
;;;996      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;997      if(ret == 0){
000014  b95d              CBNZ     r5,|L142.46|
;;;998        ctrl5_c.rounding = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641047          BFI      r0,r4,#5,#3
00001e  9000              STR      r0,[sp,#0]
;;;999        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2114              MOVS     r1,#0x14
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L142.46|
;;;1000     }
;;;1001     return ret;
00002e  4628              MOV      r0,r5
;;;1002   }
000030  bdf8              POP      {r3-r7,pc}
;;;1003   
                          ENDP


                          AREA ||i.lsm6dsl_rounding_on_status_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_rounding_on_status_get PROC
;;;619      */
;;;620    int32_t lsm6dsl_rounding_on_status_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;621                                           lsm6dsl_rounding_status_t *val)
;;;622    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;623      lsm6dsl_ctrl7_g_t ctrl7_g;
;;;624      int32_t ret;
;;;625    
;;;626      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2116              MOVS     r1,#0x16
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;627      switch (ctrl7_g.rounding_status) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  b110              CBZ      r0,|L143.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L143.48|
000022  e002              B        |L143.42|
                  |L143.36|
;;;628        case LSM6DSL_STAT_RND_DISABLE:
;;;629          *val = LSM6DSL_STAT_RND_DISABLE;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;630          break;
000028  e005              B        |L143.54|
                  |L143.42|
;;;631        case LSM6DSL_STAT_RND_ENABLE:
;;;632          *val = LSM6DSL_STAT_RND_ENABLE;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;633          break;
00002e  e002              B        |L143.54|
                  |L143.48|
;;;634        default:
;;;635          *val = LSM6DSL_STAT_RND_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;636          break;
000034  bf00              NOP      
                  |L143.54|
000036  bf00              NOP                            ;630
;;;637      }
;;;638    
;;;639      return ret;
000038  4630              MOV      r0,r6
;;;640    }
00003a  bdf8              POP      {r3-r7,pc}
;;;641    
                          ENDP


                          AREA ||i.lsm6dsl_rounding_on_status_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_rounding_on_status_set PROC
;;;595      */
;;;596    int32_t lsm6dsl_rounding_on_status_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;597                                           lsm6dsl_rounding_status_t val)
;;;598    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;599      lsm6dsl_ctrl7_g_t ctrl7_g;
;;;600      int32_t ret;
;;;601    
;;;602      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2116              MOVS     r1,#0x16
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;603      if(ret == 0){
000014  b95d              CBNZ     r5,|L144.46|
;;;604        ctrl7_g.rounding_status = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640082          BFI      r0,r4,#2,#1
00001e  9000              STR      r0,[sp,#0]
;;;605        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL7_G, (uint8_t*)&ctrl7_g, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2116              MOVS     r1,#0x16
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L144.46|
;;;606      }
;;;607      return ret;
00002e  4628              MOV      r0,r5
;;;608    }
000030  bdf8              POP      {r3-r7,pc}
;;;609    
                          ENDP


                          AREA ||i.lsm6dsl_sh_cfg_write||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_cfg_write PROC
;;;6242     */
;;;6243   int32_t lsm6dsl_sh_cfg_write(lsm6dsl_ctx_t *ctx, lsm6dsl_sh_cfg_write_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;6244   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;6245     lsm6dsl_slv0_add_t slv0_add;
;;;6246     int32_t ret;
;;;6247   
;;;6248     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;6249     if(ret == 0){
000010  bb3c              CBNZ     r4,|L145.98|
;;;6250       slv0_add.slave0_add = val->slv0_add;
000012  7829              LDRB     r1,[r5,#0]
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3610047          BFI      r0,r1,#1,#7
00001c  9000              STR      r0,[sp,#0]
;;;6251       slv0_add.rw_0 = 0;
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  f0200001          BIC      r0,r0,#1
000026  9000              STR      r0,[sp,#0]
;;;6252       ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLV0_ADD, (uint8_t*)&slv0_add, 1);
000028  2301              MOVS     r3,#1
00002a  466a              MOV      r2,sp
00002c  2102              MOVS     r1,#2
00002e  4630              MOV      r0,r6
000030  f7fffffe          BL       lsm6dsl_write_reg
000034  4604              MOV      r4,r0
;;;6253       if(ret == 0){
000036  b9a4              CBNZ     r4,|L145.98|
;;;6254         ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLV0_SUBADD,
000038  2301              MOVS     r3,#1
00003a  1c6a              ADDS     r2,r5,#1
00003c  2103              MOVS     r1,#3
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       lsm6dsl_write_reg
000044  4604              MOV      r4,r0
;;;6255                                 &(val->slv0_subadd), 1);
;;;6256         if(ret == 0){
000046  b964              CBNZ     r4,|L145.98|
;;;6257           ret = lsm6dsl_write_reg(ctx, LSM6DSL_DATAWRITE_SRC_MODE_SUB_SLV0,
000048  2301              MOVS     r3,#1
00004a  1caa              ADDS     r2,r5,#2
00004c  210e              MOVS     r1,#0xe
00004e  4630              MOV      r0,r6
000050  f7fffffe          BL       lsm6dsl_write_reg
000054  4604              MOV      r4,r0
;;;6258                                   &(val->slv0_data), 1);
;;;6259           if(ret == 0){
000056  b924              CBNZ     r4,|L145.98|
;;;6260             ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000058  2100              MOVS     r1,#0
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       lsm6dsl_mem_bank_set
000060  4604              MOV      r4,r0
                  |L145.98|
;;;6261           }
;;;6262         }
;;;6263       }
;;;6264     }
;;;6265     return ret;
000062  4620              MOV      r0,r4
;;;6266   }
000064  bdf8              POP      {r3-r7,pc}
;;;6267   
                          ENDP


                          AREA ||i.lsm6dsl_sh_cmd_sens_sync_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_cmd_sens_sync_get PROC
;;;6101     */
;;;6102   int32_t lsm6dsl_sh_cmd_sens_sync_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;6103   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;6104     lsm6dsl_master_cmd_code_t master_cmd_code;
;;;6105     int32_t ret;
;;;6106   
;;;6107     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CMD_CODE,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;6108                            (uint8_t*)&master_cmd_code, 1);
;;;6109     *val = master_cmd_code.master_cmd_code;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  7020              STRB     r0,[r4,#0]
;;;6110   
;;;6111     return ret;
00001a  4630              MOV      r0,r6
;;;6112   }
00001c  bdf8              POP      {r3-r7,pc}
;;;6113   
                          ENDP


                          AREA ||i.lsm6dsl_sh_cmd_sens_sync_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_cmd_sens_sync_set PROC
;;;6077     */
;;;6078   int32_t lsm6dsl_sh_cmd_sens_sync_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;6079   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;6080     lsm6dsl_master_cmd_code_t master_cmd_code;
;;;6081     int32_t ret;
;;;6082   
;;;6083     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CMD_CODE,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2160              MOVS     r1,#0x60
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;6084                            (uint8_t*)&master_cmd_code, 1);
;;;6085     if(ret == 0){
000014  b945              CBNZ     r5,|L147.40|
;;;6086       master_cmd_code.master_cmd_code = val;
000016  b2e0              UXTB     r0,r4
000018  9000              STR      r0,[sp,#0]
;;;6087       ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CMD_CODE,
00001a  2301              MOVS     r3,#1
00001c  466a              MOV      r2,sp
00001e  2160              MOVS     r1,#0x60
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       lsm6dsl_write_reg
000026  4605              MOV      r5,r0
                  |L147.40|
;;;6088                               (uint8_t*)&master_cmd_code, 1);
;;;6089     }
;;;6090     return ret;
000028  4628              MOV      r0,r5
;;;6091   }
00002a  bdf8              POP      {r3-r7,pc}
;;;6092   
                          ENDP


                          AREA ||i.lsm6dsl_sh_drdy_on_int1_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_drdy_on_int1_get PROC
;;;6035     */
;;;6036   int32_t lsm6dsl_sh_drdy_on_int1_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;6037   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;6038     lsm6dsl_master_config_t master_config;
;;;6039     int32_t ret;
;;;6040   
;;;6041     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;6042                            (uint8_t*)&master_config, 1);
;;;6043     *val = master_config.drdy_on_int1;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;6044   
;;;6045     return ret;
00001c  4630              MOV      r0,r6
;;;6046   }
00001e  bdf8              POP      {r3-r7,pc}
;;;6047   
                          ENDP


                          AREA ||i.lsm6dsl_sh_drdy_on_int1_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_drdy_on_int1_set PROC
;;;6012     */
;;;6013   int32_t lsm6dsl_sh_drdy_on_int1_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;6014   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;6015     lsm6dsl_master_config_t master_config;
;;;6016     int32_t ret;
;;;6017   
;;;6018     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;6019                            (uint8_t*)&master_config, 1);
;;;6020     if(ret == 0){
000014  b95d              CBNZ     r5,|L149.46|
;;;6021       master_config.drdy_on_int1 = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;6022       ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  211a              MOVS     r1,#0x1a
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L149.46|
;;;6023                               (uint8_t*)&master_config, 1);
;;;6024     }
;;;6025     return ret;
00002e  4628              MOV      r0,r5
;;;6026   }
000030  bdf8              POP      {r3-r7,pc}
;;;6027   
                          ENDP


                          AREA ||i.lsm6dsl_sh_master_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_master_get PROC
;;;5841     */
;;;5842   int32_t lsm6dsl_sh_master_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5843   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;5844     lsm6dsl_master_config_t master_config;
;;;5845     int32_t ret;
;;;5846   
;;;5847     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;5848                            (uint8_t*)&master_config, 1);
;;;5849     *val = master_config.master_on;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  7020              STRB     r0,[r4,#0]
;;;5850   
;;;5851     return ret;
00001e  4630              MOV      r0,r6
;;;5852   }
000020  bdf8              POP      {r3-r7,pc}
;;;5853   
                          ENDP


                          AREA ||i.lsm6dsl_sh_master_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_master_set PROC
;;;5818     */
;;;5819   int32_t lsm6dsl_sh_master_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5820   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5821     lsm6dsl_master_config_t master_config;
;;;5822     int32_t ret;
;;;5823   
;;;5824     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5825                            (uint8_t*)&master_config, 1);
;;;5826     if(ret == 0){
000014  b95d              CBNZ     r5,|L151.46|
;;;5827       master_config.master_on = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;5828       ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  211a              MOVS     r1,#0x1a
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L151.46|
;;;5829                               (uint8_t*)&master_config, 1);
;;;5830     }
;;;5831     return ret;
00002e  4628              MOV      r0,r5
;;;5832   }
000030  bdf8              POP      {r3-r7,pc}
;;;5833   
                          ENDP


                          AREA ||i.lsm6dsl_sh_num_of_dev_connected_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_num_of_dev_connected_get PROC
;;;6196     */
;;;6197   int32_t lsm6dsl_sh_num_of_dev_connected_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;6198                                               lsm6dsl_aux_sens_on_t *val)
;;;6199   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;6200     lsm6dsl_slave0_config_t slave0_config;
;;;6201     int32_t ret;
;;;6202   
;;;6203     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4605              MOV      r5,r0
;;;6204     if(ret == 0){
000010  bb45              CBNZ     r5,|L152.100|
;;;6205       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE0_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2104              MOVS     r1,#4
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4605              MOV      r5,r0
;;;6206                              (uint8_t*)&slave0_config, 1);
;;;6207       if(ret == 0){
000020  bb05              CBNZ     r5,|L152.100|
;;;6208         switch (slave0_config.aux_sens_on) {
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3c01001          UBFX     r0,r0,#4,#2
00002a  b130              CBZ      r0,|L152.58|
00002c  2801              CMP      r0,#1
00002e  d007              BEQ      |L152.64|
000030  2802              CMP      r0,#2
000032  d008              BEQ      |L152.70|
000034  2803              CMP      r0,#3
000036  d10c              BNE      |L152.82|
000038  e008              B        |L152.76|
                  |L152.58|
;;;6209           case LSM6DSL_SLV_0:
;;;6210             *val = LSM6DSL_SLV_0;
00003a  2000              MOVS     r0,#0
00003c  7020              STRB     r0,[r4,#0]
;;;6211             break;
00003e  e00b              B        |L152.88|
                  |L152.64|
;;;6212           case LSM6DSL_SLV_0_1:
;;;6213             *val = LSM6DSL_SLV_0_1;
000040  2001              MOVS     r0,#1
000042  7020              STRB     r0,[r4,#0]
;;;6214             break;
000044  e008              B        |L152.88|
                  |L152.70|
;;;6215           case LSM6DSL_SLV_0_1_2:
;;;6216             *val = LSM6DSL_SLV_0_1_2;
000046  2002              MOVS     r0,#2
000048  7020              STRB     r0,[r4,#0]
;;;6217             break;
00004a  e005              B        |L152.88|
                  |L152.76|
;;;6218           case LSM6DSL_SLV_0_1_2_3:
;;;6219             *val = LSM6DSL_SLV_0_1_2_3;
00004c  2003              MOVS     r0,#3
00004e  7020              STRB     r0,[r4,#0]
;;;6220             break;
000050  e002              B        |L152.88|
                  |L152.82|
;;;6221           default:
;;;6222             *val = LSM6DSL_SLV_EN_ND;
000052  2004              MOVS     r0,#4
000054  7020              STRB     r0,[r4,#0]
;;;6223             break;
000056  bf00              NOP      
                  |L152.88|
000058  bf00              NOP                            ;6211
;;;6224         }
;;;6225         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00005a  2100              MOVS     r1,#0
00005c  4630              MOV      r0,r6
00005e  f7fffffe          BL       lsm6dsl_mem_bank_set
000062  4605              MOV      r5,r0
                  |L152.100|
;;;6226       }
;;;6227     }
;;;6228   
;;;6229     return ret;
000064  4628              MOV      r0,r5
;;;6230   }
000066  bdf8              POP      {r3-r7,pc}
;;;6231   
                          ENDP


                          AREA ||i.lsm6dsl_sh_num_of_dev_connected_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_num_of_dev_connected_set PROC
;;;6166     */
;;;6167   int32_t lsm6dsl_sh_num_of_dev_connected_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;6168                                               lsm6dsl_aux_sens_on_t val)
;;;6169   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;6170     lsm6dsl_slave0_config_t slave0_config;
;;;6171     int32_t ret;
;;;6172   
;;;6173     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;6174     if(ret == 0){
000010  b9cc              CBNZ     r4,|L153.70|
;;;6175       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE0_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2104              MOVS     r1,#4
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;6176                              (uint8_t*)&slave0_config, 1);
;;;6177       if(ret == 0){
000020  b98c              CBNZ     r4,|L153.70|
;;;6178         slave0_config.aux_sens_on = (uint8_t) val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3651005          BFI      r0,r5,#4,#2
00002a  9000              STR      r0,[sp,#0]
;;;6179         ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLAVE0_CONFIG,
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  2104              MOVS     r1,#4
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4604              MOV      r4,r0
;;;6180                                 (uint8_t*)&slave0_config, 1);
;;;6181         if(ret == 0){
00003a  b924              CBNZ     r4,|L153.70|
;;;6182           ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00003c  2100              MOVS     r1,#0
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       lsm6dsl_mem_bank_set
000044  4604              MOV      r4,r0
                  |L153.70|
;;;6183         }
;;;6184       }
;;;6185     }
;;;6186     return ret;
000046  4620              MOV      r0,r4
;;;6187   }
000048  bdf8              POP      {r3-r7,pc}
;;;6188   
                          ENDP


                          AREA ||i.lsm6dsl_sh_pass_through_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_pass_through_get PROC
;;;5884     */
;;;5885   int32_t lsm6dsl_sh_pass_through_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5886   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;5887     lsm6dsl_master_config_t master_config;
;;;5888     int32_t ret;
;;;5889   
;;;5890     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;5891                            (uint8_t*)&master_config, 1);
;;;5892     *val = master_config.pass_through_mode;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  7020              STRB     r0,[r4,#0]
;;;5893   
;;;5894     return ret;
00001e  4630              MOV      r0,r6
;;;5895   }
000020  bdf8              POP      {r3-r7,pc}
;;;5896   
                          ENDP


                          AREA ||i.lsm6dsl_sh_pass_through_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_pass_through_set PROC
;;;5861     */
;;;5862   int32_t lsm6dsl_sh_pass_through_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5863   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5864     lsm6dsl_master_config_t master_config;
;;;5865     int32_t ret;
;;;5866   
;;;5867     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5868                            (uint8_t*)&master_config, 1);
;;;5869     if(ret == 0){
000014  b95d              CBNZ     r5,|L155.46|
;;;5870       master_config.pass_through_mode = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640082          BFI      r0,r4,#2,#1
00001e  9000              STR      r0,[sp,#0]
;;;5871       ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  211a              MOVS     r1,#0x1a
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L155.46|
;;;5872                               (uint8_t*)&master_config, 1);
;;;5873     }
;;;5874     return ret;
00002e  4628              MOV      r0,r5
;;;5875   }
000030  bdf8              POP      {r3-r7,pc}
;;;5876   
                          ENDP


                          AREA ||i.lsm6dsl_sh_pin_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_pin_mode_get PROC
;;;5928     */
;;;5929   int32_t lsm6dsl_sh_pin_mode_get(lsm6dsl_ctx_t *ctx, lsm6dsl_pull_up_en_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5930   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;5931     lsm6dsl_master_config_t master_config;
;;;5932     int32_t ret;
;;;5933   
;;;5934     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;5935                            (uint8_t*)&master_config, 1);
;;;5936     switch (master_config.pull_up_en) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  b110              CBZ      r0,|L156.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L156.48|
000022  e002              B        |L156.42|
                  |L156.36|
;;;5937       case LSM6DSL_EXT_PULL_UP:
;;;5938         *val = LSM6DSL_EXT_PULL_UP;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;5939         break;
000028  e005              B        |L156.54|
                  |L156.42|
;;;5940       case LSM6DSL_INTERNAL_PULL_UP:
;;;5941         *val = LSM6DSL_INTERNAL_PULL_UP;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;5942         break;
00002e  e002              B        |L156.54|
                  |L156.48|
;;;5943       default:
;;;5944         *val = LSM6DSL_SH_PIN_MODE;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;5945         break;
000034  bf00              NOP      
                  |L156.54|
000036  bf00              NOP                            ;5939
;;;5946     }
;;;5947     return ret;
000038  4630              MOV      r0,r6
;;;5948   }
00003a  bdf8              POP      {r3-r7,pc}
;;;5949   
                          ENDP


                          AREA ||i.lsm6dsl_sh_pin_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_pin_mode_set PROC
;;;5904     */
;;;5905   int32_t lsm6dsl_sh_pin_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_pull_up_en_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5906   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5907     lsm6dsl_master_config_t master_config;
;;;5908     int32_t ret;
;;;5909   
;;;5910     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5911                            (uint8_t*)&master_config, 1);
;;;5912     if(ret == 0){
000014  b95d              CBNZ     r5,|L157.46|
;;;5913       master_config.pull_up_en = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;5914       ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  211a              MOVS     r1,#0x1a
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L157.46|
;;;5915                               (uint8_t*)&master_config, 1);
;;;5916     }
;;;5917   
;;;5918     return ret;
00002e  4628              MOV      r0,r5
;;;5919   }
000030  bdf8              POP      {r3-r7,pc}
;;;5920   
                          ENDP


                          AREA ||i.lsm6dsl_sh_read_data_raw_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_read_data_raw_get PROC
;;;6055     */
;;;6056   int32_t lsm6dsl_sh_read_data_raw_get(lsm6dsl_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;6057                                        lsm6dsl_emb_sh_read_t *val)
;;;6058   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;6059     int32_t ret;
;;;6060     ret = lsm6dsl_read_reg(ctx, LSM6DSL_SENSORHUB1_REG,
000006  230c              MOVS     r3,#0xc
000008  4622              MOV      r2,r4
00000a  212e              MOVS     r1,#0x2e
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;6061                            (uint8_t*)&(val->sh_byte_1), 12);
;;;6062     if(ret == 0){
000014  b93d              CBNZ     r5,|L158.38|
;;;6063       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SENSORHUB13_REG,
000016  2306              MOVS     r3,#6
000018  f104020c          ADD      r2,r4,#0xc
00001c  214d              MOVS     r1,#0x4d
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       lsm6dsl_read_reg
000024  4605              MOV      r5,r0
                  |L158.38|
;;;6064                              (uint8_t*)&(val->sh_byte_13), 6);
;;;6065     }
;;;6066     return ret;
000026  4628              MOV      r0,r5
;;;6067   }
000028  bd70              POP      {r4-r6,pc}
;;;6068   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slave_0_dec_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slave_0_dec_get PROC
;;;6480     */
;;;6481   int32_t lsm6dsl_sh_slave_0_dec_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;6482                                      lsm6dsl_slave0_rate_t *val)
;;;6483   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;6484     lsm6dsl_slave0_config_t slave0_config;
;;;6485     int32_t ret;
;;;6486   
;;;6487     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4605              MOV      r5,r0
;;;6488     if(ret == 0){
000010  bb3d              CBNZ     r5,|L159.98|
;;;6489       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE0_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2104              MOVS     r1,#4
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4605              MOV      r5,r0
;;;6490                              (uint8_t*)&slave0_config, 1);
;;;6491       if(ret == 0){
000020  b9fd              CBNZ     r5,|L159.98|
;;;6492         switch (slave0_config.slave0_rate) {
000022  f89d0000          LDRB     r0,[sp,#0]
000026  0980              LSRS     r0,r0,#6
000028  b130              CBZ      r0,|L159.56|
00002a  2801              CMP      r0,#1
00002c  d007              BEQ      |L159.62|
00002e  2802              CMP      r0,#2
000030  d008              BEQ      |L159.68|
000032  2803              CMP      r0,#3
000034  d10c              BNE      |L159.80|
000036  e008              B        |L159.74|
                  |L159.56|
;;;6493           case LSM6DSL_SL0_NO_DEC:
;;;6494             *val = LSM6DSL_SL0_NO_DEC;
000038  2000              MOVS     r0,#0
00003a  7020              STRB     r0,[r4,#0]
;;;6495             break;
00003c  e00b              B        |L159.86|
                  |L159.62|
;;;6496           case LSM6DSL_SL0_DEC_2:
;;;6497             *val = LSM6DSL_SL0_DEC_2;
00003e  2001              MOVS     r0,#1
000040  7020              STRB     r0,[r4,#0]
;;;6498             break;
000042  e008              B        |L159.86|
                  |L159.68|
;;;6499           case LSM6DSL_SL0_DEC_4:
;;;6500             *val = LSM6DSL_SL0_DEC_4;
000044  2002              MOVS     r0,#2
000046  7020              STRB     r0,[r4,#0]
;;;6501             break;
000048  e005              B        |L159.86|
                  |L159.74|
;;;6502           case LSM6DSL_SL0_DEC_8:
;;;6503             *val = LSM6DSL_SL0_DEC_8;
00004a  2003              MOVS     r0,#3
00004c  7020              STRB     r0,[r4,#0]
;;;6504             break;
00004e  e002              B        |L159.86|
                  |L159.80|
;;;6505           default:
;;;6506             *val = LSM6DSL_SL0_DEC_ND;
000050  2004              MOVS     r0,#4
000052  7020              STRB     r0,[r4,#0]
;;;6507             break;
000054  bf00              NOP      
                  |L159.86|
000056  bf00              NOP                            ;6495
;;;6508         }
;;;6509         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000058  2100              MOVS     r1,#0
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       lsm6dsl_mem_bank_set
000060  4605              MOV      r5,r0
                  |L159.98|
;;;6510       }
;;;6511     }
;;;6512   
;;;6513     return ret;
000062  4628              MOV      r0,r5
;;;6514   }
000064  bdf8              POP      {r3-r7,pc}
;;;6515   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slave_0_dec_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slave_0_dec_set PROC
;;;6449     */
;;;6450   int32_t lsm6dsl_sh_slave_0_dec_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;6451                                      lsm6dsl_slave0_rate_t val)
;;;6452   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;6453     lsm6dsl_slave0_config_t slave0_config;
;;;6454     int32_t ret;
;;;6455   
;;;6456     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;6457     if(ret == 0){
000010  b9cc              CBNZ     r4,|L160.70|
;;;6458       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE0_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2104              MOVS     r1,#4
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;6459                              (uint8_t*)&slave0_config, 1);
;;;6460       if(ret == 0){
000020  b98c              CBNZ     r4,|L160.70|
;;;6461         slave0_config.slave0_rate = (uint8_t) val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3651087          BFI      r0,r5,#6,#2
00002a  9000              STR      r0,[sp,#0]
;;;6462         ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLAVE0_CONFIG,
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  2104              MOVS     r1,#4
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4604              MOV      r4,r0
;;;6463                                 (uint8_t*)&slave0_config, 1);
;;;6464         if(ret == 0){
00003a  b924              CBNZ     r4,|L160.70|
;;;6465           ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00003c  2100              MOVS     r1,#0
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       lsm6dsl_mem_bank_set
000044  4604              MOV      r4,r0
                  |L160.70|
;;;6466         }
;;;6467       }
;;;6468     }
;;;6469     return ret;
000046  4620              MOV      r0,r4
;;;6470   }
000048  bdf8              POP      {r3-r7,pc}
;;;6471   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slave_1_dec_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slave_1_dec_get PROC
;;;6626     */
;;;6627   int32_t lsm6dsl_sh_slave_1_dec_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;6628                                      lsm6dsl_slave1_rate_t *val)
;;;6629   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;6630     lsm6dsl_slave1_config_t slave1_config;
;;;6631     int32_t ret;
;;;6632   
;;;6633     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4605              MOV      r5,r0
;;;6634     if(ret == 0){
000010  bb3d              CBNZ     r5,|L161.98|
;;;6635       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE1_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2107              MOVS     r1,#7
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4605              MOV      r5,r0
;;;6636                              (uint8_t*)&slave1_config, 1);
;;;6637       if(ret == 0){
000020  b9fd              CBNZ     r5,|L161.98|
;;;6638         switch (slave1_config.slave1_rate) {
000022  f89d0000          LDRB     r0,[sp,#0]
000026  0980              LSRS     r0,r0,#6
000028  b130              CBZ      r0,|L161.56|
00002a  2801              CMP      r0,#1
00002c  d007              BEQ      |L161.62|
00002e  2802              CMP      r0,#2
000030  d008              BEQ      |L161.68|
000032  2803              CMP      r0,#3
000034  d10c              BNE      |L161.80|
000036  e008              B        |L161.74|
                  |L161.56|
;;;6639           case LSM6DSL_SL1_NO_DEC:
;;;6640             *val = LSM6DSL_SL1_NO_DEC;
000038  2000              MOVS     r0,#0
00003a  7020              STRB     r0,[r4,#0]
;;;6641             break;
00003c  e00b              B        |L161.86|
                  |L161.62|
;;;6642           case LSM6DSL_SL1_DEC_2:
;;;6643             *val = LSM6DSL_SL1_DEC_2;
00003e  2001              MOVS     r0,#1
000040  7020              STRB     r0,[r4,#0]
;;;6644             break;
000042  e008              B        |L161.86|
                  |L161.68|
;;;6645           case LSM6DSL_SL1_DEC_4:
;;;6646             *val = LSM6DSL_SL1_DEC_4;
000044  2002              MOVS     r0,#2
000046  7020              STRB     r0,[r4,#0]
;;;6647             break;
000048  e005              B        |L161.86|
                  |L161.74|
;;;6648           case LSM6DSL_SL1_DEC_8:
;;;6649             *val = LSM6DSL_SL1_DEC_8;
00004a  2003              MOVS     r0,#3
00004c  7020              STRB     r0,[r4,#0]
;;;6650             break;
00004e  e002              B        |L161.86|
                  |L161.80|
;;;6651           default:
;;;6652             *val = LSM6DSL_SL1_DEC_ND;
000050  2004              MOVS     r0,#4
000052  7020              STRB     r0,[r4,#0]
;;;6653             break;
000054  bf00              NOP      
                  |L161.86|
000056  bf00              NOP                            ;6641
;;;6654         }
;;;6655         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000058  2100              MOVS     r1,#0
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       lsm6dsl_mem_bank_set
000060  4605              MOV      r5,r0
                  |L161.98|
;;;6656       }
;;;6657     }
;;;6658   
;;;6659     return ret;
000062  4628              MOV      r0,r5
;;;6660   }
000064  bdf8              POP      {r3-r7,pc}
;;;6661   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slave_1_dec_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slave_1_dec_set PROC
;;;6596     */
;;;6597   int32_t lsm6dsl_sh_slave_1_dec_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;6598                                      lsm6dsl_slave1_rate_t val)
;;;6599   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;6600     lsm6dsl_slave1_config_t slave1_config;
;;;6601     int32_t ret;
;;;6602   
;;;6603     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;6604     if(ret == 0){
000010  b9cc              CBNZ     r4,|L162.70|
;;;6605       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE1_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2107              MOVS     r1,#7
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;6606                              (uint8_t*)&slave1_config, 1);
;;;6607       if(ret == 0){
000020  b98c              CBNZ     r4,|L162.70|
;;;6608         slave1_config.slave1_rate = (uint8_t) val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3651087          BFI      r0,r5,#6,#2
00002a  9000              STR      r0,[sp,#0]
;;;6609         ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLAVE1_CONFIG,
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  2107              MOVS     r1,#7
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4604              MOV      r4,r0
;;;6610                                 (uint8_t*)&slave1_config, 1);
;;;6611         if(ret == 0){
00003a  b924              CBNZ     r4,|L162.70|
;;;6612             ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00003c  2100              MOVS     r1,#0
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       lsm6dsl_mem_bank_set
000044  4604              MOV      r4,r0
                  |L162.70|
;;;6613         }
;;;6614       }
;;;6615     }
;;;6616     return ret;
000046  4620              MOV      r0,r4
;;;6617   }
000048  bdf8              POP      {r3-r7,pc}
;;;6618   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slave_2_dec_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slave_2_dec_get PROC
;;;6701     */
;;;6702   int32_t lsm6dsl_sh_slave_2_dec_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;6703                                      lsm6dsl_slave2_rate_t *val)
;;;6704   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;6705     lsm6dsl_slave2_config_t slave2_config;
;;;6706     int32_t ret;
;;;6707   
;;;6708     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4605              MOV      r5,r0
;;;6709     if(ret == 0){
000010  bb3d              CBNZ     r5,|L163.98|
;;;6710       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE2_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  210a              MOVS     r1,#0xa
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4605              MOV      r5,r0
;;;6711                              (uint8_t*)&slave2_config, 1);
;;;6712       if(ret == 0){
000020  b9fd              CBNZ     r5,|L163.98|
;;;6713         switch (slave2_config.slave2_rate) {
000022  f89d0000          LDRB     r0,[sp,#0]
000026  0980              LSRS     r0,r0,#6
000028  b130              CBZ      r0,|L163.56|
00002a  2801              CMP      r0,#1
00002c  d007              BEQ      |L163.62|
00002e  2802              CMP      r0,#2
000030  d008              BEQ      |L163.68|
000032  2803              CMP      r0,#3
000034  d10c              BNE      |L163.80|
000036  e008              B        |L163.74|
                  |L163.56|
;;;6714           case LSM6DSL_SL2_NO_DEC:
;;;6715             *val = LSM6DSL_SL2_NO_DEC;
000038  2000              MOVS     r0,#0
00003a  7020              STRB     r0,[r4,#0]
;;;6716             break;
00003c  e00b              B        |L163.86|
                  |L163.62|
;;;6717           case LSM6DSL_SL2_DEC_2:
;;;6718             *val = LSM6DSL_SL2_DEC_2;
00003e  2001              MOVS     r0,#1
000040  7020              STRB     r0,[r4,#0]
;;;6719             break;
000042  e008              B        |L163.86|
                  |L163.68|
;;;6720           case LSM6DSL_SL2_DEC_4:
;;;6721             *val = LSM6DSL_SL2_DEC_4;
000044  2002              MOVS     r0,#2
000046  7020              STRB     r0,[r4,#0]
;;;6722             break;
000048  e005              B        |L163.86|
                  |L163.74|
;;;6723           case LSM6DSL_SL2_DEC_8:
;;;6724             *val = LSM6DSL_SL2_DEC_8;
00004a  2003              MOVS     r0,#3
00004c  7020              STRB     r0,[r4,#0]
;;;6725             break;
00004e  e002              B        |L163.86|
                  |L163.80|
;;;6726           default:
;;;6727             *val = LSM6DSL_SL2_DEC_ND;
000050  2004              MOVS     r0,#4
000052  7020              STRB     r0,[r4,#0]
;;;6728             break;
000054  bf00              NOP      
                  |L163.86|
000056  bf00              NOP                            ;6716
;;;6729         }
;;;6730         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000058  2100              MOVS     r1,#0
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       lsm6dsl_mem_bank_set
000060  4605              MOV      r5,r0
                  |L163.98|
;;;6731       }
;;;6732     }
;;;6733   
;;;6734     return ret;
000062  4628              MOV      r0,r5
;;;6735   }
000064  bdf8              POP      {r3-r7,pc}
;;;6736   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slave_2_dec_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slave_2_dec_set PROC
;;;6670     */
;;;6671   int32_t lsm6dsl_sh_slave_2_dec_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;6672                                      lsm6dsl_slave2_rate_t val)
;;;6673   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;6674     lsm6dsl_slave2_config_t slave2_config;
;;;6675     int32_t ret;
;;;6676   
;;;6677     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;6678     if(ret == 0){
000010  b9cc              CBNZ     r4,|L164.70|
;;;6679       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE2_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  210a              MOVS     r1,#0xa
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;6680                              (uint8_t*)&slave2_config, 1);
;;;6681       if(ret == 0){
000020  b98c              CBNZ     r4,|L164.70|
;;;6682         slave2_config.slave2_rate =(uint8_t) val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3651087          BFI      r0,r5,#6,#2
00002a  9000              STR      r0,[sp,#0]
;;;6683         ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLAVE2_CONFIG,
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  210a              MOVS     r1,#0xa
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4604              MOV      r4,r0
;;;6684                                 (uint8_t*)&slave2_config, 1);
;;;6685         if(ret == 0){
00003a  b924              CBNZ     r4,|L164.70|
;;;6686           ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00003c  2100              MOVS     r1,#0
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       lsm6dsl_mem_bank_set
000044  4604              MOV      r4,r0
                  |L164.70|
;;;6687         }
;;;6688       }
;;;6689     }
;;;6690     return ret;
000046  4620              MOV      r0,r4
;;;6691   }
000048  bdf8              POP      {r3-r7,pc}
;;;6692   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slave_3_dec_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slave_3_dec_get PROC
;;;6776     */
;;;6777   int32_t lsm6dsl_sh_slave_3_dec_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;6778                                      lsm6dsl_slave3_rate_t *val)
;;;6779   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;6780     lsm6dsl_slave3_config_t slave3_config;
;;;6781     int32_t ret;
;;;6782   
;;;6783     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4605              MOV      r5,r0
;;;6784     if(ret == 0){
000010  bb3d              CBNZ     r5,|L165.98|
;;;6785       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE3_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  210d              MOVS     r1,#0xd
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4605              MOV      r5,r0
;;;6786                              (uint8_t*)&slave3_config, 1);
;;;6787       if(ret == 0){
000020  b9fd              CBNZ     r5,|L165.98|
;;;6788         switch (slave3_config.slave3_rate) {
000022  f89d0000          LDRB     r0,[sp,#0]
000026  0980              LSRS     r0,r0,#6
000028  b130              CBZ      r0,|L165.56|
00002a  2801              CMP      r0,#1
00002c  d007              BEQ      |L165.62|
00002e  2802              CMP      r0,#2
000030  d008              BEQ      |L165.68|
000032  2803              CMP      r0,#3
000034  d10c              BNE      |L165.80|
000036  e008              B        |L165.74|
                  |L165.56|
;;;6789           case LSM6DSL_SL3_NO_DEC:
;;;6790             *val = LSM6DSL_SL3_NO_DEC;
000038  2000              MOVS     r0,#0
00003a  7020              STRB     r0,[r4,#0]
;;;6791             break;
00003c  e00b              B        |L165.86|
                  |L165.62|
;;;6792           case LSM6DSL_SL3_DEC_2:
;;;6793             *val = LSM6DSL_SL3_DEC_2;
00003e  2001              MOVS     r0,#1
000040  7020              STRB     r0,[r4,#0]
;;;6794             break;
000042  e008              B        |L165.86|
                  |L165.68|
;;;6795           case LSM6DSL_SL3_DEC_4:
;;;6796             *val = LSM6DSL_SL3_DEC_4;
000044  2002              MOVS     r0,#2
000046  7020              STRB     r0,[r4,#0]
;;;6797             break;
000048  e005              B        |L165.86|
                  |L165.74|
;;;6798           case LSM6DSL_SL3_DEC_8:
;;;6799             *val = LSM6DSL_SL3_DEC_8;
00004a  2003              MOVS     r0,#3
00004c  7020              STRB     r0,[r4,#0]
;;;6800             break;
00004e  e002              B        |L165.86|
                  |L165.80|
;;;6801           default:
;;;6802             *val = LSM6DSL_SL3_DEC_ND;
000050  2004              MOVS     r0,#4
000052  7020              STRB     r0,[r4,#0]
;;;6803             break;
000054  bf00              NOP      
                  |L165.86|
000056  bf00              NOP                            ;6791
;;;6804         }
;;;6805         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000058  2100              MOVS     r1,#0
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       lsm6dsl_mem_bank_set
000060  4605              MOV      r5,r0
                  |L165.98|
;;;6806       }
;;;6807     }
;;;6808   
;;;6809     return ret;
000062  4628              MOV      r0,r5
;;;6810   }
000064  bdf8              POP      {r3-r7,pc}
;;;6811   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slave_3_dec_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slave_3_dec_set PROC
;;;6745     */
;;;6746   int32_t lsm6dsl_sh_slave_3_dec_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;6747                                      lsm6dsl_slave3_rate_t val)
;;;6748   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;6749     lsm6dsl_slave3_config_t slave3_config;
;;;6750     int32_t ret;
;;;6751   
;;;6752     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;6753     if(ret == 0){
000010  b9cc              CBNZ     r4,|L166.70|
;;;6754       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE3_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  210d              MOVS     r1,#0xd
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;6755                              (uint8_t*)&slave3_config, 1);
;;;6756       slave3_config.slave3_rate = (uint8_t)val;
000020  f89d0000          LDRB     r0,[sp,#0]
000024  f3651087          BFI      r0,r5,#6,#2
000028  9000              STR      r0,[sp,#0]
;;;6757       if(ret == 0){
00002a  b964              CBNZ     r4,|L166.70|
;;;6758         ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLAVE3_CONFIG,
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  210d              MOVS     r1,#0xd
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4604              MOV      r4,r0
;;;6759                                 (uint8_t*)&slave3_config, 1);
;;;6760         if(ret == 0){
00003a  b924              CBNZ     r4,|L166.70|
;;;6761           ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00003c  2100              MOVS     r1,#0
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       lsm6dsl_mem_bank_set
000044  4604              MOV      r4,r0
                  |L166.70|
;;;6762         }
;;;6763       }
;;;6764     }
;;;6765     return ret;
000046  4620              MOV      r0,r4
;;;6766   }
000048  bdf8              POP      {r3-r7,pc}
;;;6767   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slv0_cfg_read||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slv0_cfg_read PROC
;;;6278     */
;;;6279   int32_t lsm6dsl_sh_slv0_cfg_read(lsm6dsl_ctx_t *ctx,
000000  b57c              PUSH     {r2-r6,lr}
;;;6280                                    lsm6dsl_sh_cfg_read_t *val)
;;;6281   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;6282     lsm6dsl_slave0_config_t slave0_config;
;;;6283     lsm6dsl_slv0_add_t slv0_add;
;;;6284     int32_t ret;
;;;6285   
;;;6286     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;6287     if(ret == 0){
000010  bbb4              CBNZ     r4,|L167.128|
;;;6288       slv0_add.slave0_add = val->slv_add;
000012  7829              LDRB     r1,[r5,#0]
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3610047          BFI      r0,r1,#1,#7
00001c  9000              STR      r0,[sp,#0]
;;;6289       slv0_add.rw_0 = 1;
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  f0200001          BIC      r0,r0,#1
000026  1c40              ADDS     r0,r0,#1
000028  9000              STR      r0,[sp,#0]
;;;6290       ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLV0_ADD, (uint8_t*)&slv0_add, 1);
00002a  2301              MOVS     r3,#1
00002c  466a              MOV      r2,sp
00002e  2102              MOVS     r1,#2
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       lsm6dsl_write_reg
000036  4604              MOV      r4,r0
;;;6291       if(ret == 0){
000038  bb14              CBNZ     r4,|L167.128|
;;;6292         ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLV0_SUBADD,
00003a  2301              MOVS     r3,#1
00003c  1c6a              ADDS     r2,r5,#1
00003e  2103              MOVS     r1,#3
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       lsm6dsl_write_reg
000046  4604              MOV      r4,r0
;;;6293                                 &(val->slv_subadd), 1);
;;;6294         if(ret == 0){
000048  b9d4              CBNZ     r4,|L167.128|
;;;6295           ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE0_CONFIG,
00004a  2301              MOVS     r3,#1
00004c  aa01              ADD      r2,sp,#4
00004e  2104              MOVS     r1,#4
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       lsm6dsl_read_reg
000056  4604              MOV      r4,r0
;;;6296                                  (uint8_t*)&slave0_config, 1);
;;;6297           slave0_config.slave0_numop = val->slv_len;
000058  78a9              LDRB     r1,[r5,#2]
00005a  f89d0004          LDRB     r0,[sp,#4]
00005e  f3610002          BFI      r0,r1,#0,#3
000062  9001              STR      r0,[sp,#4]
;;;6298           if(ret == 0){
000064  b964              CBNZ     r4,|L167.128|
;;;6299             ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLAVE0_CONFIG,
000066  2301              MOVS     r3,#1
000068  aa01              ADD      r2,sp,#4
00006a  2104              MOVS     r1,#4
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       lsm6dsl_write_reg
000072  4604              MOV      r4,r0
;;;6300                                     (uint8_t*)&slave0_config, 1);
;;;6301             if(ret == 0){
000074  b924              CBNZ     r4,|L167.128|
;;;6302               ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000076  2100              MOVS     r1,#0
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       lsm6dsl_mem_bank_set
00007e  4604              MOV      r4,r0
                  |L167.128|
;;;6303             }
;;;6304           }
;;;6305         }
;;;6306       }
;;;6307     }
;;;6308     return ret;
000080  4620              MOV      r0,r4
;;;6309   }
000082  bd7c              POP      {r2-r6,pc}
;;;6310   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slv1_cfg_read||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slv1_cfg_read PROC
;;;6321     */
;;;6322   int32_t lsm6dsl_sh_slv1_cfg_read(lsm6dsl_ctx_t *ctx,
000000  b57c              PUSH     {r2-r6,lr}
;;;6323                                    lsm6dsl_sh_cfg_read_t *val)
;;;6324   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;6325     lsm6dsl_slave1_config_t slave1_config;
;;;6326     lsm6dsl_slv1_add_t slv1_add;
;;;6327     int32_t ret;
;;;6328   
;;;6329     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;6330     if(ret == 0){
000010  bbb4              CBNZ     r4,|L168.128|
;;;6331       slv1_add.slave1_add  = val->slv_add;
000012  7829              LDRB     r1,[r5,#0]
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3610047          BFI      r0,r1,#1,#7
00001c  9000              STR      r0,[sp,#0]
;;;6332       slv1_add.r_1 = 1;
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  f0200001          BIC      r0,r0,#1
000026  1c40              ADDS     r0,r0,#1
000028  9000              STR      r0,[sp,#0]
;;;6333       ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLV1_ADD, (uint8_t*)&slv1_add, 1);
00002a  2301              MOVS     r3,#1
00002c  466a              MOV      r2,sp
00002e  2105              MOVS     r1,#5
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       lsm6dsl_write_reg
000036  4604              MOV      r4,r0
;;;6334       if(ret == 0){
000038  bb14              CBNZ     r4,|L168.128|
;;;6335         ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLV1_SUBADD,
00003a  2301              MOVS     r3,#1
00003c  1c6a              ADDS     r2,r5,#1
00003e  2106              MOVS     r1,#6
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       lsm6dsl_write_reg
000046  4604              MOV      r4,r0
;;;6336                                      &(val->slv_subadd), 1);
;;;6337         if(ret == 0){
000048  b9d4              CBNZ     r4,|L168.128|
;;;6338           ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE1_CONFIG,
00004a  2301              MOVS     r3,#1
00004c  aa01              ADD      r2,sp,#4
00004e  2107              MOVS     r1,#7
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       lsm6dsl_read_reg
000056  4604              MOV      r4,r0
;;;6339                                  (uint8_t*)&slave1_config, 1);
;;;6340           slave1_config.slave1_numop = val->slv_len;
000058  78a9              LDRB     r1,[r5,#2]
00005a  f89d0004          LDRB     r0,[sp,#4]
00005e  f3610002          BFI      r0,r1,#0,#3
000062  9001              STR      r0,[sp,#4]
;;;6341           if(ret == 0){
000064  b964              CBNZ     r4,|L168.128|
;;;6342             ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLAVE1_CONFIG,
000066  2301              MOVS     r3,#1
000068  aa01              ADD      r2,sp,#4
00006a  2107              MOVS     r1,#7
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       lsm6dsl_write_reg
000072  4604              MOV      r4,r0
;;;6343                                     (uint8_t*)&slave1_config, 1);
;;;6344             if(ret == 0){
000074  b924              CBNZ     r4,|L168.128|
;;;6345               ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000076  2100              MOVS     r1,#0
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       lsm6dsl_mem_bank_set
00007e  4604              MOV      r4,r0
                  |L168.128|
;;;6346             }
;;;6347           }
;;;6348         }
;;;6349       }
;;;6350     }
;;;6351     return ret;
000080  4620              MOV      r0,r4
;;;6352   }
000082  bd7c              POP      {r2-r6,pc}
;;;6353   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slv2_cfg_read||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slv2_cfg_read PROC
;;;6364     */
;;;6365   int32_t lsm6dsl_sh_slv2_cfg_read(lsm6dsl_ctx_t *ctx,
000000  b57c              PUSH     {r2-r6,lr}
;;;6366                                    lsm6dsl_sh_cfg_read_t *val)
;;;6367   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;6368     lsm6dsl_slv2_add_t slv2_add;
;;;6369     lsm6dsl_slave2_config_t slave2_config;
;;;6370     int32_t ret;
;;;6371   
;;;6372     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;6373     if(ret == 0){
000010  bbb4              CBNZ     r4,|L169.128|
;;;6374       slv2_add.slave2_add  = val->slv_add;
000012  7829              LDRB     r1,[r5,#0]
000014  f89d0004          LDRB     r0,[sp,#4]
000018  f3610047          BFI      r0,r1,#1,#7
00001c  9001              STR      r0,[sp,#4]
;;;6375       slv2_add.r_2 = 1;
00001e  f89d0004          LDRB     r0,[sp,#4]
000022  f0200001          BIC      r0,r0,#1
000026  1c40              ADDS     r0,r0,#1
000028  9001              STR      r0,[sp,#4]
;;;6376       ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLV2_ADD, (uint8_t*)&slv2_add, 1);
00002a  2301              MOVS     r3,#1
00002c  aa01              ADD      r2,sp,#4
00002e  2108              MOVS     r1,#8
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       lsm6dsl_write_reg
000036  4604              MOV      r4,r0
;;;6377       if(ret == 0){
000038  bb14              CBNZ     r4,|L169.128|
;;;6378         ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLV2_SUBADD,
00003a  2301              MOVS     r3,#1
00003c  1c6a              ADDS     r2,r5,#1
00003e  2109              MOVS     r1,#9
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       lsm6dsl_write_reg
000046  4604              MOV      r4,r0
;;;6379                                 &(val->slv_subadd), 1);
;;;6380         if(ret == 0){
000048  b9d4              CBNZ     r4,|L169.128|
;;;6381           ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE2_CONFIG,
00004a  2301              MOVS     r3,#1
00004c  466a              MOV      r2,sp
00004e  210a              MOVS     r1,#0xa
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       lsm6dsl_read_reg
000056  4604              MOV      r4,r0
;;;6382                                  (uint8_t*)&slave2_config, 1);
;;;6383           if(ret == 0){
000058  b994              CBNZ     r4,|L169.128|
;;;6384             slave2_config.slave2_numop = val->slv_len;
00005a  78a9              LDRB     r1,[r5,#2]
00005c  f89d0000          LDRB     r0,[sp,#0]
000060  f3610002          BFI      r0,r1,#0,#3
000064  9000              STR      r0,[sp,#0]
;;;6385             ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLAVE2_CONFIG,
000066  2301              MOVS     r3,#1
000068  466a              MOV      r2,sp
00006a  210a              MOVS     r1,#0xa
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       lsm6dsl_write_reg
000072  4604              MOV      r4,r0
;;;6386                                     (uint8_t*)&slave2_config, 1);
;;;6387             if(ret == 0){
000074  b924              CBNZ     r4,|L169.128|
;;;6388               ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000076  2100              MOVS     r1,#0
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       lsm6dsl_mem_bank_set
00007e  4604              MOV      r4,r0
                  |L169.128|
;;;6389             }
;;;6390           }
;;;6391         }
;;;6392       }
;;;6393     }
;;;6394   
;;;6395     return ret;
000080  4620              MOV      r0,r4
;;;6396   }
000082  bd7c              POP      {r2-r6,pc}
;;;6397   
                          ENDP


                          AREA ||i.lsm6dsl_sh_slv3_cfg_read||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_slv3_cfg_read PROC
;;;6408     */
;;;6409   int32_t lsm6dsl_sh_slv3_cfg_read(lsm6dsl_ctx_t *ctx,
000000  b57c              PUSH     {r2-r6,lr}
;;;6410                                    lsm6dsl_sh_cfg_read_t *val)
;;;6411   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;6412     lsm6dsl_slave3_config_t slave3_config;
;;;6413     lsm6dsl_slv3_add_t slv3_add;
;;;6414     int32_t ret;
;;;6415   
;;;6416     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;6417     if(ret == 0){
000010  bbb4              CBNZ     r4,|L170.128|
;;;6418       slv3_add.slave3_add  = val->slv_add;
000012  7829              LDRB     r1,[r5,#0]
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3610047          BFI      r0,r1,#1,#7
00001c  9000              STR      r0,[sp,#0]
;;;6419       slv3_add.r_3 = 1;
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  f0200001          BIC      r0,r0,#1
000026  1c40              ADDS     r0,r0,#1
000028  9000              STR      r0,[sp,#0]
;;;6420       ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLV3_ADD, (uint8_t*)&slv3_add, 1);
00002a  2301              MOVS     r3,#1
00002c  466a              MOV      r2,sp
00002e  210b              MOVS     r1,#0xb
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       lsm6dsl_write_reg
000036  4604              MOV      r4,r0
;;;6421       if(ret == 0){
000038  bb14              CBNZ     r4,|L170.128|
;;;6422         ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLV3_SUBADD,
00003a  2301              MOVS     r3,#1
00003c  1c6a              ADDS     r2,r5,#1
00003e  210c              MOVS     r1,#0xc
000040  4630              MOV      r0,r6
000042  f7fffffe          BL       lsm6dsl_write_reg
000046  4604              MOV      r4,r0
;;;6423                                 (uint8_t*)&(val->slv_subadd), 1);
;;;6424         if(ret == 0){
000048  b9d4              CBNZ     r4,|L170.128|
;;;6425           ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE3_CONFIG,
00004a  2301              MOVS     r3,#1
00004c  aa01              ADD      r2,sp,#4
00004e  210d              MOVS     r1,#0xd
000050  4630              MOV      r0,r6
000052  f7fffffe          BL       lsm6dsl_read_reg
000056  4604              MOV      r4,r0
;;;6426                                  (uint8_t*)&slave3_config, 1);
;;;6427           if(ret == 0){
000058  b994              CBNZ     r4,|L170.128|
;;;6428             slave3_config.slave3_numop = val->slv_len;
00005a  78a9              LDRB     r1,[r5,#2]
00005c  f89d0004          LDRB     r0,[sp,#4]
000060  f3610002          BFI      r0,r1,#0,#3
000064  9001              STR      r0,[sp,#4]
;;;6429             ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLAVE3_CONFIG,
000066  2301              MOVS     r3,#1
000068  aa01              ADD      r2,sp,#4
00006a  210d              MOVS     r1,#0xd
00006c  4630              MOV      r0,r6
00006e  f7fffffe          BL       lsm6dsl_write_reg
000072  4604              MOV      r4,r0
;;;6430                                     (uint8_t*)&slave3_config, 1);
;;;6431             if(ret == 0){
000074  b924              CBNZ     r4,|L170.128|
;;;6432               ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000076  2100              MOVS     r1,#0
000078  4630              MOV      r0,r6
00007a  f7fffffe          BL       lsm6dsl_mem_bank_set
00007e  4604              MOV      r4,r0
                  |L170.128|
;;;6433             }
;;;6434           }
;;;6435         }
;;;6436       }
;;;6437     }
;;;6438     return ret;
000080  4620              MOV      r0,r4
;;;6439   }
000082  bd7c              POP      {r2-r6,pc}
;;;6440   
                          ENDP


                          AREA ||i.lsm6dsl_sh_spi_sync_error_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_spi_sync_error_get PROC
;;;6146     */
;;;6147   int32_t lsm6dsl_sh_spi_sync_error_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;6148   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;6149     lsm6dsl_sens_sync_spi_error_code_t sens_sync_spi_error_code;
;;;6150     int32_t ret;
;;;6151   
;;;6152     ret = lsm6dsl_read_reg(ctx, LSM6DSL_SENS_SYNC_SPI_ERROR_CODE,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2161              MOVS     r1,#0x61
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;6153                            (uint8_t*)&sens_sync_spi_error_code, 1);
;;;6154     *val =  sens_sync_spi_error_code.error_code;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  7020              STRB     r0,[r4,#0]
;;;6155   
;;;6156     return ret;
00001a  4630              MOV      r0,r6
;;;6157   }
00001c  bdf8              POP      {r3-r7,pc}
;;;6158   
                          ENDP


                          AREA ||i.lsm6dsl_sh_spi_sync_error_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_spi_sync_error_set PROC
;;;6122     */
;;;6123   int32_t lsm6dsl_sh_spi_sync_error_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;6124   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;6125     lsm6dsl_sens_sync_spi_error_code_t sens_sync_spi_error_code;
;;;6126     int32_t ret;
;;;6127   
;;;6128     ret = lsm6dsl_read_reg(ctx, LSM6DSL_SENS_SYNC_SPI_ERROR_CODE,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2161              MOVS     r1,#0x61
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;6129                            (uint8_t*)&sens_sync_spi_error_code, 1);
;;;6130     if(ret == 0){
000014  b945              CBNZ     r5,|L172.40|
;;;6131        sens_sync_spi_error_code.error_code = val;
000016  b2e0              UXTB     r0,r4
000018  9000              STR      r0,[sp,#0]
;;;6132       ret = lsm6dsl_write_reg(ctx, LSM6DSL_SENS_SYNC_SPI_ERROR_CODE,
00001a  2301              MOVS     r3,#1
00001c  466a              MOV      r2,sp
00001e  2161              MOVS     r1,#0x61
000020  4630              MOV      r0,r6
000022  f7fffffe          BL       lsm6dsl_write_reg
000026  4605              MOV      r5,r0
                  |L172.40|
;;;6133                               (uint8_t*)&sens_sync_spi_error_code, 1);
;;;6134     }
;;;6135     return ret;
000028  4628              MOV      r0,r5
;;;6136   }
00002a  bdf8              POP      {r3-r7,pc}
;;;6137   
                          ENDP


                          AREA ||i.lsm6dsl_sh_sync_sens_frame_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_sync_sens_frame_get PROC
;;;5738     */
;;;5739   int32_t lsm6dsl_sh_sync_sens_frame_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5740   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;5741     lsm6dsl_sensor_sync_time_frame_t sensor_sync_time_frame;
;;;5742     int32_t ret;
;;;5743   
;;;5744     ret = lsm6dsl_read_reg(ctx, LSM6DSL_SENSOR_SYNC_TIME_FRAME,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2104              MOVS     r1,#4
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;5745                            (uint8_t*)&sensor_sync_time_frame, 1);
;;;5746     *val =  sensor_sync_time_frame.tph;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000000f          AND      r0,r0,#0xf
00001c  7020              STRB     r0,[r4,#0]
;;;5747   
;;;5748     return ret;
00001e  4630              MOV      r0,r6
;;;5749   }
000020  bdf8              POP      {r3-r7,pc}
;;;5750   
                          ENDP


                          AREA ||i.lsm6dsl_sh_sync_sens_frame_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_sync_sens_frame_set PROC
;;;5714     */
;;;5715   int32_t lsm6dsl_sh_sync_sens_frame_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5716   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5717     lsm6dsl_sensor_sync_time_frame_t sensor_sync_time_frame;
;;;5718     int32_t ret;
;;;5719   
;;;5720     ret = lsm6dsl_read_reg(ctx, LSM6DSL_SENSOR_SYNC_TIME_FRAME,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2104              MOVS     r1,#4
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5721                            (uint8_t*)&sensor_sync_time_frame, 1);
;;;5722     if(ret == 0){
000014  b95d              CBNZ     r5,|L174.46|
;;;5723        sensor_sync_time_frame.tph = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640003          BFI      r0,r4,#0,#4
00001e  9000              STR      r0,[sp,#0]
;;;5724       ret = lsm6dsl_write_reg(ctx, LSM6DSL_SENSOR_SYNC_TIME_FRAME,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2104              MOVS     r1,#4
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L174.46|
;;;5725                               (uint8_t*)&sensor_sync_time_frame, 1);
;;;5726     }
;;;5727     return ret;
00002e  4628              MOV      r0,r5
;;;5728   }
000030  bdf8              POP      {r3-r7,pc}
;;;5729   
                          ENDP


                          AREA ||i.lsm6dsl_sh_sync_sens_ratio_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_sync_sens_ratio_get PROC
;;;5781     */
;;;5782   int32_t lsm6dsl_sh_sync_sens_ratio_get(lsm6dsl_ctx_t *ctx, lsm6dsl_rr_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5783   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;5784     lsm6dsl_sensor_sync_res_ratio_t sensor_sync_res_ratio;
;;;5785     int32_t ret;
;;;5786   
;;;5787     ret = lsm6dsl_read_reg(ctx, LSM6DSL_SENSOR_SYNC_RES_RATIO,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2105              MOVS     r1,#5
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;5788                            (uint8_t*)&sensor_sync_res_ratio, 1);
;;;5789   
;;;5790     switch ( sensor_sync_res_ratio.rr) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000003          AND      r0,r0,#3
00001c  b130              CBZ      r0,|L175.44|
00001e  2801              CMP      r0,#1
000020  d007              BEQ      |L175.50|
000022  2802              CMP      r0,#2
000024  d008              BEQ      |L175.56|
000026  2803              CMP      r0,#3
000028  d10c              BNE      |L175.68|
00002a  e008              B        |L175.62|
                  |L175.44|
;;;5791       case LSM6DSL_RES_RATIO_2_11:
;;;5792         *val = LSM6DSL_RES_RATIO_2_11;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;5793         break;
000030  e00b              B        |L175.74|
                  |L175.50|
;;;5794       case LSM6DSL_RES_RATIO_2_12:
;;;5795         *val = LSM6DSL_RES_RATIO_2_12;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;5796         break;
000036  e008              B        |L175.74|
                  |L175.56|
;;;5797       case LSM6DSL_RES_RATIO_2_13:
;;;5798         *val = LSM6DSL_RES_RATIO_2_13;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;5799         break;
00003c  e005              B        |L175.74|
                  |L175.62|
;;;5800       case LSM6DSL_RES_RATIO_2_14:
;;;5801         *val = LSM6DSL_RES_RATIO_2_14;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;5802         break;
000042  e002              B        |L175.74|
                  |L175.68|
;;;5803       default:
;;;5804         *val = LSM6DSL_RES_RATIO_ND;
000044  2004              MOVS     r0,#4
000046  7020              STRB     r0,[r4,#0]
;;;5805         break;
000048  bf00              NOP      
                  |L175.74|
00004a  bf00              NOP                            ;5793
;;;5806     }
;;;5807   
;;;5808     return ret;
00004c  4630              MOV      r0,r6
;;;5809   }
00004e  bdf8              POP      {r3-r7,pc}
;;;5810   
                          ENDP


                          AREA ||i.lsm6dsl_sh_sync_sens_ratio_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_sync_sens_ratio_set PROC
;;;5758     */
;;;5759   int32_t lsm6dsl_sh_sync_sens_ratio_set(lsm6dsl_ctx_t *ctx, lsm6dsl_rr_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5760   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5761     lsm6dsl_sensor_sync_res_ratio_t sensor_sync_res_ratio;
;;;5762     int32_t ret;
;;;5763   
;;;5764     ret = lsm6dsl_read_reg(ctx, LSM6DSL_SENSOR_SYNC_RES_RATIO,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2105              MOVS     r1,#5
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5765                                 (uint8_t*)&sensor_sync_res_ratio, 1);
;;;5766     if(ret == 0){
000014  b95d              CBNZ     r5,|L176.46|
;;;5767       sensor_sync_res_ratio.rr = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640001          BFI      r0,r4,#0,#2
00001e  9000              STR      r0,[sp,#0]
;;;5768       ret = lsm6dsl_write_reg(ctx, LSM6DSL_SENSOR_SYNC_RES_RATIO,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2105              MOVS     r1,#5
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L176.46|
;;;5769                               (uint8_t*)&sensor_sync_res_ratio, 1);
;;;5770     }
;;;5771     return ret;
00002e  4628              MOV      r0,r5
;;;5772   }
000030  bdf8              POP      {r3-r7,pc}
;;;5773   
                          ENDP


                          AREA ||i.lsm6dsl_sh_syncro_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_syncro_mode_get PROC
;;;5981     */
;;;5982   int32_t lsm6dsl_sh_syncro_mode_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;5983                                      lsm6dsl_start_config_t *val)
;;;5984   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;5985     lsm6dsl_master_config_t master_config;
;;;5986     int32_t ret;
;;;5987   
;;;5988     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;5989                            (uint8_t*)&master_config, 1);
;;;5990     switch (master_config.start_config) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  b110              CBZ      r0,|L177.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L177.48|
000022  e002              B        |L177.42|
                  |L177.36|
;;;5991       case LSM6DSL_XL_GY_DRDY:
;;;5992         *val = LSM6DSL_XL_GY_DRDY;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;5993         break;
000028  e005              B        |L177.54|
                  |L177.42|
;;;5994       case LSM6DSL_EXT_ON_INT2_PIN:
;;;5995         *val = LSM6DSL_EXT_ON_INT2_PIN;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;5996         break;
00002e  e002              B        |L177.54|
                  |L177.48|
;;;5997       default:
;;;5998         *val = LSM6DSL_SH_SYNCRO_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;5999         break;
000034  bf00              NOP      
                  |L177.54|
000036  bf00              NOP                            ;5993
;;;6000     }
;;;6001   
;;;6002     return ret;
000038  4630              MOV      r0,r6
;;;6003   }
00003a  bdf8              POP      {r3-r7,pc}
;;;6004   
                          ENDP


                          AREA ||i.lsm6dsl_sh_syncro_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_syncro_mode_set PROC
;;;5957     */
;;;5958   int32_t lsm6dsl_sh_syncro_mode_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;5959                                      lsm6dsl_start_config_t val)
;;;5960   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5961     lsm6dsl_master_config_t master_config;
;;;5962     int32_t ret;
;;;5963   
;;;5964     ret = lsm6dsl_read_reg(ctx, LSM6DSL_MASTER_CONFIG,
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211a              MOVS     r1,#0x1a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5965                            (uint8_t*)&master_config, 1);
;;;5966     if(ret == 0){
000014  b95d              CBNZ     r5,|L178.46|
;;;5967       master_config.start_config = (uint8_t)val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;5968       ret = lsm6dsl_write_reg(ctx, LSM6DSL_MASTER_CONFIG,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  211a              MOVS     r1,#0x1a
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L178.46|
;;;5969                               (uint8_t*)&master_config, 1);
;;;5970     }
;;;5971     return ret;
00002e  4628              MOV      r0,r5
;;;5972   }
000030  bdf8              POP      {r3-r7,pc}
;;;5973   
                          ENDP


                          AREA ||i.lsm6dsl_sh_write_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_write_mode_get PROC
;;;6558     */
;;;6559   int32_t lsm6dsl_sh_write_mode_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;6560                                     lsm6dsl_write_once_t *val)
;;;6561   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;6562     lsm6dsl_slave1_config_t slave1_config;
;;;6563     int32_t ret;
;;;6564   
;;;6565     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4605              MOV      r5,r0
;;;6566     if(ret == 0){
000010  b9f5              CBNZ     r5,|L179.80|
;;;6567       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE1_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2107              MOVS     r1,#7
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4605              MOV      r5,r0
;;;6568                              (uint8_t*)&slave1_config, 1);
;;;6569       if(ret == 0){
000020  b9b5              CBNZ     r5,|L179.80|
;;;6570         switch (slave1_config.write_once) {
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3c01040          UBFX     r0,r0,#5,#1
00002a  b110              CBZ      r0,|L179.50|
00002c  2801              CMP      r0,#1
00002e  d106              BNE      |L179.62|
000030  e002              B        |L179.56|
                  |L179.50|
;;;6571           case LSM6DSL_EACH_SH_CYCLE:
;;;6572             *val = LSM6DSL_EACH_SH_CYCLE;
000032  2000              MOVS     r0,#0
000034  7020              STRB     r0,[r4,#0]
;;;6573             break;
000036  e005              B        |L179.68|
                  |L179.56|
;;;6574           case LSM6DSL_ONLY_FIRST_CYCLE:
;;;6575             *val = LSM6DSL_ONLY_FIRST_CYCLE;
000038  2001              MOVS     r0,#1
00003a  7020              STRB     r0,[r4,#0]
;;;6576             break;
00003c  e002              B        |L179.68|
                  |L179.62|
;;;6577           default:
;;;6578             *val = LSM6DSL_SH_WR_MODE_ND;
00003e  2002              MOVS     r0,#2
000040  7020              STRB     r0,[r4,#0]
;;;6579             break;
000042  bf00              NOP      
                  |L179.68|
000044  bf00              NOP                            ;6573
;;;6580         }
;;;6581         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000046  2100              MOVS     r1,#0
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       lsm6dsl_mem_bank_set
00004e  4605              MOV      r5,r0
                  |L179.80|
;;;6582       }
;;;6583     }
;;;6584   
;;;6585     return ret;
000050  4628              MOV      r0,r5
;;;6586   }
000052  bdf8              POP      {r3-r7,pc}
;;;6587   
                          ENDP


                          AREA ||i.lsm6dsl_sh_write_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_sh_write_mode_set PROC
;;;6526     */
;;;6527   int32_t lsm6dsl_sh_write_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_write_once_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;6528   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;6529     lsm6dsl_slave1_config_t slave1_config;
;;;6530     int32_t ret;
;;;6531   
;;;6532     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_A);
000006  2104              MOVS     r1,#4
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;6533     if(ret == 0){
000010  b9cc              CBNZ     r4,|L180.70|
;;;6534       ret = lsm6dsl_read_reg(ctx, LSM6DSL_SLAVE1_CONFIG,
000012  2301              MOVS     r3,#1
000014  466a              MOV      r2,sp
000016  2107              MOVS     r1,#7
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;6535                              (uint8_t*)&slave1_config, 1);
;;;6536       slave1_config.write_once = (uint8_t) val;
000020  f89d0000          LDRB     r0,[sp,#0]
000024  f3651045          BFI      r0,r5,#5,#1
000028  9000              STR      r0,[sp,#0]
;;;6537       if(ret == 0){
00002a  b964              CBNZ     r4,|L180.70|
;;;6538         ret = lsm6dsl_write_reg(ctx, LSM6DSL_SLAVE1_CONFIG,
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  2107              MOVS     r1,#7
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4604              MOV      r4,r0
;;;6539                                 (uint8_t*)&slave1_config, 1);
;;;6540         if(ret == 0){
00003a  b924              CBNZ     r4,|L180.70|
;;;6541           ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
00003c  2100              MOVS     r1,#0
00003e  4630              MOV      r0,r6
000040  f7fffffe          BL       lsm6dsl_mem_bank_set
000044  4604              MOV      r4,r0
                  |L180.70|
;;;6542         }
;;;6543       }
;;;6544     }
;;;6545     return ret;
000046  4620              MOV      r0,r4
;;;6546   }
000048  bdf8              POP      {r3-r7,pc}
;;;6547   
                          ENDP


                          AREA ||i.lsm6dsl_spi_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_spi_mode_get PROC
;;;2152     */
;;;2153   int32_t lsm6dsl_spi_mode_get(lsm6dsl_ctx_t *ctx, lsm6dsl_sim_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2154   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2155     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;2156     int32_t ret;
;;;2157   
;;;2158     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2159     switch (ctrl3_c.sim) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  b110              CBZ      r0,|L181.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L181.48|
000022  e002              B        |L181.42|
                  |L181.36|
;;;2160       case LSM6DSL_SPI_4_WIRE:
;;;2161         *val = LSM6DSL_SPI_4_WIRE;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;2162         break;
000028  e005              B        |L181.54|
                  |L181.42|
;;;2163       case LSM6DSL_SPI_3_WIRE:
;;;2164         *val = LSM6DSL_SPI_3_WIRE;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;2165         break;
00002e  e002              B        |L181.54|
                  |L181.48|
;;;2166       default:
;;;2167         *val = LSM6DSL_SPI_MODE_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;2168         break;
000034  bf00              NOP      
                  |L181.54|
000036  bf00              NOP                            ;2162
;;;2169     }
;;;2170     return ret;
000038  4630              MOV      r0,r6
;;;2171   }
00003a  bdf8              POP      {r3-r7,pc}
;;;2172   
                          ENDP


                          AREA ||i.lsm6dsl_spi_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_spi_mode_set PROC
;;;2131     */
;;;2132   int32_t lsm6dsl_spi_mode_set(lsm6dsl_ctx_t *ctx, lsm6dsl_sim_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2133   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2134     lsm6dsl_ctrl3_c_t ctrl3_c;
;;;2135     int32_t ret;
;;;2136   
;;;2137     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2112              MOVS     r1,#0x12
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2138     if(ret == 0){
000014  b95d              CBNZ     r5,|L182.46|
;;;2139       ctrl3_c.sim = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;2140       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL3_C, (uint8_t*)&ctrl3_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2112              MOVS     r1,#0x12
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L182.46|
;;;2141     }
;;;2142     return ret;
00002e  4628              MOV      r0,r5
;;;2143   }
000030  bdf8              POP      {r3-r7,pc}
;;;2144   
                          ENDP


                          AREA ||i.lsm6dsl_status_reg_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_status_reg_get PROC
;;;752      */
;;;753    int32_t lsm6dsl_status_reg_get(lsm6dsl_ctx_t *ctx, lsm6dsl_status_reg_t *val)
000000  b570              PUSH     {r4-r6,lr}
;;;754    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;755      int32_t ret;
;;;756      ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  211e              MOVS     r1,#0x1e
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;757      return ret;
000014  4630              MOV      r0,r6
;;;758    }
000016  bd70              POP      {r4-r6,pc}
;;;759    
                          ENDP


                          AREA ||i.lsm6dsl_tap_detection_on_x_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_detection_on_x_get PROC
;;;3082     */
;;;3083   int32_t lsm6dsl_tap_detection_on_x_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3084   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3085     lsm6dsl_tap_cfg_t tap_cfg;
;;;3086     int32_t ret;
;;;3087   
;;;3088     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3089     *val = tap_cfg.tap_x_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  7020              STRB     r0,[r4,#0]
;;;3090   
;;;3091     return ret;
00001e  4630              MOV      r0,r6
;;;3092   }
000020  bdf8              POP      {r3-r7,pc}
;;;3093   
                          ENDP


                          AREA ||i.lsm6dsl_tap_detection_on_x_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_detection_on_x_set PROC
;;;3061     */
;;;3062   int32_t lsm6dsl_tap_detection_on_x_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3063   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3064     lsm6dsl_tap_cfg_t tap_cfg;
;;;3065     int32_t ret;
;;;3066   
;;;3067     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3068     if(ret == 0){
000014  b95d              CBNZ     r5,|L185.46|
;;;3069       tap_cfg.tap_x_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;3070       ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2158              MOVS     r1,#0x58
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L185.46|
;;;3071     }
;;;3072     return ret;
00002e  4628              MOV      r0,r5
;;;3073   }
000030  bdf8              POP      {r3-r7,pc}
;;;3074   
                          ENDP


                          AREA ||i.lsm6dsl_tap_detection_on_y_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_detection_on_y_get PROC
;;;3042     */
;;;3043   int32_t lsm6dsl_tap_detection_on_y_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3044   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3045     lsm6dsl_tap_cfg_t tap_cfg;
;;;3046     int32_t ret;
;;;3047   
;;;3048     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3049     *val = tap_cfg.tap_y_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  7020              STRB     r0,[r4,#0]
;;;3050   
;;;3051     return ret;
00001e  4630              MOV      r0,r6
;;;3052   }
000020  bdf8              POP      {r3-r7,pc}
;;;3053   
                          ENDP


                          AREA ||i.lsm6dsl_tap_detection_on_y_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_detection_on_y_set PROC
;;;3021     */
;;;3022   int32_t lsm6dsl_tap_detection_on_y_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3023   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3024     lsm6dsl_tap_cfg_t tap_cfg;
;;;3025     int32_t ret;
;;;3026   
;;;3027     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3028     if(ret == 0){
000014  b95d              CBNZ     r5,|L187.46|
;;;3029       tap_cfg.tap_y_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640082          BFI      r0,r4,#2,#1
00001e  9000              STR      r0,[sp,#0]
;;;3030       ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2158              MOVS     r1,#0x58
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L187.46|
;;;3031     }
;;;3032     return ret;
00002e  4628              MOV      r0,r5
;;;3033   }
000030  bdf8              POP      {r3-r7,pc}
;;;3034   
                          ENDP


                          AREA ||i.lsm6dsl_tap_detection_on_z_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_detection_on_z_get PROC
;;;3002     */
;;;3003   int32_t lsm6dsl_tap_detection_on_z_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3004   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3005     lsm6dsl_tap_cfg_t tap_cfg;
;;;3006     int32_t ret;
;;;3007   
;;;3008     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3009     *val = tap_cfg.tap_z_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00040          UBFX     r0,r0,#1,#1
00001c  7020              STRB     r0,[r4,#0]
;;;3010   
;;;3011     return ret;
00001e  4630              MOV      r0,r6
;;;3012   }
000020  bdf8              POP      {r3-r7,pc}
;;;3013   
                          ENDP


                          AREA ||i.lsm6dsl_tap_detection_on_z_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_detection_on_z_set PROC
;;;2981     */
;;;2982   int32_t lsm6dsl_tap_detection_on_z_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2983   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2984     lsm6dsl_tap_cfg_t tap_cfg;
;;;2985     int32_t ret;
;;;2986   
;;;2987     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2988     if(ret == 0){
000014  b95d              CBNZ     r5,|L189.46|
;;;2989       tap_cfg.tap_z_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640041          BFI      r0,r4,#1,#1
00001e  9000              STR      r0,[sp,#0]
;;;2990       ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2158              MOVS     r1,#0x58
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L189.46|
;;;2991     }
;;;2992     return ret;
00002e  4628              MOV      r0,r5
;;;2993   }
000030  bdf8              POP      {r3-r7,pc}
;;;2994   
                          ENDP


                          AREA ||i.lsm6dsl_tap_dur_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_dur_get PROC
;;;3275     */
;;;3276   int32_t lsm6dsl_tap_dur_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3277   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3278     lsm6dsl_int_dur2_t int_dur2;
;;;3279     int32_t ret;
;;;3280   
;;;3281     ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215a              MOVS     r1,#0x5a
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3282     *val = int_dur2.dur;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  0900              LSRS     r0,r0,#4
00001a  7020              STRB     r0,[r4,#0]
;;;3283   
;;;3284     return ret;
00001c  4630              MOV      r0,r6
;;;3285   }
00001e  bdf8              POP      {r3-r7,pc}
;;;3286   
                          ENDP


                          AREA ||i.lsm6dsl_tap_dur_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_dur_set PROC
;;;3248     */
;;;3249   int32_t lsm6dsl_tap_dur_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3250   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3251     lsm6dsl_int_dur2_t int_dur2;
;;;3252     int32_t ret;
;;;3253   
;;;3254     ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215a              MOVS     r1,#0x5a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3255     if(ret == 0){
000014  b95d              CBNZ     r5,|L191.46|
;;;3256       int_dur2.dur = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641007          BFI      r0,r4,#4,#4
00001e  9000              STR      r0,[sp,#0]
;;;3257       ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  215a              MOVS     r1,#0x5a
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L191.46|
;;;3258     }
;;;3259     return ret;
00002e  4628              MOV      r0,r5
;;;3260   }
000030  bdf8              POP      {r3-r7,pc}
;;;3261   
                          ENDP


                          AREA ||i.lsm6dsl_tap_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_mode_get PROC
;;;3319     */
;;;3320   int32_t lsm6dsl_tap_mode_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3321                                lsm6dsl_single_double_tap_t *val)
;;;3322   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3323     lsm6dsl_wake_up_ths_t wake_up_ths;
;;;3324     int32_t ret;
;;;3325   
;;;3326     ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_THS, (uint8_t*)&wake_up_ths, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215b              MOVS     r1,#0x5b
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3327     switch (wake_up_ths.single_double_tap) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  b110              CBZ      r0,|L192.34|
00001c  2801              CMP      r0,#1
00001e  d106              BNE      |L192.46|
000020  e002              B        |L192.40|
                  |L192.34|
;;;3328       case LSM6DSL_ONLY_SINGLE:
;;;3329         *val = LSM6DSL_ONLY_SINGLE;
000022  2000              MOVS     r0,#0
000024  7020              STRB     r0,[r4,#0]
;;;3330         break;
000026  e005              B        |L192.52|
                  |L192.40|
;;;3331       case LSM6DSL_BOTH_SINGLE_DOUBLE:
;;;3332         *val = LSM6DSL_BOTH_SINGLE_DOUBLE;
000028  2001              MOVS     r0,#1
00002a  7020              STRB     r0,[r4,#0]
;;;3333         break;
00002c  e002              B        |L192.52|
                  |L192.46|
;;;3334       default:
;;;3335         *val = LSM6DSL_TAP_MODE_ND;
00002e  2002              MOVS     r0,#2
000030  7020              STRB     r0,[r4,#0]
;;;3336         break;
000032  bf00              NOP      
                  |L192.52|
000034  bf00              NOP                            ;3330
;;;3337     }
;;;3338   
;;;3339     return ret;
000036  4630              MOV      r0,r6
;;;3340   }
000038  bdf8              POP      {r3-r7,pc}
;;;3341   
                          ENDP


                          AREA ||i.lsm6dsl_tap_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_mode_set PROC
;;;3295     */
;;;3296   int32_t lsm6dsl_tap_mode_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;3297                                lsm6dsl_single_double_tap_t val)
;;;3298   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3299     lsm6dsl_wake_up_ths_t wake_up_ths;
;;;3300     int32_t ret;
;;;3301   
;;;3302     ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_THS, (uint8_t*)&wake_up_ths, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215b              MOVS     r1,#0x5b
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3303     if(ret == 0){
000014  b95d              CBNZ     r5,|L193.46|
;;;3304       wake_up_ths.single_double_tap = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;3305       ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_THS,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  215b              MOVS     r1,#0x5b
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L193.46|
;;;3306                               (uint8_t*)&wake_up_ths, 1);
;;;3307     }
;;;3308     return ret;
00002e  4628              MOV      r0,r5
;;;3309   }
000030  bdf8              POP      {r3-r7,pc}
;;;3310   
                          ENDP


                          AREA ||i.lsm6dsl_tap_quiet_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_quiet_get PROC
;;;3223     */
;;;3224   int32_t lsm6dsl_tap_quiet_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3225   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3226     lsm6dsl_int_dur2_t int_dur2;
;;;3227     int32_t ret;
;;;3228   
;;;3229     ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215a              MOVS     r1,#0x5a
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3230     *val = int_dur2.quiet;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00081          UBFX     r0,r0,#2,#2
00001c  7020              STRB     r0,[r4,#0]
;;;3231   
;;;3232     return ret;
00001e  4630              MOV      r0,r6
;;;3233   }
000020  bdf8              POP      {r3-r7,pc}
;;;3234   
                          ENDP


                          AREA ||i.lsm6dsl_tap_quiet_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_quiet_set PROC
;;;3197     */
;;;3198   int32_t lsm6dsl_tap_quiet_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3199   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3200     lsm6dsl_int_dur2_t int_dur2;
;;;3201     int32_t ret;
;;;3202   
;;;3203     ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215a              MOVS     r1,#0x5a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3204     if(ret == 0){
000014  b95d              CBNZ     r5,|L195.46|
;;;3205       int_dur2.quiet = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640083          BFI      r0,r4,#2,#2
00001e  9000              STR      r0,[sp,#0]
;;;3206       ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  215a              MOVS     r1,#0x5a
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L195.46|
;;;3207     }
;;;3208     return ret;
00002e  4628              MOV      r0,r5
;;;3209   }
000030  bdf8              POP      {r3-r7,pc}
;;;3210   
                          ENDP


                          AREA ||i.lsm6dsl_tap_shock_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_shock_get PROC
;;;3173     */
;;;3174   int32_t lsm6dsl_tap_shock_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3175   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3176     lsm6dsl_int_dur2_t int_dur2;
;;;3177     int32_t ret;
;;;3178   
;;;3179     ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215a              MOVS     r1,#0x5a
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3180     *val = int_dur2.shock;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000003          AND      r0,r0,#3
00001c  7020              STRB     r0,[r4,#0]
;;;3181   
;;;3182     return ret;
00001e  4630              MOV      r0,r6
;;;3183   }
000020  bdf8              POP      {r3-r7,pc}
;;;3184   
                          ENDP


                          AREA ||i.lsm6dsl_tap_shock_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_shock_set PROC
;;;3147     */
;;;3148   int32_t lsm6dsl_tap_shock_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3149   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3150     lsm6dsl_int_dur2_t int_dur2;
;;;3151     int32_t ret;
;;;3152   
;;;3153     ret = lsm6dsl_read_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215a              MOVS     r1,#0x5a
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3154     if(ret == 0){
000014  b95d              CBNZ     r5,|L197.46|
;;;3155       int_dur2.shock = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640001          BFI      r0,r4,#0,#2
00001e  9000              STR      r0,[sp,#0]
;;;3156       ret = lsm6dsl_write_reg(ctx, LSM6DSL_INT_DUR2, (uint8_t*)&int_dur2, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  215a              MOVS     r1,#0x5a
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L197.46|
;;;3157     }
;;;3158     return ret;
00002e  4628              MOV      r0,r5
;;;3159   }
000030  bdf8              POP      {r3-r7,pc}
;;;3160   
                          ENDP


                          AREA ||i.lsm6dsl_tap_src_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_src_get PROC
;;;2967     */
;;;2968   int32_t lsm6dsl_tap_src_get(lsm6dsl_ctx_t *ctx, lsm6dsl_tap_src_t *val)
000000  b570              PUSH     {r4-r6,lr}
;;;2969   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2970     int32_t ret;
;;;2971     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_SRC, (uint8_t*) val, 1);
000006  2301              MOVS     r3,#1
000008  4622              MOV      r2,r4
00000a  211c              MOVS     r1,#0x1c
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2972     return ret;
000014  4630              MOV      r0,r6
;;;2973   }
000016  bd70              POP      {r4-r6,pc}
;;;2974   
                          ENDP


                          AREA ||i.lsm6dsl_tap_threshold_x_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_threshold_x_get PROC
;;;3123     */
;;;3124   int32_t lsm6dsl_tap_threshold_x_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3125   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;3126     lsm6dsl_tap_ths_6d_t tap_ths_6d;
;;;3127     int32_t ret;
;;;3128   
;;;3129     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_THS_6D, (uint8_t*)&tap_ths_6d, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2159              MOVS     r1,#0x59
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;3130     *val = tap_ths_6d.tap_ths;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000001f          AND      r0,r0,#0x1f
00001c  7020              STRB     r0,[r4,#0]
;;;3131   
;;;3132     return ret;
00001e  4630              MOV      r0,r6
;;;3133   }
000020  bdf8              POP      {r3-r7,pc}
;;;3134   
                          ENDP


                          AREA ||i.lsm6dsl_tap_threshold_x_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tap_threshold_x_set PROC
;;;3101     */
;;;3102   int32_t lsm6dsl_tap_threshold_x_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;3103   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;3104     lsm6dsl_tap_ths_6d_t tap_ths_6d;
;;;3105     int32_t ret;
;;;3106   
;;;3107     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_THS_6D, (uint8_t*)&tap_ths_6d, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2159              MOVS     r1,#0x59
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;3108     if(ret == 0){
000014  b95d              CBNZ     r5,|L200.46|
;;;3109       tap_ths_6d.tap_ths = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640004          BFI      r0,r4,#0,#5
00001e  9000              STR      r0,[sp,#0]
;;;3110       ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_THS_6D,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2159              MOVS     r1,#0x59
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L200.46|
;;;3111                               (uint8_t*)&tap_ths_6d, 1);
;;;3112     }
;;;3113     return ret;
00002e  4628              MOV      r0,r5
;;;3114   }
000030  bdf8              POP      {r3-r7,pc}
;;;3115   
                          ENDP


                          AREA ||i.lsm6dsl_temp_flag_data_ready_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_temp_flag_data_ready_get PROC
;;;805      */
;;;806    int32_t lsm6dsl_temp_flag_data_ready_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;807    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;808      lsm6dsl_status_reg_t status_reg;
;;;809      int32_t ret;
;;;810    
;;;811      ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*)&status_reg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211e              MOVS     r1,#0x1e
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;812      *val = status_reg.tda;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  7020              STRB     r0,[r4,#0]
;;;813    
;;;814      return ret;
00001e  4630              MOV      r0,r6
;;;815    }
000020  bdf8              POP      {r3-r7,pc}
;;;816    
                          ENDP


                          AREA ||i.lsm6dsl_temperature_raw_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_temperature_raw_get PROC
;;;1060     */
;;;1061   int32_t lsm6dsl_temperature_raw_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;1062   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1063     int32_t ret;
;;;1064     ret = lsm6dsl_read_reg(ctx, LSM6DSL_OUT_TEMP_L, buff, 2);
000006  2302              MOVS     r3,#2
000008  4622              MOV      r2,r4
00000a  2120              MOVS     r1,#0x20
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1065     return ret;
000014  4630              MOV      r0,r6
;;;1066   }
000016  bd70              POP      {r4-r6,pc}
;;;1067   
                          ENDP


                          AREA ||i.lsm6dsl_tilt_latency_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tilt_latency_get PROC
;;;5360     */
;;;5361   int32_t lsm6dsl_tilt_latency_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5362   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5363     int32_t ret;
;;;5364   
;;;5365     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_B);
000006  2105              MOVS     r1,#5
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5366     if(ret == 0){
000010  b964              CBNZ     r4,|L203.44|
;;;5367       ret = lsm6dsl_read_reg(ctx, LSM6DSL_A_WRIST_TILT_LAT, buff, 1);
000012  2301              MOVS     r3,#1
000014  462a              MOV      r2,r5
000016  2150              MOVS     r1,#0x50
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;5368       if(ret == 0){
000020  b924              CBNZ     r4,|L203.44|
;;;5369         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L203.44|
;;;5370       }
;;;5371     }
;;;5372     return ret;
00002c  4620              MOV      r0,r4
;;;5373   }
00002e  bd70              POP      {r4-r6,pc}
;;;5374   
                          ENDP


                          AREA ||i.lsm6dsl_tilt_latency_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tilt_latency_set PROC
;;;5336     */
;;;5337   int32_t lsm6dsl_tilt_latency_set(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5338   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5339     int32_t ret;
;;;5340   
;;;5341     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_B);
000006  2105              MOVS     r1,#5
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5342     if(ret == 0){
000010  b964              CBNZ     r4,|L204.44|
;;;5343       ret = lsm6dsl_write_reg(ctx, LSM6DSL_A_WRIST_TILT_LAT, buff, 1);
000012  2301              MOVS     r3,#1
000014  462a              MOV      r2,r5
000016  2150              MOVS     r1,#0x50
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_write_reg
00001e  4604              MOV      r4,r0
;;;5344       if(ret == 0){
000020  b924              CBNZ     r4,|L204.44|
;;;5345         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L204.44|
;;;5346       }
;;;5347     }
;;;5348     return ret;
00002c  4620              MOV      r0,r4
;;;5349   }
00002e  bd70              POP      {r4-r6,pc}
;;;5350   
                          ENDP


                          AREA ||i.lsm6dsl_tilt_sens_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tilt_sens_get PROC
;;;5272     */
;;;5273   int32_t lsm6dsl_tilt_sens_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5274   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;5275     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;5276     int32_t ret;
;;;5277   
;;;5278     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;5279     *val = ctrl10_c.tilt_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  7020              STRB     r0,[r4,#0]
;;;5280   
;;;5281     return ret;
00001e  4630              MOV      r0,r6
;;;5282   }
000020  bdf8              POP      {r3-r7,pc}
;;;5283   
                          ENDP


                          AREA ||i.lsm6dsl_tilt_sens_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tilt_sens_set PROC
;;;5248     */
;;;5249   int32_t lsm6dsl_tilt_sens_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5250   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5251     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;5252     int32_t ret;
;;;5253   
;;;5254     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5255     if(ret == 0){
000014  b98d              CBNZ     r5,|L206.58|
;;;5256       ctrl10_c.tilt_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;5257       if (val != 0x00U) {
000020  b124              CBZ      r4,|L206.44|
;;;5258         ctrl10_c.func_en = val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3640082          BFI      r0,r4,#2,#1
00002a  9000              STR      r0,[sp,#0]
                  |L206.44|
;;;5259       }
;;;5260       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  2119              MOVS     r1,#0x19
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4605              MOV      r5,r0
                  |L206.58|
;;;5261     }
;;;5262     return ret;
00003a  4628              MOV      r0,r5
;;;5263   }
00003c  bdf8              POP      {r3-r7,pc}
;;;5264   
                          ENDP


                          AREA ||i.lsm6dsl_tilt_src_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tilt_src_get PROC
;;;5454     */
;;;5455   int32_t lsm6dsl_tilt_src_get(lsm6dsl_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;5456                                lsm6dsl_a_wrist_tilt_mask_t *val)
;;;5457   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5458     int32_t ret;
;;;5459   
;;;5460     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_B);
000006  2105              MOVS     r1,#5
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5461     if(ret == 0){
000010  b964              CBNZ     r4,|L207.44|
;;;5462       ret = lsm6dsl_read_reg(ctx, LSM6DSL_A_WRIST_TILT_MASK,
000012  2301              MOVS     r3,#1
000014  462a              MOV      r2,r5
000016  2159              MOVS     r1,#0x59
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;5463                              (uint8_t*) val, 1);
;;;5464       if(ret == 0){
000020  b924              CBNZ     r4,|L207.44|
;;;5465         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L207.44|
;;;5466       }
;;;5467     }
;;;5468     return ret;
00002c  4620              MOV      r0,r4
;;;5469   
;;;5470   }
00002e  bd70              POP      {r4-r6,pc}
;;;5471   
                          ENDP


                          AREA ||i.lsm6dsl_tilt_src_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tilt_src_set PROC
;;;5430     */
;;;5431   int32_t lsm6dsl_tilt_src_set(lsm6dsl_ctx_t *ctx,
000000  b570              PUSH     {r4-r6,lr}
;;;5432                                lsm6dsl_a_wrist_tilt_mask_t *val)
;;;5433   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5434     int32_t ret;
;;;5435   
;;;5436     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_B);
000006  2105              MOVS     r1,#5
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5437     if(ret == 0){
000010  b964              CBNZ     r4,|L208.44|
;;;5438       ret = lsm6dsl_read_reg(ctx, LSM6DSL_A_WRIST_TILT_MASK,
000012  2301              MOVS     r3,#1
000014  462a              MOV      r2,r5
000016  2159              MOVS     r1,#0x59
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;5439                              (uint8_t*) val, 1);
;;;5440       if(ret == 0){
000020  b924              CBNZ     r4,|L208.44|
;;;5441         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L208.44|
;;;5442       }
;;;5443     }
;;;5444     return ret;
00002c  4620              MOV      r0,r4
;;;5445   }
00002e  bd70              POP      {r4-r6,pc}
;;;5446   
                          ENDP


                          AREA ||i.lsm6dsl_tilt_threshold_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tilt_threshold_get PROC
;;;5408     */
;;;5409   int32_t lsm6dsl_tilt_threshold_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5410   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5411     int32_t ret;
;;;5412   
;;;5413     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_B);
000006  2105              MOVS     r1,#5
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5414     if(ret == 0){
000010  b964              CBNZ     r4,|L209.44|
;;;5415       ret = lsm6dsl_read_reg(ctx, LSM6DSL_A_WRIST_TILT_THS, buff, 1);
000012  2301              MOVS     r3,#1
000014  462a              MOV      r2,r5
000016  2154              MOVS     r1,#0x54
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_read_reg
00001e  4604              MOV      r4,r0
;;;5416       if(ret == 0){
000020  b924              CBNZ     r4,|L209.44|
;;;5417         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L209.44|
;;;5418       }
;;;5419     }
;;;5420     return ret;
00002c  4620              MOV      r0,r4
;;;5421   }
00002e  bd70              POP      {r4-r6,pc}
;;;5422   
                          ENDP


                          AREA ||i.lsm6dsl_tilt_threshold_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_tilt_threshold_set PROC
;;;5384     */
;;;5385   int32_t lsm6dsl_tilt_threshold_set(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;5386   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;5387     int32_t ret;
;;;5388   
;;;5389     ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_BANK_B);
000006  2105              MOVS     r1,#5
000008  4630              MOV      r0,r6
00000a  f7fffffe          BL       lsm6dsl_mem_bank_set
00000e  4604              MOV      r4,r0
;;;5390     if(ret == 0){
000010  b964              CBNZ     r4,|L210.44|
;;;5391       ret = lsm6dsl_write_reg(ctx, LSM6DSL_A_WRIST_TILT_THS, buff, 1);
000012  2301              MOVS     r3,#1
000014  462a              MOV      r2,r5
000016  2154              MOVS     r1,#0x54
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       lsm6dsl_write_reg
00001e  4604              MOV      r4,r0
;;;5392       if(ret == 0){
000020  b924              CBNZ     r4,|L210.44|
;;;5393         ret = lsm6dsl_mem_bank_set(ctx, LSM6DSL_USER_BANK);
000022  2100              MOVS     r1,#0
000024  4630              MOV      r0,r6
000026  f7fffffe          BL       lsm6dsl_mem_bank_set
00002a  4604              MOV      r4,r0
                  |L210.44|
;;;5394       }
;;;5395     }
;;;5396     return ret;
00002c  4620              MOV      r0,r4
;;;5397   }
00002e  bd70              POP      {r4-r6,pc}
;;;5398   
                          ENDP


                          AREA ||i.lsm6dsl_timestamp_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_timestamp_get PROC
;;;897      */
;;;898    int32_t lsm6dsl_timestamp_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;899    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;900      lsm6dsl_ctrl10_c_t ctrl10_c;
;;;901      int32_t ret;
;;;902    
;;;903      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;904      *val = ctrl10_c.timer_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01040          UBFX     r0,r0,#5,#1
00001c  7020              STRB     r0,[r4,#0]
;;;905    
;;;906      return ret;
00001e  4630              MOV      r0,r6
;;;907    }
000020  bdf8              POP      {r3-r7,pc}
;;;908    
                          ENDP


                          AREA ||i.lsm6dsl_timestamp_res_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_timestamp_res_get PROC
;;;948      */
;;;949    int32_t lsm6dsl_timestamp_res_get(lsm6dsl_ctx_t *ctx, lsm6dsl_timer_hr_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;950    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;951      lsm6dsl_wake_up_dur_t wake_up_dur;
;;;952      int32_t ret;
;;;953    
;;;954      ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215c              MOVS     r1,#0x5c
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;955      switch (wake_up_dur.timer_hr) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  b110              CBZ      r0,|L212.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L212.48|
000022  e002              B        |L212.42|
                  |L212.36|
;;;956        case LSM6DSL_LSB_6ms4:
;;;957          *val = LSM6DSL_LSB_6ms4;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;958          break;
000028  e005              B        |L212.54|
                  |L212.42|
;;;959        case LSM6DSL_LSB_25us:
;;;960          *val = LSM6DSL_LSB_25us;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;961          break;
00002e  e002              B        |L212.54|
                  |L212.48|
;;;962        default:
;;;963          *val = LSM6DSL_TS_RES_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;964          break;
000034  bf00              NOP      
                  |L212.54|
000036  bf00              NOP                            ;958
;;;965      }
;;;966    
;;;967      return ret;
000038  4630              MOV      r0,r6
;;;968    }
00003a  bdf8              POP      {r3-r7,pc}
;;;969    
                          ENDP


                          AREA ||i.lsm6dsl_timestamp_res_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_timestamp_res_set PROC
;;;921      */
;;;922    int32_t lsm6dsl_timestamp_res_set(lsm6dsl_ctx_t *ctx, lsm6dsl_timer_hr_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;923    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;924      lsm6dsl_wake_up_dur_t wake_up_dur;
;;;925      int32_t ret;
;;;926    
;;;927      ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215c              MOVS     r1,#0x5c
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;928      if(ret == 0){
000014  b95d              CBNZ     r5,|L213.46|
;;;929        wake_up_dur.timer_hr = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;930        ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  215c              MOVS     r1,#0x5c
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L213.46|
;;;931                                (uint8_t*)&wake_up_dur, 1);
;;;932      }
;;;933      return ret;
00002e  4628              MOV      r0,r5
;;;934    }
000030  bdf8              POP      {r3-r7,pc}
;;;935    
                          ENDP


                          AREA ||i.lsm6dsl_timestamp_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_timestamp_set PROC
;;;872      */
;;;873    int32_t lsm6dsl_timestamp_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;874    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;875      lsm6dsl_ctrl10_c_t ctrl10_c;
;;;876      int32_t ret;
;;;877    
;;;878      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;879      if(ret == 0){
000014  b98d              CBNZ     r5,|L214.58|
;;;880        ctrl10_c.timer_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641045          BFI      r0,r4,#5,#1
00001e  9000              STR      r0,[sp,#0]
;;;881        if ( val != 0x00U) {
000020  b15c              CBZ      r4,|L214.58|
;;;882          ctrl10_c.func_en = val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3640082          BFI      r0,r4,#2,#1
00002a  9000              STR      r0,[sp,#0]
;;;883          ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  2119              MOVS     r1,#0x19
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4605              MOV      r5,r0
                  |L214.58|
;;;884        }
;;;885      }
;;;886      return ret;
00003a  4628              MOV      r0,r5
;;;887    }
00003c  bdf8              POP      {r3-r7,pc}
;;;888    
                          ENDP


                          AREA ||i.lsm6dsl_wkup_dur_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_wkup_dur_get PROC
;;;2785     */
;;;2786   int32_t lsm6dsl_wkup_dur_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2787   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2788     lsm6dsl_wake_up_dur_t wake_up_dur;
;;;2789     int32_t ret;
;;;2790   
;;;2791     ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215c              MOVS     r1,#0x5c
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2792     *val = wake_up_dur.wake_dur;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01041          UBFX     r0,r0,#5,#2
00001c  7020              STRB     r0,[r4,#0]
;;;2793   
;;;2794     return ret;
00001e  4630              MOV      r0,r6
;;;2795   }
000020  bdf8              POP      {r3-r7,pc}
;;;2796   
                          ENDP


                          AREA ||i.lsm6dsl_wkup_dur_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_wkup_dur_set PROC
;;;2763     */
;;;2764   int32_t lsm6dsl_wkup_dur_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2765   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2766     lsm6dsl_wake_up_dur_t wake_up_dur;
;;;2767     int32_t ret;
;;;2768   
;;;2769     ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_DUR, (uint8_t*)&wake_up_dur, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215c              MOVS     r1,#0x5c
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2770     if(ret == 0){
000014  b95d              CBNZ     r5,|L216.46|
;;;2771       wake_up_dur.wake_dur = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641046          BFI      r0,r4,#5,#2
00001e  9000              STR      r0,[sp,#0]
;;;2772       ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_DUR,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  215c              MOVS     r1,#0x5c
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L216.46|
;;;2773                               (uint8_t*)&wake_up_dur, 1);
;;;2774     }
;;;2775     return ret;
00002e  4628              MOV      r0,r5
;;;2776   }
000030  bdf8              POP      {r3-r7,pc}
;;;2777   
                          ENDP


                          AREA ||i.lsm6dsl_wkup_threshold_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_wkup_threshold_get PROC
;;;2744     */
;;;2745   int32_t lsm6dsl_wkup_threshold_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2746   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;2747     lsm6dsl_wake_up_ths_t wake_up_ths;
;;;2748     int32_t ret;
;;;2749   
;;;2750     ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_THS, (uint8_t*)&wake_up_ths, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215b              MOVS     r1,#0x5b
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;2751     *val = wake_up_ths.wk_ths;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f000003f          AND      r0,r0,#0x3f
00001c  7020              STRB     r0,[r4,#0]
;;;2752   
;;;2753     return ret;
00001e  4630              MOV      r0,r6
;;;2754   }
000020  bdf8              POP      {r3-r7,pc}
;;;2755   
                          ENDP


                          AREA ||i.lsm6dsl_wkup_threshold_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_wkup_threshold_set PROC
;;;2722     */
;;;2723   int32_t lsm6dsl_wkup_threshold_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2724   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;2725     lsm6dsl_wake_up_ths_t wake_up_ths;
;;;2726     int32_t ret;
;;;2727   
;;;2728     ret = lsm6dsl_read_reg(ctx, LSM6DSL_WAKE_UP_THS, (uint8_t*)&wake_up_ths, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  215b              MOVS     r1,#0x5b
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;2729     if(ret == 0){
000014  b95d              CBNZ     r5,|L218.46|
;;;2730       wake_up_ths.wk_ths = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640005          BFI      r0,r4,#0,#6
00001e  9000              STR      r0,[sp,#0]
;;;2731       ret = lsm6dsl_write_reg(ctx, LSM6DSL_WAKE_UP_THS,
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  215b              MOVS     r1,#0x5b
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L218.46|
;;;2732                               (uint8_t*)&wake_up_ths, 1);
;;;2733     }
;;;2734     return ret;
00002e  4628              MOV      r0,r5
;;;2735   }
000030  bdf8              POP      {r3-r7,pc}
;;;2736   
                          ENDP


                          AREA ||i.lsm6dsl_wrist_tilt_sens_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_wrist_tilt_sens_get PROC
;;;5315     */
;;;5316   int32_t lsm6dsl_wrist_tilt_sens_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5317   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;5318     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;5319     int32_t ret;
;;;5320   
;;;5321     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;5322     *val = ctrl10_c.wrist_tilt_en;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  09c0              LSRS     r0,r0,#7
00001a  7020              STRB     r0,[r4,#0]
;;;5323   
;;;5324     return ret;
00001c  4630              MOV      r0,r6
;;;5325   }
00001e  bdf8              POP      {r3-r7,pc}
;;;5326   
                          ENDP


                          AREA ||i.lsm6dsl_wrist_tilt_sens_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_wrist_tilt_sens_set PROC
;;;5291     */
;;;5292   int32_t lsm6dsl_wrist_tilt_sens_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;5293   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;5294     lsm6dsl_ctrl10_c_t ctrl10_c;
;;;5295     int32_t ret;
;;;5296   
;;;5297     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2119              MOVS     r1,#0x19
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;5298     if(ret == 0){
000014  b98d              CBNZ     r5,|L220.58|
;;;5299       ctrl10_c.wrist_tilt_en = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36410c7          BFI      r0,r4,#7,#1
00001e  9000              STR      r0,[sp,#0]
;;;5300       if (val != 0x00U) {
000020  b124              CBZ      r4,|L220.44|
;;;5301         ctrl10_c.func_en = val;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3640082          BFI      r0,r4,#2,#1
00002a  9000              STR      r0,[sp,#0]
                  |L220.44|
;;;5302       }
;;;5303       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL10_C, (uint8_t*)&ctrl10_c, 1);
00002c  2301              MOVS     r3,#1
00002e  466a              MOV      r2,sp
000030  2119              MOVS     r1,#0x19
000032  4630              MOV      r0,r6
000034  f7fffffe          BL       lsm6dsl_write_reg
000038  4605              MOV      r5,r0
                  |L220.58|
;;;5304     }
;;;5305     return ret;
00003a  4628              MOV      r0,r5
;;;5306   }
00003c  bdf8              POP      {r3-r7,pc}
;;;5307   
                          ENDP


                          AREA ||i.lsm6dsl_write_reg||, CODE, READONLY, ALIGN=1

                  lsm6dsl_write_reg PROC
;;;83       */
;;;84     int32_t lsm6dsl_write_reg(lsm6dsl_ctx_t* ctx, uint8_t reg, uint8_t* data,
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;85                               uint16_t len)
;;;86     {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
000008  4616              MOV      r6,r2
00000a  461f              MOV      r7,r3
;;;87       int32_t ret;
;;;88       ret = ctx->write_reg(ctx->handle, reg, data, len);
00000c  463b              MOV      r3,r7
00000e  4632              MOV      r2,r6
000010  4629              MOV      r1,r5
000012  f8d4c000          LDR      r12,[r4,#0]
000016  68a0              LDR      r0,[r4,#8]
000018  47e0              BLX      r12
00001a  4680              MOV      r8,r0
;;;89       return ret;
00001c  4640              MOV      r0,r8
;;;90     }
00001e  e8bd81f0          POP      {r4-r8,pc}
;;;91     
                          ENDP


                          AREA ||i.lsm6dsl_xl_data_rate_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_data_rate_get PROC
;;;252      */
;;;253    int32_t lsm6dsl_xl_data_rate_get(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_xl_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;254    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;255      lsm6dsl_ctrl1_xl_t ctrl1_xl;
;;;256      int32_t ret;
;;;257    
;;;258      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;259      switch (ctrl1_xl.odr_xl) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  0900              LSRS     r0,r0,#4
00001a  280c              CMP      r0,#0xc
00001c  d22b              BCS      |L222.118|
00001e  e8dff000          TBB      [pc,r0]
000022  0609              DCB      0x06,0x09
000024  0c0f1215          DCB      0x0c,0x0f,0x12,0x15
000028  181b1e21          DCB      0x18,0x1b,0x1e,0x21
00002c  2427              DCB      0x24,0x27
;;;260        case LSM6DSL_XL_ODR_OFF:
;;;261          *val = LSM6DSL_XL_ODR_OFF;
00002e  2000              MOVS     r0,#0
000030  7020              STRB     r0,[r4,#0]
;;;262          break;
000032  e023              B        |L222.124|
;;;263        case LSM6DSL_XL_ODR_12Hz5:
;;;264          *val = LSM6DSL_XL_ODR_12Hz5;
000034  2001              MOVS     r0,#1
000036  7020              STRB     r0,[r4,#0]
;;;265          break;
000038  e020              B        |L222.124|
;;;266        case LSM6DSL_XL_ODR_26Hz:
;;;267          *val = LSM6DSL_XL_ODR_26Hz;
00003a  2002              MOVS     r0,#2
00003c  7020              STRB     r0,[r4,#0]
;;;268          break;
00003e  e01d              B        |L222.124|
;;;269        case LSM6DSL_XL_ODR_52Hz:
;;;270          *val = LSM6DSL_XL_ODR_52Hz;
000040  2003              MOVS     r0,#3
000042  7020              STRB     r0,[r4,#0]
;;;271          break;
000044  e01a              B        |L222.124|
;;;272        case LSM6DSL_XL_ODR_104Hz:
;;;273          *val = LSM6DSL_XL_ODR_104Hz;
000046  2004              MOVS     r0,#4
000048  7020              STRB     r0,[r4,#0]
;;;274          break;
00004a  e017              B        |L222.124|
;;;275        case LSM6DSL_XL_ODR_208Hz:
;;;276          *val = LSM6DSL_XL_ODR_208Hz;
00004c  2005              MOVS     r0,#5
00004e  7020              STRB     r0,[r4,#0]
;;;277          break;
000050  e014              B        |L222.124|
;;;278        case LSM6DSL_XL_ODR_416Hz:
;;;279          *val = LSM6DSL_XL_ODR_416Hz;
000052  2006              MOVS     r0,#6
000054  7020              STRB     r0,[r4,#0]
;;;280          break;
000056  e011              B        |L222.124|
;;;281        case LSM6DSL_XL_ODR_833Hz:
;;;282          *val = LSM6DSL_XL_ODR_833Hz;
000058  2007              MOVS     r0,#7
00005a  7020              STRB     r0,[r4,#0]
;;;283          break;
00005c  e00e              B        |L222.124|
;;;284        case LSM6DSL_XL_ODR_1k66Hz:
;;;285          *val = LSM6DSL_XL_ODR_1k66Hz;
00005e  2008              MOVS     r0,#8
000060  7020              STRB     r0,[r4,#0]
;;;286          break;
000062  e00b              B        |L222.124|
;;;287        case LSM6DSL_XL_ODR_3k33Hz:
;;;288          *val = LSM6DSL_XL_ODR_3k33Hz;
000064  2009              MOVS     r0,#9
000066  7020              STRB     r0,[r4,#0]
;;;289          break;
000068  e008              B        |L222.124|
;;;290        case LSM6DSL_XL_ODR_6k66Hz:
;;;291          *val = LSM6DSL_XL_ODR_6k66Hz;
00006a  200a              MOVS     r0,#0xa
00006c  7020              STRB     r0,[r4,#0]
;;;292          break;
00006e  e005              B        |L222.124|
;;;293        case LSM6DSL_XL_ODR_1Hz6:
;;;294          *val = LSM6DSL_XL_ODR_1Hz6;
000070  200b              MOVS     r0,#0xb
000072  7020              STRB     r0,[r4,#0]
;;;295          break;
000074  e002              B        |L222.124|
                  |L222.118|
;;;296        default:
;;;297          *val = LSM6DSL_XL_ODR_ND;
000076  200c              MOVS     r0,#0xc
000078  7020              STRB     r0,[r4,#0]
;;;298          break;
00007a  bf00              NOP      
                  |L222.124|
00007c  bf00              NOP                            ;262
;;;299      }
;;;300    
;;;301      return ret;
00007e  4630              MOV      r0,r6
;;;302    }
000080  bdf8              POP      {r3-r7,pc}
;;;303    
                          ENDP


                          AREA ||i.lsm6dsl_xl_data_rate_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_data_rate_set PROC
;;;231      */
;;;232    int32_t lsm6dsl_xl_data_rate_set(lsm6dsl_ctx_t *ctx, lsm6dsl_odr_xl_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;233    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;234      lsm6dsl_ctrl1_xl_t ctrl1_xl;
;;;235      int32_t ret;
;;;236    
;;;237      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;238      if(ret == 0){
000014  b95d              CBNZ     r5,|L223.46|
;;;239        ctrl1_xl.odr_xl = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641007          BFI      r0,r4,#4,#4
00001e  9000              STR      r0,[sp,#0]
;;;240        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2110              MOVS     r1,#0x10
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L223.46|
;;;241      }
;;;242      return ret;
00002e  4628              MOV      r0,r5
;;;243    }
000030  bdf8              POP      {r3-r7,pc}
;;;244    
                          ENDP


                          AREA ||i.lsm6dsl_xl_filter_analog_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_filter_analog_get PROC
;;;1699     */
;;;1700   int32_t lsm6dsl_xl_filter_analog_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1701                                        lsm6dsl_bw0_xl_t *val)
;;;1702   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1703     lsm6dsl_ctrl1_xl_t ctrl1_xl;
;;;1704     int32_t ret;
;;;1705   
;;;1706     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1707     switch (ctrl1_xl.bw0_xl) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  b110              CBZ      r0,|L224.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L224.48|
000022  e002              B        |L224.42|
                  |L224.36|
;;;1708       case LSM6DSL_XL_ANA_BW_1k5Hz:
;;;1709         *val = LSM6DSL_XL_ANA_BW_1k5Hz;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;1710         break;
000028  e005              B        |L224.54|
                  |L224.42|
;;;1711       case LSM6DSL_XL_ANA_BW_400Hz:
;;;1712         *val = LSM6DSL_XL_ANA_BW_400Hz;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;1713         break;
00002e  e002              B        |L224.54|
                  |L224.48|
;;;1714       default:
;;;1715         *val = LSM6DSL_XL_ANA_BW_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;1716         break;
000034  bf00              NOP      
                  |L224.54|
000036  bf00              NOP                            ;1710
;;;1717     }
;;;1718   
;;;1719     return ret;
000038  4630              MOV      r0,r6
;;;1720   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1721   
                          ENDP


                          AREA ||i.lsm6dsl_xl_filter_analog_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_filter_analog_set PROC
;;;1677     */
;;;1678   int32_t lsm6dsl_xl_filter_analog_set(lsm6dsl_ctx_t *ctx, lsm6dsl_bw0_xl_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1679   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1680     lsm6dsl_ctrl1_xl_t ctrl1_xl;
;;;1681     int32_t ret;
;;;1682   
;;;1683     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1684     if(ret == 0){
000014  b95d              CBNZ     r5,|L225.46|
;;;1685       ctrl1_xl.bw0_xl = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640000          BFI      r0,r4,#0,#1
00001e  9000              STR      r0,[sp,#0]
;;;1686       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2110              MOVS     r1,#0x10
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L225.46|
;;;1687     }
;;;1688     return ret;
00002e  4628              MOV      r0,r5
;;;1689   }
000030  bdf8              POP      {r3-r7,pc}
;;;1690   
                          ENDP


                          AREA ||i.lsm6dsl_xl_flag_data_ready_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_flag_data_ready_get PROC
;;;767      */
;;;768    int32_t lsm6dsl_xl_flag_data_ready_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;769    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;770      lsm6dsl_status_reg_t status_reg;
;;;771      int32_t ret;
;;;772    
;;;773      ret = lsm6dsl_read_reg(ctx, LSM6DSL_STATUS_REG, (uint8_t*)&status_reg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  211e              MOVS     r1,#0x1e
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;774      *val = status_reg.xlda;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000001          AND      r0,r0,#1
00001c  7020              STRB     r0,[r4,#0]
;;;775    
;;;776      return ret;
00001e  4630              MOV      r0,r6
;;;777    }
000020  bdf8              POP      {r3-r7,pc}
;;;778    
                          ENDP


                          AREA ||i.lsm6dsl_xl_full_scale_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_full_scale_get PROC
;;;196      */
;;;197    int32_t lsm6dsl_xl_full_scale_get(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_xl_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;198    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;199      lsm6dsl_ctrl1_xl_t ctrl1_xl;
;;;200      int32_t ret;
;;;201    
;;;202      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;203      switch (ctrl1_xl.fs_xl) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00081          UBFX     r0,r0,#2,#2
00001c  b130              CBZ      r0,|L227.44|
00001e  2801              CMP      r0,#1
000020  d007              BEQ      |L227.50|
000022  2802              CMP      r0,#2
000024  d008              BEQ      |L227.56|
000026  2803              CMP      r0,#3
000028  d10c              BNE      |L227.68|
00002a  e008              B        |L227.62|
                  |L227.44|
;;;204        case LSM6DSL_2g:
;;;205          *val = LSM6DSL_2g;
00002c  2000              MOVS     r0,#0
00002e  7020              STRB     r0,[r4,#0]
;;;206          break;
000030  e00b              B        |L227.74|
                  |L227.50|
;;;207        case LSM6DSL_16g:
;;;208          *val = LSM6DSL_16g;
000032  2001              MOVS     r0,#1
000034  7020              STRB     r0,[r4,#0]
;;;209          break;
000036  e008              B        |L227.74|
                  |L227.56|
;;;210        case LSM6DSL_4g:
;;;211          *val = LSM6DSL_4g;
000038  2002              MOVS     r0,#2
00003a  7020              STRB     r0,[r4,#0]
;;;212          break;
00003c  e005              B        |L227.74|
                  |L227.62|
;;;213        case LSM6DSL_8g:
;;;214          *val = LSM6DSL_8g;
00003e  2003              MOVS     r0,#3
000040  7020              STRB     r0,[r4,#0]
;;;215          break;
000042  e002              B        |L227.74|
                  |L227.68|
;;;216        default:
;;;217          *val = LSM6DSL_XL_FS_ND;
000044  2004              MOVS     r0,#4
000046  7020              STRB     r0,[r4,#0]
;;;218          break;
000048  bf00              NOP      
                  |L227.74|
00004a  bf00              NOP                            ;206
;;;219      }
;;;220    
;;;221      return ret;
00004c  4630              MOV      r0,r6
;;;222    }
00004e  bdf8              POP      {r3-r7,pc}
;;;223    
                          ENDP


                          AREA ||i.lsm6dsl_xl_full_scale_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_full_scale_set PROC
;;;175      */
;;;176    int32_t lsm6dsl_xl_full_scale_set(lsm6dsl_ctx_t *ctx, lsm6dsl_fs_xl_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;177    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;178      lsm6dsl_ctrl1_xl_t ctrl1_xl;
;;;179      int32_t ret;
;;;180    
;;;181      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2110              MOVS     r1,#0x10
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;182      if(ret == 0){
000014  b95d              CBNZ     r5,|L228.46|
;;;183        ctrl1_xl.fs_xl = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640083          BFI      r0,r4,#2,#2
00001e  9000              STR      r0,[sp,#0]
;;;184        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2110              MOVS     r1,#0x10
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L228.46|
;;;185      }
;;;186      return ret;
00002e  4628              MOV      r0,r5
;;;187    }
000030  bdf8              POP      {r3-r7,pc}
;;;188    
                          ENDP


                          AREA ||i.lsm6dsl_xl_hp_bandwidth_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_hp_bandwidth_get PROC
;;;1958     */
;;;1959   int32_t lsm6dsl_xl_hp_bandwidth_get(lsm6dsl_ctx_t *ctx, lsm6dsl_hpcf_xl_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1960   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1961     lsm6dsl_ctrl8_xl_t ctrl8_xl;
;;;1962     int32_t ret;
;;;1963   
;;;1964     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2117              MOVS     r1,#0x17
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1965     if (ctrl8_xl.hp_slope_xl_en == 0x00U){
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c00080          UBFX     r0,r0,#2,#1
00001c  b908              CBNZ     r0,|L229.34|
;;;1966       *val = LSM6DSL_XL_HP_NA;
00001e  2010              MOVS     r0,#0x10
000020  7020              STRB     r0,[r4,#0]
                  |L229.34|
;;;1967     }
;;;1968     switch (ctrl8_xl.hpcf_xl) {
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3c01041          UBFX     r0,r0,#5,#2
00002a  b130              CBZ      r0,|L229.58|
00002c  2801              CMP      r0,#1
00002e  d007              BEQ      |L229.64|
000030  2802              CMP      r0,#2
000032  d008              BEQ      |L229.70|
000034  2803              CMP      r0,#3
000036  d10c              BNE      |L229.82|
000038  e008              B        |L229.76|
                  |L229.58|
;;;1969       case LSM6DSL_XL_HP_ODR_DIV_4:
;;;1970         *val = LSM6DSL_XL_HP_ODR_DIV_4;
00003a  2000              MOVS     r0,#0
00003c  7020              STRB     r0,[r4,#0]
;;;1971         break;
00003e  e00b              B        |L229.88|
                  |L229.64|
;;;1972       case LSM6DSL_XL_HP_ODR_DIV_100:
;;;1973         *val = LSM6DSL_XL_HP_ODR_DIV_100;
000040  2001              MOVS     r0,#1
000042  7020              STRB     r0,[r4,#0]
;;;1974         break;
000044  e008              B        |L229.88|
                  |L229.70|
;;;1975       case LSM6DSL_XL_HP_ODR_DIV_9:
;;;1976         *val = LSM6DSL_XL_HP_ODR_DIV_9;
000046  2002              MOVS     r0,#2
000048  7020              STRB     r0,[r4,#0]
;;;1977         break;
00004a  e005              B        |L229.88|
                  |L229.76|
;;;1978       case LSM6DSL_XL_HP_ODR_DIV_400:
;;;1979         *val = LSM6DSL_XL_HP_ODR_DIV_400;
00004c  2003              MOVS     r0,#3
00004e  7020              STRB     r0,[r4,#0]
;;;1980         break;
000050  e002              B        |L229.88|
                  |L229.82|
;;;1981       default:
;;;1982         *val = LSM6DSL_XL_HP_NA;
000052  2010              MOVS     r0,#0x10
000054  7020              STRB     r0,[r4,#0]
;;;1983         break;
000056  bf00              NOP      
                  |L229.88|
000058  bf00              NOP                            ;1971
;;;1984     }
;;;1985   
;;;1986     return ret;
00005a  4630              MOV      r0,r6
;;;1987   }
00005c  bdf8              POP      {r3-r7,pc}
;;;1988   
                          ENDP


                          AREA ||i.lsm6dsl_xl_hp_bandwidth_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_hp_bandwidth_set PROC
;;;1935     */
;;;1936   int32_t lsm6dsl_xl_hp_bandwidth_set(lsm6dsl_ctx_t *ctx, lsm6dsl_hpcf_xl_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1937   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1938     lsm6dsl_ctrl8_xl_t ctrl8_xl;
;;;1939     int32_t ret;
;;;1940   
;;;1941     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2117              MOVS     r1,#0x17
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1942     if(ret == 0){
000014  b9b5              CBNZ     r5,|L230.68|
;;;1943       ctrl8_xl.input_composite = 0;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f0200008          BIC      r0,r0,#8
00001e  9000              STR      r0,[sp,#0]
;;;1944       ctrl8_xl.hpcf_xl = (uint8_t)val & 0x03U;
000020  f89d0000          LDRB     r0,[sp,#0]
000024  f3641046          BFI      r0,r4,#5,#2
000028  9000              STR      r0,[sp,#0]
;;;1945       ctrl8_xl.hp_slope_xl_en = 1;
00002a  f89d0000          LDRB     r0,[sp,#0]
00002e  f0200004          BIC      r0,r0,#4
000032  1d00              ADDS     r0,r0,#4
000034  9000              STR      r0,[sp,#0]
;;;1946       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000036  2301              MOVS     r3,#1
000038  466a              MOV      r2,sp
00003a  2117              MOVS     r1,#0x17
00003c  4630              MOV      r0,r6
00003e  f7fffffe          BL       lsm6dsl_write_reg
000042  4605              MOV      r5,r0
                  |L230.68|
;;;1947     }
;;;1948     return ret;
000044  4628              MOV      r0,r5
;;;1949   }
000046  bdf8              POP      {r3-r7,pc}
;;;1950   
                          ENDP


                          AREA ||i.lsm6dsl_xl_hp_path_internal_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_hp_path_internal_get PROC
;;;1633     */
;;;1634   int32_t lsm6dsl_xl_hp_path_internal_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1635                                           lsm6dsl_slope_fds_t *val)
;;;1636   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1637     lsm6dsl_tap_cfg_t tap_cfg;
;;;1638     int32_t ret;
;;;1639   
;;;1640     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1641     switch (tap_cfg.slope_fds) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  b110              CBZ      r0,|L231.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L231.48|
000022  e002              B        |L231.42|
                  |L231.36|
;;;1642       case LSM6DSL_USE_SLOPE:
;;;1643         *val = LSM6DSL_USE_SLOPE;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;1644         break;
000028  e005              B        |L231.54|
                  |L231.42|
;;;1645       case LSM6DSL_USE_HPF:
;;;1646         *val = LSM6DSL_USE_HPF;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;1647         break;
00002e  e002              B        |L231.54|
                  |L231.48|
;;;1648       default:
;;;1649         *val = LSM6DSL_HP_PATH_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;1650         break;
000034  bf00              NOP      
                  |L231.54|
000036  bf00              NOP                            ;1644
;;;1651     }
;;;1652   
;;;1653     return ret;
000038  4630              MOV      r0,r6
;;;1654   }
00003a  bdf8              POP      {r3-r7,pc}
;;;1655   
                          ENDP


                          AREA ||i.lsm6dsl_xl_hp_path_internal_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_hp_path_internal_set PROC
;;;1610     */
;;;1611   int32_t lsm6dsl_xl_hp_path_internal_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1612                                           lsm6dsl_slope_fds_t val)
;;;1613   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1614     lsm6dsl_tap_cfg_t tap_cfg;
;;;1615     int32_t ret;
;;;1616   
;;;1617     ret = lsm6dsl_read_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2158              MOVS     r1,#0x58
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1618     if(ret == 0){
000014  b95d              CBNZ     r5,|L232.46|
;;;1619       tap_cfg.slope_fds = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;1620       ret = lsm6dsl_write_reg(ctx, LSM6DSL_TAP_CFG, (uint8_t*)&tap_cfg, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2158              MOVS     r1,#0x58
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L232.46|
;;;1621     }
;;;1622     return ret;
00002e  4628              MOV      r0,r5
;;;1623   }
000030  bdf8              POP      {r3-r7,pc}
;;;1624   
                          ENDP


                          AREA ||i.lsm6dsl_xl_lp1_bandwidth_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_lp1_bandwidth_get PROC
;;;1775     */
;;;1776   int32_t lsm6dsl_xl_lp1_bandwidth_get(lsm6dsl_ctx_t *ctx,
000000  b57c              PUSH     {r2-r6,lr}
;;;1777                                        lsm6dsl_lpf1_bw_sel_t *val)
;;;1778   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1779     lsm6dsl_ctrl1_xl_t ctrl1_xl;
;;;1780     lsm6dsl_ctrl8_xl_t ctrl8_xl;
;;;1781     int32_t ret;
;;;1782   
;;;1783     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2117              MOVS     r1,#0x17
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1784     if(ret == 0){
000014  bb25              CBNZ     r5,|L233.96|
;;;1785       if ((ctrl8_xl.lpf2_xl_en != 0x00U) ||
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  09c0              LSRS     r0,r0,#7
00001c  b920              CBNZ     r0,|L233.40|
;;;1786           (ctrl8_xl.hp_slope_xl_en != 0x00U)){
00001e  f89d0000          LDRB     r0,[sp,#0]
000022  f3c00080          UBFX     r0,r0,#2,#1
000026  b110              CBZ      r0,|L233.46|
                  |L233.40|
;;;1787         *val = LSM6DSL_XL_LP1_NA;
000028  2002              MOVS     r0,#2
00002a  7020              STRB     r0,[r4,#0]
00002c  e018              B        |L233.96|
                  |L233.46|
;;;1788       }
;;;1789       else{
;;;1790         ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
00002e  2301              MOVS     r3,#1
000030  aa01              ADD      r2,sp,#4
000032  2110              MOVS     r1,#0x10
000034  4630              MOV      r0,r6
000036  f7fffffe          BL       lsm6dsl_read_reg
00003a  4605              MOV      r5,r0
;;;1791         switch ( ctrl1_xl.lpf1_bw_sel) {
00003c  f89d0004          LDRB     r0,[sp,#4]
000040  f3c00040          UBFX     r0,r0,#1,#1
000044  b110              CBZ      r0,|L233.76|
000046  2801              CMP      r0,#1
000048  d106              BNE      |L233.88|
00004a  e002              B        |L233.82|
                  |L233.76|
;;;1792           case LSM6DSL_XL_LP1_ODR_DIV_2:
;;;1793             *val = LSM6DSL_XL_LP1_ODR_DIV_2;
00004c  2000              MOVS     r0,#0
00004e  7020              STRB     r0,[r4,#0]
;;;1794             break;
000050  e005              B        |L233.94|
                  |L233.82|
;;;1795           case LSM6DSL_XL_LP1_ODR_DIV_4:
;;;1796             *val = LSM6DSL_XL_LP1_ODR_DIV_4;
000052  2001              MOVS     r0,#1
000054  7020              STRB     r0,[r4,#0]
;;;1797             break;
000056  e002              B        |L233.94|
                  |L233.88|
;;;1798           default:
;;;1799             *val = LSM6DSL_XL_LP1_NA;
000058  2002              MOVS     r0,#2
00005a  7020              STRB     r0,[r4,#0]
;;;1800             break;
00005c  bf00              NOP      
                  |L233.94|
00005e  bf00              NOP                            ;1794
                  |L233.96|
;;;1801         }
;;;1802       }
;;;1803     }
;;;1804     return ret;
000060  4628              MOV      r0,r5
;;;1805   }
000062  bd7c              POP      {r2-r6,pc}
;;;1806   
                          ENDP


                          AREA ||i.lsm6dsl_xl_lp1_bandwidth_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_lp1_bandwidth_set PROC
;;;1743     */
;;;1744   int32_t lsm6dsl_xl_lp1_bandwidth_set(lsm6dsl_ctx_t *ctx,
000000  b57c              PUSH     {r2-r6,lr}
;;;1745                                        lsm6dsl_lpf1_bw_sel_t val)
;;;1746   {
000002  4606              MOV      r6,r0
000004  460d              MOV      r5,r1
;;;1747     lsm6dsl_ctrl1_xl_t ctrl1_xl;
;;;1748     lsm6dsl_ctrl8_xl_t ctrl8_xl;
;;;1749     int32_t ret;
;;;1750   
;;;1751     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
000006  2301              MOVS     r3,#1
000008  aa01              ADD      r2,sp,#4
00000a  2110              MOVS     r1,#0x10
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4604              MOV      r4,r0
;;;1752     if(ret == 0){
000014  bb2c              CBNZ     r4,|L234.98|
;;;1753       ctrl1_xl.lpf1_bw_sel = (uint8_t) val;
000016  f89d0004          LDRB     r0,[sp,#4]
00001a  f3650041          BFI      r0,r5,#1,#1
00001e  9001              STR      r0,[sp,#4]
;;;1754       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL1_XL, (uint8_t*)&ctrl1_xl, 1);
000020  2301              MOVS     r3,#1
000022  aa01              ADD      r2,sp,#4
000024  2110              MOVS     r1,#0x10
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4604              MOV      r4,r0
;;;1755       if(ret == 0){
00002e  b9c4              CBNZ     r4,|L234.98|
;;;1756         ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000030  2301              MOVS     r3,#1
000032  466a              MOV      r2,sp
000034  2117              MOVS     r1,#0x17
000036  4630              MOV      r0,r6
000038  f7fffffe          BL       lsm6dsl_read_reg
00003c  4604              MOV      r4,r0
;;;1757         if(ret == 0){
00003e  b984              CBNZ     r4,|L234.98|
;;;1758           ctrl8_xl.lpf2_xl_en = 0;
000040  f89d0000          LDRB     r0,[sp,#0]
000044  f0200080          BIC      r0,r0,#0x80
000048  9000              STR      r0,[sp,#0]
;;;1759           ctrl8_xl.hp_slope_xl_en = 0;
00004a  f89d0000          LDRB     r0,[sp,#0]
00004e  f0200004          BIC      r0,r0,#4
000052  9000              STR      r0,[sp,#0]
;;;1760           ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000054  2301              MOVS     r3,#1
000056  466a              MOV      r2,sp
000058  2117              MOVS     r1,#0x17
00005a  4630              MOV      r0,r6
00005c  f7fffffe          BL       lsm6dsl_write_reg
000060  4604              MOV      r4,r0
                  |L234.98|
;;;1761         }
;;;1762       }
;;;1763     }
;;;1764     return ret;
000062  4620              MOV      r0,r4
;;;1765   }
000064  bd7c              POP      {r2-r6,pc}
;;;1766   
                          ENDP


                          AREA ||i.lsm6dsl_xl_lp2_bandwidth_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_lp2_bandwidth_get PROC
;;;1839     */
;;;1840   int32_t lsm6dsl_xl_lp2_bandwidth_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1841                                        lsm6dsl_input_composite_t *val)
;;;1842   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1843     lsm6dsl_ctrl8_xl_t ctrl8_xl;
;;;1844     int32_t ret;
;;;1845   
;;;1846     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2117              MOVS     r1,#0x17
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1847     if(ret == 0){
000014  2d00              CMP      r5,#0
000016  d143              BNE      |L235.160|
;;;1848       if ((ctrl8_xl.lpf2_xl_en == 0x00U) ||
000018  f89d0000          LDRB     r0,[sp,#0]
00001c  09c0              LSRS     r0,r0,#7
00001e  b120              CBZ      r0,|L235.42|
;;;1849           (ctrl8_xl.hp_slope_xl_en != 0x00U)){
000020  f89d0000          LDRB     r0,[sp,#0]
000024  f3c00080          UBFX     r0,r0,#2,#1
000028  b110              CBZ      r0,|L235.48|
                  |L235.42|
;;;1850         *val = LSM6DSL_XL_LP_NA;
00002a  2020              MOVS     r0,#0x20
00002c  7020              STRB     r0,[r4,#0]
00002e  e037              B        |L235.160|
                  |L235.48|
;;;1851       }
;;;1852       else{
;;;1853         switch ((ctrl8_xl.input_composite << 4) + ctrl8_xl.hpcf_xl) {
000030  f89d0000          LDRB     r0,[sp,#0]
000034  f3c01041          UBFX     r0,r0,#5,#2
000038  f89d1000          LDRB     r1,[sp,#0]
00003c  f3c101c0          UBFX     r1,r1,#3,#1
000040  eb001001          ADD      r0,r0,r1,LSL #4
000044  2810              CMP      r0,#0x10
000046  d01b              BEQ      |L235.128|
000048  dc07              BGT      |L235.90|
00004a  b168              CBZ      r0,|L235.104|
00004c  2801              CMP      r0,#1
00004e  d00e              BEQ      |L235.110|
000050  2802              CMP      r0,#2
000052  d00f              BEQ      |L235.116|
000054  2803              CMP      r0,#3
000056  d11f              BNE      |L235.152|
000058  e00f              B        |L235.122|
                  |L235.90|
00005a  2811              CMP      r0,#0x11
00005c  d013              BEQ      |L235.134|
00005e  2812              CMP      r0,#0x12
000060  d014              BEQ      |L235.140|
000062  2813              CMP      r0,#0x13
000064  d118              BNE      |L235.152|
000066  e014              B        |L235.146|
                  |L235.104|
;;;1854           case LSM6DSL_XL_LOW_LAT_LP_ODR_DIV_50:
;;;1855             *val = LSM6DSL_XL_LOW_LAT_LP_ODR_DIV_50;
000068  2000              MOVS     r0,#0
00006a  7020              STRB     r0,[r4,#0]
;;;1856             break;
00006c  e017              B        |L235.158|
                  |L235.110|
;;;1857           case LSM6DSL_XL_LOW_LAT_LP_ODR_DIV_100:
;;;1858             *val = LSM6DSL_XL_LOW_LAT_LP_ODR_DIV_100;
00006e  2001              MOVS     r0,#1
000070  7020              STRB     r0,[r4,#0]
;;;1859             break;
000072  e014              B        |L235.158|
                  |L235.116|
;;;1860           case LSM6DSL_XL_LOW_LAT_LP_ODR_DIV_9:
;;;1861             *val = LSM6DSL_XL_LOW_LAT_LP_ODR_DIV_9;
000074  2002              MOVS     r0,#2
000076  7020              STRB     r0,[r4,#0]
;;;1862             break;
000078  e011              B        |L235.158|
                  |L235.122|
;;;1863           case LSM6DSL_XL_LOW_LAT_LP_ODR_DIV_400:
;;;1864             *val = LSM6DSL_XL_LOW_LAT_LP_ODR_DIV_400;
00007a  2003              MOVS     r0,#3
00007c  7020              STRB     r0,[r4,#0]
;;;1865             break;
00007e  e00e              B        |L235.158|
                  |L235.128|
;;;1866           case LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_50:
;;;1867             *val = LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_50;
000080  2010              MOVS     r0,#0x10
000082  7020              STRB     r0,[r4,#0]
;;;1868             break;
000084  e00b              B        |L235.158|
                  |L235.134|
;;;1869           case LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100:
;;;1870             *val = LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_100;
000086  2011              MOVS     r0,#0x11
000088  7020              STRB     r0,[r4,#0]
;;;1871             break;
00008a  e008              B        |L235.158|
                  |L235.140|
;;;1872           case LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_9:
;;;1873             *val = LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_9;
00008c  2012              MOVS     r0,#0x12
00008e  7020              STRB     r0,[r4,#0]
;;;1874             break;
000090  e005              B        |L235.158|
                  |L235.146|
;;;1875           case LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_400:
;;;1876             *val = LSM6DSL_XL_LOW_NOISE_LP_ODR_DIV_400;
000092  2013              MOVS     r0,#0x13
000094  7020              STRB     r0,[r4,#0]
;;;1877             break;
000096  e002              B        |L235.158|
                  |L235.152|
;;;1878           default:
;;;1879             *val = LSM6DSL_XL_LP_NA;
000098  2020              MOVS     r0,#0x20
00009a  7020              STRB     r0,[r4,#0]
;;;1880             break;
00009c  bf00              NOP      
                  |L235.158|
00009e  bf00              NOP                            ;1856
                  |L235.160|
;;;1881         }
;;;1882       }
;;;1883     }
;;;1884   
;;;1885     return ret;
0000a0  4628              MOV      r0,r5
;;;1886   }
0000a2  bdf8              POP      {r3-r7,pc}
;;;1887   
                          ENDP


                          AREA ||i.lsm6dsl_xl_lp2_bandwidth_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_lp2_bandwidth_set PROC
;;;1814     */
;;;1815   int32_t lsm6dsl_xl_lp2_bandwidth_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;1816                                        lsm6dsl_input_composite_t val)
;;;1817   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1818     lsm6dsl_ctrl8_xl_t ctrl8_xl;
;;;1819     int32_t ret;
;;;1820   
;;;1821     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2117              MOVS     r1,#0x17
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1822     if(ret == 0){
000014  b9e5              CBNZ     r5,|L236.80|
;;;1823       ctrl8_xl.input_composite = ( (uint8_t) val & 0x10U ) >> 4;
000016  0920              LSRS     r0,r4,#4
000018  f89d1000          LDRB     r1,[sp,#0]
00001c  f36001c3          BFI      r1,r0,#3,#1
000020  9100              STR      r1,[sp,#0]
;;;1824       ctrl8_xl.hpcf_xl = (uint8_t) val & 0x03U;
000022  f89d0000          LDRB     r0,[sp,#0]
000026  f3641046          BFI      r0,r4,#5,#2
00002a  9000              STR      r0,[sp,#0]
;;;1825       ctrl8_xl.lpf2_xl_en = 1;
00002c  f89d0000          LDRB     r0,[sp,#0]
000030  f0200080          BIC      r0,r0,#0x80
000034  3080              ADDS     r0,r0,#0x80
000036  9000              STR      r0,[sp,#0]
;;;1826       ctrl8_xl.hp_slope_xl_en = 0;
000038  f89d0000          LDRB     r0,[sp,#0]
00003c  f0200004          BIC      r0,r0,#4
000040  9000              STR      r0,[sp,#0]
;;;1827       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000042  2301              MOVS     r3,#1
000044  466a              MOV      r2,sp
000046  2117              MOVS     r1,#0x17
000048  4630              MOV      r0,r6
00004a  f7fffffe          BL       lsm6dsl_write_reg
00004e  4605              MOV      r5,r0
                  |L236.80|
;;;1828     }
;;;1829     return ret;
000050  4628              MOV      r0,r5
;;;1830   }
000052  bdf8              POP      {r3-r7,pc}
;;;1831   
                          ENDP


                          AREA ||i.lsm6dsl_xl_offset_weight_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_offset_weight_get PROC
;;;511      */
;;;512    int32_t lsm6dsl_xl_offset_weight_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;513                                         lsm6dsl_usr_off_w_t *val)
;;;514    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;515      lsm6dsl_ctrl6_c_t ctrl6_c;
;;;516      int32_t ret;
;;;517    
;;;518      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2115              MOVS     r1,#0x15
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;519      switch (ctrl6_c.usr_off_w) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c000c0          UBFX     r0,r0,#3,#1
00001c  b110              CBZ      r0,|L237.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L237.48|
000022  e002              B        |L237.42|
                  |L237.36|
;;;520        case LSM6DSL_LSb_1mg:
;;;521          *val = LSM6DSL_LSb_1mg;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;522          break;
000028  e005              B        |L237.54|
                  |L237.42|
;;;523        case LSM6DSL_LSb_16mg:
;;;524          *val = LSM6DSL_LSb_16mg;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;525          break;
00002e  e002              B        |L237.54|
                  |L237.48|
;;;526        default:
;;;527          *val = LSM6DSL_WEIGHT_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;528          break;
000034  bf00              NOP      
                  |L237.54|
000036  bf00              NOP                            ;522
;;;529      }
;;;530    
;;;531      return ret;
000038  4630              MOV      r0,r6
;;;532    }
00003a  bdf8              POP      {r3-r7,pc}
;;;533    
                          ENDP


                          AREA ||i.lsm6dsl_xl_offset_weight_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_offset_weight_set PROC
;;;488      */
;;;489    int32_t lsm6dsl_xl_offset_weight_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;490                                         lsm6dsl_usr_off_w_t val)
;;;491    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;492      lsm6dsl_ctrl6_c_t ctrl6_c;
;;;493      int32_t ret;
;;;494    
;;;495      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2115              MOVS     r1,#0x15
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;496      if(ret == 0){
000014  b95d              CBNZ     r5,|L238.46|
;;;497        ctrl6_c.usr_off_w = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f36400c3          BFI      r0,r4,#3,#1
00001e  9000              STR      r0,[sp,#0]
;;;498        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2115              MOVS     r1,#0x15
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L238.46|
;;;499      }
;;;500      return ret;
00002e  4628              MOV      r0,r5
;;;501    }
000030  bdf8              POP      {r3-r7,pc}
;;;502    
                          ENDP


                          AREA ||i.lsm6dsl_xl_power_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_power_mode_get PROC
;;;563      */
;;;564    int32_t lsm6dsl_xl_power_mode_get(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;565                                      lsm6dsl_xl_hm_mode_t *val)
;;;566    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;567      lsm6dsl_ctrl6_c_t ctrl6_c;
;;;568      int32_t ret;
;;;569    
;;;570      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2115              MOVS     r1,#0x15
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;571      switch (ctrl6_c.xl_hm_mode) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  b110              CBZ      r0,|L239.36|
00001e  2801              CMP      r0,#1
000020  d106              BNE      |L239.48|
000022  e002              B        |L239.42|
                  |L239.36|
;;;572        case LSM6DSL_XL_HIGH_PERFORMANCE:
;;;573          *val = LSM6DSL_XL_HIGH_PERFORMANCE;
000024  2000              MOVS     r0,#0
000026  7020              STRB     r0,[r4,#0]
;;;574          break;
000028  e005              B        |L239.54|
                  |L239.42|
;;;575        case LSM6DSL_XL_NORMAL:
;;;576          *val = LSM6DSL_XL_NORMAL;
00002a  2001              MOVS     r0,#1
00002c  7020              STRB     r0,[r4,#0]
;;;577          break;
00002e  e002              B        |L239.54|
                  |L239.48|
;;;578        default:
;;;579          *val = LSM6DSL_XL_PW_MODE_ND;
000030  2002              MOVS     r0,#2
000032  7020              STRB     r0,[r4,#0]
;;;580          break;
000034  bf00              NOP      
                  |L239.54|
000036  bf00              NOP                            ;574
;;;581      }
;;;582    
;;;583      return ret;
000038  4630              MOV      r0,r6
;;;584    }
00003a  bdf8              POP      {r3-r7,pc}
;;;585    
                          ENDP


                          AREA ||i.lsm6dsl_xl_power_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_power_mode_set PROC
;;;541      */
;;;542    int32_t lsm6dsl_xl_power_mode_set(lsm6dsl_ctx_t *ctx,
000000  b5f8              PUSH     {r3-r7,lr}
;;;543                                      lsm6dsl_xl_hm_mode_t val)
;;;544    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;545      lsm6dsl_ctrl6_c_t ctrl6_c;
;;;546      int32_t ret;
;;;547    
;;;548      ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2115              MOVS     r1,#0x15
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;549      if(ret == 0){
000014  b95d              CBNZ     r5,|L240.46|
;;;550        ctrl6_c.xl_hm_mode = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;551        ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL6_C, (uint8_t*)&ctrl6_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2115              MOVS     r1,#0x15
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L240.46|
;;;552      }
;;;553      return ret;
00002e  4628              MOV      r0,r5
;;;554    }
000030  bdf8              POP      {r3-r7,pc}
;;;555    
                          ENDP


                          AREA ||i.lsm6dsl_xl_reference_mode_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_reference_mode_get PROC
;;;1916     */
;;;1917   int32_t lsm6dsl_xl_reference_mode_get(lsm6dsl_ctx_t *ctx, uint8_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1918   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1919     lsm6dsl_ctrl8_xl_t ctrl8_xl;
;;;1920     int32_t ret;
;;;1921   
;;;1922     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2117              MOVS     r1,#0x17
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1923     *val = ctrl8_xl.hp_ref_mode;
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f3c01000          UBFX     r0,r0,#4,#1
00001c  7020              STRB     r0,[r4,#0]
;;;1924   
;;;1925     return ret;
00001e  4630              MOV      r0,r6
;;;1926   }
000020  bdf8              POP      {r3-r7,pc}
;;;1927   
                          ENDP


                          AREA ||i.lsm6dsl_xl_reference_mode_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_reference_mode_set PROC
;;;1895     */
;;;1896   int32_t lsm6dsl_xl_reference_mode_set(lsm6dsl_ctx_t *ctx, uint8_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1897   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1898     lsm6dsl_ctrl8_xl_t ctrl8_xl;
;;;1899     int32_t ret;
;;;1900   
;;;1901     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2117              MOVS     r1,#0x17
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1902     if(ret == 0){
000014  b95d              CBNZ     r5,|L242.46|
;;;1903       ctrl8_xl.hp_ref_mode = val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3641004          BFI      r0,r4,#4,#1
00001e  9000              STR      r0,[sp,#0]
;;;1904       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL8_XL, (uint8_t*)&ctrl8_xl, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2117              MOVS     r1,#0x17
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L242.46|
;;;1905     }
;;;1906     return ret;
00002e  4628              MOV      r0,r5
;;;1907   }
000030  bdf8              POP      {r3-r7,pc}
;;;1908   
                          ENDP


                          AREA ||i.lsm6dsl_xl_self_test_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_self_test_get PROC
;;;1470     */
;;;1471   int32_t lsm6dsl_xl_self_test_get(lsm6dsl_ctx_t *ctx, lsm6dsl_st_xl_t *val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1472   {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;1473     lsm6dsl_ctrl5_c_t ctrl5_c;
;;;1474     int32_t ret;
;;;1475   
;;;1476     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;1477     switch (ctrl5_c.st_xl) {
000014  f89d0000          LDRB     r0,[sp,#0]
000018  f0000003          AND      r0,r0,#3
00001c  b120              CBZ      r0,|L243.40|
00001e  2801              CMP      r0,#1
000020  d005              BEQ      |L243.46|
000022  2802              CMP      r0,#2
000024  d109              BNE      |L243.58|
000026  e005              B        |L243.52|
                  |L243.40|
;;;1478       case LSM6DSL_XL_ST_DISABLE:
;;;1479         *val = LSM6DSL_XL_ST_DISABLE;
000028  2000              MOVS     r0,#0
00002a  7020              STRB     r0,[r4,#0]
;;;1480         break;
00002c  e008              B        |L243.64|
                  |L243.46|
;;;1481       case LSM6DSL_XL_ST_POSITIVE:
;;;1482         *val = LSM6DSL_XL_ST_POSITIVE;
00002e  2001              MOVS     r0,#1
000030  7020              STRB     r0,[r4,#0]
;;;1483         break;
000032  e005              B        |L243.64|
                  |L243.52|
;;;1484       case LSM6DSL_XL_ST_NEGATIVE:
;;;1485         *val = LSM6DSL_XL_ST_NEGATIVE;
000034  2002              MOVS     r0,#2
000036  7020              STRB     r0,[r4,#0]
;;;1486         break;
000038  e002              B        |L243.64|
                  |L243.58|
;;;1487       default:
;;;1488         *val = LSM6DSL_XL_ST_ND;
00003a  2003              MOVS     r0,#3
00003c  7020              STRB     r0,[r4,#0]
;;;1489         break;
00003e  bf00              NOP      
                  |L243.64|
000040  bf00              NOP                            ;1480
;;;1490     }
;;;1491     return ret;
000042  4630              MOV      r0,r6
;;;1492   }
000044  bdf8              POP      {r3-r7,pc}
;;;1493   
                          ENDP


                          AREA ||i.lsm6dsl_xl_self_test_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_self_test_set PROC
;;;1449     */
;;;1450   int32_t lsm6dsl_xl_self_test_set(lsm6dsl_ctx_t *ctx, lsm6dsl_st_xl_t val)
000000  b5f8              PUSH     {r3-r7,lr}
;;;1451   {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;1452     lsm6dsl_ctrl5_c_t ctrl5_c;
;;;1453     int32_t ret;
;;;1454   
;;;1455     ret = lsm6dsl_read_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000006  2301              MOVS     r3,#1
000008  466a              MOV      r2,sp
00000a  2114              MOVS     r1,#0x14
00000c  4630              MOV      r0,r6
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4605              MOV      r5,r0
;;;1456     if(ret == 0){
000014  b95d              CBNZ     r5,|L244.46|
;;;1457       ctrl5_c.st_xl = (uint8_t) val;
000016  f89d0000          LDRB     r0,[sp,#0]
00001a  f3640001          BFI      r0,r4,#0,#2
00001e  9000              STR      r0,[sp,#0]
;;;1458       ret = lsm6dsl_write_reg(ctx, LSM6DSL_CTRL5_C, (uint8_t*)&ctrl5_c, 1);
000020  2301              MOVS     r3,#1
000022  466a              MOV      r2,sp
000024  2114              MOVS     r1,#0x14
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       lsm6dsl_write_reg
00002c  4605              MOV      r5,r0
                  |L244.46|
;;;1459     }
;;;1460     return ret;
00002e  4628              MOV      r0,r5
;;;1461   }
000030  bdf8              POP      {r3-r7,pc}
;;;1462   
                          ENDP


                          AREA ||i.lsm6dsl_xl_usr_offset_get||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_usr_offset_get PROC
;;;843      */
;;;844    int32_t lsm6dsl_xl_usr_offset_get(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;845    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;846      int32_t ret;
;;;847      ret = lsm6dsl_read_reg(ctx, LSM6DSL_X_OFS_USR, buff, 3);
000006  2303              MOVS     r3,#3
000008  4622              MOV      r2,r4
00000a  2173              MOVS     r1,#0x73
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_read_reg
000012  4606              MOV      r6,r0
;;;848      return ret;
000014  4630              MOV      r0,r6
;;;849    }
000016  bd70              POP      {r4-r6,pc}
;;;850    
                          ENDP


                          AREA ||i.lsm6dsl_xl_usr_offset_set||, CODE, READONLY, ALIGN=1

                  lsm6dsl_xl_usr_offset_set PROC
;;;826      */
;;;827    int32_t lsm6dsl_xl_usr_offset_set(lsm6dsl_ctx_t *ctx, uint8_t *buff)
000000  b570              PUSH     {r4-r6,lr}
;;;828    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;829      int32_t ret;
;;;830      ret = lsm6dsl_write_reg(ctx, LSM6DSL_X_OFS_USR, buff, 3);
000006  2303              MOVS     r3,#3
000008  4622              MOV      r2,r4
00000a  2173              MOVS     r1,#0x73
00000c  4628              MOV      r0,r5
00000e  f7fffffe          BL       lsm6dsl_write_reg
000012  4606              MOV      r6,r0
;;;831      return ret;
000014  4630              MOV      r0,r6
;;;832    }
000016  bd70              POP      {r4-r6,pc}
;;;833    
                          ENDP

