; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\lps22hb.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\lps22hb.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\..\..\..\..\..\Drivers\BSP\Components\lps22hb\lps22hb.c]
                          THUMB

                          AREA ||i.LPS22HB_DeInit||, CODE, READONLY, ALIGN=1

                  LPS22HB_DeInit PROC
;;;185     */
;;;186    int32_t LPS22HB_DeInit(LPS22HB_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;187    {
000002  4604              MOV      r4,r0
;;;188      if (pObj->is_initialized == 1U)
000004  f8940028          LDRB     r0,[r4,#0x28]
000008  2801              CMP      r0,#1
00000a  d10d              BNE      |L1.40|
;;;189      {
;;;190        if (LPS22HB_PRESS_Disable(pObj) != LPS22HB_OK)
00000c  4620              MOV      r0,r4
00000e  f7fffffe          BL       LPS22HB_PRESS_Disable
000012  b110              CBZ      r0,|L1.26|
;;;191        {
;;;192          return LPS22HB_ERROR;
000014  f04f30ff          MOV      r0,#0xffffffff
                  |L1.24|
;;;193        }
;;;194    
;;;195        if (LPS22HB_TEMP_Disable(pObj) != LPS22HB_OK)
;;;196        {
;;;197          return LPS22HB_ERROR;
;;;198        }
;;;199      }
;;;200    
;;;201      pObj->is_initialized = 0;
;;;202    
;;;203      return LPS22HB_OK;
;;;204    }
000018  bd10              POP      {r4,pc}
                  |L1.26|
00001a  4620              MOV      r0,r4                 ;195
00001c  f7fffffe          BL       LPS22HB_TEMP_Disable
000020  b110              CBZ      r0,|L1.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;197
000026  e7f7              B        |L1.24|
                  |L1.40|
000028  2000              MOVS     r0,#0                 ;201
00002a  f8840028          STRB     r0,[r4,#0x28]         ;201
00002e  bf00              NOP                            ;203
000030  e7f2              B        |L1.24|
;;;205    
                          ENDP


                          AREA ||i.LPS22HB_FIFO_Get_Data||, CODE, READONLY, ALIGN=1

                  LPS22HB_FIFO_Get_Data PROC
;;;518     */
;;;519    int32_t LPS22HB_FIFO_Get_Data(LPS22HB_Object_t *pObj, float *Press, float *Temp)
000000  b570              PUSH     {r4-r6,lr}
;;;520    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
000006  4614              MOV      r4,r2
;;;521      if (LPS22HB_PRESS_GetPressure(pObj, Press) != LPS22HB_OK)
000008  4631              MOV      r1,r6
00000a  4628              MOV      r0,r5
00000c  f7fffffe          BL       LPS22HB_PRESS_GetPressure
000010  b110              CBZ      r0,|L2.24|
;;;522      {
;;;523        return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L2.22|
;;;524      }
;;;525    
;;;526      if (LPS22HB_Get_Temp(pObj, Temp) != LPS22HB_OK)
;;;527      {
;;;528        return LPS22HB_ERROR;
;;;529      }
;;;530    
;;;531      return LPS22HB_OK;
;;;532    }
000016  bd70              POP      {r4-r6,pc}
                  |L2.24|
000018  4621              MOV      r1,r4                 ;526
00001a  4628              MOV      r0,r5                 ;526
00001c  f7fffffe          BL       LPS22HB_Get_Temp
000020  b110              CBZ      r0,|L2.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;528
000026  e7f6              B        |L2.22|
                  |L2.40|
000028  2000              MOVS     r0,#0                 ;531
00002a  e7f4              B        |L2.22|
;;;533    
                          ENDP


                          AREA ||i.LPS22HB_FIFO_Get_FTh_Status||, CODE, READONLY, ALIGN=1

                  LPS22HB_FIFO_Get_FTh_Status PROC
;;;539     */
;;;540    int32_t LPS22HB_FIFO_Get_FTh_Status(LPS22HB_Object_t *pObj, uint8_t *Status)
000000  b570              PUSH     {r4-r6,lr}
;;;541    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;542      if (lps22hb_fifo_fth_flag_get(&(pObj->Ctx), Status) != LPS22HB_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lps22hb_fifo_fth_flag_get
000010  b110              CBZ      r0,|L3.24|
;;;543      {
;;;544        return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L3.22|
;;;545      }
;;;546    
;;;547      return LPS22HB_OK;
;;;548    }
000016  bd70              POP      {r4-r6,pc}
                  |L3.24|
000018  2000              MOVS     r0,#0                 ;547
00001a  e7fc              B        |L3.22|
;;;549    
                          ENDP


                          AREA ||i.LPS22HB_FIFO_Get_Full_Status||, CODE, READONLY, ALIGN=1

                  LPS22HB_FIFO_Get_Full_Status PROC
;;;555     */
;;;556    int32_t LPS22HB_FIFO_Get_Full_Status(LPS22HB_Object_t *pObj, uint8_t *Status)
000000  b570              PUSH     {r4-r6,lr}
;;;557    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;558      if (lps22hb_fifo_data_level_get(&(pObj->Ctx), Status) != LPS22HB_OK)
000006  4621              MOV      r1,r4
000008  f105001c          ADD      r0,r5,#0x1c
00000c  f7fffffe          BL       lps22hb_fifo_data_level_get
000010  b110              CBZ      r0,|L4.24|
;;;559      {
;;;560        return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L4.22|
;;;561      }
;;;562    
;;;563      if (*Status == LPS22HB_FIFO_FULL)
;;;564      {
;;;565        *Status = (uint8_t) 1;
;;;566      }
;;;567    
;;;568      return LPS22HB_OK;
;;;569    }
000016  bd70              POP      {r4-r6,pc}
                  |L4.24|
000018  7820              LDRB     r0,[r4,#0]            ;563
00001a  2820              CMP      r0,#0x20              ;563
00001c  d101              BNE      |L4.34|
00001e  2001              MOVS     r0,#1                 ;565
000020  7020              STRB     r0,[r4,#0]            ;565
                  |L4.34|
000022  2000              MOVS     r0,#0                 ;568
000024  e7f7              B        |L4.22|
;;;570    
                          ENDP


                          AREA ||i.LPS22HB_FIFO_Get_Level||, CODE, READONLY, ALIGN=1

                  LPS22HB_FIFO_Get_Level PROC
;;;576     */
;;;577    int32_t LPS22HB_FIFO_Get_Level(LPS22HB_Object_t *pObj, uint8_t *Status)
000000  b570              PUSH     {r4-r6,lr}
;;;578    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;579      if (lps22hb_fifo_data_level_get(&(pObj->Ctx), Status) != LPS22HB_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lps22hb_fifo_data_level_get
000010  b110              CBZ      r0,|L5.24|
;;;580      {
;;;581        return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L5.22|
;;;582      }
;;;583    
;;;584      return LPS22HB_OK;
;;;585    }
000016  bd70              POP      {r4-r6,pc}
                  |L5.24|
000018  2000              MOVS     r0,#0                 ;584
00001a  e7fc              B        |L5.22|
;;;586    
                          ENDP


                          AREA ||i.LPS22HB_FIFO_Get_Ovr_Status||, CODE, READONLY, ALIGN=1

                  LPS22HB_FIFO_Get_Ovr_Status PROC
;;;592     */
;;;593    int32_t LPS22HB_FIFO_Get_Ovr_Status(LPS22HB_Object_t *pObj, uint8_t *Status)
000000  b570              PUSH     {r4-r6,lr}
;;;594    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;595      if (lps22hb_fifo_ovr_flag_get(&(pObj->Ctx), Status) != LPS22HB_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lps22hb_fifo_ovr_flag_get
000010  b110              CBZ      r0,|L6.24|
;;;596      {
;;;597        return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L6.22|
;;;598      }
;;;599    
;;;600      return LPS22HB_OK;
;;;601    }
000016  bd70              POP      {r4-r6,pc}
                  |L6.24|
000018  2000              MOVS     r0,#0                 ;600
00001a  e7fc              B        |L6.22|
;;;602    
                          ENDP


                          AREA ||i.LPS22HB_FIFO_Reset_Interrupt||, CODE, READONLY, ALIGN=1

                  LPS22HB_FIFO_Reset_Interrupt PROC
;;;608     */
;;;609    int32_t LPS22HB_FIFO_Reset_Interrupt(LPS22HB_Object_t *pObj, uint8_t interrupt)
000000  b570              PUSH     {r4-r6,lr}
;;;610    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;611      switch (interrupt)
000006  b125              CBZ      r5,|L7.18|
000008  2d01              CMP      r5,#1
00000a  d00c              BEQ      |L7.38|
00000c  2d02              CMP      r5,#2
00000e  d11e              BNE      |L7.78|
000010  e013              B        |L7.58|
                  |L7.18|
;;;612      {
;;;613        case 0:
;;;614          if (lps22hb_fifo_threshold_on_int_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
000012  2100              MOVS     r1,#0
000014  f104001c          ADD      r0,r4,#0x1c
000018  f7fffffe          BL       lps22hb_fifo_threshold_on_int_set
00001c  b110              CBZ      r0,|L7.36|
;;;615          {
;;;616            return LPS22HB_ERROR;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L7.34|
;;;617          }
;;;618          break;
;;;619        case 1:
;;;620          if (lps22hb_fifo_full_on_int_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
;;;621          {
;;;622            return LPS22HB_ERROR;
;;;623          }
;;;624          break;
;;;625        case 2:
;;;626          if (lps22hb_fifo_ovr_on_int_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
;;;627          {
;;;628            return LPS22HB_ERROR;
;;;629          }
;;;630          break;
;;;631        default:
;;;632          return LPS22HB_ERROR;
;;;633      }
;;;634    
;;;635      return LPS22HB_OK;
;;;636    }
000022  bd70              POP      {r4-r6,pc}
                  |L7.36|
000024  e016              B        |L7.84|
                  |L7.38|
000026  2100              MOVS     r1,#0                 ;620
000028  f104001c          ADD      r0,r4,#0x1c           ;620
00002c  f7fffffe          BL       lps22hb_fifo_full_on_int_set
000030  b110              CBZ      r0,|L7.56|
000032  f04f30ff          MOV      r0,#0xffffffff        ;622
000036  e7f4              B        |L7.34|
                  |L7.56|
000038  e00c              B        |L7.84|
                  |L7.58|
00003a  2100              MOVS     r1,#0                 ;626
00003c  f104001c          ADD      r0,r4,#0x1c           ;626
000040  f7fffffe          BL       lps22hb_fifo_ovr_on_int_set
000044  b110              CBZ      r0,|L7.76|
000046  f04f30ff          MOV      r0,#0xffffffff        ;628
00004a  e7ea              B        |L7.34|
                  |L7.76|
00004c  e002              B        |L7.84|
                  |L7.78|
00004e  f04f30ff          MOV      r0,#0xffffffff        ;632
000052  e7e6              B        |L7.34|
                  |L7.84|
000054  bf00              NOP                            ;618
000056  2000              MOVS     r0,#0                 ;635
000058  e7e3              B        |L7.34|
;;;637    
                          ENDP


                          AREA ||i.LPS22HB_FIFO_Set_Interrupt||, CODE, READONLY, ALIGN=1

                  LPS22HB_FIFO_Set_Interrupt PROC
;;;643     */
;;;644    int32_t LPS22HB_FIFO_Set_Interrupt(LPS22HB_Object_t *pObj, uint8_t interrupt)
000000  b570              PUSH     {r4-r6,lr}
;;;645    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;646      switch (interrupt)
000006  b125              CBZ      r5,|L8.18|
000008  2d01              CMP      r5,#1
00000a  d00c              BEQ      |L8.38|
00000c  2d02              CMP      r5,#2
00000e  d11e              BNE      |L8.78|
000010  e013              B        |L8.58|
                  |L8.18|
;;;647      {
;;;648        case 0:
;;;649          if (lps22hb_fifo_threshold_on_int_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
000012  2101              MOVS     r1,#1
000014  f104001c          ADD      r0,r4,#0x1c
000018  f7fffffe          BL       lps22hb_fifo_threshold_on_int_set
00001c  b110              CBZ      r0,|L8.36|
;;;650          {
;;;651            return LPS22HB_ERROR;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L8.34|
;;;652          }
;;;653          break;
;;;654        case 1:
;;;655          if (lps22hb_fifo_full_on_int_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
;;;656          {
;;;657            return LPS22HB_ERROR;
;;;658          }
;;;659          break;
;;;660        case 2:
;;;661          if (lps22hb_fifo_ovr_on_int_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
;;;662          {
;;;663            return LPS22HB_ERROR;
;;;664          }
;;;665          break;
;;;666        default:
;;;667          return LPS22HB_ERROR;
;;;668      }
;;;669    
;;;670      return LPS22HB_OK;
;;;671    }
000022  bd70              POP      {r4-r6,pc}
                  |L8.36|
000024  e016              B        |L8.84|
                  |L8.38|
000026  2101              MOVS     r1,#1                 ;655
000028  f104001c          ADD      r0,r4,#0x1c           ;655
00002c  f7fffffe          BL       lps22hb_fifo_full_on_int_set
000030  b110              CBZ      r0,|L8.56|
000032  f04f30ff          MOV      r0,#0xffffffff        ;657
000036  e7f4              B        |L8.34|
                  |L8.56|
000038  e00c              B        |L8.84|
                  |L8.58|
00003a  2101              MOVS     r1,#1                 ;661
00003c  f104001c          ADD      r0,r4,#0x1c           ;661
000040  f7fffffe          BL       lps22hb_fifo_ovr_on_int_set
000044  b110              CBZ      r0,|L8.76|
000046  f04f30ff          MOV      r0,#0xffffffff        ;663
00004a  e7ea              B        |L8.34|
                  |L8.76|
00004c  e002              B        |L8.84|
                  |L8.78|
00004e  f04f30ff          MOV      r0,#0xffffffff        ;667
000052  e7e6              B        |L8.34|
                  |L8.84|
000054  bf00              NOP                            ;653
000056  2000              MOVS     r0,#0                 ;670
000058  e7e3              B        |L8.34|
;;;672    
                          ENDP


                          AREA ||i.LPS22HB_FIFO_Set_Mode||, CODE, READONLY, ALIGN=1

                  LPS22HB_FIFO_Set_Mode PROC
;;;678     */
;;;679    int32_t LPS22HB_FIFO_Set_Mode(LPS22HB_Object_t *pObj, uint8_t Mode)
000000  b570              PUSH     {r4-r6,lr}
;;;680    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;681    
;;;682      /* Verify that the passed parameter contains one of the valid values */
;;;683      switch ((lps22hb_f_mode_t)Mode)
000006  2c08              CMP      r4,#8
000008  d20b              BCS      |L9.34|
00000a  e8dff004          TBB      [pc,r4]
00000e  0405              DCB      0x04,0x05
000010  0607080a          DCB      0x06,0x07,0x08,0x0a
000014  0a09              DCB      0x0a,0x09
;;;684      {
;;;685        case LPS22HB_BYPASS_MODE:
;;;686        case LPS22HB_FIFO_MODE:
000016  bf00              NOP      
;;;687        case LPS22HB_STREAM_MODE:
000018  bf00              NOP      
;;;688        case LPS22HB_STREAM_TO_FIFO_MODE:
00001a  bf00              NOP      
;;;689        case LPS22HB_BYPASS_TO_STREAM_MODE:
00001c  bf00              NOP      
;;;690        case LPS22HB_BYPASS_TO_FIFO_MODE:
00001e  bf00              NOP      
;;;691          break;
000020  e002              B        |L9.40|
                  |L9.34|
;;;692        default:
;;;693          return LPS22HB_ERROR;
000022  f04f30ff          MOV      r0,#0xffffffff
                  |L9.38|
;;;694      }
;;;695    
;;;696      if (lps22hb_fifo_mode_set(&(pObj->Ctx), (lps22hb_f_mode_t)Mode) != LPS22HB_OK)
;;;697      {
;;;698        return LPS22HB_ERROR;
;;;699      }
;;;700    
;;;701      return LPS22HB_OK;
;;;702    }
000026  bd70              POP      {r4-r6,pc}
                  |L9.40|
000028  bf00              NOP                            ;691
00002a  4621              MOV      r1,r4                 ;696
00002c  f105001c          ADD      r0,r5,#0x1c           ;696
000030  f7fffffe          BL       lps22hb_fifo_mode_set
000034  b110              CBZ      r0,|L9.60|
000036  f04f30ff          MOV      r0,#0xffffffff        ;698
00003a  e7f4              B        |L9.38|
                  |L9.60|
00003c  2000              MOVS     r0,#0                 ;701
00003e  e7f2              B        |L9.38|
;;;703    
                          ENDP


                          AREA ||i.LPS22HB_FIFO_Set_Watermark_Level||, CODE, READONLY, ALIGN=1

                  LPS22HB_FIFO_Set_Watermark_Level PROC
;;;709     */
;;;710    int32_t LPS22HB_FIFO_Set_Watermark_Level(LPS22HB_Object_t *pObj, uint8_t Watermark)
000000  b570              PUSH     {r4-r6,lr}
;;;711    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;712      if (lps22hb_fifo_watermark_set(&(pObj->Ctx), Watermark) != LPS22HB_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lps22hb_fifo_watermark_set
000010  b110              CBZ      r0,|L10.24|
;;;713      {
;;;714        return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L10.22|
;;;715      }
;;;716    
;;;717      return LPS22HB_OK;
;;;718    }
000016  bd70              POP      {r4-r6,pc}
                  |L10.24|
000018  2000              MOVS     r0,#0                 ;717
00001a  e7fc              B        |L10.22|
;;;719    
                          ENDP


                          AREA ||i.LPS22HB_FIFO_Usage||, CODE, READONLY, ALIGN=1

                  LPS22HB_FIFO_Usage PROC
;;;725     */
;;;726    int32_t LPS22HB_FIFO_Usage(LPS22HB_Object_t *pObj, uint8_t Status)
000000  b570              PUSH     {r4-r6,lr}
;;;727    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;728    
;;;729      if (lps22hb_fifo_set(&(pObj->Ctx), Status) != LPS22HB_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lps22hb_fifo_set
000010  b110              CBZ      r0,|L11.24|
;;;730      {
;;;731        return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L11.22|
;;;732      }
;;;733    
;;;734      return LPS22HB_OK;
;;;735    }
000016  bd70              POP      {r4-r6,pc}
                  |L11.24|
000018  2000              MOVS     r0,#0                 ;734
00001a  e7fc              B        |L11.22|
;;;736    
                          ENDP


                          AREA ||i.LPS22HB_GetCapabilities||, CODE, READONLY, ALIGN=2

                  LPS22HB_GetCapabilities PROC
;;;227     */
;;;228    int32_t LPS22HB_GetCapabilities(LPS22HB_Object_t *pObj, LPS22HB_Capabilities_t *Capabilities)
000000  4602              MOV      r2,r0
;;;229    {
;;;230      /* Prevent unused argument(s) compilation warning */
;;;231      (void)(pObj);
;;;232    
;;;233      Capabilities->Humidity    = 0;
000002  2000              MOVS     r0,#0
000004  7088              STRB     r0,[r1,#2]
;;;234      Capabilities->Pressure    = 1;
000006  2001              MOVS     r0,#1
000008  7048              STRB     r0,[r1,#1]
;;;235      Capabilities->Temperature = 1;
00000a  7008              STRB     r0,[r1,#0]
;;;236      Capabilities->LowPower    = 0;
00000c  2000              MOVS     r0,#0
00000e  70c8              STRB     r0,[r1,#3]
;;;237      Capabilities->HumMaxOdr   = 0.0f;
000010  ed9f0a06          VLDR     s0,|L12.44|
000014  ed810a01          VSTR     s0,[r1,#4]
;;;238      Capabilities->TempMaxOdr  = 75.0f;
000018  ed9f0a05          VLDR     s0,|L12.48|
00001c  ed810a02          VSTR     s0,[r1,#8]
;;;239      Capabilities->PressMaxOdr = 75.0f;
000020  ed9f0a03          VLDR     s0,|L12.48|
000024  ed810a03          VSTR     s0,[r1,#0xc]
;;;240      return LPS22HB_OK;
;;;241    }
000028  4770              BX       lr
;;;242    
                          ENDP

00002a  0000              DCW      0x0000
                  |L12.44|
00002c  00000000          DCFS     0x00000000 ; 0
                  |L12.48|
000030  42960000          DCFS     0x42960000 ; 75

                          AREA ||i.LPS22HB_GetOutputDataRate||, CODE, READONLY, ALIGN=2

                  LPS22HB_GetOutputDataRate PROC
;;;809     */
;;;810    static int32_t LPS22HB_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
000000  b5f8              PUSH     {r3-r7,lr}
;;;811    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;812      int32_t ret = LPS22HB_OK;
000006  2600              MOVS     r6,#0
;;;813      lps22hb_odr_t odr_low_level;
;;;814    
;;;815      if (lps22hb_data_rate_get(&(pObj->Ctx), &odr_low_level) != LPS22HB_OK)
000008  4669              MOV      r1,sp
00000a  f105001c          ADD      r0,r5,#0x1c
00000e  f7fffffe          BL       lps22hb_data_rate_get
000012  b108              CBZ      r0,|L13.24|
;;;816      {
;;;817        return LPS22HB_ERROR;
000014  1e70              SUBS     r0,r6,#1
                  |L13.22|
;;;818      }
;;;819    
;;;820      switch (odr_low_level)
;;;821      {
;;;822        case LPS22HB_POWER_DOWN:
;;;823          *Odr = 0.0f;
;;;824          break;
;;;825    
;;;826        case LPS22HB_ODR_1_Hz:
;;;827          *Odr = 1.0f;
;;;828          break;
;;;829    
;;;830        case LPS22HB_ODR_10_Hz:
;;;831          *Odr = 10.0f;
;;;832          break;
;;;833    
;;;834        case LPS22HB_ODR_25_Hz:
;;;835          *Odr = 25.0f;
;;;836          break;
;;;837    
;;;838        case LPS22HB_ODR_50_Hz:
;;;839          *Odr = 50.0f;
;;;840          break;
;;;841    
;;;842        case LPS22HB_ODR_75_Hz:
;;;843          *Odr = 75.0f;
;;;844          break;
;;;845    
;;;846        default:
;;;847          ret = LPS22HB_ERROR;
;;;848          break;
;;;849      }
;;;850    
;;;851      return ret;
;;;852    }
000016  bdf8              POP      {r3-r7,pc}
                  |L13.24|
000018  f89d0000          LDRB     r0,[sp,#0]            ;820
00001c  2806              CMP      r0,#6                 ;820
00001e  d222              BCS      |L13.102|
000020  e8dff000          TBB      [pc,r0]               ;820
000024  03080d12          DCB      0x03,0x08,0x0d,0x12
000028  171c              DCB      0x17,0x1c
00002a  ed9f0a12          VLDR     s0,|L13.116|
00002e  ed840a00          VSTR     s0,[r4,#0]            ;823
000032  e01b              B        |L13.108|
000034  eeb70a00          VMOV.F32 s0,#1.00000000        ;827
000038  ed840a00          VSTR     s0,[r4,#0]            ;827
00003c  e016              B        |L13.108|
00003e  eeb20a04          VMOV.F32 s0,#10.00000000       ;831
000042  ed840a00          VSTR     s0,[r4,#0]            ;831
000046  e011              B        |L13.108|
000048  eeb30a09          VMOV.F32 s0,#25.00000000       ;835
00004c  ed840a00          VSTR     s0,[r4,#0]            ;835
000050  e00c              B        |L13.108|
000052  ed9f0a09          VLDR     s0,|L13.120|
000056  ed840a00          VSTR     s0,[r4,#0]            ;839
00005a  e007              B        |L13.108|
00005c  ed9f0a07          VLDR     s0,|L13.124|
000060  ed840a00          VSTR     s0,[r4,#0]            ;843
000064  e002              B        |L13.108|
                  |L13.102|
000066  f04f36ff          MOV      r6,#0xffffffff        ;847
00006a  bf00              NOP                            ;848
                  |L13.108|
00006c  bf00              NOP                            ;824
00006e  4630              MOV      r0,r6                 ;851
000070  e7d1              B        |L13.22|
;;;853    
                          ENDP

000072  0000              DCW      0x0000
                  |L13.116|
000074  00000000          DCFS     0x00000000 ; 0
                  |L13.120|
000078  42480000          DCFS     0x42480000 ; 50
                  |L13.124|
00007c  42960000          DCFS     0x42960000 ; 75

                          AREA ||i.LPS22HB_Get_Init_Status||, CODE, READONLY, ALIGN=1

                  LPS22HB_Get_Init_Status PROC
;;;248     */
;;;249    int32_t LPS22HB_Get_Init_Status(LPS22HB_Object_t *pObj, uint8_t *Status)
000000  4602              MOV      r2,r0
;;;250    {
;;;251      if (pObj == NULL)
000002  b912              CBNZ     r2,|L14.10|
;;;252      {
;;;253        return LPS22HB_ERROR;
000004  f04f30ff          MOV      r0,#0xffffffff
                  |L14.8|
;;;254      }
;;;255    
;;;256      *Status = pObj->is_initialized;
;;;257    
;;;258      return LPS22HB_OK;
;;;259    }
000008  4770              BX       lr
                  |L14.10|
00000a  f8920028          LDRB     r0,[r2,#0x28]         ;256
00000e  7008              STRB     r0,[r1,#0]            ;256
000010  2000              MOVS     r0,#0                 ;258
000012  e7f9              B        |L14.8|
;;;260    
                          ENDP


                          AREA ||i.LPS22HB_Get_One_Shot_Status||, CODE, READONLY, ALIGN=1

                  LPS22HB_Get_One_Shot_Status PROC
;;;977     */
;;;978    int32_t LPS22HB_Get_One_Shot_Status(LPS22HB_Object_t *pObj, uint8_t *Status)
000000  b57c              PUSH     {r2-r6,lr}
;;;979    {
000002  4605              MOV      r5,r0
000004  460c              MOV      r4,r1
;;;980      uint8_t p_da;
;;;981      uint8_t t_da;
;;;982    
;;;983      /* Get DataReady for pressure */
;;;984      if(lps22hb_press_data_ready_get(&(pObj->Ctx), &p_da) != LPS22HB_OK)
000006  a901              ADD      r1,sp,#4
000008  f105001c          ADD      r0,r5,#0x1c
00000c  f7fffffe          BL       lps22hb_press_data_ready_get
000010  b110              CBZ      r0,|L15.24|
;;;985      {
;;;986        return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L15.22|
;;;987      }
;;;988    
;;;989      /* Get DataReady for temperature */
;;;990      if(lps22hb_temp_data_ready_get(&(pObj->Ctx), &t_da) != LPS22HB_OK)
;;;991      {
;;;992        return LPS22HB_ERROR;
;;;993      }
;;;994    
;;;995      if(p_da && t_da)
;;;996      {
;;;997        *Status = 1;
;;;998      }
;;;999      else
;;;1000     {
;;;1001       *Status = 0;
;;;1002     }
;;;1003   
;;;1004     return LPS22HB_OK;
;;;1005   }
000016  bd7c              POP      {r2-r6,pc}
                  |L15.24|
000018  4669              MOV      r1,sp                 ;990
00001a  f105001c          ADD      r0,r5,#0x1c           ;990
00001e  f7fffffe          BL       lps22hb_temp_data_ready_get
000022  b110              CBZ      r0,|L15.42|
000024  f04f30ff          MOV      r0,#0xffffffff        ;992
000028  e7f5              B        |L15.22|
                  |L15.42|
00002a  f89d0004          LDRB     r0,[sp,#4]            ;995
00002e  b128              CBZ      r0,|L15.60|
000030  f89d0000          LDRB     r0,[sp,#0]            ;995
000034  b110              CBZ      r0,|L15.60|
000036  2001              MOVS     r0,#1                 ;997
000038  7020              STRB     r0,[r4,#0]            ;997
00003a  e001              B        |L15.64|
                  |L15.60|
00003c  2000              MOVS     r0,#0                 ;1001
00003e  7020              STRB     r0,[r4,#0]            ;1001
                  |L15.64|
000040  2000              MOVS     r0,#0                 ;1004
000042  e7e8              B        |L15.22|
;;;1006   
                          ENDP


                          AREA ||i.LPS22HB_Get_Temp||, CODE, READONLY, ALIGN=2

                  LPS22HB_Get_Temp PROC
;;;784     */
;;;785    int32_t LPS22HB_Get_Temp(LPS22HB_Object_t *pObj, float *Data)
000000  b530              PUSH     {r4,r5,lr}
;;;786    {
000002  ed2d8b02          VPUSH    {d8}
000006  b081              SUB      sp,sp,#4
000008  4605              MOV      r5,r0
00000a  460c              MOV      r4,r1
;;;787      uint8_t buffer[2];
;;;788      uint32_t tmp = 0;
00000c  2000              MOVS     r0,#0
00000e  ee080a10          VMOV     s16,r0
;;;789    
;;;790      /* Read data from LPS22HB. */
;;;791      if (lps22hb_temperature_raw_get(&(pObj->Ctx), buffer) != LPS22HB_OK)
000012  4669              MOV      r1,sp
000014  f105001c          ADD      r0,r5,#0x1c
000018  f7fffffe          BL       lps22hb_temperature_raw_get
00001c  b128              CBZ      r0,|L16.42|
;;;792      {
;;;793        return LPS22HB_ERROR;
00001e  f04f30ff          MOV      r0,#0xffffffff
                  |L16.34|
;;;794      }
;;;795    
;;;796      /* Build the raw tmp */
;;;797      tmp = (((uint16_t)buffer[1]) << 8) + (uint16_t)buffer[0];
;;;798    
;;;799      *Data = ((float)tmp) / 100.0f;
;;;800    
;;;801      return LPS22HB_OK;
;;;802    }
000022  b001              ADD      sp,sp,#4
000024  ecbd8b02          VPOP     {d8}
000028  bd30              POP      {r4,r5,pc}
                  |L16.42|
00002a  f89d0000          LDRB     r0,[sp,#0]            ;797
00002e  f89d1001          LDRB     r1,[sp,#1]            ;797
000032  eb002001          ADD      r0,r0,r1,LSL #8       ;797
000036  ee080a10          VMOV     s16,r0                ;797
00003a  eeb80a48          VCVT.F32.U32 s0,s16                ;799
00003e  eddf0a04          VLDR     s1,|L16.80|
000042  ee801a20          VDIV.F32 s2,s0,s1              ;799
000046  ed841a00          VSTR     s2,[r4,#0]            ;799
00004a  2000              MOVS     r0,#0                 ;801
00004c  e7e9              B        |L16.34|
;;;803    
                          ENDP

00004e  0000              DCW      0x0000
                  |L16.80|
000050  42c80000          DCFS     0x42c80000 ; 100

                          AREA ||i.LPS22HB_Init||, CODE, READONLY, ALIGN=1

                  LPS22HB_Init PROC
;;;165     */
;;;166    int32_t LPS22HB_Init(LPS22HB_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;167    {
000002  4604              MOV      r4,r0
;;;168      if (pObj->is_initialized == 0U)
000004  f8940028          LDRB     r0,[r4,#0x28]
000008  b930              CBNZ     r0,|L17.24|
;;;169      {
;;;170        if (LPS22HB_Initialize(pObj) != LPS22HB_OK)
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       LPS22HB_Initialize
000010  b110              CBZ      r0,|L17.24|
;;;171        {
;;;172          return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L17.22|
;;;173        }
;;;174      }
;;;175    
;;;176      pObj->is_initialized = 1U;
;;;177    
;;;178      return LPS22HB_OK;
;;;179    }
000016  bd10              POP      {r4,pc}
                  |L17.24|
000018  2001              MOVS     r0,#1                 ;176
00001a  f8840028          STRB     r0,[r4,#0x28]         ;176
00001e  2000              MOVS     r0,#0                 ;178
000020  e7f9              B        |L17.22|
;;;180    
                          ENDP


                          AREA ||i.LPS22HB_Initialize||, CODE, READONLY, ALIGN=1

                  LPS22HB_Initialize PROC
;;;904     */
;;;905    static int32_t LPS22HB_Initialize(LPS22HB_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;906    {
000002  4604              MOV      r4,r0
;;;907      /* Set Power mode */
;;;908      if (lps22hb_low_power_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
000004  2101              MOVS     r1,#1
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lps22hb_low_power_set
00000e  b110              CBZ      r0,|L18.22|
;;;909      {
;;;910        return LPS22HB_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L18.20|
;;;911      }
;;;912    
;;;913      /* Power down the device */
;;;914      if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
;;;915      {
;;;916        return LPS22HB_ERROR;
;;;917      }
;;;918    
;;;919      /* Disable low-pass filter on LPS22HB pressure data */
;;;920      if (lps22hb_low_pass_filter_mode_set(&(pObj->Ctx), LPS22HB_LPF_ODR_DIV_9) != LPS22HB_OK)
;;;921      {
;;;922        return LPS22HB_ERROR;
;;;923      }
;;;924    
;;;925      if (lps22hb_block_data_update_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
;;;926      {
;;;927        return LPS22HB_ERROR;
;;;928      }
;;;929    
;;;930      if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
;;;931      {
;;;932        if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_DISABLE) != LPS22HB_OK)
;;;933        {
;;;934          return LPS22HB_ERROR;
;;;935        }
;;;936      }
;;;937      else /* SPI 4-Wires or SPI 3-Wires */
;;;938      {
;;;939        if (lps22hb_auto_add_inc_set(&(pObj->Ctx), PROPERTY_ENABLE) != LPS22HB_OK)
;;;940        {
;;;941          return LPS22HB_ERROR;
;;;942        }
;;;943      }
;;;944    
;;;945      pObj->last_odr = LPS22HB_ODR_25_Hz;
;;;946    
;;;947      return LPS22HB_OK;
;;;948    }
000014  bd10              POP      {r4,pc}
                  |L18.22|
000016  2100              MOVS     r1,#0                 ;914
000018  f104001c          ADD      r0,r4,#0x1c           ;914
00001c  f7fffffe          BL       lps22hb_data_rate_set
000020  b110              CBZ      r0,|L18.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;916
000026  e7f5              B        |L18.20|
                  |L18.40|
000028  2102              MOVS     r1,#2                 ;920
00002a  f104001c          ADD      r0,r4,#0x1c           ;920
00002e  f7fffffe          BL       lps22hb_low_pass_filter_mode_set
000032  b110              CBZ      r0,|L18.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;922
000038  e7ec              B        |L18.20|
                  |L18.58|
00003a  2101              MOVS     r1,#1                 ;925
00003c  f104001c          ADD      r0,r4,#0x1c           ;925
000040  f7fffffe          BL       lps22hb_block_data_update_set
000044  b110              CBZ      r0,|L18.76|
000046  f04f30ff          MOV      r0,#0xffffffff        ;927
00004a  e7e3              B        |L18.20|
                  |L18.76|
00004c  68a0              LDR      r0,[r4,#8]            ;930
00004e  b940              CBNZ     r0,|L18.98|
000050  2100              MOVS     r1,#0                 ;932
000052  f104001c          ADD      r0,r4,#0x1c           ;932
000056  f7fffffe          BL       lps22hb_auto_add_inc_set
00005a  b158              CBZ      r0,|L18.116|
00005c  f04f30ff          MOV      r0,#0xffffffff        ;934
000060  e7d8              B        |L18.20|
                  |L18.98|
000062  2101              MOVS     r1,#1                 ;939
000064  f104001c          ADD      r0,r4,#0x1c           ;939
000068  f7fffffe          BL       lps22hb_auto_add_inc_set
00006c  b110              CBZ      r0,|L18.116|
00006e  f04f30ff          MOV      r0,#0xffffffff        ;941
000072  e7cf              B        |L18.20|
                  |L18.116|
000074  2003              MOVS     r0,#3                 ;945
000076  f884002b          STRB     r0,[r4,#0x2b]         ;945
00007a  2000              MOVS     r0,#0                 ;947
00007c  e7ca              B        |L18.20|
;;;949    
                          ENDP


                          AREA ||i.LPS22HB_PRESS_Disable||, CODE, READONLY, ALIGN=1

                  LPS22HB_PRESS_Disable PROC
;;;289     */
;;;290    int32_t LPS22HB_PRESS_Disable(LPS22HB_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;291    {
000002  4604              MOV      r4,r0
;;;292      /* Check if the component is already disabled */
;;;293      if (pObj->press_is_enabled == 0U)
000004  f8940029          LDRB     r0,[r4,#0x29]
000008  b908              CBNZ     r0,|L19.14|
;;;294      {
;;;295        return LPS22HB_OK;
00000a  2000              MOVS     r0,#0
                  |L19.12|
;;;296      }
;;;297    
;;;298      /* Check if the LPS22HB temperature sensor is still enable. */
;;;299      /* If yes, skip the disable function, if not call disable function */
;;;300      if (pObj->temp_is_enabled == 0U)
;;;301      {
;;;302        /* Get current output data rate. */
;;;303        if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
;;;304        {
;;;305          return LPS22HB_ERROR;
;;;306        }
;;;307    
;;;308        /* Output data rate selection - power down. */
;;;309        if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
;;;310        {
;;;311          return LPS22HB_ERROR;
;;;312        }
;;;313      }
;;;314    
;;;315      pObj->press_is_enabled = 0;
;;;316    
;;;317      return LPS22HB_OK;
;;;318    }
00000c  bd10              POP      {r4,pc}
                  |L19.14|
00000e  f894002a          LDRB     r0,[r4,#0x2a]         ;300
000012  b990              CBNZ     r0,|L19.58|
000014  f104012b          ADD      r1,r4,#0x2b           ;303
000018  f104001c          ADD      r0,r4,#0x1c           ;303
00001c  f7fffffe          BL       lps22hb_data_rate_get
000020  b110              CBZ      r0,|L19.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;305
000026  e7f1              B        |L19.12|
                  |L19.40|
000028  2100              MOVS     r1,#0                 ;309
00002a  f104001c          ADD      r0,r4,#0x1c           ;309
00002e  f7fffffe          BL       lps22hb_data_rate_set
000032  b110              CBZ      r0,|L19.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;311
000038  e7e8              B        |L19.12|
                  |L19.58|
00003a  2000              MOVS     r0,#0                 ;315
00003c  f8840029          STRB     r0,[r4,#0x29]         ;315
000040  bf00              NOP                            ;317
000042  e7e3              B        |L19.12|
;;;319    
                          ENDP


                          AREA ||i.LPS22HB_PRESS_Enable||, CODE, READONLY, ALIGN=1

                  LPS22HB_PRESS_Enable PROC
;;;265     */
;;;266    int32_t LPS22HB_PRESS_Enable(LPS22HB_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;267    {
000002  4604              MOV      r4,r0
;;;268      /* Check if the component is already enabled */
;;;269      if (pObj->press_is_enabled == 1U)
000004  f8940029          LDRB     r0,[r4,#0x29]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L20.16|
;;;270      {
;;;271        return LPS22HB_OK;
00000c  2000              MOVS     r0,#0
                  |L20.14|
;;;272      }
;;;273    
;;;274      /* Output data rate selection. */
;;;275      if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
;;;276      {
;;;277        return LPS22HB_ERROR;
;;;278      }
;;;279    
;;;280      pObj->press_is_enabled = 1;
;;;281    
;;;282      return LPS22HB_OK;
;;;283    }
00000e  bd10              POP      {r4,pc}
                  |L20.16|
000010  f894102b          LDRB     r1,[r4,#0x2b]         ;275
000014  f104001c          ADD      r0,r4,#0x1c           ;275
000018  f7fffffe          BL       lps22hb_data_rate_set
00001c  b110              CBZ      r0,|L20.36|
00001e  f04f30ff          MOV      r0,#0xffffffff        ;277
000022  e7f4              B        |L20.14|
                  |L20.36|
000024  2001              MOVS     r0,#1                 ;280
000026  f8840029          STRB     r0,[r4,#0x29]         ;280
00002a  2000              MOVS     r0,#0                 ;282
00002c  e7ef              B        |L20.14|
;;;284    
                          ENDP


                          AREA ||i.LPS22HB_PRESS_GetOutputDataRate||, CODE, READONLY, ALIGN=1

                  LPS22HB_PRESS_GetOutputDataRate PROC
;;;325     */
;;;326    int32_t LPS22HB_PRESS_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
000000  b570              PUSH     {r4-r6,lr}
;;;327    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;328      return LPS22HB_GetOutputDataRate(pObj, Odr);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       LPS22HB_GetOutputDataRate
;;;329    }
00000e  bd70              POP      {r4-r6,pc}
;;;330    
                          ENDP


                          AREA ||i.LPS22HB_PRESS_GetPressure||, CODE, READONLY, ALIGN=1

                  LPS22HB_PRESS_GetPressure PROC
;;;355     */
;;;356    int32_t LPS22HB_PRESS_GetPressure(LPS22HB_Object_t *pObj, float *Value)
000000  b538              PUSH     {r3-r5,lr}
;;;357    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;358      axis1bit32_t data_raw_pressure;
;;;359    
;;;360      (void)memset(data_raw_pressure.u8bit, 0x00, sizeof(int32_t));
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;361      if (lps22hb_pressure_raw_get(&(pObj->Ctx), data_raw_pressure.u8bit) != LPS22HB_OK)
00000a  4669              MOV      r1,sp
00000c  f104001c          ADD      r0,r4,#0x1c
000010  f7fffffe          BL       lps22hb_pressure_raw_get
000014  b110              CBZ      r0,|L22.28|
;;;362      {
;;;363        return LPS22HB_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L22.26|
;;;364      }
;;;365    
;;;366      *Value = lps22hb_from_lsb_to_hpa(data_raw_pressure.i32bit);
;;;367    
;;;368      return LPS22HB_OK;
;;;369    }
00001a  bd38              POP      {r3-r5,pc}
                  |L22.28|
00001c  9800              LDR      r0,[sp,#0]            ;366
00001e  f7fffffe          BL       lps22hb_from_lsb_to_hpa
000022  ed850a00          VSTR     s0,[r5,#0]            ;366
000026  2000              MOVS     r0,#0                 ;368
000028  e7f7              B        |L22.26|
;;;370    
                          ENDP


                          AREA ||i.LPS22HB_PRESS_Get_DRDY_Status||, CODE, READONLY, ALIGN=1

                  LPS22HB_PRESS_Get_DRDY_Status PROC
;;;376     */
;;;377    int32_t LPS22HB_PRESS_Get_DRDY_Status(LPS22HB_Object_t *pObj, uint8_t *Status)
000000  b570              PUSH     {r4-r6,lr}
;;;378    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;379      if (lps22hb_press_data_ready_get(&(pObj->Ctx), Status) != LPS22HB_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lps22hb_press_data_ready_get
000010  b110              CBZ      r0,|L23.24|
;;;380      {
;;;381        return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L23.22|
;;;382      }
;;;383    
;;;384      return LPS22HB_OK;
;;;385    }
000016  bd70              POP      {r4-r6,pc}
                  |L23.24|
000018  2000              MOVS     r0,#0                 ;384
00001a  e7fc              B        |L23.22|
;;;386    
                          ENDP


                          AREA ||i.LPS22HB_PRESS_SetOutputDataRate||, CODE, READONLY, ALIGN=1

                  LPS22HB_PRESS_SetOutputDataRate PROC
;;;336     */
;;;337    int32_t LPS22HB_PRESS_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
000000  b510              PUSH     {r4,lr}
;;;338    {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;339      /* Check if the component is enabled */
;;;340      if (pObj->press_is_enabled == 1U)
00000c  f8940029          LDRB     r0,[r4,#0x29]
000010  2801              CMP      r0,#1
000012  d107              BNE      |L24.36|
;;;341      {
;;;342        return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
000014  eeb00a48          VMOV.F32 s0,s16
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       LPS22HB_SetOutputDataRate_When_Enabled
                  |L24.30|
;;;343      }
;;;344      else
;;;345      {
;;;346        return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
;;;347      }
;;;348    }
00001e  ecbd8b02          VPOP     {d8}
000022  bd10              POP      {r4,pc}
                  |L24.36|
000024  eeb00a48          VMOV.F32 s0,s16                ;346
000028  4620              MOV      r0,r4                 ;346
00002a  f7fffffe          BL       LPS22HB_SetOutputDataRate_When_Disabled
00002e  e7f6              B        |L24.30|
;;;349    
                          ENDP


                          AREA ||i.LPS22HB_ReadID||, CODE, READONLY, ALIGN=1

                  LPS22HB_ReadID PROC
;;;211     */
;;;212    int32_t LPS22HB_ReadID(LPS22HB_Object_t *pObj, uint8_t *Id)
000000  b570              PUSH     {r4-r6,lr}
;;;213    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;214      if (lps22hb_device_id_get(&(pObj->Ctx), Id) != LPS22HB_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lps22hb_device_id_get
000010  b110              CBZ      r0,|L25.24|
;;;215      {
;;;216        return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L25.22|
;;;217      }
;;;218    
;;;219      return LPS22HB_OK;
;;;220    }
000016  bd70              POP      {r4-r6,pc}
                  |L25.24|
000018  2000              MOVS     r0,#0                 ;219
00001a  e7fc              B        |L25.22|
;;;221    
                          ENDP


                          AREA ||i.LPS22HB_Read_Reg||, CODE, READONLY, ALIGN=1

                  LPS22HB_Read_Reg PROC
;;;743     */
;;;744    int32_t LPS22HB_Read_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t *Data)
000000  b570              PUSH     {r4-r6,lr}
;;;745    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;746      if (lps22hb_read_reg(&(pObj->Ctx), Reg, Data, 1) != LPS22HB_OK)
000008  2301              MOVS     r3,#1
00000a  4632              MOV      r2,r6
00000c  4629              MOV      r1,r5
00000e  f104001c          ADD      r0,r4,#0x1c
000012  f7fffffe          BL       lps22hb_read_reg
000016  b110              CBZ      r0,|L26.30|
;;;747      {
;;;748        return LPS22HB_ERROR;
000018  f04f30ff          MOV      r0,#0xffffffff
                  |L26.28|
;;;749      }
;;;750    
;;;751      return LPS22HB_OK;
;;;752    }
00001c  bd70              POP      {r4-r6,pc}
                  |L26.30|
00001e  2000              MOVS     r0,#0                 ;751
000020  e7fc              B        |L26.28|
;;;753    
                          ENDP


                          AREA ||i.LPS22HB_RegisterBusIO||, CODE, READONLY, ALIGN=2

                  LPS22HB_RegisterBusIO PROC
;;;108     */
;;;109    int32_t LPS22HB_RegisterBusIO(LPS22HB_Object_t *pObj, LPS22HB_IO_t *pIO)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;110    {
000004  4604              MOV      r4,r0
000006  460d              MOV      r5,r1
;;;111      int32_t ret = LPS22HB_OK;
000008  2600              MOVS     r6,#0
;;;112    
;;;113      if (pObj == NULL)
00000a  b90c              CBNZ     r4,|L27.16|
;;;114      {
;;;115        ret = LPS22HB_ERROR;
00000c  1e76              SUBS     r6,r6,#1
00000e  e02c              B        |L27.106|
                  |L27.16|
;;;116      }
;;;117      else
;;;118      {
;;;119        pObj->IO.Init      = pIO->Init;
000010  6828              LDR      r0,[r5,#0]
000012  6020              STR      r0,[r4,#0]
;;;120        pObj->IO.DeInit    = pIO->DeInit;
000014  6868              LDR      r0,[r5,#4]
000016  6060              STR      r0,[r4,#4]
;;;121        pObj->IO.BusType   = pIO->BusType;
000018  68a8              LDR      r0,[r5,#8]
00001a  60a0              STR      r0,[r4,#8]
;;;122        pObj->IO.Address   = pIO->Address;
00001c  7b28              LDRB     r0,[r5,#0xc]
00001e  7320              STRB     r0,[r4,#0xc]
;;;123        pObj->IO.WriteReg  = pIO->WriteReg;
000020  6928              LDR      r0,[r5,#0x10]
000022  6120              STR      r0,[r4,#0x10]
;;;124        pObj->IO.ReadReg   = pIO->ReadReg;
000024  6968              LDR      r0,[r5,#0x14]
000026  6160              STR      r0,[r4,#0x14]
;;;125        pObj->IO.GetTick   = pIO->GetTick;
000028  69a8              LDR      r0,[r5,#0x18]
00002a  61a0              STR      r0,[r4,#0x18]
;;;126    
;;;127        pObj->Ctx.read_reg  = ReadRegWrap;
00002c  4910              LDR      r1,|L27.112|
00002e  6221              STR      r1,[r4,#0x20]
;;;128        pObj->Ctx.write_reg = WriteRegWrap;
000030  4810              LDR      r0,|L27.116|
000032  61e0              STR      r0,[r4,#0x1c]
;;;129        pObj->Ctx.handle   = pObj;
000034  6264              STR      r4,[r4,#0x24]
;;;130    
;;;131        if (pObj->IO.Init == NULL)
000036  6820              LDR      r0,[r4,#0]
000038  b910              CBNZ     r0,|L27.64|
;;;132        {
;;;133          ret = LPS22HB_ERROR;
00003a  f04f36ff          MOV      r6,#0xffffffff
00003e  e014              B        |L27.106|
                  |L27.64|
;;;134        }
;;;135        else if (pObj->IO.Init() != LPS22HB_OK)
000040  6820              LDR      r0,[r4,#0]
000042  4780              BLX      r0
000044  b110              CBZ      r0,|L27.76|
;;;136        {
;;;137          ret = LPS22HB_ERROR;
000046  f04f36ff          MOV      r6,#0xffffffff
00004a  e00e              B        |L27.106|
                  |L27.76|
;;;138        }
;;;139        else
;;;140        {
;;;141          if (pObj->IO.BusType == LPS22HB_SPI_3WIRES_BUS) /* SPI 3-Wires */
00004c  68a0              LDR      r0,[r4,#8]
00004e  2802              CMP      r0,#2
000050  d10b              BNE      |L27.106|
;;;142          {
;;;143            /* Enable the SPI 3-Wires support only the first time */
;;;144            if (pObj->is_initialized == 0U)
000052  f8940028          LDRB     r0,[r4,#0x28]
000056  b940              CBNZ     r0,|L27.106|
;;;145            {
;;;146              /* Enable SPI 3-Wires on the component */
;;;147              uint8_t data = 0x01;
000058  2701              MOVS     r7,#1
;;;148    
;;;149              if (LPS22HB_Write_Reg(pObj, LPS22HB_CTRL_REG1, data) != LPS22HB_OK)
00005a  463a              MOV      r2,r7
00005c  2110              MOVS     r1,#0x10
00005e  4620              MOV      r0,r4
000060  f7fffffe          BL       LPS22HB_Write_Reg
000064  b100              CBZ      r0,|L27.104|
;;;150              {
;;;151                ret = LPS22HB_ERROR;
000066  1ebe              SUBS     r6,r7,#2
                  |L27.104|
;;;152              }
;;;153            }
000068  bf00              NOP      
                  |L27.106|
;;;154          }
;;;155        }
;;;156      }
;;;157    
;;;158      return ret;
00006a  4630              MOV      r0,r6
;;;159    }
00006c  e8bd81f0          POP      {r4-r8,pc}
;;;160    
                          ENDP

                  |L27.112|
                          DCD      ReadRegWrap
                  |L27.116|
                          DCD      WriteRegWrap

                          AREA ||i.LPS22HB_SetOutputDataRate_When_Disabled||, CODE, READONLY, ALIGN=2

                  LPS22HB_SetOutputDataRate_When_Disabled PROC
;;;888     */
;;;889    static int32_t LPS22HB_SetOutputDataRate_When_Disabled(LPS22HB_Object_t *pObj, float Odr)
000000  4601              MOV      r1,r0
;;;890    {
;;;891      pObj->last_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
000002  eef70a00          VMOV.F32 s1,#1.00000000
000006  eeb40ae0          VCMPE.F32 s0,s1
00000a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000e  d801              BHI      |L28.20|
000010  2001              MOVS     r0,#1
000012  e01b              B        |L28.76|
                  |L28.20|
;;;892                       : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
000014  eef20a04          VMOV.F32 s1,#10.00000000
000018  eeb40ae0          VCMPE.F32 s0,s1
00001c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000020  d801              BHI      |L28.38|
000022  2002              MOVS     r0,#2
000024  e012              B        |L28.76|
                  |L28.38|
;;;893                       : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
000026  eef30a09          VMOV.F32 s1,#25.00000000
00002a  eeb40ae0          VCMPE.F32 s0,s1
00002e  eef1fa10          VMRS     APSR_nzcv,FPSCR
000032  d801              BHI      |L28.56|
000034  2003              MOVS     r0,#3
000036  e009              B        |L28.76|
                  |L28.56|
;;;894                       : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
000038  eddf0a06          VLDR     s1,|L28.84|
00003c  eeb40ae0          VCMPE.F32 s0,s1
000040  eef1fa10          VMRS     APSR_nzcv,FPSCR
000044  d801              BHI      |L28.74|
000046  2004              MOVS     r0,#4
000048  e000              B        |L28.76|
                  |L28.74|
;;;895                       :                  LPS22HB_ODR_75_Hz;
00004a  2005              MOVS     r0,#5
                  |L28.76|
00004c  f881002b          STRB     r0,[r1,#0x2b]
;;;896    
;;;897      return LPS22HB_OK;
000050  2000              MOVS     r0,#0
;;;898    }
000052  4770              BX       lr
;;;899    
                          ENDP

                  |L28.84|
000054  42480000          DCFS     0x42480000 ; 50

                          AREA ||i.LPS22HB_SetOutputDataRate_When_Enabled||, CODE, READONLY, ALIGN=2

                  LPS22HB_SetOutputDataRate_When_Enabled PROC
;;;859     */
;;;860    static int32_t LPS22HB_SetOutputDataRate_When_Enabled(LPS22HB_Object_t *pObj, float Odr)
000000  b570              PUSH     {r4-r6,lr}
;;;861    {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;862      lps22hb_odr_t new_odr;
;;;863    
;;;864      new_odr = (Odr <=  1.0f) ? LPS22HB_ODR_1_Hz
00000c  eeb70a00          VMOV.F32 s0,#1.00000000
000010  eeb48ac0          VCMPE.F32 s16,s0
000014  eef1fa10          VMRS     APSR_nzcv,FPSCR
000018  d801              BHI      |L29.30|
00001a  2001              MOVS     r0,#1
00001c  e01b              B        |L29.86|
                  |L29.30|
;;;865                : (Odr <= 10.0f) ? LPS22HB_ODR_10_Hz
00001e  eeb20a04          VMOV.F32 s0,#10.00000000
000022  eeb48ac0          VCMPE.F32 s16,s0
000026  eef1fa10          VMRS     APSR_nzcv,FPSCR
00002a  d801              BHI      |L29.48|
00002c  2002              MOVS     r0,#2
00002e  e012              B        |L29.86|
                  |L29.48|
;;;866                : (Odr <= 25.0f) ? LPS22HB_ODR_25_Hz
000030  eeb30a09          VMOV.F32 s0,#25.00000000
000034  eeb48ac0          VCMPE.F32 s16,s0
000038  eef1fa10          VMRS     APSR_nzcv,FPSCR
00003c  d801              BHI      |L29.66|
00003e  2003              MOVS     r0,#3
000040  e009              B        |L29.86|
                  |L29.66|
;;;867                : (Odr <= 50.0f) ? LPS22HB_ODR_50_Hz
000042  ed9f0a11          VLDR     s0,|L29.136|
000046  eeb48ac0          VCMPE.F32 s16,s0
00004a  eef1fa10          VMRS     APSR_nzcv,FPSCR
00004e  d801              BHI      |L29.84|
000050  2004              MOVS     r0,#4
000052  e000              B        |L29.86|
                  |L29.84|
;;;868                :                  LPS22HB_ODR_75_Hz;
000054  2005              MOVS     r0,#5
                  |L29.86|
000056  4605              MOV      r5,r0
;;;869    
;;;870      if (lps22hb_data_rate_set(&(pObj->Ctx), new_odr) != LPS22HB_OK)
000058  4629              MOV      r1,r5
00005a  f104001c          ADD      r0,r4,#0x1c
00005e  f7fffffe          BL       lps22hb_data_rate_set
000062  b120              CBZ      r0,|L29.110|
;;;871      {
;;;872        return LPS22HB_ERROR;
000064  f04f30ff          MOV      r0,#0xffffffff
                  |L29.104|
;;;873      }
;;;874    
;;;875      if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
;;;876      {
;;;877        return LPS22HB_ERROR;
;;;878      }
;;;879    
;;;880      return LPS22HB_OK;
;;;881    }
000068  ecbd8b02          VPOP     {d8}
00006c  bd70              POP      {r4-r6,pc}
                  |L29.110|
00006e  f104012b          ADD      r1,r4,#0x2b           ;875
000072  f104001c          ADD      r0,r4,#0x1c           ;875
000076  f7fffffe          BL       lps22hb_data_rate_get
00007a  b110              CBZ      r0,|L29.130|
00007c  f04f30ff          MOV      r0,#0xffffffff        ;877
000080  e7f2              B        |L29.104|
                  |L29.130|
000082  2000              MOVS     r0,#0                 ;880
000084  e7f0              B        |L29.104|
;;;882    
                          ENDP

000086  0000              DCW      0x0000
                  |L29.136|
000088  42480000          DCFS     0x42480000 ; 50

                          AREA ||i.LPS22HB_Set_One_Shot||, CODE, READONLY, ALIGN=1

                  LPS22HB_Set_One_Shot PROC
;;;954     */
;;;955    int32_t LPS22HB_Set_One_Shot(LPS22HB_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;956    {
000002  4604              MOV      r4,r0
;;;957      /* Set ODR */
;;;958      if(lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
000004  2100              MOVS     r1,#0
000006  f104001c          ADD      r0,r4,#0x1c
00000a  f7fffffe          BL       lps22hb_data_rate_set
00000e  b110              CBZ      r0,|L30.22|
;;;959      {
;;;960        return LPS22HB_ERROR;
000010  f04f30ff          MOV      r0,#0xffffffff
                  |L30.20|
;;;961      }
;;;962    
;;;963      /* Start One Shot Measurement */
;;;964      if(lps22hb_one_shoot_trigger_set(&(pObj->Ctx), 1) != LPS22HB_OK)
;;;965      {
;;;966        return LPS22HB_ERROR;
;;;967      }
;;;968    
;;;969      return LPS22HB_OK;
;;;970    }
000014  bd10              POP      {r4,pc}
                  |L30.22|
000016  2101              MOVS     r1,#1                 ;964
000018  f104001c          ADD      r0,r4,#0x1c           ;964
00001c  f7fffffe          BL       lps22hb_one_shoot_trigger_set
000020  b110              CBZ      r0,|L30.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;966
000026  e7f5              B        |L30.20|
                  |L30.40|
000028  2000              MOVS     r0,#0                 ;969
00002a  e7f3              B        |L30.20|
;;;971    
                          ENDP


                          AREA ||i.LPS22HB_TEMP_Disable||, CODE, READONLY, ALIGN=1

                  LPS22HB_TEMP_Disable PROC
;;;415     */
;;;416    int32_t LPS22HB_TEMP_Disable(LPS22HB_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;417    {
000002  4604              MOV      r4,r0
;;;418      /* Check if the component is already disabled */
;;;419      if (pObj->temp_is_enabled == 0U)
000004  f894002a          LDRB     r0,[r4,#0x2a]
000008  b908              CBNZ     r0,|L31.14|
;;;420      {
;;;421        return LPS22HB_OK;
00000a  2000              MOVS     r0,#0
                  |L31.12|
;;;422      }
;;;423    
;;;424      /* Check if the LPS22HB pressure sensor is still enable. */
;;;425      /* If yes, skip the disable function, if not call disable function */
;;;426      if (pObj->press_is_enabled == 0U)
;;;427      {
;;;428        /* Get current output data rate. */
;;;429        if (lps22hb_data_rate_get(&(pObj->Ctx), &pObj->last_odr) != LPS22HB_OK)
;;;430        {
;;;431          return LPS22HB_ERROR;
;;;432        }
;;;433    
;;;434        /* Output data rate selection - power down. */
;;;435        if (lps22hb_data_rate_set(&(pObj->Ctx), LPS22HB_POWER_DOWN) != LPS22HB_OK)
;;;436        {
;;;437          return LPS22HB_ERROR;
;;;438        }
;;;439      }
;;;440    
;;;441      pObj->temp_is_enabled = 0;
;;;442    
;;;443      return LPS22HB_OK;
;;;444    }
00000c  bd10              POP      {r4,pc}
                  |L31.14|
00000e  f8940029          LDRB     r0,[r4,#0x29]         ;426
000012  b990              CBNZ     r0,|L31.58|
000014  f104012b          ADD      r1,r4,#0x2b           ;429
000018  f104001c          ADD      r0,r4,#0x1c           ;429
00001c  f7fffffe          BL       lps22hb_data_rate_get
000020  b110              CBZ      r0,|L31.40|
000022  f04f30ff          MOV      r0,#0xffffffff        ;431
000026  e7f1              B        |L31.12|
                  |L31.40|
000028  2100              MOVS     r1,#0                 ;435
00002a  f104001c          ADD      r0,r4,#0x1c           ;435
00002e  f7fffffe          BL       lps22hb_data_rate_set
000032  b110              CBZ      r0,|L31.58|
000034  f04f30ff          MOV      r0,#0xffffffff        ;437
000038  e7e8              B        |L31.12|
                  |L31.58|
00003a  2000              MOVS     r0,#0                 ;441
00003c  f884002a          STRB     r0,[r4,#0x2a]         ;441
000040  bf00              NOP                            ;443
000042  e7e3              B        |L31.12|
;;;445    
                          ENDP


                          AREA ||i.LPS22HB_TEMP_Enable||, CODE, READONLY, ALIGN=1

                  LPS22HB_TEMP_Enable PROC
;;;391     */
;;;392    int32_t LPS22HB_TEMP_Enable(LPS22HB_Object_t *pObj)
000000  b510              PUSH     {r4,lr}
;;;393    {
000002  4604              MOV      r4,r0
;;;394      /* Check if the component is already enabled */
;;;395      if (pObj->temp_is_enabled == 1U)
000004  f894002a          LDRB     r0,[r4,#0x2a]
000008  2801              CMP      r0,#1
00000a  d101              BNE      |L32.16|
;;;396      {
;;;397        return LPS22HB_OK;
00000c  2000              MOVS     r0,#0
                  |L32.14|
;;;398      }
;;;399    
;;;400      /* Output data rate selection. */
;;;401      if (lps22hb_data_rate_set(&(pObj->Ctx), pObj->last_odr) != LPS22HB_OK)
;;;402      {
;;;403        return LPS22HB_ERROR;
;;;404      }
;;;405    
;;;406      pObj->temp_is_enabled = 1;
;;;407    
;;;408      return LPS22HB_OK;
;;;409    }
00000e  bd10              POP      {r4,pc}
                  |L32.16|
000010  f894102b          LDRB     r1,[r4,#0x2b]         ;401
000014  f104001c          ADD      r0,r4,#0x1c           ;401
000018  f7fffffe          BL       lps22hb_data_rate_set
00001c  b110              CBZ      r0,|L32.36|
00001e  f04f30ff          MOV      r0,#0xffffffff        ;403
000022  e7f4              B        |L32.14|
                  |L32.36|
000024  2001              MOVS     r0,#1                 ;406
000026  f884002a          STRB     r0,[r4,#0x2a]         ;406
00002a  2000              MOVS     r0,#0                 ;408
00002c  e7ef              B        |L32.14|
;;;410    
                          ENDP


                          AREA ||i.LPS22HB_TEMP_GetOutputDataRate||, CODE, READONLY, ALIGN=1

                  LPS22HB_TEMP_GetOutputDataRate PROC
;;;451     */
;;;452    int32_t LPS22HB_TEMP_GetOutputDataRate(LPS22HB_Object_t *pObj, float *Odr)
000000  b570              PUSH     {r4-r6,lr}
;;;453    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;454      return LPS22HB_GetOutputDataRate(pObj, Odr);
000006  4629              MOV      r1,r5
000008  4620              MOV      r0,r4
00000a  f7fffffe          BL       LPS22HB_GetOutputDataRate
;;;455    }
00000e  bd70              POP      {r4-r6,pc}
;;;456    
                          ENDP


                          AREA ||i.LPS22HB_TEMP_GetTemperature||, CODE, READONLY, ALIGN=1

                  LPS22HB_TEMP_GetTemperature PROC
;;;481     */
;;;482    int32_t LPS22HB_TEMP_GetTemperature(LPS22HB_Object_t *pObj, float *Value)
000000  b538              PUSH     {r3-r5,lr}
;;;483    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;484      axis1bit16_t data_raw_temperature;
;;;485    
;;;486      (void)memset(data_raw_temperature.u8bit, 0x00, sizeof(int16_t));
000006  2000              MOVS     r0,#0
000008  9000              STR      r0,[sp,#0]
;;;487      if (lps22hb_temperature_raw_get(&(pObj->Ctx), data_raw_temperature.u8bit) != LPS22HB_OK)
00000a  4669              MOV      r1,sp
00000c  f104001c          ADD      r0,r4,#0x1c
000010  f7fffffe          BL       lps22hb_temperature_raw_get
000014  b110              CBZ      r0,|L34.28|
;;;488      {
;;;489        return LPS22HB_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L34.26|
;;;490      }
;;;491    
;;;492      *Value = lps22hb_from_lsb_to_degc(data_raw_temperature.i16bit);
;;;493    
;;;494      return LPS22HB_OK;
;;;495    }
00001a  bd38              POP      {r3-r5,pc}
                  |L34.28|
00001c  f9bd0000          LDRSH    r0,[sp,#0]            ;492
000020  f7fffffe          BL       lps22hb_from_lsb_to_degc
000024  ed850a00          VSTR     s0,[r5,#0]            ;492
000028  2000              MOVS     r0,#0                 ;494
00002a  e7f6              B        |L34.26|
;;;496    
                          ENDP


                          AREA ||i.LPS22HB_TEMP_Get_DRDY_Status||, CODE, READONLY, ALIGN=1

                  LPS22HB_TEMP_Get_DRDY_Status PROC
;;;502     */
;;;503    int32_t LPS22HB_TEMP_Get_DRDY_Status(LPS22HB_Object_t *pObj, uint8_t *Status)
000000  b570              PUSH     {r4-r6,lr}
;;;504    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;505      if (lps22hb_temp_data_ready_get(&(pObj->Ctx), Status) != LPS22HB_OK)
000006  4629              MOV      r1,r5
000008  f104001c          ADD      r0,r4,#0x1c
00000c  f7fffffe          BL       lps22hb_temp_data_ready_get
000010  b110              CBZ      r0,|L35.24|
;;;506      {
;;;507        return LPS22HB_ERROR;
000012  f04f30ff          MOV      r0,#0xffffffff
                  |L35.22|
;;;508      }
;;;509    
;;;510      return LPS22HB_OK;
;;;511    }
000016  bd70              POP      {r4-r6,pc}
                  |L35.24|
000018  2000              MOVS     r0,#0                 ;510
00001a  e7fc              B        |L35.22|
;;;512    
                          ENDP


                          AREA ||i.LPS22HB_TEMP_SetOutputDataRate||, CODE, READONLY, ALIGN=1

                  LPS22HB_TEMP_SetOutputDataRate PROC
;;;462     */
;;;463    int32_t LPS22HB_TEMP_SetOutputDataRate(LPS22HB_Object_t *pObj, float Odr)
000000  b510              PUSH     {r4,lr}
;;;464    {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;465      /* Check if the component is enabled */
;;;466      if (pObj->temp_is_enabled == 1U)
00000c  f894002a          LDRB     r0,[r4,#0x2a]
000010  2801              CMP      r0,#1
000012  d107              BNE      |L36.36|
;;;467      {
;;;468        return LPS22HB_SetOutputDataRate_When_Enabled(pObj, Odr);
000014  eeb00a48          VMOV.F32 s0,s16
000018  4620              MOV      r0,r4
00001a  f7fffffe          BL       LPS22HB_SetOutputDataRate_When_Enabled
                  |L36.30|
;;;469      }
;;;470      else
;;;471      {
;;;472        return LPS22HB_SetOutputDataRate_When_Disabled(pObj, Odr);
;;;473      }
;;;474    }
00001e  ecbd8b02          VPOP     {d8}
000022  bd10              POP      {r4,pc}
                  |L36.36|
000024  eeb00a48          VMOV.F32 s0,s16                ;472
000028  4620              MOV      r0,r4                 ;472
00002a  f7fffffe          BL       LPS22HB_SetOutputDataRate_When_Disabled
00002e  e7f6              B        |L36.30|
;;;475    
                          ENDP


                          AREA ||i.LPS22HB_Write_Reg||, CODE, READONLY, ALIGN=1

                  LPS22HB_Write_Reg PROC
;;;760     */
;;;761    int32_t LPS22HB_Write_Reg(LPS22HB_Object_t *pObj, uint8_t Reg, uint8_t Data)
000000  b537              PUSH     {r0-r2,r4,r5,lr}
;;;762    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;763      if (lps22hb_write_reg(&(pObj->Ctx), Reg, &Data, 1) != LPS22HB_OK)
000006  2301              MOVS     r3,#1
000008  aa02              ADD      r2,sp,#8
00000a  4629              MOV      r1,r5
00000c  f104001c          ADD      r0,r4,#0x1c
000010  f7fffffe          BL       lps22hb_write_reg
000014  b110              CBZ      r0,|L37.28|
;;;764      {
;;;765        return LPS22HB_ERROR;
000016  f04f30ff          MOV      r0,#0xffffffff
                  |L37.26|
;;;766      }
;;;767    
;;;768      return LPS22HB_OK;
;;;769    }
00001a  bd3e              POP      {r1-r5,pc}
                  |L37.28|
00001c  2000              MOVS     r0,#0                 ;768
00001e  e7fc              B        |L37.26|
;;;770    
                          ENDP


                          AREA ||i.ReadRegWrap||, CODE, READONLY, ALIGN=1

                  ReadRegWrap PROC
;;;1014    */
;;;1015   static int32_t ReadRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1016   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;1017     uint16_t i;
;;;1018     int32_t ret = LPS22HB_OK;
00000c  f04f0a00          MOV      r10,#0
;;;1019     LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
000010  4635              MOV      r5,r6
;;;1020   
;;;1021     if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
000012  68a8              LDR      r0,[r5,#8]
000014  b9c0              CBNZ     r0,|L38.72|
;;;1022     {
;;;1023       for (i = 0; i < Length; i++)
000016  2400              MOVS     r4,#0
000018  e012              B        |L38.64|
                  |L38.26|
;;;1024       {
;;;1025         ret = pObj->IO.ReadReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
00001a  eb080204          ADD      r2,r8,r4
00001e  193b              ADDS     r3,r7,r4
000020  b299              UXTH     r1,r3
000022  7b28              LDRB     r0,[r5,#0xc]
000024  2301              MOVS     r3,#1
000026  f8d5c014          LDR      r12,[r5,#0x14]
00002a  47e0              BLX      r12
00002c  4682              MOV      r10,r0
;;;1026         if (ret != LPS22HB_OK)
00002e  f1ba0f00          CMP      r10,#0
000032  d003              BEQ      |L38.60|
;;;1027         {
;;;1028           return LPS22HB_ERROR;
000034  f04f30ff          MOV      r0,#0xffffffff
                  |L38.56|
;;;1029         }
;;;1030       }
;;;1031   
;;;1032       return ret;
;;;1033     }
;;;1034     else /* SPI 4-Wires or SPI 3-Wires */
;;;1035     {
;;;1036       return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
;;;1037     }
;;;1038   }
000038  e8bd87f0          POP      {r4-r10,pc}
                  |L38.60|
00003c  1c60              ADDS     r0,r4,#1              ;1023
00003e  b284              UXTH     r4,r0                 ;1023
                  |L38.64|
000040  454c              CMP      r4,r9                 ;1023
000042  dbea              BLT      |L38.26|
000044  4650              MOV      r0,r10                ;1032
000046  e7f7              B        |L38.56|
                  |L38.72|
000048  7b28              LDRB     r0,[r5,#0xc]          ;1036
00004a  464b              MOV      r3,r9                 ;1036
00004c  4642              MOV      r2,r8                 ;1036
00004e  4639              MOV      r1,r7                 ;1036
000050  f8d5c014          LDR      r12,[r5,#0x14]        ;1036
000054  47e0              BLX      r12                   ;1036
000056  e7ef              B        |L38.56|
;;;1039   
                          ENDP


                          AREA ||i.WriteRegWrap||, CODE, READONLY, ALIGN=1

                  WriteRegWrap PROC
;;;1047    */
;;;1048   static int32_t WriteRegWrap(void *Handle, uint8_t Reg, uint8_t *pData, uint16_t Length)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;1049   {
000004  4606              MOV      r6,r0
000006  460f              MOV      r7,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;1050     uint16_t i;
;;;1051     int32_t ret = LPS22HB_OK;
00000c  f04f0a00          MOV      r10,#0
;;;1052     LPS22HB_Object_t *pObj = (LPS22HB_Object_t *)Handle;
000010  4635              MOV      r5,r6
;;;1053   
;;;1054     if (pObj->IO.BusType == LPS22HB_I2C_BUS) /* I2C */
000012  68a8              LDR      r0,[r5,#8]
000014  b9c0              CBNZ     r0,|L39.72|
;;;1055     {
;;;1056       for (i = 0; i < Length; i++)
000016  2400              MOVS     r4,#0
000018  e012              B        |L39.64|
                  |L39.26|
;;;1057       {
;;;1058         ret = pObj->IO.WriteReg(pObj->IO.Address, (Reg + i), &pData[i], 1);
00001a  eb080204          ADD      r2,r8,r4
00001e  193b              ADDS     r3,r7,r4
000020  b299              UXTH     r1,r3
000022  7b28              LDRB     r0,[r5,#0xc]
000024  2301              MOVS     r3,#1
000026  f8d5c010          LDR      r12,[r5,#0x10]
00002a  47e0              BLX      r12
00002c  4682              MOV      r10,r0
;;;1059         if (ret != LPS22HB_OK)
00002e  f1ba0f00          CMP      r10,#0
000032  d003              BEQ      |L39.60|
;;;1060         {
;;;1061           return LPS22HB_ERROR;
000034  f04f30ff          MOV      r0,#0xffffffff
                  |L39.56|
;;;1062         }
;;;1063       }
;;;1064   
;;;1065       return ret;
;;;1066     }
;;;1067     else /* SPI 4-Wires or SPI 3-Wires */
;;;1068     {
;;;1069       return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
;;;1070     }
;;;1071   }
000038  e8bd87f0          POP      {r4-r10,pc}
                  |L39.60|
00003c  1c60              ADDS     r0,r4,#1              ;1056
00003e  b284              UXTH     r4,r0                 ;1056
                  |L39.64|
000040  454c              CMP      r4,r9                 ;1056
000042  dbea              BLT      |L39.26|
000044  4650              MOV      r0,r10                ;1065
000046  e7f7              B        |L39.56|
                  |L39.72|
000048  7b28              LDRB     r0,[r5,#0xc]          ;1069
00004a  464b              MOV      r3,r9                 ;1069
00004c  4642              MOV      r2,r8                 ;1069
00004e  4639              MOV      r1,r7                 ;1069
000050  f8d5c010          LDR      r12,[r5,#0x10]        ;1069
000054  47e0              BLX      r12                   ;1069
000056  e7ef              B        |L39.56|
;;;1072   
                          ENDP


                          AREA ||.data||, DATA, ALIGN=2

                  LPS22HB_COMMON_Driver
                          DCD      LPS22HB_Init
                          DCD      LPS22HB_DeInit
                          DCD      LPS22HB_ReadID
                          DCD      LPS22HB_GetCapabilities
                  LPS22HB_PRESS_Driver
                          DCD      LPS22HB_PRESS_Enable
                          DCD      LPS22HB_PRESS_Disable
                          DCD      LPS22HB_PRESS_GetOutputDataRate
                          DCD      LPS22HB_PRESS_SetOutputDataRate
                          DCD      LPS22HB_PRESS_GetPressure
                  LPS22HB_TEMP_Driver
                          DCD      LPS22HB_TEMP_Enable
                          DCD      LPS22HB_TEMP_Disable
                          DCD      LPS22HB_TEMP_GetOutputDataRate
                          DCD      LPS22HB_TEMP_SetOutputDataRate
                          DCD      LPS22HB_TEMP_GetTemperature
