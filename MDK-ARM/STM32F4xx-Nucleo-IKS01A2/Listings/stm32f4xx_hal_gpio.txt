; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\stm32f4xx_hal_gpio.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\stm32f4xx_hal_gpio.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_gpio.c]
                          THUMB

                          AREA ||i.HAL_GPIO_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_DeInit PROC
;;;295      */
;;;296    void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
000000  b5f0              PUSH     {r4-r7,lr}
;;;297    {
000002  460c              MOV      r4,r1
;;;298      uint32_t position;
;;;299      uint32_t ioposition = 0x00U;
000004  2500              MOVS     r5,#0
;;;300      uint32_t iocurrent = 0x00U;
000006  2200              MOVS     r2,#0
;;;301      uint32_t tmp = 0x00U;
000008  2300              MOVS     r3,#0
;;;302    
;;;303      /* Check the parameters */
;;;304      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;305      
;;;306      /* Configure the port pins */
;;;307      for(position = 0U; position < GPIO_NUMBER; position++)
00000a  2100              MOVS     r1,#0
00000c  e081              B        |L1.274|
                  |L1.14|
;;;308      {
;;;309        /* Get the IO position */
;;;310        ioposition = 0x01U << position;
00000e  2601              MOVS     r6,#1
000010  fa06f501          LSL      r5,r6,r1
;;;311        /* Get the current IO position */
;;;312        iocurrent = (GPIO_Pin) & ioposition;
000014  ea040205          AND      r2,r4,r5
;;;313    
;;;314        if(iocurrent == ioposition)
000018  42aa              CMP      r2,r5
00001a  d179              BNE      |L1.272|
;;;315        {
;;;316          /*------------------------- EXTI Mode Configuration --------------------*/
;;;317          tmp = SYSCFG->EXTICR[position >> 2U];
00001c  4e3f              LDR      r6,|L1.284|
00001e  088f              LSRS     r7,r1,#2
000020  f8563027          LDR      r3,[r6,r7,LSL #2]
;;;318          tmp &= (0x0FU << (4U * (position & 0x03U)));
000024  078e              LSLS     r6,r1,#30
000026  0f37              LSRS     r7,r6,#28
000028  260f              MOVS     r6,#0xf
00002a  40be              LSLS     r6,r6,r7
00002c  4033              ANDS     r3,r3,r6
;;;319          if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
00002e  4e3c              LDR      r6,|L1.288|
000030  42b0              CMP      r0,r6
000032  d101              BNE      |L1.56|
000034  2600              MOVS     r6,#0
000036  e014              B        |L1.98|
                  |L1.56|
000038  4e3a              LDR      r6,|L1.292|
00003a  42b0              CMP      r0,r6
00003c  d101              BNE      |L1.66|
00003e  2601              MOVS     r6,#1
000040  e00f              B        |L1.98|
                  |L1.66|
000042  4e39              LDR      r6,|L1.296|
000044  42b0              CMP      r0,r6
000046  d101              BNE      |L1.76|
000048  2602              MOVS     r6,#2
00004a  e00a              B        |L1.98|
                  |L1.76|
00004c  4e37              LDR      r6,|L1.300|
00004e  42b0              CMP      r0,r6
000050  d101              BNE      |L1.86|
000052  2603              MOVS     r6,#3
000054  e005              B        |L1.98|
                  |L1.86|
000056  4e36              LDR      r6,|L1.304|
000058  42b0              CMP      r0,r6
00005a  d101              BNE      |L1.96|
00005c  2604              MOVS     r6,#4
00005e  e000              B        |L1.98|
                  |L1.96|
000060  2607              MOVS     r6,#7
                  |L1.98|
000062  078f              LSLS     r7,r1,#30
000064  0f3f              LSRS     r7,r7,#28
000066  40be              LSLS     r6,r6,r7
000068  429e              CMP      r6,r3
00006a  d122              BNE      |L1.178|
;;;320          {
;;;321            /* Configure the External Interrupt or event for the current IO */
;;;322            tmp = 0x0FU << (4U * (position & 0x03U));
00006c  078e              LSLS     r6,r1,#30
00006e  0f37              LSRS     r7,r6,#28
000070  260f              MOVS     r6,#0xf
000072  fa06f307          LSL      r3,r6,r7
;;;323            SYSCFG->EXTICR[position >> 2U] &= ~tmp;
000076  4e29              LDR      r6,|L1.284|
000078  088f              LSRS     r7,r1,#2
00007a  f8566027          LDR      r6,[r6,r7,LSL #2]
00007e  439e              BICS     r6,r6,r3
000080  4f26              LDR      r7,|L1.284|
000082  ea4f0c91          LSR      r12,r1,#2
000086  f847602c          STR      r6,[r7,r12,LSL #2]
;;;324    
;;;325            /* Clear EXTI line configuration */
;;;326            EXTI->IMR &= ~((uint32_t)iocurrent);
00008a  4e2a              LDR      r6,|L1.308|
00008c  6836              LDR      r6,[r6,#0]
00008e  4396              BICS     r6,r6,r2
000090  4f28              LDR      r7,|L1.308|
000092  603e              STR      r6,[r7,#0]
;;;327            EXTI->EMR &= ~((uint32_t)iocurrent);
000094  1d3e              ADDS     r6,r7,#4
000096  6836              LDR      r6,[r6,#0]
000098  4396              BICS     r6,r6,r2
00009a  1d3f              ADDS     r7,r7,#4
00009c  603e              STR      r6,[r7,#0]
;;;328            
;;;329            /* Clear Rising Falling edge configuration */
;;;330            EXTI->RTSR &= ~((uint32_t)iocurrent);
00009e  1d3e              ADDS     r6,r7,#4
0000a0  6836              LDR      r6,[r6,#0]
0000a2  4396              BICS     r6,r6,r2
0000a4  1d3f              ADDS     r7,r7,#4
0000a6  603e              STR      r6,[r7,#0]
;;;331            EXTI->FTSR &= ~((uint32_t)iocurrent);
0000a8  1d3e              ADDS     r6,r7,#4
0000aa  6836              LDR      r6,[r6,#0]
0000ac  4396              BICS     r6,r6,r2
0000ae  1d3f              ADDS     r7,r7,#4
0000b0  603e              STR      r6,[r7,#0]
                  |L1.178|
;;;332          }
;;;333    
;;;334          /*------------------------- GPIO Mode Configuration --------------------*/
;;;335          /* Configure IO Direction in Input Floating Mode */
;;;336          GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
0000b2  6806              LDR      r6,[r0,#0]
0000b4  ea4f0c41          LSL      r12,r1,#1
0000b8  2703              MOVS     r7,#3
0000ba  fa07f70c          LSL      r7,r7,r12
0000be  43be              BICS     r6,r6,r7
0000c0  6006              STR      r6,[r0,#0]
;;;337    
;;;338          /* Configure the default Alternate Function in current IO */
;;;339          GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
0000c2  08cf              LSRS     r7,r1,#3
0000c4  f1000620          ADD      r6,r0,#0x20
0000c8  f8566027          LDR      r6,[r6,r7,LSL #2]
0000cc  074f              LSLS     r7,r1,#29
0000ce  ea4f6cd7          LSR      r12,r7,#27
0000d2  270f              MOVS     r7,#0xf
0000d4  fa07f70c          LSL      r7,r7,r12
0000d8  43be              BICS     r6,r6,r7
0000da  ea4f0cd1          LSR      r12,r1,#3
0000de  f1000720          ADD      r7,r0,#0x20
0000e2  f847602c          STR      r6,[r7,r12,LSL #2]
;;;340    
;;;341          /* Configure the default value for IO Speed */
;;;342          GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
0000e6  6886              LDR      r6,[r0,#8]
0000e8  ea4f0c41          LSL      r12,r1,#1
0000ec  2703              MOVS     r7,#3
0000ee  fa07f70c          LSL      r7,r7,r12
0000f2  43be              BICS     r6,r6,r7
0000f4  6086              STR      r6,[r0,#8]
;;;343    
;;;344          /* Configure the default value IO Output Type */
;;;345          GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
0000f6  6846              LDR      r6,[r0,#4]
0000f8  2701              MOVS     r7,#1
0000fa  408f              LSLS     r7,r7,r1
0000fc  43be              BICS     r6,r6,r7
0000fe  6046              STR      r6,[r0,#4]
;;;346    
;;;347          /* Deactivate the Pull-up and Pull-down resistor for the current IO */
;;;348          GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
000100  68c6              LDR      r6,[r0,#0xc]
000102  ea4f0c41          LSL      r12,r1,#1
000106  2703              MOVS     r7,#3
000108  fa07f70c          LSL      r7,r7,r12
00010c  43be              BICS     r6,r6,r7
00010e  60c6              STR      r6,[r0,#0xc]
                  |L1.272|
000110  1c49              ADDS     r1,r1,#1              ;307
                  |L1.274|
000112  2910              CMP      r1,#0x10              ;307
000114  f4ffaf7b          BCC      |L1.14|
;;;349        }
;;;350      }
;;;351    }
000118  bdf0              POP      {r4-r7,pc}
;;;352    
                          ENDP

00011a  0000              DCW      0x0000
                  |L1.284|
                          DCD      0x40013808
                  |L1.288|
                          DCD      0x40020000
                  |L1.292|
                          DCD      0x40020400
                  |L1.296|
                          DCD      0x40020800
                  |L1.300|
                          DCD      0x40020c00
                  |L1.304|
                          DCD      0x40021000
                  |L1.308|
                          DCD      0x40013c00

                          AREA ||i.HAL_GPIO_EXTI_Callback||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_EXTI_Callback PROC
;;;508      */
;;;509    __weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
000000  4770              BX       lr
;;;510    {
;;;511      /* Prevent unused argument(s) compilation warning */
;;;512      UNUSED(GPIO_Pin);
;;;513      /* NOTE: This function Should not be modified, when the callback is needed,
;;;514               the HAL_GPIO_EXTI_Callback could be implemented in the user file
;;;515       */
;;;516    }
;;;517    
                          ENDP


                          AREA ||i.HAL_GPIO_EXTI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_EXTI_IRQHandler PROC
;;;493      */
;;;494    void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
000000  b510              PUSH     {r4,lr}
;;;495    {
000002  4604              MOV      r4,r0
;;;496      /* EXTI line interrupt detected */
;;;497      if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
000004  4804              LDR      r0,|L3.24|
000006  6800              LDR      r0,[r0,#0]
000008  4020              ANDS     r0,r0,r4
00000a  b120              CBZ      r0,|L3.22|
;;;498      {
;;;499        __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
00000c  4802              LDR      r0,|L3.24|
00000e  6004              STR      r4,[r0,#0]
;;;500        HAL_GPIO_EXTI_Callback(GPIO_Pin);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       HAL_GPIO_EXTI_Callback
                  |L3.22|
;;;501      }
;;;502    }
000016  bd10              POP      {r4,pc}
;;;503    
                          ENDP

                  |L3.24|
                          DCD      0x40013c14

                          AREA ||i.HAL_GPIO_Init||, CODE, READONLY, ALIGN=2

                  HAL_GPIO_Init PROC
;;;170      */
;;;171    void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
000000  b5f8              PUSH     {r3-r7,lr}
;;;172    {
000002  4603              MOV      r3,r0
000004  460a              MOV      r2,r1
;;;173      uint32_t position;
;;;174      uint32_t ioposition = 0x00U;
000006  2500              MOVS     r5,#0
;;;175      uint32_t iocurrent = 0x00U;
000008  2400              MOVS     r4,#0
;;;176      uint32_t temp = 0x00U;
00000a  2000              MOVS     r0,#0
;;;177    
;;;178      /* Check the parameters */
;;;179      assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
;;;180      assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
;;;181      assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
;;;182      assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
;;;183    
;;;184      /* Configure the port pins */
;;;185      for(position = 0U; position < GPIO_NUMBER; position++)
00000c  2100              MOVS     r1,#0
00000e  e0cd              B        |L4.428|
                  |L4.16|
;;;186      {
;;;187        /* Get the IO position */
;;;188        ioposition = 0x01U << position;
000010  2601              MOVS     r6,#1
000012  fa06f501          LSL      r5,r6,r1
;;;189        /* Get the current IO position */
;;;190        iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
000016  6816              LDR      r6,[r2,#0]
000018  ea060405          AND      r4,r6,r5
;;;191    
;;;192        if(iocurrent == ioposition)
00001c  42ac              CMP      r4,r5
00001e  d173              BNE      |L4.264|
;;;193        {
;;;194          /*--------------------- GPIO Mode Configuration ------------------------*/
;;;195          /* In case of Alternate function mode selection */
;;;196          if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
000020  6856              LDR      r6,[r2,#4]
000022  2e02              CMP      r6,#2
000024  d002              BEQ      |L4.44|
000026  6856              LDR      r6,[r2,#4]
000028  2e12              CMP      r6,#0x12
00002a  d113              BNE      |L4.84|
                  |L4.44|
;;;197          {
;;;198            /* Check the Alternate function parameter */
;;;199            assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
;;;200            /* Configure Alternate function mapped with the current IO */
;;;201            temp = GPIOx->AFR[position >> 3U];
00002c  08cf              LSRS     r7,r1,#3
00002e  f1030620          ADD      r6,r3,#0x20
000032  f8560027          LDR      r0,[r6,r7,LSL #2]
;;;202            temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
000036  074e              LSLS     r6,r1,#29
000038  0ef7              LSRS     r7,r6,#27
00003a  260f              MOVS     r6,#0xf
00003c  40be              LSLS     r6,r6,r7
00003e  43b0              BICS     r0,r0,r6
;;;203            temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
000040  074f              LSLS     r7,r1,#29
000042  0eff              LSRS     r7,r7,#27
000044  6916              LDR      r6,[r2,#0x10]
000046  40be              LSLS     r6,r6,r7
000048  4330              ORRS     r0,r0,r6
;;;204            GPIOx->AFR[position >> 3U] = temp;
00004a  08cf              LSRS     r7,r1,#3
00004c  f1030620          ADD      r6,r3,#0x20
000050  f8460027          STR      r0,[r6,r7,LSL #2]
                  |L4.84|
;;;205          }
;;;206    
;;;207          /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
;;;208          temp = GPIOx->MODER;
000054  6818              LDR      r0,[r3,#0]
;;;209          temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
000056  004f              LSLS     r7,r1,#1
000058  2603              MOVS     r6,#3
00005a  40be              LSLS     r6,r6,r7
00005c  43b0              BICS     r0,r0,r6
;;;210          temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
00005e  7916              LDRB     r6,[r2,#4]
000060  f0060603          AND      r6,r6,#3
000064  004f              LSLS     r7,r1,#1
000066  40be              LSLS     r6,r6,r7
000068  4330              ORRS     r0,r0,r6
;;;211          GPIOx->MODER = temp;
00006a  6018              STR      r0,[r3,#0]
;;;212    
;;;213          /* In case of Output or Alternate function mode selection */
;;;214          if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
00006c  6856              LDR      r6,[r2,#4]
00006e  2e01              CMP      r6,#1
000070  d008              BEQ      |L4.132|
000072  6856              LDR      r6,[r2,#4]
000074  2e02              CMP      r6,#2
000076  d005              BEQ      |L4.132|
;;;215             (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
000078  6856              LDR      r6,[r2,#4]
00007a  2e11              CMP      r6,#0x11
00007c  d002              BEQ      |L4.132|
00007e  6856              LDR      r6,[r2,#4]
000080  2e12              CMP      r6,#0x12
000082  d113              BNE      |L4.172|
                  |L4.132|
;;;216          {
;;;217            /* Check the Speed parameter */
;;;218            assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
;;;219            /* Configure the IO Speed */
;;;220            temp = GPIOx->OSPEEDR; 
000084  6898              LDR      r0,[r3,#8]
;;;221            temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
000086  004f              LSLS     r7,r1,#1
000088  2603              MOVS     r6,#3
00008a  40be              LSLS     r6,r6,r7
00008c  43b0              BICS     r0,r0,r6
;;;222            temp |= (GPIO_Init->Speed << (position * 2U));
00008e  004f              LSLS     r7,r1,#1
000090  68d6              LDR      r6,[r2,#0xc]
000092  40be              LSLS     r6,r6,r7
000094  4330              ORRS     r0,r0,r6
;;;223            GPIOx->OSPEEDR = temp;
000096  6098              STR      r0,[r3,#8]
;;;224    
;;;225            /* Configure the IO Output Type */
;;;226            temp = GPIOx->OTYPER;
000098  6858              LDR      r0,[r3,#4]
;;;227            temp &= ~(GPIO_OTYPER_OT_0 << position) ;
00009a  2601              MOVS     r6,#1
00009c  408e              LSLS     r6,r6,r1
00009e  43b0              BICS     r0,r0,r6
;;;228            temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
0000a0  7916              LDRB     r6,[r2,#4]
0000a2  f3c61600          UBFX     r6,r6,#4,#1
0000a6  408e              LSLS     r6,r6,r1
0000a8  4330              ORRS     r0,r0,r6
;;;229            GPIOx->OTYPER = temp;
0000aa  6058              STR      r0,[r3,#4]
                  |L4.172|
;;;230          }
;;;231    
;;;232          /* Activate the Pull-up or Pull down resistor for the current IO */
;;;233          temp = GPIOx->PUPDR;
0000ac  68d8              LDR      r0,[r3,#0xc]
;;;234          temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
0000ae  004f              LSLS     r7,r1,#1
0000b0  2603              MOVS     r6,#3
0000b2  40be              LSLS     r6,r6,r7
0000b4  43b0              BICS     r0,r0,r6
;;;235          temp |= ((GPIO_Init->Pull) << (position * 2U));
0000b6  004f              LSLS     r7,r1,#1
0000b8  6896              LDR      r6,[r2,#8]
0000ba  40be              LSLS     r6,r6,r7
0000bc  4330              ORRS     r0,r0,r6
;;;236          GPIOx->PUPDR = temp;
0000be  60d8              STR      r0,[r3,#0xc]
;;;237    
;;;238          /*--------------------- EXTI Mode Configuration ------------------------*/
;;;239          /* Configure the External Interrupt or event for the current IO */
;;;240          if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
0000c0  6856              LDR      r6,[r2,#4]
0000c2  f0065680          AND      r6,r6,#0x10000000
0000c6  f1b65f80          CMP      r6,#0x10000000
0000ca  d16e              BNE      |L4.426|
;;;241          {
;;;242            /* Enable SYSCFG Clock */
;;;243            __HAL_RCC_SYSCFG_CLK_ENABLE();
0000cc  bf00              NOP      
0000ce  2600              MOVS     r6,#0
0000d0  9600              STR      r6,[sp,#0]
0000d2  4e38              LDR      r6,|L4.436|
0000d4  6836              LDR      r6,[r6,#0]
0000d6  f4464680          ORR      r6,r6,#0x4000
0000da  4f36              LDR      r7,|L4.436|
0000dc  603e              STR      r6,[r7,#0]
0000de  463e              MOV      r6,r7
0000e0  6836              LDR      r6,[r6,#0]
0000e2  f4064680          AND      r6,r6,#0x4000
0000e6  9600              STR      r6,[sp,#0]
0000e8  bf00              NOP      
0000ea  bf00              NOP      
;;;244    
;;;245            temp = SYSCFG->EXTICR[position >> 2U];
0000ec  4e32              LDR      r6,|L4.440|
0000ee  088f              LSRS     r7,r1,#2
0000f0  f8560027          LDR      r0,[r6,r7,LSL #2]
;;;246            temp &= ~(0x0FU << (4U * (position & 0x03U)));
0000f4  078e              LSLS     r6,r1,#30
0000f6  0f37              LSRS     r7,r6,#28
0000f8  260f              MOVS     r6,#0xf
0000fa  40be              LSLS     r6,r6,r7
0000fc  43b0              BICS     r0,r0,r6
;;;247            temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
0000fe  4e2f              LDR      r6,|L4.444|
000100  42b3              CMP      r3,r6
000102  d102              BNE      |L4.266|
000104  2600              MOVS     r6,#0
000106  e015              B        |L4.308|
                  |L4.264|
000108  e04f              B        |L4.426|
                  |L4.266|
00010a  4e2d              LDR      r6,|L4.448|
00010c  42b3              CMP      r3,r6
00010e  d101              BNE      |L4.276|
000110  2601              MOVS     r6,#1
000112  e00f              B        |L4.308|
                  |L4.276|
000114  4e2b              LDR      r6,|L4.452|
000116  42b3              CMP      r3,r6
000118  d101              BNE      |L4.286|
00011a  2602              MOVS     r6,#2
00011c  e00a              B        |L4.308|
                  |L4.286|
00011e  4e2a              LDR      r6,|L4.456|
000120  42b3              CMP      r3,r6
000122  d101              BNE      |L4.296|
000124  2603              MOVS     r6,#3
000126  e005              B        |L4.308|
                  |L4.296|
000128  4e28              LDR      r6,|L4.460|
00012a  42b3              CMP      r3,r6
00012c  d101              BNE      |L4.306|
00012e  2604              MOVS     r6,#4
000130  e000              B        |L4.308|
                  |L4.306|
000132  2607              MOVS     r6,#7
                  |L4.308|
000134  078f              LSLS     r7,r1,#30
000136  0f3f              LSRS     r7,r7,#28
000138  40be              LSLS     r6,r6,r7
00013a  4330              ORRS     r0,r0,r6
;;;248            SYSCFG->EXTICR[position >> 2U] = temp;
00013c  4e1e              LDR      r6,|L4.440|
00013e  088f              LSRS     r7,r1,#2
000140  f8460027          STR      r0,[r6,r7,LSL #2]
;;;249    
;;;250            /* Clear EXTI line configuration */
;;;251            temp = EXTI->IMR;
000144  4e22              LDR      r6,|L4.464|
000146  6830              LDR      r0,[r6,#0]
;;;252            temp &= ~((uint32_t)iocurrent);
000148  43a0              BICS     r0,r0,r4
;;;253            if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
00014a  6856              LDR      r6,[r2,#4]
00014c  f4063680          AND      r6,r6,#0x10000
000150  f5b63f80          CMP      r6,#0x10000
000154  d100              BNE      |L4.344|
;;;254            {
;;;255              temp |= iocurrent;
000156  4320              ORRS     r0,r0,r4
                  |L4.344|
;;;256            }
;;;257            EXTI->IMR = temp;
000158  4e1d              LDR      r6,|L4.464|
00015a  6030              STR      r0,[r6,#0]
;;;258    
;;;259            temp = EXTI->EMR;
00015c  1d36              ADDS     r6,r6,#4
00015e  6830              LDR      r0,[r6,#0]
;;;260            temp &= ~((uint32_t)iocurrent);
000160  43a0              BICS     r0,r0,r4
;;;261            if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
000162  6856              LDR      r6,[r2,#4]
000164  f4063600          AND      r6,r6,#0x20000
000168  f5b63f00          CMP      r6,#0x20000
00016c  d100              BNE      |L4.368|
;;;262            {
;;;263              temp |= iocurrent;
00016e  4320              ORRS     r0,r0,r4
                  |L4.368|
;;;264            }
;;;265            EXTI->EMR = temp;
000170  4e17              LDR      r6,|L4.464|
000172  1d36              ADDS     r6,r6,#4
000174  6030              STR      r0,[r6,#0]
;;;266    
;;;267            /* Clear Rising Falling edge configuration */
;;;268            temp = EXTI->RTSR;
000176  1d36              ADDS     r6,r6,#4
000178  6830              LDR      r0,[r6,#0]
;;;269            temp &= ~((uint32_t)iocurrent);
00017a  43a0              BICS     r0,r0,r4
;;;270            if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
00017c  6856              LDR      r6,[r2,#4]
00017e  f4061680          AND      r6,r6,#0x100000
000182  f5b61f80          CMP      r6,#0x100000
000186  d100              BNE      |L4.394|
;;;271            {
;;;272              temp |= iocurrent;
000188  4320              ORRS     r0,r0,r4
                  |L4.394|
;;;273            }
;;;274            EXTI->RTSR = temp;
00018a  4e11              LDR      r6,|L4.464|
00018c  3608              ADDS     r6,r6,#8
00018e  6030              STR      r0,[r6,#0]
;;;275    
;;;276            temp = EXTI->FTSR;
000190  1d36              ADDS     r6,r6,#4
000192  6830              LDR      r0,[r6,#0]
;;;277            temp &= ~((uint32_t)iocurrent);
000194  43a0              BICS     r0,r0,r4
;;;278            if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
000196  6856              LDR      r6,[r2,#4]
000198  f4061600          AND      r6,r6,#0x200000
00019c  f5b61f00          CMP      r6,#0x200000
0001a0  d100              BNE      |L4.420|
;;;279            {
;;;280              temp |= iocurrent;
0001a2  4320              ORRS     r0,r0,r4
                  |L4.420|
;;;281            }
;;;282            EXTI->FTSR = temp;
0001a4  4e0a              LDR      r6,|L4.464|
0001a6  360c              ADDS     r6,r6,#0xc
0001a8  6030              STR      r0,[r6,#0]
                  |L4.426|
0001aa  1c49              ADDS     r1,r1,#1              ;185
                  |L4.428|
0001ac  2910              CMP      r1,#0x10              ;185
0001ae  f4ffaf2f          BCC      |L4.16|
;;;283          }
;;;284        }
;;;285      }
;;;286    }
0001b2  bdf8              POP      {r3-r7,pc}
;;;287    
                          ENDP

                  |L4.436|
                          DCD      0x40023844
                  |L4.440|
                          DCD      0x40013808
                  |L4.444|
                          DCD      0x40020000
                  |L4.448|
                          DCD      0x40020400
                  |L4.452|
                          DCD      0x40020800
                  |L4.456|
                          DCD      0x40020c00
                  |L4.460|
                          DCD      0x40021000
                  |L4.464|
                          DCD      0x40013c00

                          AREA ||i.HAL_GPIO_LockPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_LockPin PROC
;;;460      */
;;;461    HAL_StatusTypeDef HAL_GPIO_LockPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  b508              PUSH     {r3,lr}
;;;462    {
000002  4602              MOV      r2,r0
;;;463      __IO uint32_t tmp = GPIO_LCKR_LCKK;
000004  f44f3080          MOV      r0,#0x10000
000008  9000              STR      r0,[sp,#0]
;;;464    
;;;465      /* Check the parameters */
;;;466      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;467    
;;;468      /* Apply lock key write sequence */
;;;469      tmp |= GPIO_Pin;
00000a  9800              LDR      r0,[sp,#0]
00000c  4308              ORRS     r0,r0,r1
00000e  9000              STR      r0,[sp,#0]
;;;470      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;471      GPIOx->LCKR = tmp;
000010  9800              LDR      r0,[sp,#0]
000012  61d0              STR      r0,[r2,#0x1c]
;;;472      /* Reset LCKx bit(s): LCKK='0' + LCK[15-0] */
;;;473      GPIOx->LCKR = GPIO_Pin;
000014  61d1              STR      r1,[r2,#0x1c]
;;;474      /* Set LCKx bit(s): LCKK='1' + LCK[15-0] */
;;;475      GPIOx->LCKR = tmp;
000016  9800              LDR      r0,[sp,#0]
000018  61d0              STR      r0,[r2,#0x1c]
;;;476      /* Read LCKK bit*/
;;;477      tmp = GPIOx->LCKR;
00001a  69d0              LDR      r0,[r2,#0x1c]
00001c  9000              STR      r0,[sp,#0]
;;;478    
;;;479     if((GPIOx->LCKR & GPIO_LCKR_LCKK) != RESET)
00001e  69d0              LDR      r0,[r2,#0x1c]
000020  f4003080          AND      r0,r0,#0x10000
000024  b108              CBZ      r0,|L5.42|
;;;480      {
;;;481        return HAL_OK;
000026  2000              MOVS     r0,#0
                  |L5.40|
;;;482      }
;;;483      else
;;;484      {
;;;485        return HAL_ERROR;
;;;486      }
;;;487    }
000028  bd08              POP      {r3,pc}
                  |L5.42|
00002a  2001              MOVS     r0,#1                 ;485
00002c  e7fc              B        |L5.40|
;;;488    
                          ENDP


                          AREA ||i.HAL_GPIO_ReadPin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_ReadPin PROC
;;;376      */
;;;377    GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  4602              MOV      r2,r0
;;;378    {
;;;379      GPIO_PinState bitstatus;
;;;380    
;;;381      /* Check the parameters */
;;;382      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;383    
;;;384      if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
000002  6913              LDR      r3,[r2,#0x10]
000004  400b              ANDS     r3,r3,r1
000006  b10b              CBZ      r3,|L6.12|
;;;385      {
;;;386        bitstatus = GPIO_PIN_SET;
000008  2001              MOVS     r0,#1
00000a  e000              B        |L6.14|
                  |L6.12|
;;;387      }
;;;388      else
;;;389      {
;;;390        bitstatus = GPIO_PIN_RESET;
00000c  2000              MOVS     r0,#0
                  |L6.14|
;;;391      }
;;;392      return bitstatus;
;;;393    }
00000e  4770              BX       lr
;;;394    
                          ENDP


                          AREA ||i.HAL_GPIO_TogglePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_TogglePin PROC
;;;434      */
;;;435    void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
000000  6942              LDR      r2,[r0,#0x14]
;;;436    {
;;;437      /* Check the parameters */
;;;438      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;439    
;;;440      if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
000002  400a              ANDS     r2,r2,r1
000004  428a              CMP      r2,r1
000006  d102              BNE      |L7.14|
;;;441      {
;;;442        GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
000008  040a              LSLS     r2,r1,#16
00000a  6182              STR      r2,[r0,#0x18]
00000c  e000              B        |L7.16|
                  |L7.14|
;;;443      }
;;;444      else
;;;445      {
;;;446        GPIOx->BSRR = GPIO_Pin;
00000e  6181              STR      r1,[r0,#0x18]
                  |L7.16|
;;;447      }
;;;448    }
000010  4770              BX       lr
;;;449    
                          ENDP


                          AREA ||i.HAL_GPIO_WritePin||, CODE, READONLY, ALIGN=1

                  HAL_GPIO_WritePin PROC
;;;411      */
;;;412    void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
000000  b10a              CBZ      r2,|L8.6|
;;;413    {
;;;414      /* Check the parameters */
;;;415      assert_param(IS_GPIO_PIN(GPIO_Pin));
;;;416      assert_param(IS_GPIO_PIN_ACTION(PinState));
;;;417    
;;;418      if(PinState != GPIO_PIN_RESET)
;;;419      {
;;;420        GPIOx->BSRR = GPIO_Pin;
000002  6181              STR      r1,[r0,#0x18]
000004  e001              B        |L8.10|
                  |L8.6|
;;;421      }
;;;422      else
;;;423      {
;;;424        GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
000006  040b              LSLS     r3,r1,#16
000008  6183              STR      r3,[r0,#0x18]
                  |L8.10|
;;;425      }
;;;426    }
00000a  4770              BX       lr
;;;427    
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\Drivers\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_gpio.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_gpio_c_ea787061____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___20_stm32f4xx_hal_gpio_c_ea787061____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_gpio_c_ea787061____REVSH|
#line 402
|__asm___20_stm32f4xx_hal_gpio_c_ea787061____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___20_stm32f4xx_hal_gpio_c_ea787061____RRX|
#line 587
|__asm___20_stm32f4xx_hal_gpio_c_ea787061____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
