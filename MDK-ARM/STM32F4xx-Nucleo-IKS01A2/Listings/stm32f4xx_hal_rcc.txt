; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\stm32f4xx_hal_rcc.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\stm32f4xx_hal_rcc.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rcc.c]
                          THUMB

                          AREA ||i.HAL_RCC_CSSCallback||, CODE, READONLY, ALIGN=1

                  HAL_RCC_CSSCallback PROC
;;;1072     */
;;;1073   __weak void HAL_RCC_CSSCallback(void)
000000  4770              BX       lr
;;;1074   {
;;;1075     /* NOTE : This function Should not be modified, when the callback is needed,
;;;1076               the HAL_RCC_CSSCallback could be implemented in the user file
;;;1077      */
;;;1078   }
;;;1079   
                          ENDP


                          AREA ||i.HAL_RCC_ClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_ClockConfig PROC
;;;564      */
;;;565    HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
000000  b570              PUSH     {r4-r6,lr}
;;;566    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;567      uint32_t tickstart;
;;;568    
;;;569      /* Check Null pointer */
;;;570      if(RCC_ClkInitStruct == NULL)
000006  b90c              CBNZ     r4,|L2.12|
;;;571      {
;;;572        return HAL_ERROR;
000008  2001              MOVS     r0,#1
                  |L2.10|
;;;573      }
;;;574    
;;;575      /* Check the parameters */
;;;576      assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
;;;577      assert_param(IS_FLASH_LATENCY(FLatency));
;;;578    
;;;579      /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
;;;580        must be correctly programmed according to the frequency of the CPU clock
;;;581        (HCLK) and the supply voltage of the device. */
;;;582    
;;;583      /* Increasing the number of wait states because of higher CPU frequency */
;;;584      if(FLatency > __HAL_FLASH_GET_LATENCY())
;;;585      {
;;;586        /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;587        __HAL_FLASH_SET_LATENCY(FLatency);
;;;588    
;;;589        /* Check that the new number of wait states is taken into account to access the Flash
;;;590        memory by reading the FLASH_ACR register */
;;;591        if(__HAL_FLASH_GET_LATENCY() != FLatency)
;;;592        {
;;;593          return HAL_ERROR;
;;;594        }
;;;595      }
;;;596    
;;;597      /*-------------------------- HCLK Configuration --------------------------*/
;;;598      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
;;;599      {
;;;600        /* Set the highest APBx dividers in order to ensure that we do not go through
;;;601           a non-spec phase whatever we decrease or increase HCLK. */
;;;602        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;603        {
;;;604          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
;;;605        }
;;;606    
;;;607        if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;608        {
;;;609          MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
;;;610        }
;;;611    
;;;612        assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
;;;613        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
;;;614      }
;;;615    
;;;616      /*------------------------- SYSCLK Configuration ---------------------------*/
;;;617      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
;;;618      {
;;;619        assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
;;;620    
;;;621        /* HSE is selected as System Clock Source */
;;;622        if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
;;;623        {
;;;624          /* Check the HSE ready flag */
;;;625          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;626          {
;;;627            return HAL_ERROR;
;;;628          }
;;;629        }
;;;630        /* PLL is selected as System Clock Source */
;;;631        else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
;;;632                (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
;;;633        {
;;;634          /* Check the PLL ready flag */
;;;635          if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;636          {
;;;637            return HAL_ERROR;
;;;638          }
;;;639        }
;;;640        /* HSI is selected as System Clock Source */
;;;641        else
;;;642        {
;;;643          /* Check the HSI ready flag */
;;;644          if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;645          {
;;;646            return HAL_ERROR;
;;;647          }
;;;648        }
;;;649    
;;;650        __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
;;;651    
;;;652        /* Get Start Tick */
;;;653        tickstart = HAL_GetTick();
;;;654    
;;;655        while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
;;;656        {
;;;657          if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;658          {
;;;659            return HAL_TIMEOUT;
;;;660          }
;;;661        }
;;;662      }
;;;663    
;;;664      /* Decreasing the number of wait states because of lower CPU frequency */
;;;665      if(FLatency < __HAL_FLASH_GET_LATENCY())
;;;666      {
;;;667         /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
;;;668        __HAL_FLASH_SET_LATENCY(FLatency);
;;;669    
;;;670        /* Check that the new number of wait states is taken into account to access the Flash
;;;671        memory by reading the FLASH_ACR register */
;;;672        if(__HAL_FLASH_GET_LATENCY() != FLatency)
;;;673        {
;;;674          return HAL_ERROR;
;;;675        }
;;;676      }
;;;677    
;;;678      /*-------------------------- PCLK1 Configuration ---------------------------*/
;;;679      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
;;;680      {
;;;681        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
;;;682        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
;;;683      }
;;;684    
;;;685      /*-------------------------- PCLK2 Configuration ---------------------------*/
;;;686      if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
;;;687      {
;;;688        assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
;;;689        MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
;;;690      }
;;;691    
;;;692      /* Update the SystemCoreClock global variable */
;;;693      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
;;;694    
;;;695      /* Configure the source of time base considering new system clocks settings */
;;;696      HAL_InitTick (TICK_INT_PRIORITY);
;;;697    
;;;698      return HAL_OK;
;;;699    }
00000a  bd70              POP      {r4-r6,pc}
                  |L2.12|
00000c  4858              LDR      r0,|L2.368|
00000e  6800              LDR      r0,[r0,#0]            ;584
000010  f000000f          AND      r0,r0,#0xf            ;584
000014  42a8              CMP      r0,r5                 ;584
000016  d209              BCS      |L2.44|
000018  4955              LDR      r1,|L2.368|
00001a  700d              STRB     r5,[r1,#0]            ;587
00001c  4608              MOV      r0,r1                 ;591
00001e  6800              LDR      r0,[r0,#0]            ;591
000020  f000000f          AND      r0,r0,#0xf            ;591
000024  42a8              CMP      r0,r5                 ;591
000026  d001              BEQ      |L2.44|
000028  2001              MOVS     r0,#1                 ;593
00002a  e7ee              B        |L2.10|
                  |L2.44|
00002c  7820              LDRB     r0,[r4,#0]            ;598
00002e  f0000002          AND      r0,r0,#2              ;598
000032  2802              CMP      r0,#2                 ;598
000034  d11d              BNE      |L2.114|
000036  7820              LDRB     r0,[r4,#0]            ;602
000038  f0000004          AND      r0,r0,#4              ;602
00003c  2804              CMP      r0,#4                 ;602
00003e  d105              BNE      |L2.76|
000040  484c              LDR      r0,|L2.372|
000042  6800              LDR      r0,[r0,#0]            ;604
000044  f44050e0          ORR      r0,r0,#0x1c00         ;604
000048  494a              LDR      r1,|L2.372|
00004a  6008              STR      r0,[r1,#0]            ;604
                  |L2.76|
00004c  7820              LDRB     r0,[r4,#0]            ;607
00004e  f0000008          AND      r0,r0,#8              ;607
000052  2808              CMP      r0,#8                 ;607
000054  d105              BNE      |L2.98|
000056  4847              LDR      r0,|L2.372|
000058  6800              LDR      r0,[r0,#0]            ;609
00005a  f4404060          ORR      r0,r0,#0xe000         ;609
00005e  4945              LDR      r1,|L2.372|
000060  6008              STR      r0,[r1,#0]            ;609
                  |L2.98|
000062  4844              LDR      r0,|L2.372|
000064  6800              LDR      r0,[r0,#0]            ;613
000066  f02000f0          BIC      r0,r0,#0xf0           ;613
00006a  68a1              LDR      r1,[r4,#8]            ;613
00006c  4308              ORRS     r0,r0,r1              ;613
00006e  4941              LDR      r1,|L2.372|
000070  6008              STR      r0,[r1,#0]            ;613
                  |L2.114|
000072  7820              LDRB     r0,[r4,#0]            ;617
000074  f0000001          AND      r0,r0,#1              ;617
000078  b3a8              CBZ      r0,|L2.230|
00007a  6860              LDR      r0,[r4,#4]            ;622
00007c  2801              CMP      r0,#1                 ;622
00007e  d107              BNE      |L2.144|
000080  483c              LDR      r0,|L2.372|
000082  3808              SUBS     r0,r0,#8              ;625
000084  6800              LDR      r0,[r0,#0]            ;625
000086  f3c04040          UBFX     r0,r0,#17,#1          ;625
00008a  b9b8              CBNZ     r0,|L2.188|
00008c  2001              MOVS     r0,#1                 ;627
00008e  e7bc              B        |L2.10|
                  |L2.144|
000090  6860              LDR      r0,[r4,#4]            ;631
000092  2802              CMP      r0,#2                 ;631
000094  d002              BEQ      |L2.156|
000096  6860              LDR      r0,[r4,#4]            ;632
000098  2803              CMP      r0,#3                 ;632
00009a  d107              BNE      |L2.172|
                  |L2.156|
00009c  4835              LDR      r0,|L2.372|
00009e  3808              SUBS     r0,r0,#8              ;635
0000a0  6800              LDR      r0,[r0,#0]            ;635
0000a2  f3c06040          UBFX     r0,r0,#25,#1          ;635
0000a6  b948              CBNZ     r0,|L2.188|
0000a8  2001              MOVS     r0,#1                 ;637
0000aa  e7ae              B        |L2.10|
                  |L2.172|
0000ac  4831              LDR      r0,|L2.372|
0000ae  3808              SUBS     r0,r0,#8              ;644
0000b0  6800              LDR      r0,[r0,#0]            ;644
0000b2  f3c00040          UBFX     r0,r0,#1,#1           ;644
0000b6  b908              CBNZ     r0,|L2.188|
0000b8  2001              MOVS     r0,#1                 ;646
0000ba  e7a6              B        |L2.10|
                  |L2.188|
0000bc  482d              LDR      r0,|L2.372|
0000be  6800              LDR      r0,[r0,#0]            ;650
0000c0  f0200003          BIC      r0,r0,#3              ;650
0000c4  6861              LDR      r1,[r4,#4]            ;650
0000c6  4308              ORRS     r0,r0,r1              ;650
0000c8  492a              LDR      r1,|L2.372|
0000ca  6008              STR      r0,[r1,#0]            ;650
0000cc  f7fffffe          BL       HAL_GetTick
0000d0  4606              MOV      r6,r0                 ;653
0000d2  e009              B        |L2.232|
                  |L2.212|
0000d4  f7fffffe          BL       HAL_GetTick
0000d8  1b80              SUBS     r0,r0,r6              ;657
0000da  f2413188          MOV      r1,#0x1388            ;657
0000de  4288              CMP      r0,r1                 ;657
0000e0  d902              BLS      |L2.232|
0000e2  2003              MOVS     r0,#3                 ;659
0000e4  e791              B        |L2.10|
                  |L2.230|
0000e6  e007              B        |L2.248|
                  |L2.232|
0000e8  4822              LDR      r0,|L2.372|
0000ea  6800              LDR      r0,[r0,#0]            ;655
0000ec  f000000c          AND      r0,r0,#0xc            ;655
0000f0  6861              LDR      r1,[r4,#4]            ;655
0000f2  ebb00f81          CMP      r0,r1,LSL #2          ;655
0000f6  d1ed              BNE      |L2.212|
                  |L2.248|
0000f8  481d              LDR      r0,|L2.368|
0000fa  6800              LDR      r0,[r0,#0]            ;665
0000fc  f000000f          AND      r0,r0,#0xf            ;665
000100  42a8              CMP      r0,r5                 ;665
000102  d909              BLS      |L2.280|
000104  491a              LDR      r1,|L2.368|
000106  700d              STRB     r5,[r1,#0]            ;668
000108  4608              MOV      r0,r1                 ;672
00010a  6800              LDR      r0,[r0,#0]            ;672
00010c  f000000f          AND      r0,r0,#0xf            ;672
000110  42a8              CMP      r0,r5                 ;672
000112  d001              BEQ      |L2.280|
000114  2001              MOVS     r0,#1                 ;674
000116  e778              B        |L2.10|
                  |L2.280|
000118  7820              LDRB     r0,[r4,#0]            ;679
00011a  f0000004          AND      r0,r0,#4              ;679
00011e  2804              CMP      r0,#4                 ;679
000120  d107              BNE      |L2.306|
000122  4814              LDR      r0,|L2.372|
000124  6800              LDR      r0,[r0,#0]            ;682
000126  f42050e0          BIC      r0,r0,#0x1c00         ;682
00012a  68e1              LDR      r1,[r4,#0xc]          ;682
00012c  4308              ORRS     r0,r0,r1              ;682
00012e  4911              LDR      r1,|L2.372|
000130  6008              STR      r0,[r1,#0]            ;682
                  |L2.306|
000132  7820              LDRB     r0,[r4,#0]            ;686
000134  f0000008          AND      r0,r0,#8              ;686
000138  2808              CMP      r0,#8                 ;686
00013a  d108              BNE      |L2.334|
00013c  480d              LDR      r0,|L2.372|
00013e  6800              LDR      r0,[r0,#0]            ;689
000140  f4204060          BIC      r0,r0,#0xe000         ;689
000144  6921              LDR      r1,[r4,#0x10]         ;689
000146  ea4000c1          ORR      r0,r0,r1,LSL #3       ;689
00014a  490a              LDR      r1,|L2.372|
00014c  6008              STR      r0,[r1,#0]            ;689
                  |L2.334|
00014e  f7fffffe          BL       HAL_RCC_GetSysClockFreq
000152  4908              LDR      r1,|L2.372|
000154  6809              LDR      r1,[r1,#0]            ;693
000156  f3c11103          UBFX     r1,r1,#4,#4           ;693
00015a  4a07              LDR      r2,|L2.376|
00015c  5c51              LDRB     r1,[r2,r1]            ;693
00015e  40c8              LSRS     r0,r0,r1              ;693
000160  4906              LDR      r1,|L2.380|
000162  6008              STR      r0,[r1,#0]            ;693  ; SystemCoreClock
000164  200f              MOVS     r0,#0xf               ;696
000166  f7fffffe          BL       HAL_InitTick
00016a  2000              MOVS     r0,#0                 ;698
00016c  e74d              B        |L2.10|
;;;700    
                          ENDP

00016e  0000              DCW      0x0000
                  |L2.368|
                          DCD      0x40023c00
                  |L2.372|
                          DCD      0x40023808
                  |L2.376|
                          DCD      AHBPrescTable
                  |L2.380|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=1

                  HAL_RCC_DeInit PROC
;;;201      */
;;;202    __weak HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  2000              MOVS     r0,#0
;;;203    {
;;;204      return HAL_OK;
;;;205    }
000002  4770              BX       lr
;;;206    
                          ENDP


                          AREA ||i.HAL_RCC_DisableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DisableCSS PROC
;;;823      */
;;;824    void HAL_RCC_DisableCSS(void)
000000  2000              MOVS     r0,#0
;;;825    {
;;;826      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)DISABLE;
000002  4901              LDR      r1,|L4.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;827    }
000006  4770              BX       lr
;;;828    
                          ENDP

                  |L4.8|
                          DCD      0x42470000

                          AREA ||i.HAL_RCC_EnableCSS||, CODE, READONLY, ALIGN=2

                  HAL_RCC_EnableCSS PROC
;;;814      */
;;;815    void HAL_RCC_EnableCSS(void)
000000  2001              MOVS     r0,#1
;;;816    {
;;;817      *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
000002  4901              LDR      r1,|L5.8|
000004  64c8              STR      r0,[r1,#0x4c]
;;;818    }
000006  4770              BX       lr
;;;819    
                          ENDP

                  |L5.8|
                          DCD      0x42470000

                          AREA ||i.HAL_RCC_GetClockConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetClockConfig PROC
;;;1029     */
;;;1030   void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
000000  220f              MOVS     r2,#0xf
;;;1031   {
;;;1032     /* Set all possible values for the Clock type parameter --------------------*/
;;;1033     RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
000002  6002              STR      r2,[r0,#0]
;;;1034   
;;;1035     /* Get the SYSCLK configuration --------------------------------------------*/
;;;1036     RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
000004  4a0d              LDR      r2,|L6.60|
000006  6812              LDR      r2,[r2,#0]
000008  f0020203          AND      r2,r2,#3
00000c  6042              STR      r2,[r0,#4]
;;;1037   
;;;1038     /* Get the HCLK configuration ----------------------------------------------*/
;;;1039     RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
00000e  4a0b              LDR      r2,|L6.60|
000010  6812              LDR      r2,[r2,#0]
000012  f00202f0          AND      r2,r2,#0xf0
000016  6082              STR      r2,[r0,#8]
;;;1040   
;;;1041     /* Get the APB1 configuration ----------------------------------------------*/
;;;1042     RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
000018  4a08              LDR      r2,|L6.60|
00001a  6812              LDR      r2,[r2,#0]
00001c  f40252e0          AND      r2,r2,#0x1c00
000020  60c2              STR      r2,[r0,#0xc]
;;;1043   
;;;1044     /* Get the APB2 configuration ----------------------------------------------*/
;;;1045     RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
000022  4a06              LDR      r2,|L6.60|
000024  6812              LDR      r2,[r2,#0]
000026  f4024260          AND      r2,r2,#0xe000
00002a  08d2              LSRS     r2,r2,#3
00002c  6102              STR      r2,[r0,#0x10]
;;;1046   
;;;1047     /* Get the Flash Wait State (Latency) configuration ------------------------*/
;;;1048     *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
00002e  4a04              LDR      r2,|L6.64|
000030  6812              LDR      r2,[r2,#0]
000032  f002020f          AND      r2,r2,#0xf
000036  600a              STR      r2,[r1,#0]
;;;1049   }
000038  4770              BX       lr
;;;1050   
                          ENDP

00003a  0000              DCW      0x0000
                  |L6.60|
                          DCD      0x40023808
                  |L6.64|
                          DCD      0x40023c00

                          AREA ||i.HAL_RCC_GetHCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetHCLKFreq PROC
;;;914      */
;;;915    uint32_t HAL_RCC_GetHCLKFreq(void)
000000  4801              LDR      r0,|L7.8|
;;;916    {
;;;917      return SystemCoreClock;
000002  6800              LDR      r0,[r0,#0]  ; SystemCoreClock
;;;918    }
000004  4770              BX       lr
;;;919    
                          ENDP

000006  0000              DCW      0x0000
                  |L7.8|
                          DCD      SystemCoreClock

                          AREA ||i.HAL_RCC_GetOscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetOscConfig PROC
;;;950      */
;;;951    __weak void HAL_RCC_GetOscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  210f              MOVS     r1,#0xf
;;;952    {
;;;953      /* Set all possible values for the Oscillator type parameter ---------------*/
;;;954      RCC_OscInitStruct->OscillatorType = RCC_OSCILLATORTYPE_HSE | RCC_OSCILLATORTYPE_HSI | RCC_OSCILLATORTYPE_LSE | RCC_OSCILLATORTYPE_LSI;
000002  6001              STR      r1,[r0,#0]
;;;955    
;;;956      /* Get the HSE configuration -----------------------------------------------*/
;;;957      if((RCC->CR &RCC_CR_HSEBYP) == RCC_CR_HSEBYP)
000004  493a              LDR      r1,|L8.240|
000006  6809              LDR      r1,[r1,#0]
000008  f4012180          AND      r1,r1,#0x40000
00000c  f5b12f80          CMP      r1,#0x40000
000010  d103              BNE      |L8.26|
;;;958      {
;;;959        RCC_OscInitStruct->HSEState = RCC_HSE_BYPASS;
000012  f44f21a0          MOV      r1,#0x50000
000016  6041              STR      r1,[r0,#4]
000018  e00c              B        |L8.52|
                  |L8.26|
;;;960      }
;;;961      else if((RCC->CR &RCC_CR_HSEON) == RCC_CR_HSEON)
00001a  4935              LDR      r1,|L8.240|
00001c  6809              LDR      r1,[r1,#0]
00001e  f4013180          AND      r1,r1,#0x10000
000022  f5b13f80          CMP      r1,#0x10000
000026  d103              BNE      |L8.48|
;;;962      {
;;;963        RCC_OscInitStruct->HSEState = RCC_HSE_ON;
000028  f44f3180          MOV      r1,#0x10000
00002c  6041              STR      r1,[r0,#4]
00002e  e001              B        |L8.52|
                  |L8.48|
;;;964      }
;;;965      else
;;;966      {
;;;967        RCC_OscInitStruct->HSEState = RCC_HSE_OFF;
000030  2100              MOVS     r1,#0
000032  6041              STR      r1,[r0,#4]
                  |L8.52|
;;;968      }
;;;969    
;;;970      /* Get the HSI configuration -----------------------------------------------*/
;;;971      if((RCC->CR &RCC_CR_HSION) == RCC_CR_HSION)
000034  492e              LDR      r1,|L8.240|
000036  6809              LDR      r1,[r1,#0]
000038  f0010101          AND      r1,r1,#1
00003c  b111              CBZ      r1,|L8.68|
;;;972      {
;;;973        RCC_OscInitStruct->HSIState = RCC_HSI_ON;
00003e  2101              MOVS     r1,#1
000040  60c1              STR      r1,[r0,#0xc]
000042  e001              B        |L8.72|
                  |L8.68|
;;;974      }
;;;975      else
;;;976      {
;;;977        RCC_OscInitStruct->HSIState = RCC_HSI_OFF;
000044  2100              MOVS     r1,#0
000046  60c1              STR      r1,[r0,#0xc]
                  |L8.72|
;;;978      }
;;;979    
;;;980      RCC_OscInitStruct->HSICalibrationValue = (uint32_t)((RCC->CR &RCC_CR_HSITRIM) >> RCC_CR_HSITRIM_Pos);
000048  4929              LDR      r1,|L8.240|
00004a  6809              LDR      r1,[r1,#0]
00004c  f3c101c4          UBFX     r1,r1,#3,#5
000050  6101              STR      r1,[r0,#0x10]
;;;981    
;;;982      /* Get the LSE configuration -----------------------------------------------*/
;;;983      if((RCC->BDCR &RCC_BDCR_LSEBYP) == RCC_BDCR_LSEBYP)
000052  4927              LDR      r1,|L8.240|
000054  3170              ADDS     r1,r1,#0x70
000056  6809              LDR      r1,[r1,#0]
000058  f0010104          AND      r1,r1,#4
00005c  2904              CMP      r1,#4
00005e  d102              BNE      |L8.102|
;;;984      {
;;;985        RCC_OscInitStruct->LSEState = RCC_LSE_BYPASS;
000060  2105              MOVS     r1,#5
000062  6081              STR      r1,[r0,#8]
000064  e00a              B        |L8.124|
                  |L8.102|
;;;986      }
;;;987      else if((RCC->BDCR &RCC_BDCR_LSEON) == RCC_BDCR_LSEON)
000066  4922              LDR      r1,|L8.240|
000068  3170              ADDS     r1,r1,#0x70
00006a  6809              LDR      r1,[r1,#0]
00006c  f0010101          AND      r1,r1,#1
000070  b111              CBZ      r1,|L8.120|
;;;988      {
;;;989        RCC_OscInitStruct->LSEState = RCC_LSE_ON;
000072  2101              MOVS     r1,#1
000074  6081              STR      r1,[r0,#8]
000076  e001              B        |L8.124|
                  |L8.120|
;;;990      }
;;;991      else
;;;992      {
;;;993        RCC_OscInitStruct->LSEState = RCC_LSE_OFF;
000078  2100              MOVS     r1,#0
00007a  6081              STR      r1,[r0,#8]
                  |L8.124|
;;;994      }
;;;995    
;;;996      /* Get the LSI configuration -----------------------------------------------*/
;;;997      if((RCC->CSR &RCC_CSR_LSION) == RCC_CSR_LSION)
00007c  491c              LDR      r1,|L8.240|
00007e  3174              ADDS     r1,r1,#0x74
000080  6809              LDR      r1,[r1,#0]
000082  f0010101          AND      r1,r1,#1
000086  b111              CBZ      r1,|L8.142|
;;;998      {
;;;999        RCC_OscInitStruct->LSIState = RCC_LSI_ON;
000088  2101              MOVS     r1,#1
00008a  6141              STR      r1,[r0,#0x14]
00008c  e001              B        |L8.146|
                  |L8.142|
;;;1000     }
;;;1001     else
;;;1002     {
;;;1003       RCC_OscInitStruct->LSIState = RCC_LSI_OFF;
00008e  2100              MOVS     r1,#0
000090  6141              STR      r1,[r0,#0x14]
                  |L8.146|
;;;1004     }
;;;1005   
;;;1006     /* Get the PLL configuration -----------------------------------------------*/
;;;1007     if((RCC->CR &RCC_CR_PLLON) == RCC_CR_PLLON)
000092  4917              LDR      r1,|L8.240|
000094  6809              LDR      r1,[r1,#0]
000096  f0017180          AND      r1,r1,#0x1000000
00009a  f1b17f80          CMP      r1,#0x1000000
00009e  d102              BNE      |L8.166|
;;;1008     {
;;;1009       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_ON;
0000a0  2102              MOVS     r1,#2
0000a2  6181              STR      r1,[r0,#0x18]
0000a4  e001              B        |L8.170|
                  |L8.166|
;;;1010     }
;;;1011     else
;;;1012     {
;;;1013       RCC_OscInitStruct->PLL.PLLState = RCC_PLL_OFF;
0000a6  2101              MOVS     r1,#1
0000a8  6181              STR      r1,[r0,#0x18]
                  |L8.170|
;;;1014     }
;;;1015     RCC_OscInitStruct->PLL.PLLSource = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
0000aa  4911              LDR      r1,|L8.240|
0000ac  1d09              ADDS     r1,r1,#4
0000ae  6809              LDR      r1,[r1,#0]
0000b0  f4010280          AND      r2,r1,#0x400000
0000b4  61c2              STR      r2,[r0,#0x1c]
;;;1016     RCC_OscInitStruct->PLL.PLLM = (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM);
0000b6  490e              LDR      r1,|L8.240|
0000b8  1d09              ADDS     r1,r1,#4
0000ba  6809              LDR      r1,[r1,#0]
0000bc  f001023f          AND      r2,r1,#0x3f
0000c0  6202              STR      r2,[r0,#0x20]
;;;1017     RCC_OscInitStruct->PLL.PLLN = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
0000c2  490b              LDR      r1,|L8.240|
0000c4  1d09              ADDS     r1,r1,#4
0000c6  6809              LDR      r1,[r1,#0]
0000c8  f3c11288          UBFX     r2,r1,#6,#9
0000cc  6242              STR      r2,[r0,#0x24]
;;;1018     RCC_OscInitStruct->PLL.PLLP = (uint32_t)((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) + RCC_PLLCFGR_PLLP_0) << 1U) >> RCC_PLLCFGR_PLLP_Pos);
0000ce  4908              LDR      r1,|L8.240|
0000d0  1d09              ADDS     r1,r1,#4
0000d2  6809              LDR      r1,[r1,#0]
0000d4  f4013140          AND      r1,r1,#0x30000
0000d8  f5013180          ADD      r1,r1,#0x10000
0000dc  0bca              LSRS     r2,r1,#15
0000de  6282              STR      r2,[r0,#0x28]
;;;1019     RCC_OscInitStruct->PLL.PLLQ = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos);
0000e0  4903              LDR      r1,|L8.240|
0000e2  1d09              ADDS     r1,r1,#4
0000e4  6809              LDR      r1,[r1,#0]
0000e6  f3c16203          UBFX     r2,r1,#24,#4
0000ea  62c2              STR      r2,[r0,#0x2c]
;;;1020   }
0000ec  4770              BX       lr
;;;1021   
                          ENDP

0000ee  0000              DCW      0x0000
                  |L8.240|
                          DCD      0x40023800

                          AREA ||i.HAL_RCC_GetPCLK1Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK1Freq PROC
;;;925      */
;;;926    uint32_t HAL_RCC_GetPCLK1Freq(void)
000000  b500              PUSH     {lr}
;;;927    {
;;;928      /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
;;;929      return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L9.24|
000008  6809              LDR      r1,[r1,#0]
00000a  f3c12182          UBFX     r1,r1,#10,#3
00000e  4a03              LDR      r2,|L9.28|
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;930    }
000014  bd00              POP      {pc}
;;;931    
                          ENDP

000016  0000              DCW      0x0000
                  |L9.24|
                          DCD      0x40023808
                  |L9.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetPCLK2Freq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetPCLK2Freq PROC
;;;937      */
;;;938    uint32_t HAL_RCC_GetPCLK2Freq(void)
000000  b500              PUSH     {lr}
;;;939    {
;;;940      /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
;;;941      return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
000002  f7fffffe          BL       HAL_RCC_GetHCLKFreq
000006  4904              LDR      r1,|L10.24|
000008  6809              LDR      r1,[r1,#0]
00000a  f3c13142          UBFX     r1,r1,#13,#3
00000e  4a03              LDR      r2,|L10.28|
000010  5c51              LDRB     r1,[r2,r1]
000012  40c8              LSRS     r0,r0,r1
;;;942    }
000014  bd00              POP      {pc}
;;;943    
                          ENDP

000016  0000              DCW      0x0000
                  |L10.24|
                          DCD      0x40023808
                  |L10.28|
                          DCD      APBPrescTable

                          AREA ||i.HAL_RCC_GetSysClockFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCC_GetSysClockFreq PROC
;;;858      */
;;;859    __weak uint32_t HAL_RCC_GetSysClockFreq(void)
000000  e92d47f0          PUSH     {r4-r10,lr}
;;;860    {
;;;861      uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
000004  2400              MOVS     r4,#0
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
;;;862      uint32_t sysclockfreq = 0U;
00000a  46a1              MOV      r9,r4
;;;863    
;;;864      /* Get SYSCLK source -------------------------------------------------------*/
;;;865      switch (RCC->CFGR & RCC_CFGR_SWS)
00000c  4825              LDR      r0,|L11.164|
00000e  6800              LDR      r0,[r0,#0]
000010  f000000c          AND      r0,r0,#0xc
000014  b120              CBZ      r0,|L11.32|
000016  2804              CMP      r0,#4
000018  d005              BEQ      |L11.38|
00001a  2808              CMP      r0,#8
00001c  d13a              BNE      |L11.148|
00001e  e005              B        |L11.44|
                  |L11.32|
;;;866      {
;;;867        case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
;;;868        {
;;;869          sysclockfreq = HSI_VALUE;
000020  f8df9084          LDR      r9,|L11.168|
;;;870           break;
000024  e039              B        |L11.154|
                  |L11.38|
;;;871        }
;;;872        case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
;;;873        {
;;;874          sysclockfreq = HSE_VALUE;
000026  f8df9084          LDR      r9,|L11.172|
;;;875          break;
00002a  e036              B        |L11.154|
                  |L11.44|
;;;876        }
;;;877        case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
;;;878        {
;;;879          /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
;;;880          SYSCLK = PLL_VCO / PLLP */
;;;881          pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
00002c  481d              LDR      r0,|L11.164|
00002e  1f00              SUBS     r0,r0,#4
000030  6800              LDR      r0,[r0,#0]
000032  f000043f          AND      r4,r0,#0x3f
;;;882          if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
000036  481b              LDR      r0,|L11.164|
000038  1f00              SUBS     r0,r0,#4
00003a  6800              LDR      r0,[r0,#0]
00003c  f4000080          AND      r0,r0,#0x400000
000040  b178              CBZ      r0,|L11.98|
;;;883          {
;;;884            /* HSE used as PLL clock source */
;;;885            pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
000042  481a              LDR      r0,|L11.172|
000044  4917              LDR      r1,|L11.164|
000046  1f09              SUBS     r1,r1,#4
000048  6809              LDR      r1,[r1,#0]
00004a  f3c11188          UBFX     r1,r1,#6,#9
00004e  fba07001          UMULL    r7,r0,r0,r1
000052  4601              MOV      r1,r0
000054  4622              MOV      r2,r4
000056  2300              MOVS     r3,#0
000058  4638              MOV      r0,r7
00005a  f7fffffe          BL       __aeabi_uldivmod
00005e  4605              MOV      r5,r0
000060  e00e              B        |L11.128|
                  |L11.98|
;;;886          }
;;;887          else
;;;888          {
;;;889            /* HSI used as PLL clock source */
;;;890            pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
000062  4811              LDR      r0,|L11.168|
000064  490f              LDR      r1,|L11.164|
000066  1f09              SUBS     r1,r1,#4
000068  6809              LDR      r1,[r1,#0]
00006a  f3c11188          UBFX     r1,r1,#6,#9
00006e  fba07001          UMULL    r7,r0,r0,r1
000072  4601              MOV      r1,r0
000074  4622              MOV      r2,r4
000076  2300              MOVS     r3,#0
000078  4638              MOV      r0,r7
00007a  f7fffffe          BL       __aeabi_uldivmod
00007e  4605              MOV      r5,r0
                  |L11.128|
;;;891          }
;;;892          pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
000080  4808              LDR      r0,|L11.164|
000082  1f00              SUBS     r0,r0,#4
000084  6800              LDR      r0,[r0,#0]
000086  f3c04001          UBFX     r0,r0,#16,#2
00008a  1c40              ADDS     r0,r0,#1
00008c  0046              LSLS     r6,r0,#1
;;;893    
;;;894          sysclockfreq = pllvco/pllp;
00008e  fbb5f9f6          UDIV     r9,r5,r6
;;;895          break;
000092  e002              B        |L11.154|
                  |L11.148|
;;;896        }
;;;897        default:
;;;898        {
;;;899          sysclockfreq = HSI_VALUE;
000094  f8df9010          LDR      r9,|L11.168|
;;;900          break;
000098  bf00              NOP      
                  |L11.154|
00009a  bf00              NOP                            ;870
;;;901        }
;;;902      }
;;;903      return sysclockfreq;
00009c  4648              MOV      r0,r9
;;;904    }
00009e  e8bd87f0          POP      {r4-r10,pc}
;;;905    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L11.164|
                          DCD      0x40023808
                  |L11.168|
                          DCD      0x00f42400
                  |L11.172|
                          DCD      0x007a1200

                          AREA ||i.HAL_RCC_MCOConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_MCOConfig PROC
;;;748      */
;;;749    void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
000000  b570              PUSH     {r4-r6,lr}
;;;750    {
000002  b086              SUB      sp,sp,#0x18
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
;;;751      GPIO_InitTypeDef GPIO_InitStruct;
;;;752      /* Check the parameters */
;;;753      assert_param(IS_RCC_MCO(RCC_MCOx));
;;;754      assert_param(IS_RCC_MCODIV(RCC_MCODiv));
;;;755      /* RCC_MCO1 */
;;;756      if(RCC_MCOx == RCC_MCO1)
00000a  bb46              CBNZ     r6,|L12.94|
;;;757      {
;;;758        assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));
;;;759    
;;;760        /* MCO1 Clock Enable */
;;;761        __MCO1_CLK_ENABLE();
00000c  bf00              NOP      
00000e  2000              MOVS     r0,#0
000010  9000              STR      r0,[sp,#0]
000012  4828              LDR      r0,|L12.180|
000014  6800              LDR      r0,[r0,#0]
000016  f0400001          ORR      r0,r0,#1
00001a  4926              LDR      r1,|L12.180|
00001c  6008              STR      r0,[r1,#0]
00001e  4608              MOV      r0,r1
000020  6800              LDR      r0,[r0,#0]
000022  f0000001          AND      r0,r0,#1
000026  9000              STR      r0,[sp,#0]
000028  bf00              NOP      
00002a  bf00              NOP      
;;;762    
;;;763        /* Configure the MCO1 pin in alternate function mode */
;;;764        GPIO_InitStruct.Pin = MCO1_PIN;
00002c  1588              ASRS     r0,r1,#22
00002e  9001              STR      r0,[sp,#4]
;;;765        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000030  2002              MOVS     r0,#2
000032  9002              STR      r0,[sp,#8]
;;;766        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
000034  2003              MOVS     r0,#3
000036  9004              STR      r0,[sp,#0x10]
;;;767        GPIO_InitStruct.Pull = GPIO_NOPULL;
000038  2000              MOVS     r0,#0
00003a  9003              STR      r0,[sp,#0xc]
;;;768        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
00003c  9005              STR      r0,[sp,#0x14]
;;;769        HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
00003e  a901              ADD      r1,sp,#4
000040  481d              LDR      r0,|L12.184|
000042  f7fffffe          BL       HAL_GPIO_Init
;;;770    
;;;771        /* Mask MCO1 and MCO1PRE[2:0] bits then Select MCO1 clock source and prescaler */
;;;772        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
000046  481b              LDR      r0,|L12.180|
000048  3828              SUBS     r0,r0,#0x28
00004a  6800              LDR      r0,[r0,#0]
00004c  f02060ec          BIC      r0,r0,#0x7600000
000050  ea440105          ORR      r1,r4,r5
000054  4308              ORRS     r0,r0,r1
000056  4917              LDR      r1,|L12.180|
000058  3928              SUBS     r1,r1,#0x28
00005a  6008              STR      r0,[r1,#0]
00005c  e027              B        |L12.174|
                  |L12.94|
;;;773    
;;;774       /* This RCC MCO1 enable feature is available only on STM32F410xx devices */
;;;775    #if defined(RCC_CFGR_MCO1EN)
;;;776        __HAL_RCC_MCO1_ENABLE();
;;;777    #endif /* RCC_CFGR_MCO1EN */
;;;778      }
;;;779    #if defined(RCC_CFGR_MCO2)
;;;780      else
;;;781      {
;;;782        assert_param(IS_RCC_MCO2SOURCE(RCC_MCOSource));
;;;783    
;;;784        /* MCO2 Clock Enable */
;;;785        __MCO2_CLK_ENABLE();
00005e  bf00              NOP      
000060  2000              MOVS     r0,#0
000062  9000              STR      r0,[sp,#0]
000064  4813              LDR      r0,|L12.180|
000066  6800              LDR      r0,[r0,#0]
000068  f0400004          ORR      r0,r0,#4
00006c  4911              LDR      r1,|L12.180|
00006e  6008              STR      r0,[r1,#0]
000070  4608              MOV      r0,r1
000072  6800              LDR      r0,[r0,#0]
000074  f0000004          AND      r0,r0,#4
000078  9000              STR      r0,[sp,#0]
00007a  bf00              NOP      
00007c  bf00              NOP      
;;;786    
;;;787        /* Configure the MCO2 pin in alternate function mode */
;;;788        GPIO_InitStruct.Pin = MCO2_PIN;
00007e  1548              ASRS     r0,r1,#21
000080  9001              STR      r0,[sp,#4]
;;;789        GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
000082  2002              MOVS     r0,#2
000084  9002              STR      r0,[sp,#8]
;;;790        GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
000086  2003              MOVS     r0,#3
000088  9004              STR      r0,[sp,#0x10]
;;;791        GPIO_InitStruct.Pull = GPIO_NOPULL;
00008a  2000              MOVS     r0,#0
00008c  9003              STR      r0,[sp,#0xc]
;;;792        GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
00008e  9005              STR      r0,[sp,#0x14]
;;;793        HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
000090  a901              ADD      r1,sp,#4
000092  480a              LDR      r0,|L12.188|
000094  f7fffffe          BL       HAL_GPIO_Init
;;;794    
;;;795        /* Mask MCO2 and MCO2PRE[2:0] bits then Select MCO2 clock source and prescaler */
;;;796        MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 3U)));
000098  4806              LDR      r0,|L12.180|
00009a  3828              SUBS     r0,r0,#0x28
00009c  6800              LDR      r0,[r0,#0]
00009e  f0204078          BIC      r0,r0,#0xf8000000
0000a2  ea4401c5          ORR      r1,r4,r5,LSL #3
0000a6  4308              ORRS     r0,r0,r1
0000a8  4902              LDR      r1,|L12.180|
0000aa  3928              SUBS     r1,r1,#0x28
0000ac  6008              STR      r0,[r1,#0]
                  |L12.174|
;;;797    
;;;798       /* This RCC MCO2 enable feature is available only on STM32F410Rx devices */
;;;799    #if defined(RCC_CFGR_MCO2EN)
;;;800        __HAL_RCC_MCO2_ENABLE();
;;;801    #endif /* RCC_CFGR_MCO2EN */
;;;802      }
;;;803    #endif /* RCC_CFGR_MCO2 */
;;;804    }
0000ae  b006              ADD      sp,sp,#0x18
0000b0  bd70              POP      {r4-r6,pc}
;;;805    
                          ENDP

0000b2  0000              DCW      0x0000
                  |L12.180|
                          DCD      0x40023830
                  |L12.184|
                          DCD      0x40020000
                  |L12.188|
                          DCD      0x40020800

                          AREA ||i.HAL_RCC_NMI_IRQHandler||, CODE, READONLY, ALIGN=2

                  HAL_RCC_NMI_IRQHandler PROC
;;;1055     */
;;;1056   void HAL_RCC_NMI_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;1057   {
;;;1058     /* Check RCC CSSF flag  */
;;;1059     if(__HAL_RCC_GET_IT(RCC_IT_CSS))
000002  4806              LDR      r0,|L13.28|
000004  6800              LDR      r0,[r0,#0]
000006  f0000080          AND      r0,r0,#0x80
00000a  2880              CMP      r0,#0x80
00000c  d105              BNE      |L13.26|
;;;1060     {
;;;1061       /* RCC Clock Security System interrupt user callback */
;;;1062       HAL_RCC_CSSCallback();
00000e  f7fffffe          BL       HAL_RCC_CSSCallback
;;;1063   
;;;1064       /* Clear RCC CSS pending bit */
;;;1065       __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
000012  2080              MOVS     r0,#0x80
000014  4901              LDR      r1,|L13.28|
000016  1c89              ADDS     r1,r1,#2
000018  7008              STRB     r0,[r1,#0]
                  |L13.26|
;;;1066     }
;;;1067   }
00001a  bd10              POP      {r4,pc}
;;;1068   
                          ENDP

                  |L13.28|
                          DCD      0x4002380c

                          AREA ||i.HAL_RCC_OscConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCC_OscConfig PROC
;;;220      */
;;;221    __weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
000000  b5f8              PUSH     {r3-r7,lr}
;;;222    {
000002  4604              MOV      r4,r0
;;;223      uint32_t tickstart;
;;;224    
;;;225      /* Check Null pointer */
;;;226      if(RCC_OscInitStruct == NULL)
000004  b90c              CBNZ     r4,|L14.10|
;;;227      {
;;;228        return HAL_ERROR;
000006  2001              MOVS     r0,#1
                  |L14.8|
;;;229      }
;;;230    
;;;231      /* Check the parameters */
;;;232      assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
;;;233      /*------------------------------- HSE Configuration ------------------------*/
;;;234      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
;;;235      {
;;;236        /* Check the parameters */
;;;237        assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
;;;238        /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
;;;239        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
;;;240          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
;;;241        {
;;;242          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
;;;243          {
;;;244            return HAL_ERROR;
;;;245          }
;;;246        }
;;;247        else
;;;248        {
;;;249          /* Set the new HSE configuration ---------------------------------------*/
;;;250          __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
;;;251    
;;;252          /* Check the HSE State */
;;;253          if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
;;;254          {
;;;255            /* Get Start Tick */
;;;256            tickstart = HAL_GetTick();
;;;257    
;;;258            /* Wait till HSE is ready */
;;;259            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
;;;260            {
;;;261              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;262              {
;;;263                return HAL_TIMEOUT;
;;;264              }
;;;265            }
;;;266          }
;;;267          else
;;;268          {
;;;269            /* Get Start Tick */
;;;270            tickstart = HAL_GetTick();
;;;271    
;;;272            /* Wait till HSE is bypassed or disabled */
;;;273            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
;;;274            {
;;;275              if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
;;;276              {
;;;277                return HAL_TIMEOUT;
;;;278              }
;;;279            }
;;;280          }
;;;281        }
;;;282      }
;;;283      /*----------------------------- HSI Configuration --------------------------*/
;;;284      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
;;;285      {
;;;286        /* Check the parameters */
;;;287        assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
;;;288        assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
;;;289    
;;;290        /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
;;;291        if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
;;;292          ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
;;;293        {
;;;294          /* When HSI is used as system clock it will not disabled */
;;;295          if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
;;;296          {
;;;297            return HAL_ERROR;
;;;298          }
;;;299          /* Otherwise, just the calibration is allowed */
;;;300          else
;;;301          {
;;;302            /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
;;;303            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;304          }
;;;305        }
;;;306        else
;;;307        {
;;;308          /* Check the HSI State */
;;;309          if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
;;;310          {
;;;311            /* Enable the Internal High Speed oscillator (HSI). */
;;;312            __HAL_RCC_HSI_ENABLE();
;;;313    
;;;314            /* Get Start Tick*/
;;;315            tickstart = HAL_GetTick();
;;;316    
;;;317            /* Wait till HSI is ready */
;;;318            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
;;;319            {
;;;320              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;321              {
;;;322                return HAL_TIMEOUT;
;;;323              }
;;;324            }
;;;325    
;;;326            /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
;;;327            __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
;;;328          }
;;;329          else
;;;330          {
;;;331            /* Disable the Internal High Speed oscillator (HSI). */
;;;332            __HAL_RCC_HSI_DISABLE();
;;;333    
;;;334            /* Get Start Tick*/
;;;335            tickstart = HAL_GetTick();
;;;336    
;;;337            /* Wait till HSI is ready */
;;;338            while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
;;;339            {
;;;340              if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
;;;341              {
;;;342                return HAL_TIMEOUT;
;;;343              }
;;;344            }
;;;345          }
;;;346        }
;;;347      }
;;;348      /*------------------------------ LSI Configuration -------------------------*/
;;;349      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
;;;350      {
;;;351        /* Check the parameters */
;;;352        assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
;;;353    
;;;354        /* Check the LSI State */
;;;355        if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
;;;356        {
;;;357          /* Enable the Internal Low Speed oscillator (LSI). */
;;;358          __HAL_RCC_LSI_ENABLE();
;;;359    
;;;360          /* Get Start Tick*/
;;;361          tickstart = HAL_GetTick();
;;;362    
;;;363          /* Wait till LSI is ready */
;;;364          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
;;;365          {
;;;366            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;367            {
;;;368              return HAL_TIMEOUT;
;;;369            }
;;;370          }
;;;371        }
;;;372        else
;;;373        {
;;;374          /* Disable the Internal Low Speed oscillator (LSI). */
;;;375          __HAL_RCC_LSI_DISABLE();
;;;376    
;;;377          /* Get Start Tick */
;;;378          tickstart = HAL_GetTick();
;;;379    
;;;380          /* Wait till LSI is ready */
;;;381          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
;;;382          {
;;;383            if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
;;;384            {
;;;385              return HAL_TIMEOUT;
;;;386            }
;;;387          }
;;;388        }
;;;389      }
;;;390      /*------------------------------ LSE Configuration -------------------------*/
;;;391      if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
;;;392      {
;;;393        FlagStatus       pwrclkchanged = RESET;
;;;394    
;;;395        /* Check the parameters */
;;;396        assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
;;;397    
;;;398        /* Update LSE configuration in Backup Domain control register    */
;;;399        /* Requires to enable write access to Backup Domain of necessary */
;;;400        if(__HAL_RCC_PWR_IS_CLK_DISABLED())
;;;401        {
;;;402          __HAL_RCC_PWR_CLK_ENABLE();
;;;403          pwrclkchanged = SET;
;;;404        }
;;;405    
;;;406        if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;407        {
;;;408          /* Enable write access to Backup domain */
;;;409          SET_BIT(PWR->CR, PWR_CR_DBP);
;;;410    
;;;411          /* Wait for Backup domain Write protection disable */
;;;412          tickstart = HAL_GetTick();
;;;413    
;;;414          while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
;;;415          {
;;;416            if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
;;;417            {
;;;418              return HAL_TIMEOUT;
;;;419            }
;;;420          }
;;;421        }
;;;422    
;;;423        /* Set the new LSE configuration -----------------------------------------*/
;;;424        __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
;;;425        /* Check the LSE State */
;;;426        if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
;;;427        {
;;;428          /* Get Start Tick*/
;;;429          tickstart = HAL_GetTick();
;;;430    
;;;431          /* Wait till LSE is ready */
;;;432          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;433          {
;;;434            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;435            {
;;;436              return HAL_TIMEOUT;
;;;437            }
;;;438          }
;;;439        }
;;;440        else
;;;441        {
;;;442          /* Get Start Tick */
;;;443          tickstart = HAL_GetTick();
;;;444    
;;;445          /* Wait till LSE is ready */
;;;446          while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
;;;447          {
;;;448            if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;449            {
;;;450              return HAL_TIMEOUT;
;;;451            }
;;;452          }
;;;453        }
;;;454    
;;;455        /* Restore clock configuration if changed */
;;;456        if(pwrclkchanged == SET)
;;;457        {
;;;458          __HAL_RCC_PWR_CLK_DISABLE();
;;;459        }
;;;460      }
;;;461      /*-------------------------------- PLL Configuration -----------------------*/
;;;462      /* Check the parameters */
;;;463      assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
;;;464      if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
;;;465      {
;;;466        /* Check if the PLL is used as system clock or not */
;;;467        if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
;;;468        {
;;;469          if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
;;;470          {
;;;471            /* Check the parameters */
;;;472            assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
;;;473            assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
;;;474            assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
;;;475            assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
;;;476            assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
;;;477    
;;;478            /* Disable the main PLL. */
;;;479            __HAL_RCC_PLL_DISABLE();
;;;480    
;;;481            /* Get Start Tick */
;;;482            tickstart = HAL_GetTick();
;;;483    
;;;484            /* Wait till PLL is ready */
;;;485            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;486            {
;;;487              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;488              {
;;;489                return HAL_TIMEOUT;
;;;490              }
;;;491            }
;;;492    
;;;493            /* Configure the main PLL clock source, multiplication and division factors. */
;;;494            WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
;;;495                                     RCC_OscInitStruct->PLL.PLLM                                                 | \
;;;496                                     (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
;;;497                                     (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
;;;498                                     (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
;;;499            /* Enable the main PLL. */
;;;500            __HAL_RCC_PLL_ENABLE();
;;;501    
;;;502            /* Get Start Tick */
;;;503            tickstart = HAL_GetTick();
;;;504    
;;;505            /* Wait till PLL is ready */
;;;506            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
;;;507            {
;;;508              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;509              {
;;;510                return HAL_TIMEOUT;
;;;511              }
;;;512            }
;;;513          }
;;;514          else
;;;515          {
;;;516            /* Disable the main PLL. */
;;;517            __HAL_RCC_PLL_DISABLE();
;;;518    
;;;519            /* Get Start Tick */
;;;520            tickstart = HAL_GetTick();
;;;521    
;;;522            /* Wait till PLL is ready */
;;;523            while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
;;;524            {
;;;525              if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
;;;526              {
;;;527                return HAL_TIMEOUT;
;;;528              }
;;;529            }
;;;530          }
;;;531        }
;;;532        else
;;;533        {
;;;534          return HAL_ERROR;
;;;535        }
;;;536      }
;;;537      return HAL_OK;
;;;538    }
000008  bdf8              POP      {r3-r7,pc}
                  |L14.10|
00000a  7820              LDRB     r0,[r4,#0]            ;234
00000c  f0000001          AND      r0,r0,#1              ;234
000010  2800              CMP      r0,#0                 ;234
000012  d074              BEQ      |L14.254|
000014  48f9              LDR      r0,|L14.1020|
000016  6800              LDR      r0,[r0,#0]            ;239
000018  f000000c          AND      r0,r0,#0xc            ;239
00001c  2804              CMP      r0,#4                 ;239
00001e  d00d              BEQ      |L14.60|
000020  48f6              LDR      r0,|L14.1020|
000022  6800              LDR      r0,[r0,#0]            ;240
000024  f000000c          AND      r0,r0,#0xc            ;240
000028  2808              CMP      r0,#8                 ;240
00002a  d113              BNE      |L14.84|
00002c  48f3              LDR      r0,|L14.1020|
00002e  1f00              SUBS     r0,r0,#4              ;240
000030  6800              LDR      r0,[r0,#0]            ;240
000032  f4000080          AND      r0,r0,#0x400000       ;240
000036  f5b00f80          CMP      r0,#0x400000          ;240
00003a  d10b              BNE      |L14.84|
                  |L14.60|
00003c  48ef              LDR      r0,|L14.1020|
00003e  3808              SUBS     r0,r0,#8              ;242
000040  6800              LDR      r0,[r0,#0]            ;242
000042  f3c04040          UBFX     r0,r0,#17,#1          ;242
000046  2800              CMP      r0,#0                 ;242
000048  d059              BEQ      |L14.254|
00004a  6860              LDR      r0,[r4,#4]            ;242
00004c  2800              CMP      r0,#0                 ;242
00004e  d156              BNE      |L14.254|
000050  2001              MOVS     r0,#1                 ;244
000052  e7d9              B        |L14.8|
                  |L14.84|
000054  bf00              NOP                            ;250
000056  6860              LDR      r0,[r4,#4]            ;250
000058  f5b03f80          CMP      r0,#0x10000           ;250
00005c  d108              BNE      |L14.112|
00005e  48e7              LDR      r0,|L14.1020|
000060  3808              SUBS     r0,r0,#8              ;250
000062  6800              LDR      r0,[r0,#0]            ;250
000064  f4403080          ORR      r0,r0,#0x10000        ;250
000068  49e4              LDR      r1,|L14.1020|
00006a  3908              SUBS     r1,r1,#8              ;250
00006c  6008              STR      r0,[r1,#0]            ;250
00006e  e01e              B        |L14.174|
                  |L14.112|
000070  6860              LDR      r0,[r4,#4]            ;250
000072  f5b02fa0          CMP      r0,#0x50000           ;250
000076  d10d              BNE      |L14.148|
000078  48e0              LDR      r0,|L14.1020|
00007a  3808              SUBS     r0,r0,#8              ;250
00007c  6800              LDR      r0,[r0,#0]            ;250
00007e  f4402080          ORR      r0,r0,#0x40000        ;250
000082  49de              LDR      r1,|L14.1020|
000084  3908              SUBS     r1,r1,#8              ;250
000086  6008              STR      r0,[r1,#0]            ;250
000088  4608              MOV      r0,r1                 ;250
00008a  6800              LDR      r0,[r0,#0]            ;250
00008c  f4403080          ORR      r0,r0,#0x10000        ;250
000090  6008              STR      r0,[r1,#0]            ;250
000092  e00c              B        |L14.174|
                  |L14.148|
000094  48d9              LDR      r0,|L14.1020|
000096  3808              SUBS     r0,r0,#8              ;250
000098  6800              LDR      r0,[r0,#0]            ;250
00009a  f4203080          BIC      r0,r0,#0x10000        ;250
00009e  49d7              LDR      r1,|L14.1020|
0000a0  3908              SUBS     r1,r1,#8              ;250
0000a2  6008              STR      r0,[r1,#0]            ;250
0000a4  4608              MOV      r0,r1                 ;250
0000a6  6800              LDR      r0,[r0,#0]            ;250
0000a8  f4202080          BIC      r0,r0,#0x40000        ;250
0000ac  6008              STR      r0,[r1,#0]            ;250
                  |L14.174|
0000ae  bf00              NOP                            ;250
0000b0  6860              LDR      r0,[r4,#4]            ;253
0000b2  b190              CBZ      r0,|L14.218|
0000b4  f7fffffe          BL       HAL_GetTick
0000b8  4605              MOV      r5,r0                 ;256
0000ba  e006              B        |L14.202|
                  |L14.188|
0000bc  f7fffffe          BL       HAL_GetTick
0000c0  1b40              SUBS     r0,r0,r5              ;261
0000c2  2864              CMP      r0,#0x64              ;261
0000c4  d901              BLS      |L14.202|
0000c6  2003              MOVS     r0,#3                 ;263
0000c8  e79e              B        |L14.8|
                  |L14.202|
0000ca  48cc              LDR      r0,|L14.1020|
0000cc  3808              SUBS     r0,r0,#8              ;259
0000ce  6800              LDR      r0,[r0,#0]            ;259
0000d0  f3c04040          UBFX     r0,r0,#17,#1          ;259
0000d4  2800              CMP      r0,#0                 ;259
0000d6  d0f1              BEQ      |L14.188|
0000d8  e011              B        |L14.254|
                  |L14.218|
0000da  f7fffffe          BL       HAL_GetTick
0000de  4605              MOV      r5,r0                 ;270
0000e0  e006              B        |L14.240|
                  |L14.226|
0000e2  f7fffffe          BL       HAL_GetTick
0000e6  1b40              SUBS     r0,r0,r5              ;275
0000e8  2864              CMP      r0,#0x64              ;275
0000ea  d901              BLS      |L14.240|
0000ec  2003              MOVS     r0,#3                 ;277
0000ee  e78b              B        |L14.8|
                  |L14.240|
0000f0  48c2              LDR      r0,|L14.1020|
0000f2  3808              SUBS     r0,r0,#8              ;273
0000f4  6800              LDR      r0,[r0,#0]            ;273
0000f6  f3c04040          UBFX     r0,r0,#17,#1          ;273
0000fa  2800              CMP      r0,#0                 ;273
0000fc  d1f1              BNE      |L14.226|
                  |L14.254|
0000fe  7820              LDRB     r0,[r4,#0]            ;284
000100  f0000002          AND      r0,r0,#2              ;284
000104  2802              CMP      r0,#2                 ;284
000106  d15f              BNE      |L14.456|
000108  48bc              LDR      r0,|L14.1020|
00010a  6800              LDR      r0,[r0,#0]            ;291
00010c  f000000c          AND      r0,r0,#0xc            ;291
000110  b158              CBZ      r0,|L14.298|
000112  48ba              LDR      r0,|L14.1020|
000114  6800              LDR      r0,[r0,#0]            ;292
000116  f000000c          AND      r0,r0,#0xc            ;292
00011a  2808              CMP      r0,#8                 ;292
00011c  d11c              BNE      |L14.344|
00011e  48b7              LDR      r0,|L14.1020|
000120  1f00              SUBS     r0,r0,#4              ;292
000122  6800              LDR      r0,[r0,#0]            ;292
000124  f4000080          AND      r0,r0,#0x400000       ;292
000128  b9b0              CBNZ     r0,|L14.344|
                  |L14.298|
00012a  48b4              LDR      r0,|L14.1020|
00012c  3808              SUBS     r0,r0,#8              ;295
00012e  6800              LDR      r0,[r0,#0]            ;295
000130  f3c00040          UBFX     r0,r0,#1,#1           ;295
000134  b120              CBZ      r0,|L14.320|
000136  68e0              LDR      r0,[r4,#0xc]          ;295
000138  2801              CMP      r0,#1                 ;295
00013a  d001              BEQ      |L14.320|
00013c  2001              MOVS     r0,#1                 ;297
00013e  e763              B        |L14.8|
                  |L14.320|
000140  48ae              LDR      r0,|L14.1020|
000142  3808              SUBS     r0,r0,#8              ;303
000144  6800              LDR      r0,[r0,#0]            ;303
000146  f02000f8          BIC      r0,r0,#0xf8           ;303
00014a  6921              LDR      r1,[r4,#0x10]         ;303
00014c  ea4000c1          ORR      r0,r0,r1,LSL #3       ;303
000150  49aa              LDR      r1,|L14.1020|
000152  3908              SUBS     r1,r1,#8              ;303
000154  6008              STR      r0,[r1,#0]            ;303
000156  e037              B        |L14.456|
                  |L14.344|
000158  68e0              LDR      r0,[r4,#0xc]          ;309
00015a  b300              CBZ      r0,|L14.414|
00015c  2001              MOVS     r0,#1                 ;312
00015e  49a8              LDR      r1,|L14.1024|
000160  6008              STR      r0,[r1,#0]            ;312
000162  f7fffffe          BL       HAL_GetTick
000166  4605              MOV      r5,r0                 ;315
000168  e006              B        |L14.376|
                  |L14.362|
00016a  f7fffffe          BL       HAL_GetTick
00016e  1b40              SUBS     r0,r0,r5              ;320
000170  2802              CMP      r0,#2                 ;320
000172  d901              BLS      |L14.376|
000174  2003              MOVS     r0,#3                 ;322
000176  e747              B        |L14.8|
                  |L14.376|
000178  48a0              LDR      r0,|L14.1020|
00017a  3808              SUBS     r0,r0,#8              ;318
00017c  6800              LDR      r0,[r0,#0]            ;318
00017e  f3c00040          UBFX     r0,r0,#1,#1           ;318
000182  2800              CMP      r0,#0                 ;318
000184  d0f1              BEQ      |L14.362|
000186  489d              LDR      r0,|L14.1020|
000188  3808              SUBS     r0,r0,#8              ;327
00018a  6800              LDR      r0,[r0,#0]            ;327
00018c  f02000f8          BIC      r0,r0,#0xf8           ;327
000190  6921              LDR      r1,[r4,#0x10]         ;327
000192  ea4000c1          ORR      r0,r0,r1,LSL #3       ;327
000196  4999              LDR      r1,|L14.1020|
000198  3908              SUBS     r1,r1,#8              ;327
00019a  6008              STR      r0,[r1,#0]            ;327
00019c  e014              B        |L14.456|
                  |L14.414|
00019e  2000              MOVS     r0,#0                 ;332
0001a0  4997              LDR      r1,|L14.1024|
0001a2  6008              STR      r0,[r1,#0]            ;332
0001a4  f7fffffe          BL       HAL_GetTick
0001a8  4605              MOV      r5,r0                 ;335
0001aa  e006              B        |L14.442|
                  |L14.428|
0001ac  f7fffffe          BL       HAL_GetTick
0001b0  1b40              SUBS     r0,r0,r5              ;340
0001b2  2802              CMP      r0,#2                 ;340
0001b4  d901              BLS      |L14.442|
0001b6  2003              MOVS     r0,#3                 ;342
0001b8  e726              B        |L14.8|
                  |L14.442|
0001ba  4890              LDR      r0,|L14.1020|
0001bc  3808              SUBS     r0,r0,#8              ;338
0001be  6800              LDR      r0,[r0,#0]            ;338
0001c0  f3c00040          UBFX     r0,r0,#1,#1           ;338
0001c4  2800              CMP      r0,#0                 ;338
0001c6  d1f1              BNE      |L14.428|
                  |L14.456|
0001c8  7820              LDRB     r0,[r4,#0]            ;349
0001ca  f0000008          AND      r0,r0,#8              ;349
0001ce  2808              CMP      r0,#8                 ;349
0001d0  d12c              BNE      |L14.556|
0001d2  6960              LDR      r0,[r4,#0x14]         ;355
0001d4  b1a8              CBZ      r0,|L14.514|
0001d6  2001              MOVS     r0,#1                 ;358
0001d8  498a              LDR      r1,|L14.1028|
0001da  6008              STR      r0,[r1,#0]            ;358
0001dc  f7fffffe          BL       HAL_GetTick
0001e0  4605              MOV      r5,r0                 ;361
0001e2  e006              B        |L14.498|
                  |L14.484|
0001e4  f7fffffe          BL       HAL_GetTick
0001e8  1b40              SUBS     r0,r0,r5              ;366
0001ea  2802              CMP      r0,#2                 ;366
0001ec  d901              BLS      |L14.498|
0001ee  2003              MOVS     r0,#3                 ;368
0001f0  e70a              B        |L14.8|
                  |L14.498|
0001f2  4882              LDR      r0,|L14.1020|
0001f4  306c              ADDS     r0,r0,#0x6c           ;364
0001f6  6800              LDR      r0,[r0,#0]            ;364
0001f8  f3c00040          UBFX     r0,r0,#1,#1           ;364
0001fc  2800              CMP      r0,#0                 ;364
0001fe  d0f1              BEQ      |L14.484|
000200  e014              B        |L14.556|
                  |L14.514|
000202  2000              MOVS     r0,#0                 ;375
000204  497f              LDR      r1,|L14.1028|
000206  6008              STR      r0,[r1,#0]            ;375
000208  f7fffffe          BL       HAL_GetTick
00020c  4605              MOV      r5,r0                 ;378
00020e  e006              B        |L14.542|
                  |L14.528|
000210  f7fffffe          BL       HAL_GetTick
000214  1b40              SUBS     r0,r0,r5              ;383
000216  2802              CMP      r0,#2                 ;383
000218  d901              BLS      |L14.542|
00021a  2003              MOVS     r0,#3                 ;385
00021c  e6f4              B        |L14.8|
                  |L14.542|
00021e  4877              LDR      r0,|L14.1020|
000220  306c              ADDS     r0,r0,#0x6c           ;381
000222  6800              LDR      r0,[r0,#0]            ;381
000224  f3c00040          UBFX     r0,r0,#1,#1           ;381
000228  2800              CMP      r0,#0                 ;381
00022a  d1f1              BNE      |L14.528|
                  |L14.556|
00022c  7820              LDRB     r0,[r4,#0]            ;391
00022e  f0000004          AND      r0,r0,#4              ;391
000232  2804              CMP      r0,#4                 ;391
000234  d170              BNE      |L14.792|
000236  2600              MOVS     r6,#0                 ;393
000238  4870              LDR      r0,|L14.1020|
00023a  3038              ADDS     r0,r0,#0x38           ;400
00023c  6800              LDR      r0,[r0,#0]            ;400
00023e  f0005080          AND      r0,r0,#0x10000000     ;400
000242  b990              CBNZ     r0,|L14.618|
000244  bf00              NOP                            ;402
000246  2000              MOVS     r0,#0                 ;402
000248  9000              STR      r0,[sp,#0]            ;402
00024a  486c              LDR      r0,|L14.1020|
00024c  3038              ADDS     r0,r0,#0x38           ;402
00024e  6800              LDR      r0,[r0,#0]            ;402
000250  f0405080          ORR      r0,r0,#0x10000000     ;402
000254  4969              LDR      r1,|L14.1020|
000256  3138              ADDS     r1,r1,#0x38           ;402
000258  6008              STR      r0,[r1,#0]            ;402
00025a  4608              MOV      r0,r1                 ;402
00025c  6800              LDR      r0,[r0,#0]            ;402
00025e  f0005080          AND      r0,r0,#0x10000000     ;402
000262  9000              STR      r0,[sp,#0]            ;402
000264  bf00              NOP                            ;402
000266  bf00              NOP                            ;402
000268  2601              MOVS     r6,#1                 ;403
                  |L14.618|
00026a  4867              LDR      r0,|L14.1032|
00026c  6800              LDR      r0,[r0,#0]            ;406
00026e  f4007080          AND      r0,r0,#0x100          ;406
000272  b9b0              CBNZ     r0,|L14.674|
000274  4864              LDR      r0,|L14.1032|
000276  6800              LDR      r0,[r0,#0]            ;409
000278  f4407080          ORR      r0,r0,#0x100          ;409
00027c  4962              LDR      r1,|L14.1032|
00027e  6008              STR      r0,[r1,#0]            ;409
000280  f7fffffe          BL       HAL_GetTick
000284  4605              MOV      r5,r0                 ;412
000286  e006              B        |L14.662|
                  |L14.648|
000288  f7fffffe          BL       HAL_GetTick
00028c  1b40              SUBS     r0,r0,r5              ;416
00028e  2802              CMP      r0,#2                 ;416
000290  d901              BLS      |L14.662|
000292  2003              MOVS     r0,#3                 ;418
000294  e6b8              B        |L14.8|
                  |L14.662|
000296  485c              LDR      r0,|L14.1032|
000298  6800              LDR      r0,[r0,#0]            ;414
00029a  f4007080          AND      r0,r0,#0x100          ;414
00029e  2800              CMP      r0,#0                 ;414
0002a0  d0f2              BEQ      |L14.648|
                  |L14.674|
0002a2  bf00              NOP                            ;424
0002a4  68a0              LDR      r0,[r4,#8]            ;424
0002a6  2801              CMP      r0,#1                 ;424
0002a8  d108              BNE      |L14.700|
0002aa  4854              LDR      r0,|L14.1020|
0002ac  3068              ADDS     r0,r0,#0x68           ;424
0002ae  6800              LDR      r0,[r0,#0]            ;424
0002b0  f0400001          ORR      r0,r0,#1              ;424
0002b4  4951              LDR      r1,|L14.1020|
0002b6  3168              ADDS     r1,r1,#0x68           ;424
0002b8  6008              STR      r0,[r1,#0]            ;424
0002ba  e01d              B        |L14.760|
                  |L14.700|
0002bc  68a0              LDR      r0,[r4,#8]            ;424
0002be  2805              CMP      r0,#5                 ;424
0002c0  d10d              BNE      |L14.734|
0002c2  484e              LDR      r0,|L14.1020|
0002c4  3068              ADDS     r0,r0,#0x68           ;424
0002c6  6800              LDR      r0,[r0,#0]            ;424
0002c8  f0400004          ORR      r0,r0,#4              ;424
0002cc  494b              LDR      r1,|L14.1020|
0002ce  3168              ADDS     r1,r1,#0x68           ;424
0002d0  6008              STR      r0,[r1,#0]            ;424
0002d2  4608              MOV      r0,r1                 ;424
0002d4  6800              LDR      r0,[r0,#0]            ;424
0002d6  f0400001          ORR      r0,r0,#1              ;424
0002da  6008              STR      r0,[r1,#0]            ;424
0002dc  e00c              B        |L14.760|
                  |L14.734|
0002de  4847              LDR      r0,|L14.1020|
0002e0  3068              ADDS     r0,r0,#0x68           ;424
0002e2  6800              LDR      r0,[r0,#0]            ;424
0002e4  f0200001          BIC      r0,r0,#1              ;424
0002e8  4944              LDR      r1,|L14.1020|
0002ea  3168              ADDS     r1,r1,#0x68           ;424
0002ec  6008              STR      r0,[r1,#0]            ;424
0002ee  4608              MOV      r0,r1                 ;424
0002f0  6800              LDR      r0,[r0,#0]            ;424
0002f2  f0200004          BIC      r0,r0,#4              ;424
0002f6  6008              STR      r0,[r1,#0]            ;424
                  |L14.760|
0002f8  bf00              NOP                            ;424
0002fa  68a0              LDR      r0,[r4,#8]            ;426
0002fc  b1a8              CBZ      r0,|L14.810|
0002fe  f7fffffe          BL       HAL_GetTick
000302  4605              MOV      r5,r0                 ;429
000304  e009              B        |L14.794|
                  |L14.774|
000306  f7fffffe          BL       HAL_GetTick
00030a  1b40              SUBS     r0,r0,r5              ;434
00030c  f2413188          MOV      r1,#0x1388            ;434
000310  4288              CMP      r0,r1                 ;434
000312  d902              BLS      |L14.794|
000314  2003              MOVS     r0,#3                 ;436
000316  e677              B        |L14.8|
                  |L14.792|
000318  e026              B        |L14.872|
                  |L14.794|
00031a  4838              LDR      r0,|L14.1020|
00031c  3068              ADDS     r0,r0,#0x68           ;432
00031e  6800              LDR      r0,[r0,#0]            ;432
000320  f3c00040          UBFX     r0,r0,#1,#1           ;432
000324  2800              CMP      r0,#0                 ;432
000326  d0ee              BEQ      |L14.774|
000328  e013              B        |L14.850|
                  |L14.810|
00032a  f7fffffe          BL       HAL_GetTick
00032e  4605              MOV      r5,r0                 ;443
000330  e008              B        |L14.836|
                  |L14.818|
000332  f7fffffe          BL       HAL_GetTick
000336  1b40              SUBS     r0,r0,r5              ;448
000338  f2413188          MOV      r1,#0x1388            ;448
00033c  4288              CMP      r0,r1                 ;448
00033e  d901              BLS      |L14.836|
000340  2003              MOVS     r0,#3                 ;450
000342  e661              B        |L14.8|
                  |L14.836|
000344  482d              LDR      r0,|L14.1020|
000346  3068              ADDS     r0,r0,#0x68           ;446
000348  6800              LDR      r0,[r0,#0]            ;446
00034a  f3c00040          UBFX     r0,r0,#1,#1           ;446
00034e  2800              CMP      r0,#0                 ;446
000350  d1ef              BNE      |L14.818|
                  |L14.850|
000352  2e01              CMP      r6,#1                 ;456
000354  d107              BNE      |L14.870|
000356  4829              LDR      r0,|L14.1020|
000358  3038              ADDS     r0,r0,#0x38           ;458
00035a  6800              LDR      r0,[r0,#0]            ;458
00035c  f0205080          BIC      r0,r0,#0x10000000     ;458
000360  4926              LDR      r1,|L14.1020|
000362  3138              ADDS     r1,r1,#0x38           ;458
000364  6008              STR      r0,[r1,#0]            ;458
                  |L14.870|
000366  bf00              NOP                            ;460
                  |L14.872|
000368  69a0              LDR      r0,[r4,#0x18]         ;464
00036a  b3b8              CBZ      r0,|L14.988|
00036c  4823              LDR      r0,|L14.1020|
00036e  6800              LDR      r0,[r0,#0]            ;467
000370  f000000c          AND      r0,r0,#0xc            ;467
000374  2808              CMP      r0,#8                 ;467
000376  d05e              BEQ      |L14.1078|
000378  69a0              LDR      r0,[r4,#0x18]         ;469
00037a  2802              CMP      r0,#2                 ;469
00037c  d146              BNE      |L14.1036|
00037e  2000              MOVS     r0,#0                 ;479
000380  491f              LDR      r1,|L14.1024|
000382  6608              STR      r0,[r1,#0x60]         ;479
000384  f7fffffe          BL       HAL_GetTick
000388  4605              MOV      r5,r0                 ;482
00038a  e006              B        |L14.922|
                  |L14.908|
00038c  f7fffffe          BL       HAL_GetTick
000390  1b40              SUBS     r0,r0,r5              ;487
000392  2802              CMP      r0,#2                 ;487
000394  d901              BLS      |L14.922|
000396  2003              MOVS     r0,#3                 ;489
000398  e636              B        |L14.8|
                  |L14.922|
00039a  4818              LDR      r0,|L14.1020|
00039c  3808              SUBS     r0,r0,#8              ;485
00039e  6800              LDR      r0,[r0,#0]            ;485
0003a0  f3c06040          UBFX     r0,r0,#25,#1          ;485
0003a4  2800              CMP      r0,#0                 ;485
0003a6  d1f1              BNE      |L14.908|
0003a8  e9d40107          LDRD     r0,r1,[r4,#0x1c]      ;494
0003ac  4308              ORRS     r0,r0,r1              ;494
0003ae  6a61              LDR      r1,[r4,#0x24]         ;494
0003b0  ea401181          ORR      r1,r0,r1,LSL #6       ;494
0003b4  2201              MOVS     r2,#1                 ;494
0003b6  6aa0              LDR      r0,[r4,#0x28]         ;494
0003b8  ebc20050          RSB      r0,r2,r0,LSR #1       ;494
0003bc  ea414100          ORR      r1,r1,r0,LSL #16      ;494
0003c0  202c              MOVS     r0,#0x2c              ;494
0003c2  5d00              LDRB     r0,[r0,r4]            ;494
0003c4  ea416000          ORR      r0,r1,r0,LSL #24      ;494
0003c8  490c              LDR      r1,|L14.1020|
0003ca  1f09              SUBS     r1,r1,#4              ;494
0003cc  6008              STR      r0,[r1,#0]            ;494
0003ce  2001              MOVS     r0,#1                 ;500
0003d0  490b              LDR      r1,|L14.1024|
0003d2  6608              STR      r0,[r1,#0x60]         ;500
0003d4  f7fffffe          BL       HAL_GetTick
0003d8  4605              MOV      r5,r0                 ;503
0003da  e007              B        |L14.1004|
                  |L14.988|
0003dc  e02d              B        |L14.1082|
                  |L14.990|
0003de  f7fffffe          BL       HAL_GetTick
0003e2  1b40              SUBS     r0,r0,r5              ;508
0003e4  2802              CMP      r0,#2                 ;508
0003e6  d901              BLS      |L14.1004|
0003e8  2003              MOVS     r0,#3                 ;510
0003ea  e60d              B        |L14.8|
                  |L14.1004|
0003ec  4803              LDR      r0,|L14.1020|
0003ee  3808              SUBS     r0,r0,#8              ;506
0003f0  6800              LDR      r0,[r0,#0]            ;506
0003f2  f3c06040          UBFX     r0,r0,#25,#1          ;506
0003f6  2800              CMP      r0,#0                 ;506
0003f8  d0f1              BEQ      |L14.990|
0003fa  e01e              B        |L14.1082|
                  |L14.1020|
                          DCD      0x40023808
                  |L14.1024|
                          DCD      0x42470000
                  |L14.1028|
                          DCD      0x42470e80
                  |L14.1032|
                          DCD      0x40007000
                  |L14.1036|
00040c  2000              MOVS     r0,#0                 ;517
00040e  490c              LDR      r1,|L14.1088|
000410  6608              STR      r0,[r1,#0x60]         ;517
000412  f7fffffe          BL       HAL_GetTick
000416  4605              MOV      r5,r0                 ;520
000418  e006              B        |L14.1064|
                  |L14.1050|
00041a  f7fffffe          BL       HAL_GetTick
00041e  1b40              SUBS     r0,r0,r5              ;525
000420  2802              CMP      r0,#2                 ;525
000422  d901              BLS      |L14.1064|
000424  2003              MOVS     r0,#3                 ;527
000426  e5ef              B        |L14.8|
                  |L14.1064|
000428  4806              LDR      r0,|L14.1092|
00042a  6800              LDR      r0,[r0,#0]            ;523
00042c  f3c06040          UBFX     r0,r0,#25,#1          ;523
000430  2800              CMP      r0,#0                 ;523
000432  d1f2              BNE      |L14.1050|
000434  e001              B        |L14.1082|
                  |L14.1078|
000436  2001              MOVS     r0,#1                 ;534
000438  e5e6              B        |L14.8|
                  |L14.1082|
00043a  2000              MOVS     r0,#0                 ;537
00043c  e5e4              B        |L14.8|
;;;539    
                          ENDP

00043e  0000              DCW      0x0000
                  |L14.1088|
                          DCD      0x42470000
                  |L14.1092|
                          DCD      0x40023800

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\Drivers\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_rcc.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REVSH|
#line 402
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____RRX|
#line 587
|__asm___19_stm32f4xx_hal_rcc_c_b7071a4b____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
