; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\stm32f4xx_hal_rcc_ex.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\stm32f4xx_hal_rcc_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_rcc_ex.c]
                          THUMB

                          AREA ||i.HAL_RCCEx_DisablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_DisablePLLI2S PROC
;;;2875     */
;;;2876   HAL_StatusTypeDef HAL_RCCEx_DisablePLLI2S(void)
000000  b510              PUSH     {r4,lr}
;;;2877   {
;;;2878     uint32_t tickstart;
;;;2879   
;;;2880     /* Disable the PLLI2S */
;;;2881     __HAL_RCC_PLLI2S_DISABLE();
000002  2000              MOVS     r0,#0
000004  490a              LDR      r1,|L1.48|
000006  6688              STR      r0,[r1,#0x68]
;;;2882   
;;;2883     /* Wait till PLLI2S is disabled */
;;;2884     tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4604              MOV      r4,r0
;;;2885     while(READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
00000e  e006              B        |L1.30|
                  |L1.16|
;;;2886     {
;;;2887       if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
000010  f7fffffe          BL       HAL_GetTick
000014  1b00              SUBS     r0,r0,r4
000016  2802              CMP      r0,#2
000018  d901              BLS      |L1.30|
;;;2888       {
;;;2889         /* return in case of Timeout detected */
;;;2890         return HAL_TIMEOUT;
00001a  2003              MOVS     r0,#3
                  |L1.28|
;;;2891       }
;;;2892     }
;;;2893   
;;;2894     return HAL_OK;
;;;2895   }
00001c  bd10              POP      {r4,pc}
                  |L1.30|
00001e  4805              LDR      r0,|L1.52|
000020  6800              LDR      r0,[r0,#0]            ;2885
000022  f0006000          AND      r0,r0,#0x8000000      ;2885
000026  2800              CMP      r0,#0                 ;2885
000028  d1f2              BNE      |L1.16|
00002a  bf00              NOP                            ;2894
00002c  e7f6              B        |L1.28|
;;;2896   
                          ENDP

00002e  0000              DCW      0x0000
                  |L1.48|
                          DCD      0x42470000
                  |L1.52|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_EnablePLLI2S||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_EnablePLLI2S PROC
;;;2792     */
;;;2793   HAL_StatusTypeDef HAL_RCCEx_EnablePLLI2S(RCC_PLLI2SInitTypeDef  *PLLI2SInit)
000000  b570              PUSH     {r4-r6,lr}
;;;2794   {
000002  4604              MOV      r4,r0
;;;2795     uint32_t tickstart;
;;;2796   
;;;2797     /* Check for parameters */
;;;2798     assert_param(IS_RCC_PLLI2SN_VALUE(PLLI2SInit->PLLI2SN));
;;;2799     assert_param(IS_RCC_PLLI2SR_VALUE(PLLI2SInit->PLLI2SR));
;;;2800   #if defined(RCC_PLLI2SCFGR_PLLI2SM)
;;;2801     assert_param(IS_RCC_PLLI2SM_VALUE(PLLI2SInit->PLLI2SM));
;;;2802   #endif /* RCC_PLLI2SCFGR_PLLI2SM */
;;;2803   #if defined(RCC_PLLI2SCFGR_PLLI2SP)
;;;2804     assert_param(IS_RCC_PLLI2SP_VALUE(PLLI2SInit->PLLI2SP));
;;;2805   #endif /* RCC_PLLI2SCFGR_PLLI2SP */
;;;2806   #if defined(RCC_PLLI2SCFGR_PLLI2SQ)
;;;2807     assert_param(IS_RCC_PLLI2SQ_VALUE(PLLI2SInit->PLLI2SQ));
;;;2808   #endif /* RCC_PLLI2SCFGR_PLLI2SQ */
;;;2809   
;;;2810     /* Disable the PLLI2S */
;;;2811     __HAL_RCC_PLLI2S_DISABLE();
000004  2000              MOVS     r0,#0
000006  4918              LDR      r1,|L2.104|
000008  6688              STR      r0,[r1,#0x68]
;;;2812   
;;;2813     /* Wait till PLLI2S is disabled */
;;;2814     tickstart = HAL_GetTick();
00000a  f7fffffe          BL       HAL_GetTick
00000e  4605              MOV      r5,r0
;;;2815     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) != RESET)
000010  e006              B        |L2.32|
                  |L2.18|
;;;2816     {
;;;2817       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
000012  f7fffffe          BL       HAL_GetTick
000016  1b40              SUBS     r0,r0,r5
000018  2802              CMP      r0,#2
00001a  d901              BLS      |L2.32|
;;;2818       {
;;;2819         /* return in case of Timeout detected */
;;;2820         return HAL_TIMEOUT;
00001c  2003              MOVS     r0,#3
                  |L2.30|
;;;2821       }
;;;2822     }
;;;2823   
;;;2824     /* Configure the PLLI2S division factors */
;;;2825   #if defined(STM32F446xx)
;;;2826     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
;;;2827     /* I2SPCLK = PLLI2S_VCO / PLLI2SP */
;;;2828     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2829     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2830     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
;;;2831                             PLLI2SInit->PLLI2SP, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2832   #elif defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) ||\
;;;2833         defined(STM32F413xx) || defined(STM32F423xx)
;;;2834     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM)*/
;;;2835     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2836     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2837     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, \
;;;2838                             PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2839   #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) ||\
;;;2840         defined(STM32F469xx) || defined(STM32F479xx)
;;;2841     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * PLLI2SN */
;;;2842     /* I2SQCLK = PLLI2S_VCO / PLLI2SQ */
;;;2843     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2844     __HAL_RCC_PLLI2S_SAICLK_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SQ, PLLI2SInit->PLLI2SR);
;;;2845   #elif defined(STM32F411xE)
;;;2846     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
;;;2847     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2848     __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PLLI2SInit->PLLI2SM, PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
;;;2849   #else
;;;2850     /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x PLLI2SN */
;;;2851     /* I2SRCLK = PLLI2S_VCO / PLLI2SR */
;;;2852     __HAL_RCC_PLLI2S_CONFIG(PLLI2SInit->PLLI2SN, PLLI2SInit->PLLI2SR);
;;;2853   #endif /* STM32F446xx */
;;;2854   
;;;2855     /* Enable the PLLI2S */
;;;2856     __HAL_RCC_PLLI2S_ENABLE();
;;;2857   
;;;2858     /* Wait till PLLI2S is ready */
;;;2859     tickstart = HAL_GetTick();
;;;2860     while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY) == RESET)
;;;2861     {
;;;2862       if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;2863       {
;;;2864         /* return in case of Timeout detected */
;;;2865         return HAL_TIMEOUT;
;;;2866       }
;;;2867     }
;;;2868   
;;;2869    return HAL_OK;
;;;2870   }
00001e  bd70              POP      {r4-r6,pc}
                  |L2.32|
000020  4812              LDR      r0,|L2.108|
000022  6800              LDR      r0,[r0,#0]            ;2815
000024  f3c060c0          UBFX     r0,r0,#27,#1          ;2815
000028  2800              CMP      r0,#0                 ;2815
00002a  d1f2              BNE      |L2.18|
00002c  6820              LDR      r0,[r4,#0]            ;2852
00002e  0180              LSLS     r0,r0,#6              ;2852
000030  7921              LDRB     r1,[r4,#4]            ;2852
000032  ea407001          ORR      r0,r0,r1,LSL #28      ;2852
000036  490d              LDR      r1,|L2.108|
000038  3184              ADDS     r1,r1,#0x84           ;2852
00003a  6008              STR      r0,[r1,#0]            ;2852
00003c  2001              MOVS     r0,#1                 ;2856
00003e  490a              LDR      r1,|L2.104|
000040  6688              STR      r0,[r1,#0x68]         ;2856
000042  f7fffffe          BL       HAL_GetTick
000046  4605              MOV      r5,r0                 ;2859
000048  e006              B        |L2.88|
                  |L2.74|
00004a  f7fffffe          BL       HAL_GetTick
00004e  1b40              SUBS     r0,r0,r5              ;2862
000050  2802              CMP      r0,#2                 ;2862
000052  d901              BLS      |L2.88|
000054  2003              MOVS     r0,#3                 ;2865
000056  e7e2              B        |L2.30|
                  |L2.88|
000058  4804              LDR      r0,|L2.108|
00005a  6800              LDR      r0,[r0,#0]            ;2860
00005c  f3c060c0          UBFX     r0,r0,#27,#1          ;2860
000060  2800              CMP      r0,#0                 ;2860
000062  d0f2              BEQ      |L2.74|
000064  2000              MOVS     r0,#0                 ;2869
000066  e7da              B        |L2.30|
;;;2871   
                          ENDP

                  |L2.104|
                          DCD      0x42470000
                  |L2.108|
                          DCD      0x40023800

                          AREA ||i.HAL_RCCEx_GetPeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKConfig PROC
;;;2630     */
;;;2631   void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  2203              MOVS     r2,#3
;;;2632   {
;;;2633     uint32_t tempreg;
;;;2634   
;;;2635     /* Set all possible values for the extended clock type parameter------------*/
;;;2636     PeriphClkInit->PeriphClockSelection = RCC_PERIPHCLK_I2S | RCC_PERIPHCLK_RTC;
000002  6002              STR      r2,[r0,#0]
;;;2637   
;;;2638     /* Get the PLLI2S Clock configuration --------------------------------------*/
;;;2639     PeriphClkInit->PLLI2S.PLLI2SN = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> RCC_PLLI2SCFGR_PLLI2SN_Pos);
000004  4a10              LDR      r2,|L3.72|
000006  6812              LDR      r2,[r2,#0]
000008  f3c21288          UBFX     r2,r2,#6,#9
00000c  6042              STR      r2,[r0,#4]
;;;2640     PeriphClkInit->PLLI2S.PLLI2SR = (uint32_t)((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
00000e  4a0e              LDR      r2,|L3.72|
000010  6812              LDR      r2,[r2,#0]
000012  f3c27302          UBFX     r3,r2,#28,#3
000016  6083              STR      r3,[r0,#8]
;;;2641   #if defined(STM32F411xE)
;;;2642     PeriphClkInit->PLLI2S.PLLI2SM = (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM);
;;;2643   #endif /* STM32F411xE */
;;;2644     /* Get the RTC Clock configuration -----------------------------------------*/
;;;2645     tempreg = (RCC->CFGR & RCC_CFGR_RTCPRE);
000018  4a0b              LDR      r2,|L3.72|
00001a  3a7c              SUBS     r2,r2,#0x7c
00001c  6812              LDR      r2,[r2,#0]
00001e  f40211f8          AND      r1,r2,#0x1f0000
;;;2646     PeriphClkInit->RTCClockSelection = (uint32_t)((tempreg) | (RCC->BDCR & RCC_BDCR_RTCSEL));
000022  4a09              LDR      r2,|L3.72|
000024  3a14              SUBS     r2,r2,#0x14
000026  6812              LDR      r2,[r2,#0]
000028  f4027240          AND      r2,r2,#0x300
00002c  430a              ORRS     r2,r2,r1
00002e  60c2              STR      r2,[r0,#0xc]
;;;2647   
;;;2648   #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
;;;2649     /* Get the TIM Prescaler configuration -------------------------------------*/
;;;2650     if ((RCC->DCKCFGR & RCC_DCKCFGR_TIMPRE) == RESET)
000030  4a05              LDR      r2,|L3.72|
000032  3208              ADDS     r2,r2,#8
000034  6812              LDR      r2,[r2,#0]
000036  f0027280          AND      r2,r2,#0x1000000
00003a  b912              CBNZ     r2,|L3.66|
;;;2651     {
;;;2652       PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
00003c  2200              MOVS     r2,#0
00003e  7402              STRB     r2,[r0,#0x10]
000040  e001              B        |L3.70|
                  |L3.66|
;;;2653     }
;;;2654     else
;;;2655     {
;;;2656       PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
000042  2201              MOVS     r2,#1
000044  7402              STRB     r2,[r0,#0x10]
                  |L3.70|
;;;2657     }
;;;2658   #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
;;;2659   }
000046  4770              BX       lr
;;;2660   
                          ENDP

                  |L3.72|
                          DCD      0x40023884

                          AREA ||i.HAL_RCCEx_GetPeriphCLKFreq||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_GetPeriphCLKFreq PROC
;;;2668     */
;;;2669   uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
000000  b570              PUSH     {r4-r6,lr}
;;;2670   {
000002  4601              MOV      r1,r0
;;;2671     /* This variable used to store the I2S clock frequency (value in Hz) */
;;;2672     uint32_t frequency = 0U;
000004  2000              MOVS     r0,#0
;;;2673     /* This variable used to store the VCO Input (value in Hz) */
;;;2674     uint32_t vcoinput = 0U;
000006  2200              MOVS     r2,#0
;;;2675     uint32_t srcclk = 0U;
000008  2300              MOVS     r3,#0
;;;2676     /* This variable used to store the VCO Output (value in Hz) */
;;;2677     uint32_t vcooutput = 0U;
00000a  2400              MOVS     r4,#0
;;;2678     switch (PeriphClk)
00000c  2901              CMP      r1,#1
00000e  d134              BNE      |L4.122|
;;;2679     {
;;;2680     case RCC_PERIPHCLK_I2S:
;;;2681       {
;;;2682         /* Get the current I2S source */
;;;2683         srcclk = __HAL_RCC_GET_I2S_SOURCE();
000010  4d1b              LDR      r5,|L4.128|
000012  682d              LDR      r5,[r5,#0]
000014  f4050300          AND      r3,r5,#0x800000
;;;2684         switch (srcclk)
000018  b11b              CBZ      r3,|L4.34|
00001a  2b01              CMP      r3,#1
00001c  d129              BNE      |L4.114|
;;;2685         {
;;;2686         /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
;;;2687         case RCC_I2SCLKSOURCE_EXT:
;;;2688           {
;;;2689             /* Set the I2S clock to the external clock  value */
;;;2690             frequency = EXTERNAL_CLOCK_VALUE;
00001e  4819              LDR      r0,|L4.132|
;;;2691             break;
000020  e029              B        |L4.118|
                  |L4.34|
;;;2692           }
;;;2693         /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
;;;2694         case RCC_I2SCLKSOURCE_PLLI2S:
;;;2695           {
;;;2696   #if defined(STM32F411xE)
;;;2697             /* Configure the PLLI2S division factor */
;;;2698             /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
;;;2699             if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
;;;2700             {
;;;2701               /* Get the I2S source clock value */
;;;2702               vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
;;;2703             }
;;;2704             else
;;;2705             {
;;;2706               /* Get the I2S source clock value */
;;;2707               vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
;;;2708             }
;;;2709   #else
;;;2710             /* Configure the PLLI2S division factor */
;;;2711             /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
;;;2712             if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
000022  4d17              LDR      r5,|L4.128|
000024  1f2d              SUBS     r5,r5,#4
000026  682d              LDR      r5,[r5,#0]
000028  f4050580          AND      r5,r5,#0x400000
00002c  f5b50f80          CMP      r5,#0x400000
000030  d108              BNE      |L4.68|
;;;2713             {
;;;2714               /* Get the I2S source clock value */
;;;2715               vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
000032  4d13              LDR      r5,|L4.128|
000034  1f2d              SUBS     r5,r5,#4
000036  682d              LDR      r5,[r5,#0]
000038  f005053f          AND      r5,r5,#0x3f
00003c  4e12              LDR      r6,|L4.136|
00003e  fbb6f2f5          UDIV     r2,r6,r5
000042  e007              B        |L4.84|
                  |L4.68|
;;;2716             }
;;;2717             else
;;;2718             {
;;;2719               /* Get the I2S source clock value */
;;;2720               vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
000044  4d0e              LDR      r5,|L4.128|
000046  1f2d              SUBS     r5,r5,#4
000048  682d              LDR      r5,[r5,#0]
00004a  f005053f          AND      r5,r5,#0x3f
00004e  4e0f              LDR      r6,|L4.140|
000050  fbb6f2f5          UDIV     r2,r6,r5
                  |L4.84|
;;;2721             }
;;;2722   #endif /* STM32F411xE */
;;;2723             /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
;;;2724             vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
000054  4d0a              LDR      r5,|L4.128|
000056  357c              ADDS     r5,r5,#0x7c
000058  682d              LDR      r5,[r5,#0]
00005a  f3c51588          UBFX     r5,r5,#6,#9
00005e  fb05f402          MUL      r4,r5,r2
;;;2725             /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
;;;2726             frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
000062  4d07              LDR      r5,|L4.128|
000064  357c              ADDS     r5,r5,#0x7c
000066  682d              LDR      r5,[r5,#0]
000068  f3c57502          UBFX     r5,r5,#28,#3
00006c  fbb4f0f5          UDIV     r0,r4,r5
;;;2727             break;
000070  e001              B        |L4.118|
                  |L4.114|
;;;2728           }
;;;2729           /* Clock not enabled for I2S*/
;;;2730         default:
;;;2731           {
;;;2732             frequency = 0U;
000072  2000              MOVS     r0,#0
;;;2733             break;
000074  bf00              NOP      
                  |L4.118|
000076  bf00              NOP                            ;2691
;;;2734           }
;;;2735         }
;;;2736         break;
000078  bf00              NOP      
                  |L4.122|
00007a  bf00              NOP      
;;;2737       }
;;;2738     }
;;;2739     return frequency;
;;;2740   }
00007c  bd70              POP      {r4-r6,pc}
;;;2741   #endif /* STM32F405xx || STM32F415xx || STM32F407xx || STM32F417xx || STM32F401xC || STM32F401xE  || STM32F411xE */
                          ENDP

00007e  0000              DCW      0x0000
                  |L4.128|
                          DCD      0x40023808
                  |L4.132|
                          DCD      0x00bb8000
                  |L4.136|
                          DCD      0x007a1200
                  |L4.140|
                          DCD      0x00f42400

                          AREA ||i.HAL_RCCEx_PeriphCLKConfig||, CODE, READONLY, ALIGN=2

                  HAL_RCCEx_PeriphCLKConfig PROC
;;;2502     */
;;;2503   HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
000000  b5f8              PUSH     {r3-r7,lr}
;;;2504   {
000002  4604              MOV      r4,r0
;;;2505     uint32_t tickstart = 0U;
000004  2500              MOVS     r5,#0
;;;2506     uint32_t tmpreg1 = 0U;
000006  2600              MOVS     r6,#0
;;;2507   
;;;2508     /* Check the parameters */
;;;2509     assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
;;;2510   
;;;2511     /*---------------------------- I2S configuration ---------------------------*/
;;;2512     if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
000008  7820              LDRB     r0,[r4,#0]
00000a  f0000001          AND      r0,r0,#1
00000e  b920              CBNZ     r0,|L5.26|
;;;2513        (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
000010  7820              LDRB     r0,[r4,#0]
000012  f0000004          AND      r0,r0,#4
000016  2804              CMP      r0,#4
000018  d12f              BNE      |L5.122|
                  |L5.26|
;;;2514     {
;;;2515       /* check for Parameters */
;;;2516       assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
;;;2517       assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
;;;2518   #if defined(STM32F411xE)
;;;2519       assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
;;;2520   #endif /* STM32F411xE */
;;;2521       /* Disable the PLLI2S */
;;;2522       __HAL_RCC_PLLI2S_DISABLE();
00001a  2000              MOVS     r0,#0
00001c  495f              LDR      r1,|L5.412|
00001e  6688              STR      r0,[r1,#0x68]
;;;2523       /* Get tick */
;;;2524       tickstart = HAL_GetTick();
000020  f7fffffe          BL       HAL_GetTick
000024  4605              MOV      r5,r0
;;;2525       /* Wait till PLLI2S is disabled */
;;;2526       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
000026  e006              B        |L5.54|
                  |L5.40|
;;;2527       {
;;;2528         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
000028  f7fffffe          BL       HAL_GetTick
00002c  1b40              SUBS     r0,r0,r5
00002e  2802              CMP      r0,#2
000030  d901              BLS      |L5.54|
;;;2529         {
;;;2530           /* return in case of Timeout detected */
;;;2531           return HAL_TIMEOUT;
000032  2003              MOVS     r0,#3
                  |L5.52|
;;;2532         }
;;;2533       }
;;;2534   
;;;2535   #if defined(STM32F411xE)
;;;2536       /* Configure the PLLI2S division factors */
;;;2537       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
;;;2538       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;2539       __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
;;;2540   #else
;;;2541       /* Configure the PLLI2S division factors */
;;;2542       /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
;;;2543       /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
;;;2544       __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
;;;2545   #endif /* STM32F411xE */
;;;2546   
;;;2547       /* Enable the PLLI2S */
;;;2548       __HAL_RCC_PLLI2S_ENABLE();
;;;2549       /* Get tick */
;;;2550       tickstart = HAL_GetTick();
;;;2551       /* Wait till PLLI2S is ready */
;;;2552       while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
;;;2553       {
;;;2554         if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
;;;2555         {
;;;2556           /* return in case of Timeout detected */
;;;2557           return HAL_TIMEOUT;
;;;2558         }
;;;2559       }
;;;2560     }
;;;2561   
;;;2562     /*---------------------------- RTC configuration ---------------------------*/
;;;2563     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
;;;2564     {
;;;2565       /* Check for RTC Parameters used to output RTCCLK */
;;;2566       assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
;;;2567   
;;;2568       /* Enable Power Clock*/
;;;2569       __HAL_RCC_PWR_CLK_ENABLE();
;;;2570   
;;;2571       /* Enable write access to Backup domain */
;;;2572       PWR->CR |= PWR_CR_DBP;
;;;2573   
;;;2574       /* Get tick */
;;;2575       tickstart = HAL_GetTick();
;;;2576   
;;;2577       while((PWR->CR & PWR_CR_DBP) == RESET)
;;;2578       {
;;;2579         if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
;;;2580         {
;;;2581           return HAL_TIMEOUT;
;;;2582         }
;;;2583       }
;;;2584       /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
;;;2585       tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
;;;2586       if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
;;;2587       {
;;;2588         /* Store the content of BDCR register before the reset of Backup Domain */
;;;2589         tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
;;;2590         /* RTC Clock selection can be changed only if the Backup Domain is reset */
;;;2591         __HAL_RCC_BACKUPRESET_FORCE();
;;;2592         __HAL_RCC_BACKUPRESET_RELEASE();
;;;2593         /* Restore the Content of BDCR register */
;;;2594         RCC->BDCR = tmpreg1;
;;;2595   
;;;2596         /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
;;;2597         if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
;;;2598         {
;;;2599           /* Get tick */
;;;2600           tickstart = HAL_GetTick();
;;;2601   
;;;2602           /* Wait till LSE is ready */
;;;2603           while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
;;;2604           {
;;;2605             if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
;;;2606             {
;;;2607               return HAL_TIMEOUT;
;;;2608             }
;;;2609           }
;;;2610         }
;;;2611       }
;;;2612       __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
;;;2613     }
;;;2614   #if defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F411xE)
;;;2615     /*---------------------------- TIM configuration ---------------------------*/
;;;2616     if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
;;;2617     {
;;;2618       __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
;;;2619     }
;;;2620   #endif /* STM32F401xC || STM32F401xE || STM32F411xE */
;;;2621     return HAL_OK;
;;;2622   }
000034  bdf8              POP      {r3-r7,pc}
                  |L5.54|
000036  485a              LDR      r0,|L5.416|
000038  6800              LDR      r0,[r0,#0]            ;2526
00003a  f3c060c0          UBFX     r0,r0,#27,#1          ;2526
00003e  2800              CMP      r0,#0                 ;2526
000040  d1f2              BNE      |L5.40|
000042  6860              LDR      r0,[r4,#4]            ;2544
000044  0181              LSLS     r1,r0,#6              ;2544
000046  7a20              LDRB     r0,[r4,#8]            ;2544
000048  ea417000          ORR      r0,r1,r0,LSL #28      ;2544
00004c  4954              LDR      r1,|L5.416|
00004e  3184              ADDS     r1,r1,#0x84           ;2544
000050  6008              STR      r0,[r1,#0]            ;2544
000052  2001              MOVS     r0,#1                 ;2548
000054  4951              LDR      r1,|L5.412|
000056  6688              STR      r0,[r1,#0x68]         ;2548
000058  f7fffffe          BL       HAL_GetTick
00005c  4605              MOV      r5,r0                 ;2550
00005e  e006              B        |L5.110|
                  |L5.96|
000060  f7fffffe          BL       HAL_GetTick
000064  1b40              SUBS     r0,r0,r5              ;2554
000066  2802              CMP      r0,#2                 ;2554
000068  d901              BLS      |L5.110|
00006a  2003              MOVS     r0,#3                 ;2557
00006c  e7e2              B        |L5.52|
                  |L5.110|
00006e  484c              LDR      r0,|L5.416|
000070  6800              LDR      r0,[r0,#0]            ;2552
000072  f3c060c0          UBFX     r0,r0,#27,#1          ;2552
000076  2800              CMP      r0,#0                 ;2552
000078  d0f2              BEQ      |L5.96|
                  |L5.122|
00007a  7820              LDRB     r0,[r4,#0]            ;2563
00007c  f0000002          AND      r0,r0,#2              ;2563
000080  2802              CMP      r0,#2                 ;2563
000082  d17d              BNE      |L5.384|
000084  bf00              NOP                            ;2569
000086  2000              MOVS     r0,#0                 ;2569
000088  9000              STR      r0,[sp,#0]            ;2569
00008a  4845              LDR      r0,|L5.416|
00008c  3040              ADDS     r0,r0,#0x40           ;2569
00008e  6800              LDR      r0,[r0,#0]            ;2569
000090  f0405080          ORR      r0,r0,#0x10000000     ;2569
000094  4942              LDR      r1,|L5.416|
000096  3140              ADDS     r1,r1,#0x40           ;2569
000098  6008              STR      r0,[r1,#0]            ;2569
00009a  4608              MOV      r0,r1                 ;2569
00009c  6800              LDR      r0,[r0,#0]            ;2569
00009e  f0005080          AND      r0,r0,#0x10000000     ;2569
0000a2  9000              STR      r0,[sp,#0]            ;2569
0000a4  bf00              NOP                            ;2569
0000a6  bf00              NOP                            ;2569
0000a8  483e              LDR      r0,|L5.420|
0000aa  6800              LDR      r0,[r0,#0]            ;2572
0000ac  f4407080          ORR      r0,r0,#0x100          ;2572
0000b0  493c              LDR      r1,|L5.420|
0000b2  6008              STR      r0,[r1,#0]            ;2572
0000b4  f7fffffe          BL       HAL_GetTick
0000b8  4605              MOV      r5,r0                 ;2575
0000ba  e006              B        |L5.202|
                  |L5.188|
0000bc  f7fffffe          BL       HAL_GetTick
0000c0  1b40              SUBS     r0,r0,r5              ;2579
0000c2  2802              CMP      r0,#2                 ;2579
0000c4  d901              BLS      |L5.202|
0000c6  2003              MOVS     r0,#3                 ;2581
0000c8  e7b4              B        |L5.52|
                  |L5.202|
0000ca  4836              LDR      r0,|L5.420|
0000cc  6800              LDR      r0,[r0,#0]            ;2577
0000ce  f4007080          AND      r0,r0,#0x100          ;2577
0000d2  2800              CMP      r0,#0                 ;2577
0000d4  d0f2              BEQ      |L5.188|
0000d6  4832              LDR      r0,|L5.416|
0000d8  3070              ADDS     r0,r0,#0x70           ;2585
0000da  6800              LDR      r0,[r0,#0]            ;2585
0000dc  f4007640          AND      r6,r0,#0x300          ;2585
0000e0  b34e              CBZ      r6,|L5.310|
0000e2  89a0              LDRH     r0,[r4,#0xc]          ;2586
0000e4  f4007040          AND      r0,r0,#0x300          ;2586
0000e8  42b0              CMP      r0,r6                 ;2586
0000ea  d024              BEQ      |L5.310|
0000ec  482c              LDR      r0,|L5.416|
0000ee  3070              ADDS     r0,r0,#0x70           ;2589
0000f0  6800              LDR      r0,[r0,#0]            ;2589
0000f2  f4207640          BIC      r6,r0,#0x300          ;2589
0000f6  2001              MOVS     r0,#1                 ;2591
0000f8  492b              LDR      r1,|L5.424|
0000fa  6008              STR      r0,[r1,#0]            ;2591
0000fc  2000              MOVS     r0,#0                 ;2592
0000fe  6008              STR      r0,[r1,#0]            ;2592
000100  4827              LDR      r0,|L5.416|
000102  3070              ADDS     r0,r0,#0x70           ;2594
000104  6006              STR      r6,[r0,#0]            ;2594
000106  6800              LDR      r0,[r0,#0]            ;2597
000108  f0000001          AND      r0,r0,#1              ;2597
00010c  b198              CBZ      r0,|L5.310|
00010e  f7fffffe          BL       HAL_GetTick
000112  4605              MOV      r5,r0                 ;2600
000114  e008              B        |L5.296|
                  |L5.278|
000116  f7fffffe          BL       HAL_GetTick
00011a  1b40              SUBS     r0,r0,r5              ;2605
00011c  f2413188          MOV      r1,#0x1388            ;2605
000120  4288              CMP      r0,r1                 ;2605
000122  d901              BLS      |L5.296|
000124  2003              MOVS     r0,#3                 ;2607
000126  e785              B        |L5.52|
                  |L5.296|
000128  481d              LDR      r0,|L5.416|
00012a  3070              ADDS     r0,r0,#0x70           ;2603
00012c  6800              LDR      r0,[r0,#0]            ;2603
00012e  f3c00040          UBFX     r0,r0,#1,#1           ;2603
000132  2800              CMP      r0,#0                 ;2603
000134  d0ef              BEQ      |L5.278|
                  |L5.310|
000136  bf00              NOP                            ;2612
000138  89a0              LDRH     r0,[r4,#0xc]          ;2612
00013a  f4007040          AND      r0,r0,#0x300          ;2612
00013e  f5b07f40          CMP      r0,#0x300             ;2612
000142  d10c              BNE      |L5.350|
000144  4816              LDR      r0,|L5.416|
000146  3008              ADDS     r0,r0,#8              ;2612
000148  6800              LDR      r0,[r0,#0]            ;2612
00014a  f42010f8          BIC      r0,r0,#0x1f0000       ;2612
00014e  4a17              LDR      r2,|L5.428|
000150  68e1              LDR      r1,[r4,#0xc]          ;2612
000152  4011              ANDS     r1,r1,r2              ;2612
000154  4308              ORRS     r0,r0,r1              ;2612
000156  4912              LDR      r1,|L5.416|
000158  3108              ADDS     r1,r1,#8              ;2612
00015a  6008              STR      r0,[r1,#0]            ;2612
00015c  e007              B        |L5.366|
                  |L5.350|
00015e  4810              LDR      r0,|L5.416|
000160  3008              ADDS     r0,r0,#8              ;2612
000162  6800              LDR      r0,[r0,#0]            ;2612
000164  f42010f8          BIC      r0,r0,#0x1f0000       ;2612
000168  490d              LDR      r1,|L5.416|
00016a  3108              ADDS     r1,r1,#8              ;2612
00016c  6008              STR      r0,[r1,#0]            ;2612
                  |L5.366|
00016e  480c              LDR      r0,|L5.416|
000170  3070              ADDS     r0,r0,#0x70           ;2612
000172  6800              LDR      r0,[r0,#0]            ;2612
000174  89a1              LDRH     r1,[r4,#0xc]          ;2612
000176  f3c1010b          UBFX     r1,r1,#0,#12          ;2612
00017a  4308              ORRS     r0,r0,r1              ;2612
00017c  4908              LDR      r1,|L5.416|
00017e  e000              B        |L5.386|
                  |L5.384|
000180  e002              B        |L5.392|
                  |L5.386|
000182  3170              ADDS     r1,r1,#0x70           ;2612
000184  6008              STR      r0,[r1,#0]            ;2612
000186  bf00              NOP                            ;2612
                  |L5.392|
000188  7820              LDRB     r0,[r4,#0]            ;2616
00018a  f0000008          AND      r0,r0,#8              ;2616
00018e  2808              CMP      r0,#8                 ;2616
000190  d102              BNE      |L5.408|
000192  7c20              LDRB     r0,[r4,#0x10]         ;2618
000194  4906              LDR      r1,|L5.432|
000196  6008              STR      r0,[r1,#0]            ;2618
                  |L5.408|
000198  2000              MOVS     r0,#0                 ;2621
00019a  e74b              B        |L5.52|
;;;2623   
                          ENDP

                  |L5.412|
                          DCD      0x42470000
                  |L5.416|
                          DCD      0x40023800
                  |L5.420|
                          DCD      0x40007000
                  |L5.424|
                          DCD      0x42470e40
                  |L5.428|
                          DCD      0x0ffffcff
                  |L5.432|
                          DCD      0x424711e0

                          AREA ||i.HAL_RCC_DeInit||, CODE, READONLY, ALIGN=2

                  HAL_RCC_DeInit PROC
;;;3132     */
;;;3133   HAL_StatusTypeDef HAL_RCC_DeInit(void)
000000  b510              PUSH     {r4,lr}
;;;3134   {
;;;3135     uint32_t tickstart;
;;;3136   
;;;3137     /* Get Start Tick */
;;;3138     tickstart = HAL_GetTick();
000002  f7fffffe          BL       HAL_GetTick
000006  4604              MOV      r4,r0
;;;3139   
;;;3140     /* Set HSION bit to the reset value */
;;;3141     SET_BIT(RCC->CR, RCC_CR_HSION);
000008  4856              LDR      r0,|L6.356|
00000a  6800              LDR      r0,[r0,#0]
00000c  f0400001          ORR      r0,r0,#1
000010  4954              LDR      r1,|L6.356|
000012  6008              STR      r0,[r1,#0]
;;;3142   
;;;3143     /* Wait till HSI is ready */
;;;3144     while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
000014  e006              B        |L6.36|
                  |L6.22|
;;;3145     {
;;;3146       if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
000016  f7fffffe          BL       HAL_GetTick
00001a  1b00              SUBS     r0,r0,r4
00001c  2802              CMP      r0,#2
00001e  d901              BLS      |L6.36|
;;;3147       {
;;;3148         return HAL_TIMEOUT;
000020  2003              MOVS     r0,#3
                  |L6.34|
;;;3149       }
;;;3150     }
;;;3151   
;;;3152     /* Set HSITRIM[4:0] bits to the reset value */
;;;3153     SET_BIT(RCC->CR, RCC_CR_HSITRIM_4);
;;;3154   
;;;3155     /* Get Start Tick */
;;;3156     tickstart = HAL_GetTick();
;;;3157   
;;;3158     /* Reset CFGR register */
;;;3159     CLEAR_REG(RCC->CFGR);
;;;3160   
;;;3161     /* Wait till clock switch is ready */
;;;3162     while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != RESET)
;;;3163     {
;;;3164       if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
;;;3165       {
;;;3166         return HAL_TIMEOUT;
;;;3167       }
;;;3168     }
;;;3169   
;;;3170     /* Get Start Tick */
;;;3171     tickstart = HAL_GetTick();
;;;3172   
;;;3173     /* Clear HSEON, HSEBYP and CSSON bits */
;;;3174     CLEAR_BIT(RCC->CR, RCC_CR_HSEON | RCC_CR_HSEBYP | RCC_CR_CSSON);
;;;3175   
;;;3176     /* Wait till HSE is disabled */
;;;3177     while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
;;;3178     {
;;;3179       if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
;;;3180       {
;;;3181         return HAL_TIMEOUT;
;;;3182       }
;;;3183     }
;;;3184   
;;;3185     /* Get Start Tick */
;;;3186     tickstart = HAL_GetTick();
;;;3187   
;;;3188     /* Clear PLLON bit */
;;;3189     CLEAR_BIT(RCC->CR, RCC_CR_PLLON);
;;;3190   
;;;3191     /* Wait till PLL is disabled */
;;;3192     while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
;;;3193     {
;;;3194       if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
;;;3195       {
;;;3196         return HAL_TIMEOUT;
;;;3197       }
;;;3198     }
;;;3199   
;;;3200   #if defined(RCC_PLLI2S_SUPPORT)
;;;3201     /* Get Start Tick */
;;;3202     tickstart = HAL_GetTick();
;;;3203   
;;;3204     /* Reset PLLI2SON bit */
;;;3205     CLEAR_BIT(RCC->CR, RCC_CR_PLLI2SON);
;;;3206   
;;;3207     /* Wait till PLLI2S is disabled */
;;;3208     while (READ_BIT(RCC->CR, RCC_CR_PLLI2SRDY) != RESET)
;;;3209     {
;;;3210       if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
;;;3211       {
;;;3212         return HAL_TIMEOUT;
;;;3213       }
;;;3214     }
;;;3215   #endif /* RCC_PLLI2S_SUPPORT */
;;;3216   
;;;3217   #if defined(RCC_PLLSAI_SUPPORT)
;;;3218     /* Get Start Tick */
;;;3219     tickstart = HAL_GetTick();
;;;3220   
;;;3221     /* Reset PLLSAI bit */
;;;3222     CLEAR_BIT(RCC->CR, RCC_CR_PLLSAION);
;;;3223   
;;;3224     /* Wait till PLLSAI is disabled */
;;;3225     while (READ_BIT(RCC->CR, RCC_CR_PLLSAIRDY) != RESET)
;;;3226     {
;;;3227       if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
;;;3228       {
;;;3229         return HAL_TIMEOUT;
;;;3230       }
;;;3231     }
;;;3232   #endif /* RCC_PLLSAI_SUPPORT */
;;;3233   
;;;3234     /* Once PLL, PLLI2S and PLLSAI are OFF, reset PLLCFGR register to default value */
;;;3235   #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
;;;3236       defined(STM32F423xx) || defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3237     RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLR_1;
;;;3238   #elif defined(STM32F410Tx) || defined(STM32F410Cx) || defined(STM32F410Rx)
;;;3239     RCC->PLLCFGR = RCC_PLLCFGR_PLLR_0 | RCC_PLLCFGR_PLLR_1 | RCC_PLLCFGR_PLLR_2 | RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_0 | RCC_PLLCFGR_PLLQ_1 | RCC_PLLCFGR_PLLQ_2 | RCC_PLLCFGR_PLLQ_3;
;;;3240   #else
;;;3241     RCC->PLLCFGR = RCC_PLLCFGR_PLLM_4 | RCC_PLLCFGR_PLLN_6 | RCC_PLLCFGR_PLLN_7 | RCC_PLLCFGR_PLLQ_2;
;;;3242   #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx || STM32F469xx || STM32F479xx */
;;;3243   
;;;3244     /* Reset PLLI2SCFGR register to default value */
;;;3245   #if defined(STM32F412Cx) || defined(STM32F412Rx) || defined(STM32F412Vx) || defined(STM32F412Zx) || defined(STM32F413xx) || \
;;;3246       defined(STM32F423xx) || defined(STM32F446xx)
;;;3247     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3248   #elif defined(STM32F401xC) || defined(STM32F401xE) || defined(STM32F405xx) || defined(STM32F415xx) || defined(STM32F407xx) || defined(STM32F417xx)
;;;3249     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3250   #elif defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3251     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SQ_2 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3252   #elif defined(STM32F411xE)
;;;3253     RCC->PLLI2SCFGR = RCC_PLLI2SCFGR_PLLI2SM_4 | RCC_PLLI2SCFGR_PLLI2SN_6 | RCC_PLLI2SCFGR_PLLI2SN_7 | RCC_PLLI2SCFGR_PLLI2SR_1;
;;;3254   #endif /* STM32F412Cx || STM32F412Rx || STM32F412Vx || STM32F412Zx || STM32F413xx || STM32F423xx || STM32F446xx */
;;;3255   
;;;3256     /* Reset PLLSAICFGR register */
;;;3257   #if defined(STM32F427xx) || defined(STM32F429xx) || defined(STM32F437xx) || defined(STM32F439xx) || defined(STM32F469xx) || defined(STM32F479xx)
;;;3258     RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2 | RCC_PLLSAICFGR_PLLSAIR_1;
;;;3259   #elif defined(STM32F446xx)
;;;3260     RCC->PLLSAICFGR = RCC_PLLSAICFGR_PLLSAIM_4 | RCC_PLLSAICFGR_PLLSAIN_6 | RCC_PLLSAICFGR_PLLSAIN_7 | RCC_PLLSAICFGR_PLLSAIQ_2;
;;;3261   #endif /* STM32F427xx || STM32F429xx || STM32F437xx || STM32F439xx || STM32F469xx || STM32F479xx */
;;;3262   
;;;3263     /* Disable all interrupts */
;;;3264     CLEAR_BIT(RCC->CIR, RCC_CIR_LSIRDYIE | RCC_CIR_LSERDYIE | RCC_CIR_HSIRDYIE | RCC_CIR_HSERDYIE | RCC_CIR_PLLRDYIE);
;;;3265   
;;;3266   #if defined(RCC_CIR_PLLI2SRDYIE)
;;;3267     CLEAR_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYIE);
;;;3268   #endif /* RCC_CIR_PLLI2SRDYIE */
;;;3269   
;;;3270   #if defined(RCC_CIR_PLLSAIRDYIE)
;;;3271     CLEAR_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYIE);
;;;3272   #endif /* RCC_CIR_PLLSAIRDYIE */
;;;3273   
;;;3274     /* Clear all interrupt flags */
;;;3275     SET_BIT(RCC->CIR, RCC_CIR_LSIRDYC | RCC_CIR_LSERDYC | RCC_CIR_HSIRDYC | RCC_CIR_HSERDYC | RCC_CIR_PLLRDYC | RCC_CIR_CSSC);
;;;3276   
;;;3277   #if defined(RCC_CIR_PLLI2SRDYC)
;;;3278     SET_BIT(RCC->CIR, RCC_CIR_PLLI2SRDYC);
;;;3279   #endif /* RCC_CIR_PLLI2SRDYC */
;;;3280   
;;;3281   #if defined(RCC_CIR_PLLSAIRDYC)
;;;3282     SET_BIT(RCC->CIR, RCC_CIR_PLLSAIRDYC);
;;;3283   #endif /* RCC_CIR_PLLSAIRDYC */
;;;3284   
;;;3285     /* Clear LSION bit */
;;;3286     CLEAR_BIT(RCC->CSR, RCC_CSR_LSION);
;;;3287   
;;;3288     /* Reset all CSR flags */
;;;3289     SET_BIT(RCC->CSR, RCC_CSR_RMVF);
;;;3290   
;;;3291     /* Update the SystemCoreClock global variable */
;;;3292     SystemCoreClock = HSI_VALUE;
;;;3293   
;;;3294     /* Adapt Systick interrupt period */
;;;3295     if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
;;;3296     {
;;;3297       return HAL_ERROR;
;;;3298     }
;;;3299     else
;;;3300     {
;;;3301       return HAL_OK;
;;;3302     }
;;;3303   }
000022  bd10              POP      {r4,pc}
                  |L6.36|
000024  484f              LDR      r0,|L6.356|
000026  6800              LDR      r0,[r0,#0]            ;3144
000028  f0000002          AND      r0,r0,#2              ;3144
00002c  2800              CMP      r0,#0                 ;3144
00002e  d0f2              BEQ      |L6.22|
000030  484c              LDR      r0,|L6.356|
000032  6800              LDR      r0,[r0,#0]            ;3153
000034  f0400080          ORR      r0,r0,#0x80           ;3153
000038  494a              LDR      r1,|L6.356|
00003a  6008              STR      r0,[r1,#0]            ;3153
00003c  f7fffffe          BL       HAL_GetTick
000040  4604              MOV      r4,r0                 ;3156
000042  2000              MOVS     r0,#0                 ;3159
000044  4947              LDR      r1,|L6.356|
000046  3108              ADDS     r1,r1,#8              ;3159
000048  6008              STR      r0,[r1,#0]            ;3159
00004a  e008              B        |L6.94|
                  |L6.76|
00004c  f7fffffe          BL       HAL_GetTick
000050  1b00              SUBS     r0,r0,r4              ;3164
000052  f2413188          MOV      r1,#0x1388            ;3164
000056  4288              CMP      r0,r1                 ;3164
000058  d901              BLS      |L6.94|
00005a  2003              MOVS     r0,#3                 ;3166
00005c  e7e1              B        |L6.34|
                  |L6.94|
00005e  4841              LDR      r0,|L6.356|
000060  3008              ADDS     r0,r0,#8              ;3162
000062  6800              LDR      r0,[r0,#0]            ;3162
000064  f000000c          AND      r0,r0,#0xc            ;3162
000068  2800              CMP      r0,#0                 ;3162
00006a  d1ef              BNE      |L6.76|
00006c  f7fffffe          BL       HAL_GetTick
000070  4604              MOV      r4,r0                 ;3171
000072  483c              LDR      r0,|L6.356|
000074  6800              LDR      r0,[r0,#0]            ;3174
000076  f4202050          BIC      r0,r0,#0xd0000        ;3174
00007a  493a              LDR      r1,|L6.356|
00007c  6008              STR      r0,[r1,#0]            ;3174
00007e  e006              B        |L6.142|
                  |L6.128|
000080  f7fffffe          BL       HAL_GetTick
000084  1b00              SUBS     r0,r0,r4              ;3179
000086  2864              CMP      r0,#0x64              ;3179
000088  d901              BLS      |L6.142|
00008a  2003              MOVS     r0,#3                 ;3181
00008c  e7c9              B        |L6.34|
                  |L6.142|
00008e  4835              LDR      r0,|L6.356|
000090  6800              LDR      r0,[r0,#0]            ;3177
000092  f4003000          AND      r0,r0,#0x20000        ;3177
000096  2800              CMP      r0,#0                 ;3177
000098  d1f2              BNE      |L6.128|
00009a  f7fffffe          BL       HAL_GetTick
00009e  4604              MOV      r4,r0                 ;3186
0000a0  4830              LDR      r0,|L6.356|
0000a2  6800              LDR      r0,[r0,#0]            ;3189
0000a4  f0207080          BIC      r0,r0,#0x1000000      ;3189
0000a8  492e              LDR      r1,|L6.356|
0000aa  6008              STR      r0,[r1,#0]            ;3189
0000ac  e006              B        |L6.188|
                  |L6.174|
0000ae  f7fffffe          BL       HAL_GetTick
0000b2  1b00              SUBS     r0,r0,r4              ;3194
0000b4  2802              CMP      r0,#2                 ;3194
0000b6  d901              BLS      |L6.188|
0000b8  2003              MOVS     r0,#3                 ;3196
0000ba  e7b2              B        |L6.34|
                  |L6.188|
0000bc  4829              LDR      r0,|L6.356|
0000be  6800              LDR      r0,[r0,#0]            ;3192
0000c0  f0007000          AND      r0,r0,#0x2000000      ;3192
0000c4  2800              CMP      r0,#0                 ;3192
0000c6  d1f2              BNE      |L6.174|
0000c8  f7fffffe          BL       HAL_GetTick
0000cc  4604              MOV      r4,r0                 ;3202
0000ce  4825              LDR      r0,|L6.356|
0000d0  6800              LDR      r0,[r0,#0]            ;3205
0000d2  f0206080          BIC      r0,r0,#0x4000000      ;3205
0000d6  4923              LDR      r1,|L6.356|
0000d8  6008              STR      r0,[r1,#0]            ;3205
0000da  e006              B        |L6.234|
                  |L6.220|
0000dc  f7fffffe          BL       HAL_GetTick
0000e0  1b00              SUBS     r0,r0,r4              ;3210
0000e2  2802              CMP      r0,#2                 ;3210
0000e4  d901              BLS      |L6.234|
0000e6  2003              MOVS     r0,#3                 ;3212
0000e8  e79b              B        |L6.34|
                  |L6.234|
0000ea  481e              LDR      r0,|L6.356|
0000ec  6800              LDR      r0,[r0,#0]            ;3208
0000ee  f0006000          AND      r0,r0,#0x8000000      ;3208
0000f2  2800              CMP      r0,#0                 ;3208
0000f4  d1f2              BNE      |L6.220|
0000f6  481c              LDR      r0,|L6.360|
0000f8  491a              LDR      r1,|L6.356|
0000fa  1d09              ADDS     r1,r1,#4              ;3241
0000fc  6008              STR      r0,[r1,#0]            ;3241
0000fe  481b              LDR      r0,|L6.364|
000100  4918              LDR      r1,|L6.356|
000102  3184              ADDS     r1,r1,#0x84           ;3249
000104  6008              STR      r0,[r1,#0]            ;3249
000106  4817              LDR      r0,|L6.356|
000108  300c              ADDS     r0,r0,#0xc            ;3264
00010a  6800              LDR      r0,[r0,#0]            ;3264
00010c  f42050f8          BIC      r0,r0,#0x1f00         ;3264
000110  4914              LDR      r1,|L6.356|
000112  310c              ADDS     r1,r1,#0xc            ;3264
000114  6008              STR      r0,[r1,#0]            ;3264
000116  4608              MOV      r0,r1                 ;3267
000118  6800              LDR      r0,[r0,#0]            ;3267
00011a  f4205000          BIC      r0,r0,#0x2000         ;3267
00011e  6008              STR      r0,[r1,#0]            ;3267
000120  4608              MOV      r0,r1                 ;3275
000122  6800              LDR      r0,[r0,#0]            ;3275
000124  f440001f          ORR      r0,r0,#0x9f0000       ;3275
000128  6008              STR      r0,[r1,#0]            ;3275
00012a  4608              MOV      r0,r1                 ;3278
00012c  6800              LDR      r0,[r0,#0]            ;3278
00012e  f4401000          ORR      r0,r0,#0x200000       ;3278
000132  6008              STR      r0,[r1,#0]            ;3278
000134  480b              LDR      r0,|L6.356|
000136  3074              ADDS     r0,r0,#0x74           ;3286
000138  6800              LDR      r0,[r0,#0]            ;3286
00013a  f0200001          BIC      r0,r0,#1              ;3286
00013e  4909              LDR      r1,|L6.356|
000140  3174              ADDS     r1,r1,#0x74           ;3286
000142  6008              STR      r0,[r1,#0]            ;3286
000144  4608              MOV      r0,r1                 ;3289
000146  6800              LDR      r0,[r0,#0]            ;3289
000148  f0407080          ORR      r0,r0,#0x1000000      ;3289
00014c  6008              STR      r0,[r1,#0]            ;3289
00014e  4808              LDR      r0,|L6.368|
000150  4908              LDR      r1,|L6.372|
000152  6008              STR      r0,[r1,#0]            ;3292  ; SystemCoreClock
000154  200f              MOVS     r0,#0xf               ;3295
000156  f7fffffe          BL       HAL_InitTick
00015a  b108              CBZ      r0,|L6.352|
00015c  2001              MOVS     r0,#1                 ;3297
00015e  e760              B        |L6.34|
                  |L6.352|
000160  2000              MOVS     r0,#0                 ;3301
000162  e75e              B        |L6.34|
;;;3304   
                          ENDP

                  |L6.356|
                          DCD      0x40023800
                  |L6.360|
                          DCD      0x04003010
                  |L6.364|
                          DCD      0x20003000
                  |L6.368|
                          DCD      0x00f42400
                  |L6.372|
                          DCD      SystemCoreClock

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\Drivers\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_rcc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REVSH|
#line 402
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____RRX|
#line 587
|__asm___22_stm32f4xx_hal_rcc_ex_c_bed13b44____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
