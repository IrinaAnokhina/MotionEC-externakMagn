; generated by Component: ARM Compiler 5.06 update 6 (build 750) Tool: ArmCC [4d3637]
; commandline ArmCC [--c99 --list --split_sections --debug -c --asm --interleave -o.\stm32f4xx-nucleo-iks01a2\objects\stm32f4xx_hal_adc_ex.o --asm_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --list_dir=.\STM32F4xx-Nucleo-IKS01A2\Listings\ --depend=.\stm32f4xx-nucleo-iks01a2\objects\stm32f4xx_hal_adc_ex.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\Inc -I..\..\..\..\..\..\Drivers\CMSIS\Device\ST\STM32F4xx\Include -I..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Inc -I..\..\..\..\..\..\Drivers\BSP\STM32F4xx-Nucleo -I..\..\..\..\..\..\Drivers\BSP\Components\Common -I..\..\..\..\..\..\Drivers\CMSIS\Include -I..\..\..\..\..\..\Drivers\BSP\Components\hts221 -I..\..\..\..\..\..\Drivers\BSP\Components\lps22hb -I..\..\..\..\..\..\Drivers\BSP\Components\lsm6dsl -I..\..\..\..\..\..\Drivers\BSP\Components\lsm303agr -I..\..\..\..\..\..\Drivers\BSP\IKS01A2 -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionEC_Library\Inc -I..\..\..\..\..\..\Middlewares\ST\STM32_MotionMC_Library\Inc -I.\LSM9DS1 -I.\LSM9DS1 -I.\RTE\_STM32F4xx-Nucleo-IKS01A2 -IC:\Keil_v5\ARM\PACK\Keil\STM32F4xx_DFP\2.13.0\Drivers\CMSIS\Device\ST\STM32F4xx\Include -IC:\Keil_v5\ARM\CMSIS\Include -D__MICROLIB -D__UVISION_VERSION=526 -DSTM32F401xE -DSTM32F401xE -DUSE_HAL_DRIVER -DUSE_STM32F4XX_NUCLEO -DUSE_IKS01A2 ..\..\..\..\..\..\Drivers\STM32F4xx_HAL_Driver\Src\stm32f4xx_hal_adc_ex.c]
                          THUMB

                          AREA ||i.ADC_MultiModeDMAConvCplt||, CODE, READONLY, ALIGN=1

                  ADC_MultiModeDMAConvCplt PROC
;;;1009     */
;;;1010   static void ADC_MultiModeDMAConvCplt(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;1011   {
000002  4605              MOV      r5,r0
;;;1012     /* Retrieve ADC handle corresponding to current DMA handle */
;;;1013     ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;1014     
;;;1015     /* Update state machine on conversion status if not in error state */
;;;1016     if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
000006  6c20              LDR      r0,[r4,#0x40]
000008  f0000050          AND      r0,r0,#0x50
00000c  bb50              CBNZ     r0,|L1.100|
;;;1017     {
;;;1018       /* Update ADC state machine */
;;;1019       SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
00000e  6c20              LDR      r0,[r4,#0x40]
000010  f4407000          ORR      r0,r0,#0x200
000014  6420              STR      r0,[r4,#0x40]
;;;1020       
;;;1021       /* Determine whether any further conversion upcoming on group regular   */
;;;1022       /* by external trigger, continuous mode or scan sequence on going.      */
;;;1023       /* Note: On STM32F4, there is no independent flag of end of sequence.   */
;;;1024       /*       The test of scan sequence on going is done either with scan    */
;;;1025       /*       sequence disabled or with end of conversion flag set to        */
;;;1026       /*       of end of sequence.                                            */
;;;1027       if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
000016  6820              LDR      r0,[r4,#0]
000018  6880              LDR      r0,[r0,#8]
00001a  f0005040          AND      r0,r0,#0x30000000
00001e  b9e8              CBNZ     r0,|L1.92|
;;;1028          (hadc->Init.ContinuousConvMode == DISABLE)            &&
000020  7e20              LDRB     r0,[r4,#0x18]
000022  b9d8              CBNZ     r0,|L1.92|
;;;1029          (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
000024  6820              LDR      r0,[r4,#0]
000026  6ac0              LDR      r0,[r0,#0x2c]
000028  f4000070          AND      r0,r0,#0xf00000
00002c  b120              CBZ      r0,|L1.56|
;;;1030           HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
00002e  6820              LDR      r0,[r4,#0]
000030  6880              LDR      r0,[r0,#8]
000032  f4006080          AND      r0,r0,#0x400
000036  b988              CBNZ     r0,|L1.92|
                  |L1.56|
;;;1031       {
;;;1032         /* Disable ADC end of single conversion interrupt on group regular */
;;;1033         /* Note: Overrun interrupt was enabled with EOC interrupt in          */
;;;1034         /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
;;;1035         /* by overrun IRQ process below.                                      */
;;;1036         __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
000038  6820              LDR      r0,[r4,#0]
00003a  6840              LDR      r0,[r0,#4]
00003c  f0200020          BIC      r0,r0,#0x20
000040  6821              LDR      r1,[r4,#0]
000042  6048              STR      r0,[r1,#4]
;;;1037         
;;;1038         /* Set ADC state */
;;;1039         CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
000044  6c20              LDR      r0,[r4,#0x40]
000046  f4207080          BIC      r0,r0,#0x100
00004a  6420              STR      r0,[r4,#0x40]
;;;1040         
;;;1041         if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
00004c  6c20              LDR      r0,[r4,#0x40]
00004e  f4005080          AND      r0,r0,#0x1000
000052  b918              CBNZ     r0,|L1.92|
;;;1042         {
;;;1043           SET_BIT(hadc->State, HAL_ADC_STATE_READY);
000054  6c20              LDR      r0,[r4,#0x40]
000056  f0400001          ORR      r0,r0,#1
00005a  6420              STR      r0,[r4,#0x40]
                  |L1.92|
;;;1044         }
;;;1045       }
;;;1046       
;;;1047       /* Conversion complete callback */
;;;1048       HAL_ADC_ConvCpltCallback(hadc);
00005c  4620              MOV      r0,r4
00005e  f7fffffe          BL       HAL_ADC_ConvCpltCallback
000062  e003              B        |L1.108|
                  |L1.100|
;;;1049     }
;;;1050     else
;;;1051     {
;;;1052       /* Call DMA error callback */
;;;1053       hadc->DMA_Handle->XferErrorCallback(hdma);
000064  6ba0              LDR      r0,[r4,#0x38]
000066  6cc1              LDR      r1,[r0,#0x4c]
000068  4628              MOV      r0,r5
00006a  4788              BLX      r1
                  |L1.108|
;;;1054     }
;;;1055   }
00006c  bd70              POP      {r4-r6,pc}
;;;1056   
                          ENDP


                          AREA ||i.ADC_MultiModeDMAError||, CODE, READONLY, ALIGN=1

                  ADC_MultiModeDMAError PROC
;;;1075     */
;;;1076   static void ADC_MultiModeDMAError(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;1077   {
000002  4605              MOV      r5,r0
;;;1078       ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6bac              LDR      r4,[r5,#0x38]
;;;1079       hadc->State= HAL_ADC_STATE_ERROR_DMA;
000006  2040              MOVS     r0,#0x40
000008  6420              STR      r0,[r4,#0x40]
;;;1080       /* Set ADC error code to DMA error */
;;;1081       hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
00000a  6c60              LDR      r0,[r4,#0x44]
00000c  f0400004          ORR      r0,r0,#4
000010  6460              STR      r0,[r4,#0x44]
;;;1082       HAL_ADC_ErrorCallback(hadc); 
000012  4620              MOV      r0,r4
000014  f7fffffe          BL       HAL_ADC_ErrorCallback
;;;1083   }
000018  bd70              POP      {r4-r6,pc}
;;;1084   
                          ENDP


                          AREA ||i.ADC_MultiModeDMAHalfConvCplt||, CODE, READONLY, ALIGN=1

                  ADC_MultiModeDMAHalfConvCplt PROC
;;;1062     */
;;;1063   static void ADC_MultiModeDMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
000000  b570              PUSH     {r4-r6,lr}
;;;1064   {
000002  4604              MOV      r4,r0
;;;1065       ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
000004  6ba5              LDR      r5,[r4,#0x38]
;;;1066       /* Conversion complete callback */
;;;1067       HAL_ADC_ConvHalfCpltCallback(hadc); 
000006  4628              MOV      r0,r5
000008  f7fffffe          BL       HAL_ADC_ConvHalfCpltCallback
;;;1068   }
00000c  bd70              POP      {r4-r6,pc}
;;;1069   
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_InjectedConfigChannel PROC
;;;798      */
;;;799    HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
000000  b530              PUSH     {r4,r5,lr}
;;;800    {
000002  4602              MOV      r2,r0
;;;801      
;;;802    #ifdef USE_FULL_ASSERT  
;;;803      uint32_t tmp = 0U;
;;;804      
;;;805    #endif /* USE_FULL_ASSERT  */
;;;806    
;;;807      ADC_Common_TypeDef *tmpADC_Common;
;;;808    
;;;809      /* Check the parameters */
;;;810      assert_param(IS_ADC_CHANNEL(sConfigInjected->InjectedChannel));
;;;811      assert_param(IS_ADC_INJECTED_RANK(sConfigInjected->InjectedRank));
;;;812      assert_param(IS_ADC_SAMPLE_TIME(sConfigInjected->InjectedSamplingTime));
;;;813      assert_param(IS_ADC_EXT_INJEC_TRIG(sConfigInjected->ExternalTrigInjecConv));
;;;814      assert_param(IS_ADC_INJECTED_LENGTH(sConfigInjected->InjectedNbrOfConversion));
;;;815      assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->AutoInjectedConv));
;;;816      assert_param(IS_FUNCTIONAL_STATE(sConfigInjected->InjectedDiscontinuousConvMode));
;;;817    
;;;818    #ifdef USE_FULL_ASSERT
;;;819      tmp = ADC_GET_RESOLUTION(hadc);
;;;820      assert_param(IS_ADC_RANGE(tmp, sConfigInjected->InjectedOffset));
;;;821    #endif /* USE_FULL_ASSERT  */
;;;822    
;;;823      if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
000004  4c85              LDR      r4,|L4.540|
000006  6988              LDR      r0,[r1,#0x18]
000008  42a0              CMP      r0,r4
00000a  d000              BEQ      |L4.14|
;;;824      {
;;;825        assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
00000c  bf00              NOP      
                  |L4.14|
;;;826      }
;;;827    
;;;828      /* Process locked */
;;;829      __HAL_LOCK(hadc);
00000e  bf00              NOP      
000010  f892003c          LDRB     r0,[r2,#0x3c]
000014  2801              CMP      r0,#1
000016  d101              BNE      |L4.28|
000018  2002              MOVS     r0,#2
                  |L4.26|
;;;830      
;;;831      /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
;;;832      if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
;;;833      {
;;;834        /* Clear the old sample time */
;;;835        hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
;;;836        
;;;837        /* Set the new sample time */
;;;838        hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
;;;839      }
;;;840      else /* ADC_Channel include in ADC_Channel_[0..9] */
;;;841      {
;;;842        /* Clear the old sample time */
;;;843        hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
;;;844        
;;;845        /* Set the new sample time */
;;;846        hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
;;;847      }
;;;848      
;;;849      /*---------------------------- ADCx JSQR Configuration -----------------*/
;;;850      hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
;;;851      hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
;;;852      
;;;853      /* Rank configuration */
;;;854      
;;;855      /* Clear the old SQx bits for the selected rank */
;;;856      hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
;;;857       
;;;858      /* Set the SQx bits for the selected rank */
;;;859      hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
;;;860    
;;;861      /* Enable external trigger if trigger selection is different of software  */
;;;862      /* start.                                                                 */
;;;863      /* Note: This configuration keeps the hardware feature of parameter       */
;;;864      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
;;;865      /*       software start.                                                  */ 
;;;866      if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
;;;867      {  
;;;868        /* Select external trigger to start conversion */
;;;869        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
;;;870        hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
;;;871        
;;;872        /* Select external trigger polarity */
;;;873        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
;;;874        hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
;;;875      }
;;;876      else
;;;877      {
;;;878        /* Reset the external trigger */
;;;879        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
;;;880        hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
;;;881      }
;;;882      
;;;883      if (sConfigInjected->AutoInjectedConv != DISABLE)
;;;884      {
;;;885        /* Enable the selected ADC automatic injected group conversion */
;;;886        hadc->Instance->CR1 |= ADC_CR1_JAUTO;
;;;887      }
;;;888      else
;;;889      {
;;;890        /* Disable the selected ADC automatic injected group conversion */
;;;891        hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
;;;892      }
;;;893      
;;;894      if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
;;;895      {
;;;896        /* Enable the selected ADC injected discontinuous mode */
;;;897        hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
;;;898      }
;;;899      else
;;;900      {
;;;901        /* Disable the selected ADC injected discontinuous mode */
;;;902        hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
;;;903      }
;;;904      
;;;905      switch(sConfigInjected->InjectedRank)
;;;906      {
;;;907        case 1U:
;;;908          /* Set injected channel 1 offset */
;;;909          hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
;;;910          hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
;;;911          break;
;;;912        case 2U:
;;;913          /* Set injected channel 2 offset */
;;;914          hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
;;;915          hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
;;;916          break;
;;;917        case 3U:
;;;918          /* Set injected channel 3 offset */
;;;919          hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
;;;920          hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
;;;921          break;
;;;922        default:
;;;923          /* Set injected channel 4 offset */
;;;924          hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
;;;925          hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
;;;926          break;
;;;927      }
;;;928    
;;;929      /* Pointer to the common control register to which is belonging hadc    */
;;;930      /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;931      /* control register)                                                    */
;;;932        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;933    
;;;934      /* if ADC1 Channel_18 is selected enable VBAT Channel */
;;;935      if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
;;;936      {
;;;937        /* Enable the VBAT channel*/
;;;938        tmpADC_Common->CCR |= ADC_CCR_VBATE;
;;;939      }
;;;940      
;;;941      /* if ADC1 Channel_16 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
;;;942      if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
;;;943      {
;;;944        /* Enable the TSVREFE channel*/
;;;945        tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
;;;946      }
;;;947      
;;;948      /* Process unlocked */
;;;949      __HAL_UNLOCK(hadc);
;;;950      
;;;951      /* Return function status */
;;;952      return HAL_OK;
;;;953    }
00001a  bd30              POP      {r4,r5,pc}
                  |L4.28|
00001c  2001              MOVS     r0,#1                 ;829
00001e  f882003c          STRB     r0,[r2,#0x3c]         ;829
000022  bf00              NOP                            ;829
000024  6808              LDR      r0,[r1,#0]            ;832
000026  2809              CMP      r0,#9                 ;832
000028  d916              BLS      |L4.88|
00002a  6810              LDR      r0,[r2,#0]            ;835
00002c  68c0              LDR      r0,[r0,#0xc]          ;835
00002e  780c              LDRB     r4,[r1,#0]            ;835
000030  3c0a              SUBS     r4,r4,#0xa            ;835
000032  eb040544          ADD      r5,r4,r4,LSL #1       ;835
000036  2407              MOVS     r4,#7                 ;835
000038  40ac              LSLS     r4,r4,r5              ;835
00003a  43a0              BICS     r0,r0,r4              ;835
00003c  6814              LDR      r4,[r2,#0]            ;835
00003e  60e0              STR      r0,[r4,#0xc]          ;835
000040  780c              LDRB     r4,[r1,#0]            ;838
000042  3c0a              SUBS     r4,r4,#0xa            ;838
000044  eb040444          ADD      r4,r4,r4,LSL #1       ;838
000048  6888              LDR      r0,[r1,#8]            ;838
00004a  40a0              LSLS     r0,r0,r4              ;838
00004c  6814              LDR      r4,[r2,#0]            ;838
00004e  68e4              LDR      r4,[r4,#0xc]          ;838
000050  4320              ORRS     r0,r0,r4              ;838
000052  6814              LDR      r4,[r2,#0]            ;838
000054  60e0              STR      r0,[r4,#0xc]          ;838
000056  e013              B        |L4.128|
                  |L4.88|
000058  6810              LDR      r0,[r2,#0]            ;843
00005a  6900              LDR      r0,[r0,#0x10]         ;843
00005c  780c              LDRB     r4,[r1,#0]            ;843
00005e  eb040544          ADD      r5,r4,r4,LSL #1       ;843
000062  2407              MOVS     r4,#7                 ;843
000064  40ac              LSLS     r4,r4,r5              ;843
000066  43a0              BICS     r0,r0,r4              ;843
000068  6814              LDR      r4,[r2,#0]            ;843
00006a  6120              STR      r0,[r4,#0x10]         ;843
00006c  780c              LDRB     r4,[r1,#0]            ;846
00006e  eb040444          ADD      r4,r4,r4,LSL #1       ;846
000072  6888              LDR      r0,[r1,#8]            ;846
000074  40a0              LSLS     r0,r0,r4              ;846
000076  6814              LDR      r4,[r2,#0]            ;846
000078  6924              LDR      r4,[r4,#0x10]         ;846
00007a  4320              ORRS     r0,r0,r4              ;846
00007c  6814              LDR      r4,[r2,#0]            ;846
00007e  6120              STR      r0,[r4,#0x10]         ;846
                  |L4.128|
000080  6810              LDR      r0,[r2,#0]            ;850
000082  6b80              LDR      r0,[r0,#0x38]         ;850
000084  f4201040          BIC      r0,r0,#0x300000       ;850
000088  6814              LDR      r4,[r2,#0]            ;850
00008a  63a0              STR      r0,[r4,#0x38]         ;850
00008c  6810              LDR      r0,[r2,#0]            ;851
00008e  6b84              LDR      r4,[r0,#0x38]         ;851
000090  8a08              LDRH     r0,[r1,#0x10]         ;851
000092  1e40              SUBS     r0,r0,#1              ;851
000094  ea445000          ORR      r0,r4,r0,LSL #20      ;851
000098  6814              LDR      r4,[r2,#0]            ;851
00009a  63a0              STR      r0,[r4,#0x38]         ;851
00009c  7908              LDRB     r0,[r1,#4]            ;856
00009e  1cc0              ADDS     r0,r0,#3              ;856
0000a0  7c0c              LDRB     r4,[r1,#0x10]         ;856
0000a2  1b00              SUBS     r0,r0,r4              ;856
0000a4  eb000480          ADD      r4,r0,r0,LSL #2       ;856
0000a8  201f              MOVS     r0,#0x1f              ;856
0000aa  40a0              LSLS     r0,r0,r4              ;856
0000ac  6814              LDR      r4,[r2,#0]            ;856
0000ae  6ba4              LDR      r4,[r4,#0x38]         ;856
0000b0  4384              BICS     r4,r4,r0              ;856
0000b2  6810              LDR      r0,[r2,#0]            ;856
0000b4  6384              STR      r4,[r0,#0x38]         ;856
0000b6  7908              LDRB     r0,[r1,#4]            ;859
0000b8  1cc0              ADDS     r0,r0,#3              ;859
0000ba  7c0c              LDRB     r4,[r1,#0x10]         ;859
0000bc  1b00              SUBS     r0,r0,r4              ;859
0000be  eb000480          ADD      r4,r0,r0,LSL #2       ;859
0000c2  8808              LDRH     r0,[r1,#0]            ;859
0000c4  b280              UXTH     r0,r0                 ;859
0000c6  40a0              LSLS     r0,r0,r4              ;859
0000c8  6814              LDR      r4,[r2,#0]            ;859
0000ca  6ba4              LDR      r4,[r4,#0x38]         ;859
0000cc  4320              ORRS     r0,r0,r4              ;859
0000ce  6814              LDR      r4,[r2,#0]            ;859
0000d0  63a0              STR      r0,[r4,#0x38]         ;859
0000d2  4c52              LDR      r4,|L4.540|
0000d4  6988              LDR      r0,[r1,#0x18]         ;866
0000d6  42a0              CMP      r0,r4                 ;866
0000d8  d018              BEQ      |L4.268|
0000da  6810              LDR      r0,[r2,#0]            ;869
0000dc  6880              LDR      r0,[r0,#8]            ;869
0000de  f4202070          BIC      r0,r0,#0xf0000        ;869
0000e2  6814              LDR      r4,[r2,#0]            ;869
0000e4  60a0              STR      r0,[r4,#8]            ;869
0000e6  6810              LDR      r0,[r2,#0]            ;870
0000e8  6880              LDR      r0,[r0,#8]            ;870
0000ea  698c              LDR      r4,[r1,#0x18]         ;870
0000ec  4320              ORRS     r0,r0,r4              ;870
0000ee  6814              LDR      r4,[r2,#0]            ;870
0000f0  60a0              STR      r0,[r4,#8]            ;870
0000f2  6810              LDR      r0,[r2,#0]            ;873
0000f4  6880              LDR      r0,[r0,#8]            ;873
0000f6  f4201040          BIC      r0,r0,#0x300000       ;873
0000fa  6814              LDR      r4,[r2,#0]            ;873
0000fc  60a0              STR      r0,[r4,#8]            ;873
0000fe  6810              LDR      r0,[r2,#0]            ;874
000100  6880              LDR      r0,[r0,#8]            ;874
000102  69cc              LDR      r4,[r1,#0x1c]         ;874
000104  4320              ORRS     r0,r0,r4              ;874
000106  6814              LDR      r4,[r2,#0]            ;874
000108  60a0              STR      r0,[r4,#8]            ;874
00010a  e00b              B        |L4.292|
                  |L4.268|
00010c  6810              LDR      r0,[r2,#0]            ;879
00010e  6880              LDR      r0,[r0,#8]            ;879
000110  f4202070          BIC      r0,r0,#0xf0000        ;879
000114  6814              LDR      r4,[r2,#0]            ;879
000116  60a0              STR      r0,[r4,#8]            ;879
000118  6810              LDR      r0,[r2,#0]            ;880
00011a  6880              LDR      r0,[r0,#8]            ;880
00011c  f4201040          BIC      r0,r0,#0x300000       ;880
000120  6814              LDR      r4,[r2,#0]            ;880
000122  60a0              STR      r0,[r4,#8]            ;880
                  |L4.292|
000124  7d48              LDRB     r0,[r1,#0x15]         ;883
000126  b130              CBZ      r0,|L4.310|
000128  6810              LDR      r0,[r2,#0]            ;886
00012a  6840              LDR      r0,[r0,#4]            ;886
00012c  f4406080          ORR      r0,r0,#0x400          ;886
000130  6814              LDR      r4,[r2,#0]            ;886
000132  6060              STR      r0,[r4,#4]            ;886
000134  e005              B        |L4.322|
                  |L4.310|
000136  6810              LDR      r0,[r2,#0]            ;891
000138  6840              LDR      r0,[r0,#4]            ;891
00013a  f4206080          BIC      r0,r0,#0x400          ;891
00013e  6814              LDR      r4,[r2,#0]            ;891
000140  6060              STR      r0,[r4,#4]            ;891
                  |L4.322|
000142  7d08              LDRB     r0,[r1,#0x14]         ;894
000144  b130              CBZ      r0,|L4.340|
000146  6810              LDR      r0,[r2,#0]            ;897
000148  6840              LDR      r0,[r0,#4]            ;897
00014a  f4405080          ORR      r0,r0,#0x1000         ;897
00014e  6814              LDR      r4,[r2,#0]            ;897
000150  6060              STR      r0,[r4,#4]            ;897
000152  e005              B        |L4.352|
                  |L4.340|
000154  6810              LDR      r0,[r2,#0]            ;902
000156  6840              LDR      r0,[r0,#4]            ;902
000158  f4205080          BIC      r0,r0,#0x1000         ;902
00015c  6814              LDR      r4,[r2,#0]            ;902
00015e  6060              STR      r0,[r4,#4]            ;902
                  |L4.352|
000160  6848              LDR      r0,[r1,#4]            ;905
000162  2801              CMP      r0,#1                 ;905
000164  d004              BEQ      |L4.368|
000166  2802              CMP      r0,#2                 ;905
000168  d00f              BEQ      |L4.394|
00016a  2803              CMP      r0,#3                 ;905
00016c  d127              BNE      |L4.446|
00016e  e019              B        |L4.420|
                  |L4.368|
000170  6810              LDR      r0,[r2,#0]            ;909
000172  6940              LDR      r0,[r0,#0x14]         ;909
000174  f36f000b          BFC      r0,#0,#12             ;909
000178  6814              LDR      r4,[r2,#0]            ;909
00017a  6160              STR      r0,[r4,#0x14]         ;909
00017c  6810              LDR      r0,[r2,#0]            ;910
00017e  6940              LDR      r0,[r0,#0x14]         ;910
000180  68cc              LDR      r4,[r1,#0xc]          ;910
000182  4320              ORRS     r0,r0,r4              ;910
000184  6814              LDR      r4,[r2,#0]            ;910
000186  6160              STR      r0,[r4,#0x14]         ;910
000188  e026              B        |L4.472|
                  |L4.394|
00018a  6810              LDR      r0,[r2,#0]            ;914
00018c  6980              LDR      r0,[r0,#0x18]         ;914
00018e  f36f000b          BFC      r0,#0,#12             ;914
000192  6814              LDR      r4,[r2,#0]            ;914
000194  61a0              STR      r0,[r4,#0x18]         ;914
000196  6810              LDR      r0,[r2,#0]            ;915
000198  6980              LDR      r0,[r0,#0x18]         ;915
00019a  68cc              LDR      r4,[r1,#0xc]          ;915
00019c  4320              ORRS     r0,r0,r4              ;915
00019e  6814              LDR      r4,[r2,#0]            ;915
0001a0  61a0              STR      r0,[r4,#0x18]         ;915
0001a2  e019              B        |L4.472|
                  |L4.420|
0001a4  6810              LDR      r0,[r2,#0]            ;919
0001a6  69c0              LDR      r0,[r0,#0x1c]         ;919
0001a8  f36f000b          BFC      r0,#0,#12             ;919
0001ac  6814              LDR      r4,[r2,#0]            ;919
0001ae  61e0              STR      r0,[r4,#0x1c]         ;919
0001b0  6810              LDR      r0,[r2,#0]            ;920
0001b2  69c0              LDR      r0,[r0,#0x1c]         ;920
0001b4  68cc              LDR      r4,[r1,#0xc]          ;920
0001b6  4320              ORRS     r0,r0,r4              ;920
0001b8  6814              LDR      r4,[r2,#0]            ;920
0001ba  61e0              STR      r0,[r4,#0x1c]         ;920
0001bc  e00c              B        |L4.472|
                  |L4.446|
0001be  6810              LDR      r0,[r2,#0]            ;924
0001c0  6a00              LDR      r0,[r0,#0x20]         ;924
0001c2  f36f000b          BFC      r0,#0,#12             ;924
0001c6  6814              LDR      r4,[r2,#0]            ;924
0001c8  6220              STR      r0,[r4,#0x20]         ;924
0001ca  6810              LDR      r0,[r2,#0]            ;925
0001cc  6a00              LDR      r0,[r0,#0x20]         ;925
0001ce  68cc              LDR      r4,[r1,#0xc]          ;925
0001d0  4320              ORRS     r0,r0,r4              ;925
0001d2  6814              LDR      r4,[r2,#0]            ;925
0001d4  6220              STR      r0,[r4,#0x20]         ;925
0001d6  bf00              NOP                            ;926
                  |L4.472|
0001d8  bf00              NOP                            ;911
0001da  4b11              LDR      r3,|L4.544|
0001dc  4c11              LDR      r4,|L4.548|
0001de  6810              LDR      r0,[r2,#0]            ;935
0001e0  42a0              CMP      r0,r4                 ;935
0001e2  d106              BNE      |L4.498|
0001e4  6808              LDR      r0,[r1,#0]            ;935
0001e6  2812              CMP      r0,#0x12              ;935
0001e8  d103              BNE      |L4.498|
0001ea  6858              LDR      r0,[r3,#4]            ;938
0001ec  f4400080          ORR      r0,r0,#0x400000       ;938
0001f0  6058              STR      r0,[r3,#4]            ;938
                  |L4.498|
0001f2  4c0c              LDR      r4,|L4.548|
0001f4  6810              LDR      r0,[r2,#0]            ;942
0001f6  42a0              CMP      r0,r4                 ;942
0001f8  d109              BNE      |L4.526|
0001fa  6808              LDR      r0,[r1,#0]            ;942
0001fc  2810              CMP      r0,#0x10              ;942
0001fe  d002              BEQ      |L4.518|
000200  6808              LDR      r0,[r1,#0]            ;942
000202  2811              CMP      r0,#0x11              ;942
000204  d103              BNE      |L4.526|
                  |L4.518|
000206  6858              LDR      r0,[r3,#4]            ;945
000208  f4400000          ORR      r0,r0,#0x800000       ;945
00020c  6058              STR      r0,[r3,#4]            ;945
                  |L4.526|
00020e  bf00              NOP                            ;949
000210  2000              MOVS     r0,#0                 ;949
000212  f882003c          STRB     r0,[r2,#0x3c]         ;949
000216  bf00              NOP                            ;949
000218  bf00              NOP                            ;952
00021a  e6fe              B        |L4.26|
;;;954    
                          ENDP

                  |L4.540|
                          DCD      0x000f0001
                  |L4.544|
                          DCD      0x40012300
                  |L4.548|
                          DCD      0x40012000

                          AREA ||i.HAL_ADCEx_InjectedConvCpltCallback||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedConvCpltCallback PROC
;;;781      */
;;;782    __weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
000000  4770              BX       lr
;;;783    {
;;;784      /* Prevent unused argument(s) compilation warning */
;;;785      UNUSED(hadc);
;;;786      /* NOTE : This function Should not be modified, when the callback is needed,
;;;787                the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
;;;788       */
;;;789    }
;;;790    
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedGetValue||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedGetValue PROC
;;;539      */
;;;540    uint32_t HAL_ADCEx_InjectedGetValue(ADC_HandleTypeDef* hadc, uint32_t InjectedRank)
000000  b508              PUSH     {r3,lr}
;;;541    {
000002  4602              MOV      r2,r0
;;;542      __IO uint32_t tmp = 0U;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;543      
;;;544      /* Check the parameters */
;;;545      assert_param(IS_ADC_INJECTED_RANK(InjectedRank));
;;;546      
;;;547      /* Clear injected group conversion flag to have similar behaviour as        */
;;;548      /* regular group: reading data register also clears end of conversion flag. */
;;;549      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
000008  1f40              SUBS     r0,r0,#5
00000a  6813              LDR      r3,[r2,#0]
00000c  6018              STR      r0,[r3,#0]
;;;550      
;;;551      /* Return the selected ADC converted value */ 
;;;552      switch(InjectedRank)
00000e  2901              CMP      r1,#1
000010  d011              BEQ      |L6.54|
000012  2902              CMP      r1,#2
000014  d00b              BEQ      |L6.46|
000016  2903              CMP      r1,#3
000018  d005              BEQ      |L6.38|
00001a  2904              CMP      r1,#4
00001c  d10f              BNE      |L6.62|
;;;553      {  
;;;554        case ADC_INJECTED_RANK_4:
;;;555        {
;;;556          tmp =  hadc->Instance->JDR4;
00001e  6810              LDR      r0,[r2,#0]
000020  6c80              LDR      r0,[r0,#0x48]
000022  9000              STR      r0,[sp,#0]
;;;557        }  
;;;558        break;
000024  e00c              B        |L6.64|
                  |L6.38|
;;;559        case ADC_INJECTED_RANK_3: 
;;;560        {  
;;;561          tmp =  hadc->Instance->JDR3;
000026  6810              LDR      r0,[r2,#0]
000028  6c40              LDR      r0,[r0,#0x44]
00002a  9000              STR      r0,[sp,#0]
;;;562        }  
;;;563        break;
00002c  e008              B        |L6.64|
                  |L6.46|
;;;564        case ADC_INJECTED_RANK_2: 
;;;565        {  
;;;566          tmp =  hadc->Instance->JDR2;
00002e  6810              LDR      r0,[r2,#0]
000030  6c00              LDR      r0,[r0,#0x40]
000032  9000              STR      r0,[sp,#0]
;;;567        }
;;;568        break;
000034  e004              B        |L6.64|
                  |L6.54|
;;;569        case ADC_INJECTED_RANK_1:
;;;570        {
;;;571          tmp =  hadc->Instance->JDR1;
000036  6810              LDR      r0,[r2,#0]
000038  6bc0              LDR      r0,[r0,#0x3c]
00003a  9000              STR      r0,[sp,#0]
;;;572        }
;;;573        break;
00003c  e000              B        |L6.64|
                  |L6.62|
;;;574        default:
;;;575        break;  
00003e  bf00              NOP      
                  |L6.64|
000040  bf00              NOP                            ;558
;;;576      }
;;;577      return tmp;
000042  9800              LDR      r0,[sp,#0]
;;;578    }
000044  bd08              POP      {r3,pc}
;;;579    
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedPollForConversion||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedPollForConversion PROC
;;;410      */
;;;411    HAL_StatusTypeDef HAL_ADCEx_InjectedPollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
000000  b570              PUSH     {r4-r6,lr}
;;;412    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;413      uint32_t tickstart = 0U;
000006  2600              MOVS     r6,#0
;;;414    
;;;415      /* Get tick */ 
;;;416      tickstart = HAL_GetTick();
000008  f7fffffe          BL       HAL_GetTick
00000c  4606              MOV      r6,r0
;;;417    
;;;418      /* Check End of conversion flag */
;;;419      while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOC)))
00000e  e010              B        |L7.50|
                  |L7.16|
;;;420      {
;;;421        /* Check for the Timeout */
;;;422        if(Timeout != HAL_MAX_DELAY)
000010  1c68              ADDS     r0,r5,#1
000012  b170              CBZ      r0,|L7.50|
;;;423        {
;;;424          if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
000014  b125              CBZ      r5,|L7.32|
000016  f7fffffe          BL       HAL_GetTick
00001a  1b80              SUBS     r0,r0,r6
00001c  42a8              CMP      r0,r5
00001e  d908              BLS      |L7.50|
                  |L7.32|
;;;425          {
;;;426            hadc->State= HAL_ADC_STATE_TIMEOUT;
000020  2004              MOVS     r0,#4
000022  6420              STR      r0,[r4,#0x40]
;;;427            /* Process unlocked */
;;;428            __HAL_UNLOCK(hadc);
000024  bf00              NOP      
000026  2000              MOVS     r0,#0
000028  f884003c          STRB     r0,[r4,#0x3c]
00002c  bf00              NOP      
;;;429            return HAL_TIMEOUT;
00002e  2003              MOVS     r0,#3
                  |L7.48|
;;;430          }
;;;431        }
;;;432      }
;;;433      
;;;434      /* Clear injected group conversion flag */
;;;435      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JSTRT | ADC_FLAG_JEOC);
;;;436        
;;;437      /* Update ADC state machine */
;;;438      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
;;;439      
;;;440      /* Determine whether any further conversion upcoming on group injected      */
;;;441      /* by external trigger, continuous mode or scan sequence on going.          */
;;;442      /* Note: On STM32F4, there is no independent flag of end of sequence.       */
;;;443      /*       The test of scan sequence on going is done either with scan        */
;;;444      /*       sequence disabled or with end of conversion flag set to            */
;;;445      /*       of end of sequence.                                                */
;;;446      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
;;;447         (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
;;;448          HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
;;;449         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
;;;450          (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
;;;451          (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
;;;452      {
;;;453        /* Set ADC state */
;;;454        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
;;;455        
;;;456        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
;;;457        { 
;;;458          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
;;;459        }
;;;460      }
;;;461      
;;;462      /* Return ADC state */
;;;463      return HAL_OK;
;;;464    }      
000030  bd70              POP      {r4-r6,pc}
                  |L7.50|
000032  6820              LDR      r0,[r4,#0]            ;419
000034  6800              LDR      r0,[r0,#0]            ;419
000036  f0000004          AND      r0,r0,#4              ;419
00003a  2804              CMP      r0,#4                 ;419
00003c  d1e8              BNE      |L7.16|
00003e  f06f000c          MVN      r0,#0xc               ;435
000042  6821              LDR      r1,[r4,#0]            ;435
000044  6008              STR      r0,[r1,#0]            ;435
000046  6c20              LDR      r0,[r4,#0x40]         ;438
000048  f4405000          ORR      r0,r0,#0x2000         ;438
00004c  6420              STR      r0,[r4,#0x40]         ;438
00004e  6820              LDR      r0,[r4,#0]            ;446
000050  6880              LDR      r0,[r0,#8]            ;446
000052  f4001040          AND      r0,r0,#0x300000       ;446
000056  bb08              CBNZ     r0,|L7.156|
000058  6820              LDR      r0,[r4,#0]            ;447
00005a  6b80              LDR      r0,[r0,#0x38]         ;447
00005c  f4001040          AND      r0,r0,#0x300000       ;447
000060  b120              CBZ      r0,|L7.108|
000062  6820              LDR      r0,[r4,#0]            ;448
000064  6880              LDR      r0,[r0,#8]            ;448
000066  f4006080          AND      r0,r0,#0x400          ;448
00006a  b9b8              CBNZ     r0,|L7.156|
                  |L7.108|
00006c  6820              LDR      r0,[r4,#0]            ;449
00006e  6840              LDR      r0,[r0,#4]            ;449
000070  f4006080          AND      r0,r0,#0x400          ;449
000074  b990              CBNZ     r0,|L7.156|
000076  6820              LDR      r0,[r4,#0]            ;450
000078  6880              LDR      r0,[r0,#8]            ;450
00007a  f0005040          AND      r0,r0,#0x30000000     ;450
00007e  b968              CBNZ     r0,|L7.156|
000080  7e20              LDRB     r0,[r4,#0x18]         ;451
000082  b958              CBNZ     r0,|L7.156|
000084  6c20              LDR      r0,[r4,#0x40]         ;454
000086  f4205080          BIC      r0,r0,#0x1000         ;454
00008a  6420              STR      r0,[r4,#0x40]         ;454
00008c  6c20              LDR      r0,[r4,#0x40]         ;456
00008e  f4007080          AND      r0,r0,#0x100          ;456
000092  b918              CBNZ     r0,|L7.156|
000094  6c20              LDR      r0,[r4,#0x40]         ;458
000096  f0400001          ORR      r0,r0,#1              ;458
00009a  6420              STR      r0,[r4,#0x40]         ;458
                  |L7.156|
00009c  2000              MOVS     r0,#0                 ;463
00009e  e7c7              B        |L7.48|
;;;465      
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedStart||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_InjectedStart PROC
;;;158      */
;;;159    HAL_StatusTypeDef HAL_ADCEx_InjectedStart(ADC_HandleTypeDef* hadc)
000000  b538              PUSH     {r3-r5,lr}
;;;160    {
000002  4601              MOV      r1,r0
;;;161      __IO uint32_t counter = 0U;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;162      uint32_t tmp1 = 0U, tmp2 = 0U;
000008  2200              MOVS     r2,#0
00000a  2300              MOVS     r3,#0
;;;163      ADC_Common_TypeDef *tmpADC_Common;
;;;164      
;;;165      /* Process locked */
;;;166      __HAL_LOCK(hadc);
00000c  bf00              NOP      
00000e  f891003c          LDRB     r0,[r1,#0x3c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L8.26|
000016  2002              MOVS     r0,#2
                  |L8.24|
;;;167      
;;;168      /* Enable the ADC peripheral */
;;;169      
;;;170      /* Check if ADC peripheral is disabled in order to enable it and wait during 
;;;171         Tstab time the ADC's stabilization */
;;;172      if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
;;;173      {  
;;;174        /* Enable the Peripheral */
;;;175        __HAL_ADC_ENABLE(hadc);
;;;176        
;;;177        /* Delay for ADC stabilization time */
;;;178        /* Compute number of CPU cycles to wait for */
;;;179        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
;;;180        while(counter != 0U)
;;;181        {
;;;182          counter--;
;;;183        }
;;;184      }
;;;185      
;;;186      /* Start conversion if ADC is effectively enabled */
;;;187      if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
;;;188      {
;;;189        /* Set ADC state                                                          */
;;;190        /* - Clear state bitfield related to injected group conversion results    */
;;;191        /* - Set state bitfield related to injected operation                     */
;;;192        ADC_STATE_CLR_SET(hadc->State,
;;;193                          HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
;;;194                          HAL_ADC_STATE_INJ_BUSY);
;;;195        
;;;196        /* Check if a regular conversion is ongoing */
;;;197        /* Note: On this device, there is no ADC error code fields related to     */
;;;198        /*       conversions on group injected only. In case of conversion on     */
;;;199        /*       going on group regular, no error code is reset.                  */
;;;200        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
;;;201        {
;;;202          /* Reset ADC all error code fields */
;;;203          ADC_CLEAR_ERRORCODE(hadc);
;;;204        }
;;;205        
;;;206        /* Process unlocked */
;;;207        /* Unlock before starting ADC conversions: in case of potential           */
;;;208        /* interruption, to let the process to ADC IRQ Handler.                   */
;;;209        __HAL_UNLOCK(hadc);
;;;210        
;;;211        /* Clear injected group conversion flag */
;;;212        /* (To ensure of no unknown state from potential previous ADC operations) */
;;;213        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
;;;214    
;;;215        /* Pointer to the common control register to which is belonging hadc    */
;;;216        /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;217        /* control register)                                                    */
;;;218        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;219    
;;;220        /* Check if Multimode enabled */
;;;221        if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
;;;222        {
;;;223          tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;224          tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;225          if(tmp1 && tmp2)
;;;226          {
;;;227            /* Enable the selected ADC software conversion for injected group */
;;;228            hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;229          }
;;;230        }
;;;231        else
;;;232        {
;;;233          tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;234          tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;235          if((hadc->Instance == ADC1) && tmp1 && tmp2)  
;;;236          {
;;;237            /* Enable the selected ADC software conversion for injected group */
;;;238            hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;239          }
;;;240        }
;;;241      }
;;;242      
;;;243      /* Return function status */
;;;244      return HAL_OK;
;;;245    }
000018  bd38              POP      {r3-r5,pc}
                  |L8.26|
00001a  2001              MOVS     r0,#1                 ;166
00001c  f881003c          STRB     r0,[r1,#0x3c]         ;166
000020  bf00              NOP                            ;166
000022  6808              LDR      r0,[r1,#0]            ;172
000024  6880              LDR      r0,[r0,#8]            ;172
000026  f0000001          AND      r0,r0,#1              ;172
00002a  b9a0              CBNZ     r0,|L8.86|
00002c  6808              LDR      r0,[r1,#0]            ;175
00002e  6880              LDR      r0,[r0,#8]            ;175
000030  f0400001          ORR      r0,r0,#1              ;175
000034  680d              LDR      r5,[r1,#0]            ;175
000036  60a8              STR      r0,[r5,#8]            ;175
000038  4830              LDR      r0,|L8.252|
00003a  6800              LDR      r0,[r0,#0]            ;179  ; SystemCoreClock
00003c  4d30              LDR      r5,|L8.256|
00003e  fbb0f0f5          UDIV     r0,r0,r5              ;179
000042  eb000040          ADD      r0,r0,r0,LSL #1       ;179
000046  9000              STR      r0,[sp,#0]            ;179
000048  e002              B        |L8.80|
                  |L8.74|
00004a  9800              LDR      r0,[sp,#0]            ;182
00004c  1e40              SUBS     r0,r0,#1              ;182
00004e  9000              STR      r0,[sp,#0]            ;182
                  |L8.80|
000050  9800              LDR      r0,[sp,#0]            ;180
000052  2800              CMP      r0,#0                 ;180
000054  d1f9              BNE      |L8.74|
                  |L8.86|
000056  6808              LDR      r0,[r1,#0]            ;187
000058  6880              LDR      r0,[r0,#8]            ;187
00005a  f0000001          AND      r0,r0,#1              ;187
00005e  2800              CMP      r0,#0                 ;187
000060  d04a              BEQ      |L8.248|
000062  6c08              LDR      r0,[r1,#0x40]         ;192
000064  f2420501          MOV      r5,#0x2001            ;192
000068  43a8              BICS     r0,r0,r5              ;192
00006a  f4405080          ORR      r0,r0,#0x1000         ;192
00006e  6408              STR      r0,[r1,#0x40]         ;192
000070  6c08              LDR      r0,[r1,#0x40]         ;200
000072  f4007080          AND      r0,r0,#0x100          ;200
000076  b908              CBNZ     r0,|L8.124|
000078  2000              MOVS     r0,#0                 ;203
00007a  6448              STR      r0,[r1,#0x44]         ;203
                  |L8.124|
00007c  bf00              NOP                            ;209
00007e  2000              MOVS     r0,#0                 ;209
000080  f881003c          STRB     r0,[r1,#0x3c]         ;209
000084  bf00              NOP                            ;209
000086  1f40              SUBS     r0,r0,#5              ;213
000088  680d              LDR      r5,[r1,#0]            ;213
00008a  6028              STR      r0,[r5,#0]            ;213
00008c  4c1d              LDR      r4,|L8.260|
00008e  6860              LDR      r0,[r4,#4]            ;221
000090  f000001f          AND      r0,r0,#0x1f           ;221
000094  b9b0              CBNZ     r0,|L8.196|
000096  6808              LDR      r0,[r1,#0]            ;223
000098  6880              LDR      r0,[r0,#8]            ;223
00009a  f4001040          AND      r0,r0,#0x300000       ;223
00009e  b908              CBNZ     r0,|L8.164|
0000a0  2001              MOVS     r0,#1                 ;223
0000a2  e000              B        |L8.166|
                  |L8.164|
0000a4  2000              MOVS     r0,#0                 ;223
                  |L8.166|
0000a6  4602              MOV      r2,r0                 ;223
0000a8  6808              LDR      r0,[r1,#0]            ;224
0000aa  6840              LDR      r0,[r0,#4]            ;224
0000ac  2501              MOVS     r5,#1                 ;224
0000ae  ea252390          BIC      r3,r5,r0,LSR #10      ;224
0000b2  b30a              CBZ      r2,|L8.248|
0000b4  b303              CBZ      r3,|L8.248|
0000b6  6808              LDR      r0,[r1,#0]            ;228
0000b8  6880              LDR      r0,[r0,#8]            ;228
0000ba  f4400080          ORR      r0,r0,#0x400000       ;228
0000be  680d              LDR      r5,[r1,#0]            ;228
0000c0  60a8              STR      r0,[r5,#8]            ;228
0000c2  e019              B        |L8.248|
                  |L8.196|
0000c4  6808              LDR      r0,[r1,#0]            ;233
0000c6  6880              LDR      r0,[r0,#8]            ;233
0000c8  f4001040          AND      r0,r0,#0x300000       ;233
0000cc  b908              CBNZ     r0,|L8.210|
0000ce  2001              MOVS     r0,#1                 ;233
0000d0  e000              B        |L8.212|
                  |L8.210|
0000d2  2000              MOVS     r0,#0                 ;233
                  |L8.212|
0000d4  4602              MOV      r2,r0                 ;233
0000d6  6808              LDR      r0,[r1,#0]            ;234
0000d8  6840              LDR      r0,[r0,#4]            ;234
0000da  2501              MOVS     r5,#1                 ;234
0000dc  ea252390          BIC      r3,r5,r0,LSR #10      ;234
0000e0  4d09              LDR      r5,|L8.264|
0000e2  6808              LDR      r0,[r1,#0]            ;235
0000e4  42a8              CMP      r0,r5                 ;235
0000e6  d107              BNE      |L8.248|
0000e8  b132              CBZ      r2,|L8.248|
0000ea  b12b              CBZ      r3,|L8.248|
0000ec  6808              LDR      r0,[r1,#0]            ;238
0000ee  6880              LDR      r0,[r0,#8]            ;238
0000f0  f4400080          ORR      r0,r0,#0x400000       ;238
0000f4  680d              LDR      r5,[r1,#0]            ;238
0000f6  60a8              STR      r0,[r5,#8]            ;238
                  |L8.248|
0000f8  2000              MOVS     r0,#0                 ;244
0000fa  e78d              B        |L8.24|
;;;246    
                          ENDP

                  |L8.252|
                          DCD      SystemCoreClock
                  |L8.256|
                          DCD      0x000f4240
                  |L8.260|
                          DCD      0x40012300
                  |L8.264|
                          DCD      0x40012000

                          AREA ||i.HAL_ADCEx_InjectedStart_IT||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_InjectedStart_IT PROC
;;;253      */
;;;254    HAL_StatusTypeDef HAL_ADCEx_InjectedStart_IT(ADC_HandleTypeDef* hadc)
000000  b538              PUSH     {r3-r5,lr}
;;;255    {
000002  4601              MOV      r1,r0
;;;256      __IO uint32_t counter = 0U;
000004  2000              MOVS     r0,#0
000006  9000              STR      r0,[sp,#0]
;;;257      uint32_t tmp1 = 0U, tmp2 = 0U;
000008  2200              MOVS     r2,#0
00000a  2300              MOVS     r3,#0
;;;258      ADC_Common_TypeDef *tmpADC_Common;
;;;259      
;;;260      /* Process locked */
;;;261      __HAL_LOCK(hadc);
00000c  bf00              NOP      
00000e  f891003c          LDRB     r0,[r1,#0x3c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L9.26|
000016  2002              MOVS     r0,#2
                  |L9.24|
;;;262      
;;;263      /* Enable the ADC peripheral */
;;;264      
;;;265      /* Check if ADC peripheral is disabled in order to enable it and wait during 
;;;266         Tstab time the ADC's stabilization */
;;;267      if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
;;;268      {  
;;;269        /* Enable the Peripheral */
;;;270        __HAL_ADC_ENABLE(hadc);
;;;271        
;;;272        /* Delay for ADC stabilization time */
;;;273        /* Compute number of CPU cycles to wait for */
;;;274        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
;;;275        while(counter != 0U)
;;;276        {
;;;277          counter--;
;;;278        }
;;;279      }
;;;280      
;;;281      /* Start conversion if ADC is effectively enabled */
;;;282      if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
;;;283      {
;;;284        /* Set ADC state                                                          */
;;;285        /* - Clear state bitfield related to injected group conversion results    */
;;;286        /* - Set state bitfield related to injected operation                     */
;;;287        ADC_STATE_CLR_SET(hadc->State,
;;;288                          HAL_ADC_STATE_READY | HAL_ADC_STATE_INJ_EOC,
;;;289                          HAL_ADC_STATE_INJ_BUSY);
;;;290        
;;;291        /* Check if a regular conversion is ongoing */
;;;292        /* Note: On this device, there is no ADC error code fields related to     */
;;;293        /*       conversions on group injected only. In case of conversion on     */
;;;294        /*       going on group regular, no error code is reset.                  */
;;;295        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
;;;296        {
;;;297          /* Reset ADC all error code fields */
;;;298          ADC_CLEAR_ERRORCODE(hadc);
;;;299        }
;;;300        
;;;301        /* Process unlocked */
;;;302        /* Unlock before starting ADC conversions: in case of potential           */
;;;303        /* interruption, to let the process to ADC IRQ Handler.                   */
;;;304        __HAL_UNLOCK(hadc);
;;;305        
;;;306        /* Clear injected group conversion flag */
;;;307        /* (To ensure of no unknown state from potential previous ADC operations) */
;;;308        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC);
;;;309        
;;;310        /* Enable end of conversion interrupt for injected channels */
;;;311        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
;;;312    
;;;313        /* Pointer to the common control register to which is belonging hadc    */
;;;314        /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;315        /* control register)                                                    */
;;;316        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;317        
;;;318        /* Check if Multimode enabled */
;;;319        if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
;;;320        {
;;;321          tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;322          tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;323          if(tmp1 && tmp2)
;;;324          {
;;;325            /* Enable the selected ADC software conversion for injected group */
;;;326            hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;327          }
;;;328        }
;;;329        else
;;;330        {
;;;331          tmp1 = HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_JEXTEN);
;;;332          tmp2 = HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO);
;;;333          if((hadc->Instance == ADC1) && tmp1 && tmp2)  
;;;334          {
;;;335            /* Enable the selected ADC software conversion for injected group */
;;;336            hadc->Instance->CR2 |= ADC_CR2_JSWSTART;
;;;337          }
;;;338        }
;;;339      }
;;;340      
;;;341      /* Return function status */
;;;342      return HAL_OK;
;;;343    }
000018  bd38              POP      {r3-r5,pc}
                  |L9.26|
00001a  2001              MOVS     r0,#1                 ;261
00001c  f881003c          STRB     r0,[r1,#0x3c]         ;261
000020  bf00              NOP                            ;261
000022  6808              LDR      r0,[r1,#0]            ;267
000024  6880              LDR      r0,[r0,#8]            ;267
000026  f0000001          AND      r0,r0,#1              ;267
00002a  b9a0              CBNZ     r0,|L9.86|
00002c  6808              LDR      r0,[r1,#0]            ;270
00002e  6880              LDR      r0,[r0,#8]            ;270
000030  f0400001          ORR      r0,r0,#1              ;270
000034  680d              LDR      r5,[r1,#0]            ;270
000036  60a8              STR      r0,[r5,#8]            ;270
000038  4833              LDR      r0,|L9.264|
00003a  6800              LDR      r0,[r0,#0]            ;274  ; SystemCoreClock
00003c  4d33              LDR      r5,|L9.268|
00003e  fbb0f0f5          UDIV     r0,r0,r5              ;274
000042  eb000040          ADD      r0,r0,r0,LSL #1       ;274
000046  9000              STR      r0,[sp,#0]            ;274
000048  e002              B        |L9.80|
                  |L9.74|
00004a  9800              LDR      r0,[sp,#0]            ;277
00004c  1e40              SUBS     r0,r0,#1              ;277
00004e  9000              STR      r0,[sp,#0]            ;277
                  |L9.80|
000050  9800              LDR      r0,[sp,#0]            ;275
000052  2800              CMP      r0,#0                 ;275
000054  d1f9              BNE      |L9.74|
                  |L9.86|
000056  6808              LDR      r0,[r1,#0]            ;282
000058  6880              LDR      r0,[r0,#8]            ;282
00005a  f0000001          AND      r0,r0,#1              ;282
00005e  2800              CMP      r0,#0                 ;282
000060  d050              BEQ      |L9.260|
000062  6c08              LDR      r0,[r1,#0x40]         ;287
000064  f2420501          MOV      r5,#0x2001            ;287
000068  43a8              BICS     r0,r0,r5              ;287
00006a  f4405080          ORR      r0,r0,#0x1000         ;287
00006e  6408              STR      r0,[r1,#0x40]         ;287
000070  6c08              LDR      r0,[r1,#0x40]         ;295
000072  f4007080          AND      r0,r0,#0x100          ;295
000076  b908              CBNZ     r0,|L9.124|
000078  2000              MOVS     r0,#0                 ;298
00007a  6448              STR      r0,[r1,#0x44]         ;298
                  |L9.124|
00007c  bf00              NOP                            ;304
00007e  2000              MOVS     r0,#0                 ;304
000080  f881003c          STRB     r0,[r1,#0x3c]         ;304
000084  bf00              NOP                            ;304
000086  1f40              SUBS     r0,r0,#5              ;308
000088  680d              LDR      r5,[r1,#0]            ;308
00008a  6028              STR      r0,[r5,#0]            ;308
00008c  6808              LDR      r0,[r1,#0]            ;311
00008e  6840              LDR      r0,[r0,#4]            ;311
000090  f0400080          ORR      r0,r0,#0x80           ;311
000094  680d              LDR      r5,[r1,#0]            ;311
000096  6068              STR      r0,[r5,#4]            ;311
000098  4c1d              LDR      r4,|L9.272|
00009a  6860              LDR      r0,[r4,#4]            ;319
00009c  f000001f          AND      r0,r0,#0x1f           ;319
0000a0  b9b0              CBNZ     r0,|L9.208|
0000a2  6808              LDR      r0,[r1,#0]            ;321
0000a4  6880              LDR      r0,[r0,#8]            ;321
0000a6  f4001040          AND      r0,r0,#0x300000       ;321
0000aa  b908              CBNZ     r0,|L9.176|
0000ac  2001              MOVS     r0,#1                 ;321
0000ae  e000              B        |L9.178|
                  |L9.176|
0000b0  2000              MOVS     r0,#0                 ;321
                  |L9.178|
0000b2  4602              MOV      r2,r0                 ;321
0000b4  6808              LDR      r0,[r1,#0]            ;322
0000b6  6840              LDR      r0,[r0,#4]            ;322
0000b8  2501              MOVS     r5,#1                 ;322
0000ba  ea252390          BIC      r3,r5,r0,LSR #10      ;322
0000be  b30a              CBZ      r2,|L9.260|
0000c0  b303              CBZ      r3,|L9.260|
0000c2  6808              LDR      r0,[r1,#0]            ;326
0000c4  6880              LDR      r0,[r0,#8]            ;326
0000c6  f4400080          ORR      r0,r0,#0x400000       ;326
0000ca  680d              LDR      r5,[r1,#0]            ;326
0000cc  60a8              STR      r0,[r5,#8]            ;326
0000ce  e019              B        |L9.260|
                  |L9.208|
0000d0  6808              LDR      r0,[r1,#0]            ;331
0000d2  6880              LDR      r0,[r0,#8]            ;331
0000d4  f4001040          AND      r0,r0,#0x300000       ;331
0000d8  b908              CBNZ     r0,|L9.222|
0000da  2001              MOVS     r0,#1                 ;331
0000dc  e000              B        |L9.224|
                  |L9.222|
0000de  2000              MOVS     r0,#0                 ;331
                  |L9.224|
0000e0  4602              MOV      r2,r0                 ;331
0000e2  6808              LDR      r0,[r1,#0]            ;332
0000e4  6840              LDR      r0,[r0,#4]            ;332
0000e6  2501              MOVS     r5,#1                 ;332
0000e8  ea252390          BIC      r3,r5,r0,LSR #10      ;332
0000ec  4d09              LDR      r5,|L9.276|
0000ee  6808              LDR      r0,[r1,#0]            ;333
0000f0  42a8              CMP      r0,r5                 ;333
0000f2  d107              BNE      |L9.260|
0000f4  b132              CBZ      r2,|L9.260|
0000f6  b12b              CBZ      r3,|L9.260|
0000f8  6808              LDR      r0,[r1,#0]            ;336
0000fa  6880              LDR      r0,[r0,#8]            ;336
0000fc  f4400080          ORR      r0,r0,#0x400000       ;336
000100  680d              LDR      r5,[r1,#0]            ;336
000102  60a8              STR      r0,[r5,#8]            ;336
                  |L9.260|
000104  2000              MOVS     r0,#0                 ;342
000106  e787              B        |L9.24|
;;;344    
                          ENDP

                  |L9.264|
                          DCD      SystemCoreClock
                  |L9.268|
                          DCD      0x000f4240
                  |L9.272|
                          DCD      0x40012300
                  |L9.276|
                          DCD      0x40012000

                          AREA ||i.HAL_ADCEx_InjectedStop||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedStop PROC
;;;356      */
;;;357    HAL_StatusTypeDef HAL_ADCEx_InjectedStop(ADC_HandleTypeDef* hadc)
000000  4601              MOV      r1,r0
;;;358    {
;;;359      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
000002  2200              MOVS     r2,#0
;;;360      
;;;361      /* Check the parameters */
;;;362      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;363    
;;;364      /* Process locked */
;;;365      __HAL_LOCK(hadc);
000004  bf00              NOP      
000006  f891003c          LDRB     r0,[r1,#0x3c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L10.18|
00000e  2002              MOVS     r0,#2
                  |L10.16|
;;;366        
;;;367      /* Stop potential conversion and disable ADC peripheral                     */
;;;368      /* Conditioned to:                                                          */
;;;369      /* - No conversion on the other group (regular group) is intended to        */
;;;370      /*   continue (injected and regular groups stop conversion and ADC disable  */
;;;371      /*   are common)                                                            */
;;;372      /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */
;;;373      if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
;;;374         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
;;;375      {
;;;376        /* Stop potential conversion on going, on regular and injected groups */
;;;377        /* Disable ADC peripheral */
;;;378        __HAL_ADC_DISABLE(hadc);
;;;379        
;;;380        /* Check if ADC is effectively disabled */
;;;381        if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
;;;382        {
;;;383          /* Set ADC state */
;;;384          ADC_STATE_CLR_SET(hadc->State,
;;;385                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
;;;386                            HAL_ADC_STATE_READY);
;;;387        }
;;;388      }
;;;389      else
;;;390      {
;;;391        /* Update ADC state machine to error */
;;;392        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
;;;393          
;;;394        tmp_hal_status = HAL_ERROR;
;;;395      }
;;;396      
;;;397      /* Process unlocked */
;;;398      __HAL_UNLOCK(hadc);
;;;399      
;;;400      /* Return function status */
;;;401      return tmp_hal_status;
;;;402    }
000010  4770              BX       lr
                  |L10.18|
000012  2001              MOVS     r0,#1                 ;365
000014  f881003c          STRB     r0,[r1,#0x3c]         ;365
000018  bf00              NOP                            ;365
00001a  6c08              LDR      r0,[r1,#0x40]         ;373
00001c  f4007080          AND      r0,r0,#0x100          ;373
000020  b9b0              CBNZ     r0,|L10.80|
000022  6808              LDR      r0,[r1,#0]            ;374
000024  6840              LDR      r0,[r0,#4]            ;374
000026  f4006080          AND      r0,r0,#0x400          ;374
00002a  b988              CBNZ     r0,|L10.80|
00002c  6808              LDR      r0,[r1,#0]            ;378
00002e  6880              LDR      r0,[r0,#8]            ;378
000030  f0200001          BIC      r0,r0,#1              ;378
000034  680b              LDR      r3,[r1,#0]            ;378
000036  6098              STR      r0,[r3,#8]            ;378
000038  6808              LDR      r0,[r1,#0]            ;381
00003a  6880              LDR      r0,[r0,#8]            ;381
00003c  f0000001          AND      r0,r0,#1              ;381
000040  b958              CBNZ     r0,|L10.90|
000042  6c08              LDR      r0,[r1,#0x40]         ;384
000044  f4205088          BIC      r0,r0,#0x1100         ;384
000048  f0400001          ORR      r0,r0,#1              ;384
00004c  6408              STR      r0,[r1,#0x40]         ;384
00004e  e004              B        |L10.90|
                  |L10.80|
000050  6c08              LDR      r0,[r1,#0x40]         ;392
000052  f0400020          ORR      r0,r0,#0x20           ;392
000056  6408              STR      r0,[r1,#0x40]         ;392
000058  2201              MOVS     r2,#1                 ;394
                  |L10.90|
00005a  bf00              NOP                            ;398
00005c  2000              MOVS     r0,#0                 ;398
00005e  f881003c          STRB     r0,[r1,#0x3c]         ;398
000062  bf00              NOP                            ;398
000064  4610              MOV      r0,r2                 ;401
000066  e7d3              B        |L10.16|
;;;403    
                          ENDP


                          AREA ||i.HAL_ADCEx_InjectedStop_IT||, CODE, READONLY, ALIGN=1

                  HAL_ADCEx_InjectedStop_IT PROC
;;;477      */
;;;478    HAL_StatusTypeDef HAL_ADCEx_InjectedStop_IT(ADC_HandleTypeDef* hadc)
000000  4601              MOV      r1,r0
;;;479    {
;;;480      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
000002  2200              MOVS     r2,#0
;;;481      
;;;482      /* Check the parameters */
;;;483      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;484    
;;;485      /* Process locked */
;;;486      __HAL_LOCK(hadc);
000004  bf00              NOP      
000006  f891003c          LDRB     r0,[r1,#0x3c]
00000a  2801              CMP      r0,#1
00000c  d101              BNE      |L11.18|
00000e  2002              MOVS     r0,#2
                  |L11.16|
;;;487        
;;;488      /* Stop potential conversion and disable ADC peripheral                     */
;;;489      /* Conditioned to:                                                          */
;;;490      /* - No conversion on the other group (regular group) is intended to        */
;;;491      /*   continue (injected and regular groups stop conversion and ADC disable  */
;;;492      /*   are common)                                                            */
;;;493      /* - In case of auto-injection mode, HAL_ADC_Stop must be used.             */ 
;;;494      if(((hadc->State & HAL_ADC_STATE_REG_BUSY) == RESET)  &&
;;;495         HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO)   )
;;;496      {
;;;497        /* Stop potential conversion on going, on regular and injected groups */
;;;498        /* Disable ADC peripheral */
;;;499        __HAL_ADC_DISABLE(hadc);
;;;500        
;;;501        /* Check if ADC is effectively disabled */
;;;502        if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
;;;503        {
;;;504          /* Disable ADC end of conversion interrupt for injected channels */
;;;505          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
;;;506          
;;;507          /* Set ADC state */
;;;508          ADC_STATE_CLR_SET(hadc->State,
;;;509                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
;;;510                            HAL_ADC_STATE_READY);
;;;511        }
;;;512      }
;;;513      else
;;;514      {
;;;515        /* Update ADC state machine to error */
;;;516        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
;;;517          
;;;518        tmp_hal_status = HAL_ERROR;
;;;519      }
;;;520      
;;;521      /* Process unlocked */
;;;522      __HAL_UNLOCK(hadc);
;;;523      
;;;524      /* Return function status */
;;;525      return tmp_hal_status;
;;;526    }
000010  4770              BX       lr
                  |L11.18|
000012  2001              MOVS     r0,#1                 ;486
000014  f881003c          STRB     r0,[r1,#0x3c]         ;486
000018  bf00              NOP                            ;486
00001a  6c08              LDR      r0,[r1,#0x40]         ;494
00001c  f4007080          AND      r0,r0,#0x100          ;494
000020  b9e0              CBNZ     r0,|L11.92|
000022  6808              LDR      r0,[r1,#0]            ;495
000024  6840              LDR      r0,[r0,#4]            ;495
000026  f4006080          AND      r0,r0,#0x400          ;495
00002a  b9b8              CBNZ     r0,|L11.92|
00002c  6808              LDR      r0,[r1,#0]            ;499
00002e  6880              LDR      r0,[r0,#8]            ;499
000030  f0200001          BIC      r0,r0,#1              ;499
000034  680b              LDR      r3,[r1,#0]            ;499
000036  6098              STR      r0,[r3,#8]            ;499
000038  6808              LDR      r0,[r1,#0]            ;502
00003a  6880              LDR      r0,[r0,#8]            ;502
00003c  f0000001          AND      r0,r0,#1              ;502
000040  b988              CBNZ     r0,|L11.102|
000042  6808              LDR      r0,[r1,#0]            ;505
000044  6840              LDR      r0,[r0,#4]            ;505
000046  f0200080          BIC      r0,r0,#0x80           ;505
00004a  680b              LDR      r3,[r1,#0]            ;505
00004c  6058              STR      r0,[r3,#4]            ;505
00004e  6c08              LDR      r0,[r1,#0x40]         ;508
000050  f4205088          BIC      r0,r0,#0x1100         ;508
000054  f0400001          ORR      r0,r0,#1              ;508
000058  6408              STR      r0,[r1,#0x40]         ;508
00005a  e004              B        |L11.102|
                  |L11.92|
00005c  6c08              LDR      r0,[r1,#0x40]         ;516
00005e  f0400020          ORR      r0,r0,#0x20           ;516
000062  6408              STR      r0,[r1,#0x40]         ;516
000064  2201              MOVS     r2,#1                 ;518
                  |L11.102|
000066  bf00              NOP                            ;522
000068  2000              MOVS     r0,#0                 ;522
00006a  f881003c          STRB     r0,[r1,#0x3c]         ;522
00006e  bf00              NOP                            ;522
000070  4610              MOV      r0,r2                 ;525
000072  e7cd              B        |L11.16|
;;;527    
                          ENDP


                          AREA ||i.HAL_ADCEx_MultiModeConfigChannel||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeConfigChannel PROC
;;;962      */
;;;963    HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
000000  b510              PUSH     {r4,lr}
;;;964    {
000002  4602              MOV      r2,r0
000004  460b              MOV      r3,r1
;;;965    
;;;966      ADC_Common_TypeDef *tmpADC_Common;
;;;967    
;;;968      /* Check the parameters */
;;;969      assert_param(IS_ADC_MODE(multimode->Mode));
;;;970      assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
;;;971      assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
;;;972      
;;;973      /* Process locked */
;;;974      __HAL_LOCK(hadc);
000006  bf00              NOP      
000008  f892003c          LDRB     r0,[r2,#0x3c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L12.20|
000010  2002              MOVS     r0,#2
                  |L12.18|
;;;975    
;;;976      /* Pointer to the common control register to which is belonging hadc    */
;;;977      /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;978      /* control register)                                                    */
;;;979      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;980    
;;;981      /* Set ADC mode */
;;;982      tmpADC_Common->CCR &= ~(ADC_CCR_MULTI);
;;;983      tmpADC_Common->CCR |= multimode->Mode;
;;;984      
;;;985      /* Set the ADC DMA access mode */
;;;986      tmpADC_Common->CCR &= ~(ADC_CCR_DMA);
;;;987      tmpADC_Common->CCR |= multimode->DMAAccessMode;
;;;988      
;;;989      /* Set delay between two sampling phases */
;;;990      tmpADC_Common->CCR &= ~(ADC_CCR_DELAY);
;;;991      tmpADC_Common->CCR |= multimode->TwoSamplingDelay;
;;;992      
;;;993      /* Process unlocked */
;;;994      __HAL_UNLOCK(hadc);
;;;995      
;;;996      /* Return function status */
;;;997      return HAL_OK;
;;;998    }
000012  bd10              POP      {r4,pc}
                  |L12.20|
000014  2001              MOVS     r0,#1                 ;974
000016  f882003c          STRB     r0,[r2,#0x3c]         ;974
00001a  bf00              NOP                            ;974
00001c  490f              LDR      r1,|L12.92|
00001e  6848              LDR      r0,[r1,#4]            ;982
000020  f020001f          BIC      r0,r0,#0x1f           ;982
000024  6048              STR      r0,[r1,#4]            ;982
000026  6848              LDR      r0,[r1,#4]            ;983
000028  681c              LDR      r4,[r3,#0]            ;983
00002a  4320              ORRS     r0,r0,r4              ;983
00002c  6048              STR      r0,[r1,#4]            ;983
00002e  6848              LDR      r0,[r1,#4]            ;986
000030  f4204040          BIC      r0,r0,#0xc000         ;986
000034  6048              STR      r0,[r1,#4]            ;986
000036  6848              LDR      r0,[r1,#4]            ;987
000038  685c              LDR      r4,[r3,#4]            ;987
00003a  4320              ORRS     r0,r0,r4              ;987
00003c  6048              STR      r0,[r1,#4]            ;987
00003e  6848              LDR      r0,[r1,#4]            ;990
000040  f4206070          BIC      r0,r0,#0xf00          ;990
000044  6048              STR      r0,[r1,#4]            ;990
000046  6848              LDR      r0,[r1,#4]            ;991
000048  689c              LDR      r4,[r3,#8]            ;991
00004a  4320              ORRS     r0,r0,r4              ;991
00004c  6048              STR      r0,[r1,#4]            ;991
00004e  bf00              NOP                            ;994
000050  2000              MOVS     r0,#0                 ;994
000052  f882003c          STRB     r0,[r2,#0x3c]         ;994
000056  bf00              NOP                            ;994
000058  bf00              NOP                            ;997
00005a  e7da              B        |L12.18|
;;;999    
                          ENDP

                  |L12.92|
                          DCD      0x40012300

                          AREA ||i.HAL_ADCEx_MultiModeGetValue||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeGetValue PROC
;;;762      */
;;;763    uint32_t HAL_ADCEx_MultiModeGetValue(ADC_HandleTypeDef* hadc)
000000  4602              MOV      r2,r0
;;;764    {
;;;765      ADC_Common_TypeDef *tmpADC_Common;
;;;766    
;;;767      /* Pointer to the common control register to which is belonging hadc    */
;;;768      /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;769      /* control register)                                                    */
;;;770      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
000002  4901              LDR      r1,|L13.8|
;;;771    
;;;772      /* Return the multi mode conversion value */
;;;773      return tmpADC_Common->CDR;
000004  6888              LDR      r0,[r1,#8]
;;;774    }
000006  4770              BX       lr
;;;775    
                          ENDP

                  |L13.8|
                          DCD      0x40012300

                          AREA ||i.HAL_ADCEx_MultiModeStart_DMA||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeStart_DMA PROC
;;;590      */
;;;591    HAL_StatusTypeDef HAL_ADCEx_MultiModeStart_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
000000  b5f8              PUSH     {r3-r7,lr}
;;;592    {
000002  4604              MOV      r4,r0
000004  460e              MOV      r6,r1
000006  4617              MOV      r7,r2
;;;593      __IO uint32_t counter = 0U;
000008  2000              MOVS     r0,#0
00000a  9000              STR      r0,[sp,#0]
;;;594      ADC_Common_TypeDef *tmpADC_Common;
;;;595      
;;;596      /* Check the parameters */
;;;597      assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
;;;598      assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
;;;599      assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
;;;600      
;;;601      /* Process locked */
;;;602      __HAL_LOCK(hadc);
00000c  bf00              NOP      
00000e  f894003c          LDRB     r0,[r4,#0x3c]
000012  2801              CMP      r0,#1
000014  d101              BNE      |L14.26|
000016  2002              MOVS     r0,#2
                  |L14.24|
;;;603      
;;;604      /* Check if ADC peripheral is disabled in order to enable it and wait during 
;;;605         Tstab time the ADC's stabilization */
;;;606      if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
;;;607      {  
;;;608        /* Enable the Peripheral */
;;;609        __HAL_ADC_ENABLE(hadc);
;;;610        
;;;611        /* Delay for temperature sensor stabilization time */
;;;612        /* Compute number of CPU cycles to wait for */
;;;613        counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
;;;614        while(counter != 0U)
;;;615        {
;;;616          counter--;
;;;617        }
;;;618      }
;;;619      
;;;620      /* Start conversion if ADC is effectively enabled */
;;;621      if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
;;;622      {
;;;623        /* Set ADC state                                                          */
;;;624        /* - Clear state bitfield related to regular group conversion results     */
;;;625        /* - Set state bitfield related to regular group operation                */
;;;626        ADC_STATE_CLR_SET(hadc->State,
;;;627                          HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
;;;628                          HAL_ADC_STATE_REG_BUSY);
;;;629        
;;;630        /* If conversions on group regular are also triggering group injected,    */
;;;631        /* update ADC state.                                                      */
;;;632        if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
;;;633        {
;;;634          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
;;;635        }
;;;636        
;;;637        /* State machine update: Check if an injected conversion is ongoing */
;;;638        if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
;;;639        {
;;;640          /* Reset ADC error code fields related to conversions on group regular */
;;;641          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
;;;642        }
;;;643        else
;;;644        {
;;;645          /* Reset ADC all error code fields */
;;;646          ADC_CLEAR_ERRORCODE(hadc);
;;;647        }
;;;648        
;;;649        /* Process unlocked */
;;;650        /* Unlock before starting ADC conversions: in case of potential           */
;;;651        /* interruption, to let the process to ADC IRQ Handler.                   */
;;;652        __HAL_UNLOCK(hadc);
;;;653        
;;;654        /* Set the DMA transfer complete callback */
;;;655        hadc->DMA_Handle->XferCpltCallback = ADC_MultiModeDMAConvCplt;
;;;656        
;;;657        /* Set the DMA half transfer complete callback */
;;;658        hadc->DMA_Handle->XferHalfCpltCallback = ADC_MultiModeDMAHalfConvCplt;
;;;659        
;;;660        /* Set the DMA error callback */
;;;661        hadc->DMA_Handle->XferErrorCallback = ADC_MultiModeDMAError ;
;;;662        
;;;663        /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
;;;664        /* start (in case of SW start):                                           */
;;;665        
;;;666        /* Clear regular group conversion flag and overrun flag */
;;;667        /* (To ensure of no unknown state from potential previous ADC operations) */
;;;668        __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
;;;669    
;;;670        /* Enable ADC overrun interrupt */
;;;671        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
;;;672    
;;;673        /* Pointer to the common control register to which is belonging hadc    */
;;;674        /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;675        /* control register)                                                    */
;;;676        tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;677    
;;;678        if (hadc->Init.DMAContinuousRequests != DISABLE)
;;;679        {
;;;680          /* Enable the selected ADC DMA request after last transfer */
;;;681          tmpADC_Common->CCR |= ADC_CCR_DDS;
;;;682        }
;;;683        else
;;;684        {
;;;685          /* Disable the selected ADC EOC rising on each regular channel conversion */
;;;686          tmpADC_Common->CCR &= ~ADC_CCR_DDS;
;;;687        }
;;;688        
;;;689        /* Enable the DMA Stream */
;;;690        HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&tmpADC_Common->CDR, (uint32_t)pData, Length);
;;;691        
;;;692        /* if no external trigger present enable software conversion of regular channels */
;;;693        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
;;;694        {
;;;695          /* Enable the selected ADC software conversion for regular group */
;;;696          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
;;;697        }
;;;698      }
;;;699      
;;;700      /* Return function status */
;;;701      return HAL_OK;
;;;702    }
000018  bdf8              POP      {r3-r7,pc}
                  |L14.26|
00001a  2001              MOVS     r0,#1                 ;602
00001c  f884003c          STRB     r0,[r4,#0x3c]         ;602
000020  bf00              NOP                            ;602
000022  6820              LDR      r0,[r4,#0]            ;606
000024  6880              LDR      r0,[r0,#8]            ;606
000026  f0000001          AND      r0,r0,#1              ;606
00002a  b9a0              CBNZ     r0,|L14.86|
00002c  6820              LDR      r0,[r4,#0]            ;609
00002e  6880              LDR      r0,[r0,#8]            ;609
000030  f0400001          ORR      r0,r0,#1              ;609
000034  6821              LDR      r1,[r4,#0]            ;609
000036  6088              STR      r0,[r1,#8]            ;609
000038  4836              LDR      r0,|L14.276|
00003a  6800              LDR      r0,[r0,#0]            ;613  ; SystemCoreClock
00003c  4936              LDR      r1,|L14.280|
00003e  fbb0f0f1          UDIV     r0,r0,r1              ;613
000042  eb000040          ADD      r0,r0,r0,LSL #1       ;613
000046  9000              STR      r0,[sp,#0]            ;613
000048  e002              B        |L14.80|
                  |L14.74|
00004a  9800              LDR      r0,[sp,#0]            ;616
00004c  1e40              SUBS     r0,r0,#1              ;616
00004e  9000              STR      r0,[sp,#0]            ;616
                  |L14.80|
000050  9800              LDR      r0,[sp,#0]            ;614
000052  2800              CMP      r0,#0                 ;614
000054  d1f9              BNE      |L14.74|
                  |L14.86|
000056  6820              LDR      r0,[r4,#0]            ;621
000058  6880              LDR      r0,[r0,#8]            ;621
00005a  f0000001          AND      r0,r0,#1              ;621
00005e  2800              CMP      r0,#0                 ;621
000060  d055              BEQ      |L14.270|
000062  6c20              LDR      r0,[r4,#0x40]         ;626
000064  f2406101          MOV      r1,#0x601             ;626
000068  4388              BICS     r0,r0,r1              ;626
00006a  f4407080          ORR      r0,r0,#0x100          ;626
00006e  6420              STR      r0,[r4,#0x40]         ;626
000070  6820              LDR      r0,[r4,#0]            ;632
000072  6840              LDR      r0,[r0,#4]            ;632
000074  f4006080          AND      r0,r0,#0x400          ;632
000078  b128              CBZ      r0,|L14.134|
00007a  6c20              LDR      r0,[r4,#0x40]         ;634
00007c  f4205000          BIC      r0,r0,#0x2000         ;634
000080  f4405080          ORR      r0,r0,#0x1000         ;634
000084  6420              STR      r0,[r4,#0x40]         ;634
                  |L14.134|
000086  6c20              LDR      r0,[r4,#0x40]         ;638
000088  f4005080          AND      r0,r0,#0x1000         ;638
00008c  f5b05f80          CMP      r0,#0x1000            ;638
000090  d104              BNE      |L14.156|
000092  6c60              LDR      r0,[r4,#0x44]         ;641
000094  f0200006          BIC      r0,r0,#6              ;641
000098  6460              STR      r0,[r4,#0x44]         ;641
00009a  e001              B        |L14.160|
                  |L14.156|
00009c  2000              MOVS     r0,#0                 ;646
00009e  6460              STR      r0,[r4,#0x44]         ;646
                  |L14.160|
0000a0  bf00              NOP                            ;652
0000a2  2000              MOVS     r0,#0                 ;652
0000a4  f884003c          STRB     r0,[r4,#0x3c]         ;652
0000a8  bf00              NOP                            ;652
0000aa  481c              LDR      r0,|L14.284|
0000ac  6ba1              LDR      r1,[r4,#0x38]         ;655
0000ae  63c8              STR      r0,[r1,#0x3c]         ;655
0000b0  481b              LDR      r0,|L14.288|
0000b2  6ba1              LDR      r1,[r4,#0x38]         ;658
0000b4  6408              STR      r0,[r1,#0x40]         ;658
0000b6  481b              LDR      r0,|L14.292|
0000b8  6ba1              LDR      r1,[r4,#0x38]         ;661
0000ba  64c8              STR      r0,[r1,#0x4c]         ;661
0000bc  f06f0002          MVN      r0,#2                 ;668
0000c0  6821              LDR      r1,[r4,#0]            ;668
0000c2  6008              STR      r0,[r1,#0]            ;668
0000c4  6820              LDR      r0,[r4,#0]            ;671
0000c6  6840              LDR      r0,[r0,#4]            ;671
0000c8  f0406080          ORR      r0,r0,#0x4000000      ;671
0000cc  6821              LDR      r1,[r4,#0]            ;671
0000ce  6048              STR      r0,[r1,#4]            ;671
0000d0  4d15              LDR      r5,|L14.296|
0000d2  f8940030          LDRB     r0,[r4,#0x30]         ;678
0000d6  b120              CBZ      r0,|L14.226|
0000d8  6868              LDR      r0,[r5,#4]            ;681
0000da  f4405000          ORR      r0,r0,#0x2000         ;681
0000de  6068              STR      r0,[r5,#4]            ;681
0000e0  e003              B        |L14.234|
                  |L14.226|
0000e2  6868              LDR      r0,[r5,#4]            ;686
0000e4  f4205000          BIC      r0,r0,#0x2000         ;686
0000e8  6068              STR      r0,[r5,#4]            ;686
                  |L14.234|
0000ea  463b              MOV      r3,r7                 ;690
0000ec  4632              MOV      r2,r6                 ;690
0000ee  f1050108          ADD      r1,r5,#8              ;690
0000f2  6ba0              LDR      r0,[r4,#0x38]         ;690
0000f4  f7fffffe          BL       HAL_DMA_Start_IT
0000f8  6820              LDR      r0,[r4,#0]            ;693
0000fa  6880              LDR      r0,[r0,#8]            ;693
0000fc  f0005040          AND      r0,r0,#0x30000000     ;693
000100  b928              CBNZ     r0,|L14.270|
000102  6820              LDR      r0,[r4,#0]            ;696
000104  6880              LDR      r0,[r0,#8]            ;696
000106  f0404080          ORR      r0,r0,#0x40000000     ;696
00010a  6821              LDR      r1,[r4,#0]            ;696
00010c  6088              STR      r0,[r1,#8]            ;696
                  |L14.270|
00010e  2000              MOVS     r0,#0                 ;701
000110  e782              B        |L14.24|
;;;703    
                          ENDP

000112  0000              DCW      0x0000
                  |L14.276|
                          DCD      SystemCoreClock
                  |L14.280|
                          DCD      0x000f4240
                  |L14.284|
                          DCD      ADC_MultiModeDMAConvCplt
                  |L14.288|
                          DCD      ADC_MultiModeDMAHalfConvCplt
                  |L14.292|
                          DCD      ADC_MultiModeDMAError
                  |L14.296|
                          DCD      0x40012300

                          AREA ||i.HAL_ADCEx_MultiModeStop_DMA||, CODE, READONLY, ALIGN=2

                  HAL_ADCEx_MultiModeStop_DMA PROC
;;;709      */
;;;710    HAL_StatusTypeDef HAL_ADCEx_MultiModeStop_DMA(ADC_HandleTypeDef* hadc)
000000  b570              PUSH     {r4-r6,lr}
;;;711    {
000002  4604              MOV      r4,r0
;;;712      HAL_StatusTypeDef tmp_hal_status = HAL_OK;
000004  2600              MOVS     r6,#0
;;;713      ADC_Common_TypeDef *tmpADC_Common;
;;;714      
;;;715      /* Check the parameters */
;;;716      assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
;;;717      
;;;718      /* Process locked */
;;;719      __HAL_LOCK(hadc);
000006  bf00              NOP      
000008  f894003c          LDRB     r0,[r4,#0x3c]
00000c  2801              CMP      r0,#1
00000e  d101              BNE      |L15.20|
000010  2002              MOVS     r0,#2
                  |L15.18|
;;;720      
;;;721      /* Stop potential conversion on going, on regular and injected groups */
;;;722      /* Disable ADC peripheral */
;;;723      __HAL_ADC_DISABLE(hadc);
;;;724    
;;;725      /* Pointer to the common control register to which is belonging hadc    */
;;;726      /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
;;;727      /* control register)                                                    */
;;;728      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
;;;729    
;;;730      /* Check if ADC is effectively disabled */
;;;731      if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
;;;732      {
;;;733        /* Disable the selected ADC DMA mode for multimode */
;;;734        tmpADC_Common->CCR &= ~ADC_CCR_DDS;
;;;735        
;;;736        /* Disable the DMA channel (in case of DMA in circular mode or stop while */
;;;737        /* DMA transfer is on going)                                              */
;;;738        tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
;;;739        
;;;740        /* Disable ADC overrun interrupt */
;;;741        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
;;;742        
;;;743        /* Set ADC state */
;;;744        ADC_STATE_CLR_SET(hadc->State,
;;;745                          HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
;;;746                          HAL_ADC_STATE_READY);
;;;747      }
;;;748      
;;;749      /* Process unlocked */
;;;750      __HAL_UNLOCK(hadc);
;;;751      
;;;752      /* Return function status */
;;;753      return tmp_hal_status;
;;;754    }
000012  bd70              POP      {r4-r6,pc}
                  |L15.20|
000014  2001              MOVS     r0,#1                 ;719
000016  f884003c          STRB     r0,[r4,#0x3c]         ;719
00001a  bf00              NOP                            ;719
00001c  6820              LDR      r0,[r4,#0]            ;723
00001e  6880              LDR      r0,[r0,#8]            ;723
000020  f0200001          BIC      r0,r0,#1              ;723
000024  6821              LDR      r1,[r4,#0]            ;723
000026  6088              STR      r0,[r1,#8]            ;723
000028  4d10              LDR      r5,|L15.108|
00002a  6820              LDR      r0,[r4,#0]            ;731
00002c  6880              LDR      r0,[r0,#8]            ;731
00002e  f0000001          AND      r0,r0,#1              ;731
000032  b998              CBNZ     r0,|L15.92|
000034  6868              LDR      r0,[r5,#4]            ;734
000036  f4205000          BIC      r0,r0,#0x2000         ;734
00003a  6068              STR      r0,[r5,#4]            ;734
00003c  6ba0              LDR      r0,[r4,#0x38]         ;738
00003e  f7fffffe          BL       HAL_DMA_Abort
000042  4606              MOV      r6,r0                 ;738
000044  6820              LDR      r0,[r4,#0]            ;741
000046  6840              LDR      r0,[r0,#4]            ;741
000048  f0206080          BIC      r0,r0,#0x4000000      ;741
00004c  6821              LDR      r1,[r4,#0]            ;741
00004e  6048              STR      r0,[r1,#4]            ;741
000050  6c20              LDR      r0,[r4,#0x40]         ;744
000052  f4205088          BIC      r0,r0,#0x1100         ;744
000056  f0400001          ORR      r0,r0,#1              ;744
00005a  6420              STR      r0,[r4,#0x40]         ;744
                  |L15.92|
00005c  bf00              NOP                            ;750
00005e  2000              MOVS     r0,#0                 ;750
000060  f884003c          STRB     r0,[r4,#0x3c]         ;750
000064  bf00              NOP                            ;750
000066  4630              MOV      r0,r6                 ;753
000068  e7d3              B        |L15.18|
;;;755    
                          ENDP

00006a  0000              DCW      0x0000
                  |L15.108|
                          DCD      0x40012300

;*** Start embedded assembler ***

#line 1 "..\\..\\..\\..\\..\\..\\Drivers\\STM32F4xx_HAL_Driver\\Src\\stm32f4xx_hal_adc_ex.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REV16|
#line 388 "..\\..\\..\\..\\..\\..\\Drivers\\CMSIS\\Include\\cmsis_armcc.h"
|__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REV16| PROC
#line 389

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REVSH|
#line 402
|__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____REVSH| PROC
#line 403

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____RRX|
#line 587
|__asm___22_stm32f4xx_hal_adc_ex_c_e8cb11ff____RRX| PROC
#line 588

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
